package to.etc.test.webapp.query.qfield;

import javax.management.relation.*;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.hibernate.annotations.*;

import to.etc.domui.component.meta.*;
import to.etc.domui.converter.*;

/**
 * Table fin_bank_accounts: Generated by GenHib
 * Created on Fri Dec 21 10:25:49 CET 2012
 */
@Entity
@GenericGenerator(name = "sq", strategy = "nl.itris.viewpoint.db.hibernate.ViewpointIdentifierGenerator", parameters = {@org.hibernate.annotations.Parameter(name = "sequence", value = "fin_fbt_seq")})
@Table(name = "fin_bank_accounts")
@MetaObject(defaultColumns = { //
@MetaDisplayProperty(name = TestBankAccount.pRELATION)
//

	}, //
	searchProperties = { //
	@MetaSearchItem(name = TestBankAccount.pIBAN, order = 1, searchType = SearchPropertyType.BOTH) //
	, @MetaSearchItem(name = TestBankAccount.pBBAN, order = 2, searchType = SearchPropertyType.BOTH)
//
}) //
public class TestBankAccount {
	private Long m_id;

	/** Column FBK_ID NUMBER(16, 0) NULL: Foreign key to Bank */
	private TestBank m_bank;

	public static final String pBANK = "bank";

	/** Column FBT_BBAN VARCHAR2(15) NULL: Old format account number */
	private String m_bban;

	public static final String pBBAN = "bban";

	/** Column FBT_BLOCKED_YN VARCHAR2(1) NOT NULL */
	private boolean m_blocked;

	public static final String pBLOCKED = "blocked";

	/** Column CST_ID NUMBER(16, 0) NOT NULL: Foreign key to Relation */
	private TestRelation m_relation;

	public static final String pRELATION = "relation";

	/** Column CST_ID_PAYER NUMBER(16, 0) NULL: De rekening is gekopieerd van betaler */
	private Relation m_copiedFromPayer;

	public static final String pCOPIED_FROM_PAYER = "copiedFromPayer";

	/** Column FRK_IS_G_ACCOUNT_YN VARCHAR2(1) NOT NULL: Is this account actually meant to be used as G account for other account */
	private boolean m_frkIsGAccount;

	public static final String pFRKISGACCOUNT = "frkIsGAccount";

	/** Column FBT_G_PERCENTAGE NUMBER(7, 3) NULL: Account percentage */
	private Double m_gPercentage;

	public static final String pGPERCENTAGE = "GPercentage";

	/** Column FBT_IBAN VARCHAR2(34) NULL: New account number (IBAN) used for SEPA functionality */
	private String m_iban;

	public static final String pIBAN = "iban";

	/** Column FBT_ID_G_ACCOUNT NUMBER(16, 0) NULL: Foreign key to FIN_BANK_ACCOUNTS */
	private TestBankAccount m_gAccount;

	public static final String pGACCOUNT = "GAccount";

	/**
	 * The transient runtime property accountNumber
	 */
	public static final String tACCOUNT_NUMBER = "accountNumber";

	/**
	 * The transient runtime property accountNumber
	 */
	public static final String tG_ACCOUNT_NUMBER = "GAccountNumber";

	/**
	 * Column FBT_ID NUMBER(16, 0) NOT NULL
	 */
	@Id @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sq")
	@Column(name = "FBT_ID", precision = 16, scale = 0, nullable = false)
	public Long getId() {
		return m_id;
	}

	public void setId(Long v) {
		m_id = v;
	}

	/**
	 * Column FBK_ID NUMBER(16, 0) NULL: Foreign key to Bank
	 */
	@ManyToOne(optional = true, fetch = FetchType.LAZY)
	@JoinColumn(name = "FBK_ID")
	public TestBank getBank() {
		return m_bank;
	}

	public void setBank(TestBank v) {
		m_bank = v;
	}

	/**
	 * Column FBT_BBAN VARCHAR2(15) NULL: Old format account number
	 */
	@Column(name = "FBT_BBAN", length = 15, nullable = true)
	public String getBban() {
		return m_bban;
	}

	public void setBban(String v) {
		m_bban = v;
	}

	/**
	 * Column FBT_BLOCKED_YN VARCHAR2(1) NOT NULL
	 */
	@Column(name = "FBT_BLOCKED_YN", length = 1, nullable = false)
	@Type(type = "yes_no")
	public boolean isBlocked() {
		return m_blocked;
	}

	public void setBlocked(boolean v) {
		m_blocked = v;
	}

	/**
	 * Column CST_ID NUMBER(16, 0) NOT NULL: Foreign key to Relation
	 */
	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@JoinColumn(name = "CST_ID")
	public TestRelation getRelation() {
		return m_relation;
	}

	public void setRelation(TestRelation v) {
		m_relation = v;
	}

	/** Column CST_ID_PAYER NUMBER(16, 0) NULL: De rekening is gekopieerd van betaler */
	@ManyToOne(optional = true, fetch = FetchType.LAZY)
	@JoinColumn(name = "CST_ID_PAYER")
	public Relation getCopiedFromPayer() {
		return m_copiedFromPayer;
	}

	public void setCopiedFromPayer(Relation v) {
		m_copiedFromPayer = v;
	}

	/**
	 * Column FRK_IS_G_ACCOUNT_YN VARCHAR2(1) NOT NULL: Is this account actually meant to be used as G account for other account
	 */
	@Column(name = "FRK_IS_G_ACCOUNT_YN", length = 1, nullable = false)
	@Type(type = "yes_no")
	public boolean isFrkIsGAccount() {
		return m_frkIsGAccount;
	}

	public void setFrkIsGAccount(boolean v) {
		m_frkIsGAccount = v;
	}

	/**
	 * Column FBT_G_PERCENTAGE NUMBER(7, 3) NULL: Account percentage
	 */
	@Column(name = "FBT_G_PERCENTAGE", precision = 7, scale = 3, nullable = true)
	@MetaProperty(converterClass = PercentageDoubleConverter.class)
	public Double getGPercentage() {
		return m_gPercentage;
	}

	public void setGPercentage(Double v) {
		m_gPercentage = v;
	}

	/**
	 * Column FBT_IBAN VARCHAR2(34) NULL: New account number (IBAN) used for SEPA functionality
	 */
	@Column(name = "FBT_IBAN", length = 34, nullable = true)
	public String getIban() {
		return m_iban;
	}

	public void setIban(String v) {
		m_iban = v;
	}

	/**
	 * Column FBT_ID_G_ACCOUNT NUMBER(16, 0) NULL: Foreign key to FIN_BANK_ACCOUNTS
	 */
	@ManyToOne(optional = true, fetch = FetchType.LAZY)
	@JoinColumn(name = "FBT_ID_G_ACCOUNT")
	public TestBankAccount getGAccount() {
		return m_gAccount;
	}

	public void setGAccount(TestBankAccount v) {
		m_gAccount = v;
	}


}
