{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 33,
  "repo": "Respekto/posesor",
  "metrics": {
    "NbFailingTests": 0,
    "NbErroringTests": 33,
    "NbSkippingTests": 0,
    "NbRunningTests": 43,
    "BugCommitUrl": "http://github.com/Respekto/posesor/commit/ecd2233a3bc7ccc464ebd604066948a19bd05c69",
    "FailureNames": [
      "java.lang.IllegalStateException",
      "org.springframework.dao.DataAccessResourceFailureException"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 5,
      "ComputeTestDir": 0,
      "BuildProject": 76,
      "InitRepoToPush": 0,
      "ComputeSourceDir": 0,
      "AstorJMut": 2509,
      "CloneRepository": 2,
      "CheckoutPatchedBuild": 0,
      "Nopol": 4,
      "NPEFix": 0,
      "TestProject": 1800,
      "GatherTestInformation": 0,
      "CommitPatch": 0
    },
    "ReproductionDate": "Jun 13, 2018 12:43:25 AM",
    "BuggyBuildId": 391497482,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/Respekto/posesor/builds/391497482",
    "BuggyBuildDate": "Jun 13, 2018 12:43:04 AM",
    "BugCommit": "ecd2233a3bc7ccc464ebd604066948a19bd05c69",
    "NbLibraries": 117,
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbFileApp": 0,
    "NbFileTests": 0,
    "NbCPU": 32,
    "FreeMemory": 595325200,
    "TotalMemory": 832045056,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 538968240,
      "ComputeClasspath": 412696304,
      "ComputeTestDir": 397681928,
      "BuildProject": 521383392,
      "InitRepoToPush": 419391632,
      "ComputeSourceDir": 412696304,
      "AstorJMut": 665690392,
      "CloneRepository": 543277600,
      "CheckoutPatchedBuild": 595325200,
      "Nopol": 429372192,
      "NPEFix": 429372192,
      "TestProject": 325904416,
      "GatherTestInformation": 502869128,
      "CommitPatch": 595325200
    },
    "NbSucceedingTests": 10
  },
  "bugCommit": "https://github.com/Respekto/posesor/compare/88c00f56358dc270a007ed884cef8098aa7c7394...ecd2233a3bc7ccc464ebd604066948a19bd05c69",
  "failingModule": "/root/workspace/Respekto/posesor/391497482/posesor-webapi",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 0,
  "error-types": [
    "java.lang.IllegalStateException",
    "org.springframework.dao.DataAccessResourceFailureException"
  ],
  "totalNumberRunningTests": 43,
  "failing-test-cases": [
    {
      "className": "net.posesor.allocations.SettlementShould",
      "failingMethods": [],
      "erroringMethods": [
        "reflectDocumentSubjectChangeAndRestore"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "net.posesor.payments.PaymentAddShould",
      "failingMethods": [],
      "erroringMethods": [
        "createReachablePayment",
        "exposePaymentInAllPayments"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "net.posesor.ChargesShould",
      "failingMethods": [],
      "erroringMethods": [
        "buildSubjectsList"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "net.posesor.charges.ChargesEndpointShould",
      "failingMethods": [],
      "erroringMethods": [
        "post",
        "getById",
        "getTemplate",
        "delete",
        "put"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "net.posesor.expenses.ExpensesEndpointShould",
      "failingMethods": [],
      "erroringMethods": [
        "getAll",
        "post",
        "getById",
        "delete",
        "put"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "net.posesor.payments.PaymentsOperationsShould",
      "failingMethods": [],
      "erroringMethods": [
        "getbyPaimentId",
        "getLatest",
        "getAll",
        "getByPaymentTitle",
        "insertDocument",
        "remove",
        "updateDocument"
      ],
      "failures": [
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches ReadPreferenceServerSelector{readPreference\u003dprimary}. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches ReadPreferenceServerSelector{readPreference\u003dprimary}. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "net.posesor.allocations.SettlementEndpointShould",
      "failingMethods": [],
      "erroringMethods": [
        "removeUnsettledValueWhenOriginatingDocumentIsRemoved"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "net.posesor.payments.AutocompleteShould",
      "failingMethods": [],
      "erroringMethods": [
        "returnPaymentTitleFromPayment",
        "returnBankAccountFromPayment"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "net.posesor.SecurityEndpointShould",
      "failingMethods": [],
      "erroringMethods": [
        "beRejectedAsInvalidUser",
        "beAcceptedAsDemoUser"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "net.posesor.payments.PaymentUpdateShould",
      "failingMethods": [],
      "erroringMethods": [
        "updatedDtoReplacedOldOne"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "net.posesor.payments.PaymentsEndpointShould",
      "failingMethods": [],
      "erroringMethods": [
        "getAllEntries",
        "deletePayment",
        "returnNotFoundWhenLocationIsNonExisting"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "net.posesor.SubjectOperationsShould",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReturnExistingSubject",
        "shouldDistinguishSubjectWithSameNamesOwnedByDifferentPrincipals",
        "shouldInsertNewSubject"
      ],
      "failures": [
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003dlocalhost:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    }
  ]
}