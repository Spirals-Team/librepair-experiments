{
  "totalNumberSkippingTests": 70,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "druid-io/druid",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 7,
      "ComputeClasspath": 5,
      "ComputeTestDir": 0,
      "BuildProject": 878,
      "InitRepoToPush": 9,
      "ComputeSourceDir": 0,
      "AstorJMut": 2347,
      "CloneRepository": 30,
      "CheckoutPatchedBuild": 0,
      "Nopol": 6,
      "NPEFix": 0,
      "TestProject": 669,
      "GatherTestInformation": 0,
      "CommitPatch": 8
    },
    "NbFailingTests": 16,
    "NbErroringTests": 0,
    "NbSkippingTests": 70,
    "NbRunningTests": 84109,
    "BugCommitUrl": "http://github.com/druid-io/druid/commit/67e69142438db2667a255eb442a7a724ab983aaf",
    "ReproductionDate": "Jun 6, 2018 11:32:08 PM",
    "BuggyBuildId": 388953921,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/druid-io/druid/builds/388953921",
    "BuggyBuildDate": "Jun 6, 2018 11:31:33 PM",
    "BugCommit": "67e69142438db2667a255eb442a7a724ab983aaf",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 96,
    "NbFileApp": 0,
    "NbFileTests": 952,
    "NbCPU": 32,
    "FreeMemory": 334502072,
    "TotalMemory": 1866989568,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 649611184,
      "ComputeClasspath": 997502672,
      "ComputeTestDir": 963674096,
      "BuildProject": 597065808,
      "InitRepoToPush": 1005690744,
      "ComputeSourceDir": 997502672,
      "AstorJMut": 505678568,
      "CloneRepository": 1021149680,
      "CheckoutPatchedBuild": 334502072,
      "Nopol": 902983144,
      "NPEFix": 902983144,
      "TestProject": 582736864,
      "GatherTestInformation": 397227608,
      "CommitPatch": 334502072
    },
    "NbSucceedingTests": 84093
  },
  "failingModule": "/root/workspace/druid-io/druid/388953921/processing",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 16,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 84109,
  "failing-test-cases": [
    {
      "className": "io.druid.segment.filter.FilterPartitionTest",
      "failingMethods": [
        "testOrPostFilterWithNulls[bitmaps[concise], indexMerger[off-heap memory segment write-out medium], finisher[incremental], optimize[true]]",
        "testOrPostFilterWithNulls[bitmaps[concise], indexMerger[off-heap memory segment write-out medium], finisher[incremental], optimize[false]]",
        "testOrPostFilterWithNulls[bitmaps[concise], indexMerger[tmpFile segment write-out medium], finisher[incremental], optimize[false]]",
        "testOrPostFilterWithNulls[bitmaps[roaring], indexMerger[tmpFile segment write-out medium], finisher[incremental], optimize[false]]",
        "testOrPostFilterWithNulls[bitmaps[roaring], indexMerger[tmpFile segment write-out medium], finisher[incremental], optimize[true]]",
        "testOrPostFilterWithNulls[bitmaps[roaring], indexMerger[off-heap memory segment write-out medium], finisher[incremental], optimize[false]]",
        "testOrPostFilterWithNulls[bitmaps[concise], indexMerger[tmpFile segment write-out medium], finisher[incremental], optimize[true]]",
        "testOrPostFilterWithNulls[bitmaps[roaring], indexMerger[off-heap memory segment write-out medium], finisher[incremental], optimize[true]]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Cursor: (JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim1) \u003d INVALID_VALUE || JavascriptDimExtractionFn{function\u003d\u0027function(str) { return \u0027super-\u0027 + str; }\u0027}(dim2) \u003d super-foo) expected:\u003c[7, 9]\u003e but was:\u003c[7]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 16,
      "nbErrors": 0
    }
  ]
}