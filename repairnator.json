{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 26,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/355108729",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 3,
  "error-types": [
    "spoon.SpoonException",
    "java.lang.AssertionError",
    "java.lang.Exception",
    "java.lang.reflect.InvocationTargetException"
  ],
  "totalNumberRunningTests": 1392,
  "failing-test-cases": [
    {
      "className": "spoon.test.intercession.IntercessionContractTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.IntercessionContractTest#testContract[public abstract spoon.reflect.declaration.CtPackage spoon.reflect.declaration.CtPackage.addPackage(spoon.reflect.declaration.CtPackage)]"
      ],
      "failures": [
        {
          "failureName": "java.lang.reflect.InvocationTargetException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.staticFieldAccess.StaticAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.staticFieldAccess.StaticAccessTest#testProcessAndCompile"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element {\n    return 0;\n} is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.testing.CtPackageAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.testing.CtPackageAssertTest#testEqualityBetweenTwoCtPackageWithDifferentTypes",
        "spoon.testing.CtPackageAssertTest#testEqualityBetweenTwoCtPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element public class Foo {} is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "spoon.MavenLauncherTest#spoonMavenLauncherTest",
        "spoon.MavenLauncherTest#mavenLauncherTestMultiModulesAndVariables"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.imports.ImportTest#testCanAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Element was not contained in the Set, but Set#add returned false. Not added??",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctClass.CtClassTest#testAllTypeReferencesToALocalTypeShouldNotStartWithNumber"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element new Foo() is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.AstCheckerTest",
      "failingMethods": [
        "spoon.reflect.ast.AstCheckerTest#testPushToStackChanges"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "setStatements(java.util.List) on spoon.support.reflect.code.CtBlockImpl\naddStatement(spoon.reflect.code.CtStatement) on spoon.support.reflect.code.CtBlockImpl\naddStatement(int,spoon.reflect.code.CtStatement) on spoon.support.reflect.code.CtBlockImpl\nremoveStatement(spoon.reflect.code.CtStatement) on spoon.support.reflect.code.CtBlockImpl\nsetTags(java.util.List) on spoon.support.reflect.code.CtJavaDocImpl\naddTag(spoon.reflect.code.CtJavaDocTag) on spoon.support.reflect.code.CtJavaDocImpl\naddTag(int,spoon.reflect.code.CtJavaDocTag) on spoon.support.reflect.code.CtJavaDocImpl\nremoveTag(int) on spoon.support.reflect.code.CtJavaDocImpl\nremoveTag(spoon.reflect.code.CtJavaDocTag) on spoon.support.reflect.code.CtJavaDocImpl\naddPackage(spoon.reflect.declaration.CtPackage) on spoon.support.reflect.declaration.CtPackageImpl\nremovePackage(spoon.reflect.declaration.CtPackage) on spoon.support.reflect.declaration.CtPackageImpl\nsetPackages(java.util.Set) on spoon.support.reflect.declaration.CtPackageImpl\nsetTypes(java.util.Set) on spoon.support.reflect.declaration.CtPackageImpl\naddType(spoon.reflect.declaration.CtType) on spoon.support.reflect.declaration.CtPackageImpl\nremoveType(spoon.reflect.declaration.CtType) on spoon.support.reflect.declaration.CtPackageImpl\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.intercession.insertBefore.InsertMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBeforeWithBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfterWithoutBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBefore",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfterWithBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBeforeWithoutBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfter",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#insertBeforeAndUpdateParent"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element return 2 is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element System.out.println() is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element return 2 is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element System.out.println(x); is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element return 2 is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element System.out.println(x); is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element return 2 is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.FactoryTest#testCtModel",
        "spoon.test.factory.FactoryTest#testIncrementalModel"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element spoon.test.factory.testclasses2 is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "java.lang.InstantiationException: spoon.support.reflect.declaration.CtPackageImpl$1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.replace.ReplaceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.replace.ReplaceTest#testReplaceBlockTry"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element int j \u003d 0 is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.eval.EvalTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.eval.EvalTest#testDoNotSimplifyToExpressionWhenStatementIsExpected"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element spoon.test.eval.ToEvaluate.class.getName() is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.IntercessionTest#testInsertAfter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element System.out.println(x); is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.refactoring.RefactoringTest#testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Element was not contained in the Set, but Set#add returned false. Not added??",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.processing.ProcessingTest#testInsertBegin",
        "spoon.test.processing.ProcessingTest#testInsertEnd"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element int i \u003d 0; is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element int after is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.fieldaccesses.FieldAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessAutoExplicit"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element int age \u003d 1 is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest#testTest",
        "spoon.test.main.MainTest#testMain_checkGenericContracts"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "java.lang.InstantiationException: spoon.support.reflect.declaration.CtPackageImpl$1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "java.lang.InstantiationException: spoon.support.reflect.declaration.CtPackageImpl$1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.lambda.LambdaTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.lambda.LambdaTest#testFieldAccessInLambdaNoClassPathExternal1Example"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Element was not contained in the Set, but Set#add returned false. Not added??",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.constructor.ConstructorTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructor.ConstructorTest#testTransformationOnConstructorWithInsertBegin"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The element int i \u003d 0 is already used by another part of SpoonModel. Remove it from previous model or clone it before.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}