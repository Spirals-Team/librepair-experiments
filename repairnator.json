{
  "totalNumberSkippingTests": 5,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/345887652",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 6,
  "error-types": [
    "java.lang.AssertionError",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1408,
  "failing-test-cases": [
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testSrcMainJava",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testStaticClasses"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "15 public methods should be documented with proper API documentation: \nspoon.pattern.LiveStatementsBuilder#byVariableName(java.lang.String)\nspoon.pattern.LiveStatementsBuilder#markLive(spoon.reflect.code.CtForEach)\nspoon.pattern.LiveStatementsBuilder#markLive(spoon.reflect.code.CtIf)\nspoon.pattern.MatchHelper#createChainOfMatchers(spoon.pattern.SubstitutionRequestProvider,spoon.reflect.meta.ContainerKind,java.lang.Object,boolean)\nspoon.pattern.MatchHelper#createChainOfMatchers(spoon.pattern.SubstitutionRequestProvider,java.util.Set,boolean)\nspoon.pattern.MatchHelper#createChainOfMatchers(spoon.pattern.SubstitutionRequestProvider,java.util.Map,boolean)\nspoon.pattern.NodeMatcher#appendDescription(spoon.reflect.visitor.PrinterHelper)\nspoon.pattern.ParameterValueProvider#putIntoCopy(java.lang.String,java.lang.Object)\nspoon.pattern.ParameterValueProvider#asMap()\nspoon.pattern.ParameterValueProvider#createLocalParameterValueProvider()\nspoon.pattern.ParameterValueProvider#asLocalMap()\nspoon.pattern.ParameterValueProviderFactory#createParameterValueProvider()\nspoon.pattern.ParametersBuilder#parametersByVariable(spoon.reflect.declaration.CtVariable)\nspoon.pattern.PatternBuilder#configureAutomaticParameters()\nspoon.pattern.TemplateBuilder#createPattern(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtClass,spoon.template.Template)",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [
        "spoon.test.main.MainTest#testMain_checkShadow"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "cannot find decl for onSetAdd(spoon.reflect.declaration.CtElement,spoon.reflect.path.CtRole,java.util.Set,T)",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "spoon.MavenLauncherTest#spoonMavenLauncherTest",
        "spoon.MavenLauncherTest#mavenLauncherTestMultiModulesAndVariables"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.template.TemplateArrayAccessTest",
      "failingMethods": [
        "spoon.test.template.TemplateArrayAccessTest#testArrayLengthAccess"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cif ([3] \u003e 0);\u003e but was:\u003cif ([(new java.lang.String[]{ \"a\", null, \"b\" }.length)] \u003e 0);\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}