{
  "totalNumberSkippingTests": 70,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "druid-io/druid",
  "failingModule": "/root/workspace/druid-io/druid/370697447/processing",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 5,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 84231,
  "failing-test-cases": [
    {
      "className": "io.druid.query.groupby.GroupByQueryRunnerFailureTest",
      "failingMethods": [
        "io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[mMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[noRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[noRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[mergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerFailureTest#testNotEnoughMergeBuffersOnQueryable[rtIndex]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing \"Cannot acquire enough merge buffers\")\n     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause \u003cjava.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\u003e is a java.util.concurrent.TimeoutException\nStacktrace was: QueryInterruptedException{msg\u003dCannot acquire enough merge buffers, code\u003dQuery timeout, class\u003djava.util.concurrent.TimeoutException, host\u003dnull}\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)\n at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)\n at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)\n at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)\n at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n at java.lang.reflect.Method.invoke(Method.java:498)\n at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)\nCaused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)\n ... 28 more\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing \"Cannot acquire enough merge buffers\")\n     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause \u003cjava.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\u003e is a java.util.concurrent.TimeoutException\nStacktrace was: QueryInterruptedException{msg\u003dCannot acquire enough merge buffers, code\u003dQuery timeout, class\u003djava.util.concurrent.TimeoutException, host\u003dnull}\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)\n at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)\n at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)\n at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)\n at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n at java.lang.reflect.Method.invoke(Method.java:498)\n at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)\nCaused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)\n ... 28 more\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing \"Cannot acquire enough merge buffers\")\n     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause \u003cjava.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\u003e is a java.util.concurrent.TimeoutException\nStacktrace was: QueryInterruptedException{msg\u003dCannot acquire enough merge buffers, code\u003dQuery timeout, class\u003djava.util.concurrent.TimeoutException, host\u003dnull}\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)\n at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)\n at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)\n at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)\n at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n at java.lang.reflect.Method.invoke(Method.java:498)\n at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)\nCaused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)\n ... 28 more\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing \"Cannot acquire enough merge buffers\")\n     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause \u003cjava.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\u003e is a java.util.concurrent.TimeoutException\nStacktrace was: QueryInterruptedException{msg\u003dCannot acquire enough merge buffers, code\u003dQuery timeout, class\u003djava.util.concurrent.TimeoutException, host\u003dnull}\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)\n at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)\n at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)\n at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)\n at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n at java.lang.reflect.Method.invoke(Method.java:498)\n at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)\nCaused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)\n ... 28 more\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: (an instance of io.druid.query.QueryInterruptedException and exception with cause an instance of io.druid.query.InsufficientResourcesException and exception with message a string containing \"Cannot acquire enough merge buffers\")\n     but: exception with cause an instance of io.druid.query.InsufficientResourcesException cause \u003cjava.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\u003e is a java.util.concurrent.TimeoutException\nStacktrace was: QueryInterruptedException{msg\u003dCannot acquire enough merge buffers, code\u003dQuery timeout, class\u003djava.util.concurrent.TimeoutException, host\u003dnull}\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:345)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.access$000(GroupByMergingQueryRunnerV2.java:72)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:176)\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2$1.make(GroupByMergingQueryRunnerV2.java:158)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.FilteredSequence.accumulate(FilteredSequence.java:45)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:167)\n at io.druid.query.groupby.epinephelinae.GroupByRowProcessor$2.make(GroupByRowProcessor.java:127)\n at io.druid.java.util.common.guava.BaseSequence.accumulate(BaseSequence.java:42)\n at io.druid.common.guava.CombiningSequence.accumulate(CombiningSequence.java:64)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.WrappingSequence$1.get(WrappingSequence.java:50)\n at io.druid.java.util.common.guava.SequenceWrapper.wrap(SequenceWrapper.java:55)\n at io.druid.java.util.common.guava.WrappingSequence.accumulate(WrappingSequence.java:45)\n at io.druid.java.util.common.guava.MappedSequence.accumulate(MappedSequence.java:43)\n at io.druid.java.util.common.guava.Sequence.toList(Sequence.java:76)\n at io.druid.query.groupby.GroupByQueryRunnerTestHelper.runQuery(GroupByQueryRunnerTestHelper.java:57)\n at io.druid.query.groupby.GroupByQueryRunnerFailureTest.testNotEnoughMergeBuffersOnQueryable(GroupByQueryRunnerFailureTest.java:208)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n at java.lang.reflect.Method.invoke(Method.java:498)\n at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)\nCaused by: java.util.concurrent.TimeoutException: Cannot acquire enough merge buffers\n at io.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2.getMergeBuffersHolder(GroupByMergingQueryRunnerV2.java:337)\n ... 28 more\n",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    }
  ]
}