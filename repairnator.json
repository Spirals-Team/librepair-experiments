{
  "totalNumberSkippingTests": 109,
  "bugType": "only_fail",
  "totalNumberErroringTests": 3,
  "repo": "apache/calcite",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 3,
      "ComputeClasspath": 5,
      "ComputeTestDir": 0,
      "BuildProject": 115,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 7,
      "AstorJMut": 554,
      "CloneRepository": 14,
      "CheckoutPatchedBuild": 0,
      "Nopol": 409,
      "NPEFix": 0,
      "TestProject": 409,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 6,
      "CommitPatch": 9
    },
    "FailureNames": [
      "java.lang.AssertionError",
      "java.lang.RuntimeException",
      "java.lang.reflect.InvocationTargetException"
    ],
    "BugCommitUrl": "http://github.com/apache/calcite/commit/02ca90234276409890983e89f042b047cc7f4bdf",
    "NbFailingTests": 17,
    "NbErroringTests": 3,
    "NbSkippingTests": 109,
    "NbRunningTests": 4685,
    "ReproductionDate": "May 17, 2018 2:29:35 PM",
    "BuggyBuildId": 380148861,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/apache/calcite/builds/380148861",
    "BuggyBuildDate": "May 17, 2018 1:23:12 PM",
    "BugCommit": "02ca90234276409890983e89f042b047cc7f4bdf",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 46,
    "NbFileApp": 2996,
    "NbFileTests": 192,
    "NbCPU": 32,
    "FreeMemory": 2514448344,
    "TotalMemory": 6246891520,
    "AngelicValuesByTest": {
      "org/apache/calcite/test/StreamTest": 0,
      "org/apache/calcite/test/LatticeTest": 0,
      "org/apache/calcite/test/JdbcAdapterTest": 0,
      "org/apache/calcite/test/CoreQuidemTest": 0,
      "org/apache/calcite/test/JdbcTest": 0,
      "org/apache/calcite/test/MaterializationTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 525318368,
      "ComputeClasspath": 729636536,
      "ComputeTestDir": 477753504,
      "BuildProject": 462781248,
      "ComputeSourceDir": 729636536,
      "InitRepoToPush": 628836184,
      "AstorJMut": 2727528696,
      "CloneRepository": 458507880,
      "CheckoutPatchedBuild": 2514448344,
      "Nopol": 3255235008,
      "NPEFix": 3255016000,
      "TestProject": 442090160,
      "GatherTestInformation": 410086720,
      "PushIncriminatedBuild": 733321176,
      "CommitPatch": 2514448344
    },
    "NbSucceedingTests": 4665
  },
  "failingModule": "/root/workspace/apache/calcite/380148861/core",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 17,
  "error-types": [
    "java.lang.AssertionError",
    "java.lang.RuntimeException",
    "java.lang.reflect.InvocationTargetException"
  ],
  "totalNumberRunningTests": 4685,
  "failing-test-cases": [
    {
      "className": "org.apache.calcite.test.JdbcAdapterTest",
      "failingMethods": [
        "testValuesPlan"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dEnumerableCalc(expr#0..2\u003d[{inputs}], day\u003d[$t1], week_day\u003d[$t2], C\u003d[$t0])\\n  EnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n    EnumerableValues(tuples\u003d[[{ 1 }, { 2 }]])\\n    JdbcToEnumerableConverter\\n      JdbcTableScan(table\u003d[[foodmart, days]])\"\n     but: was \"PLAN\u003dEnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n  JdbcToEnumerableConverter\\n    JdbcTableScan(table\u003d[[foodmart, days]])\\n  EnumerableValues(tuples\u003d[[{ 1 }, { 2 }]])\\n\\n\"",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.MaterializationTest",
      "failingMethods": [
        "testJoinAggregateMaterializationAggregateFuncs8",
        "testJoinAggregateMaterializationAggregateFuncs7",
        "testJoinAggregateMaterializationNoAggregateFuncs9",
        "testJoinAggregateMaterializationAggregateFuncs11",
        "testJoinMaterialization8",
        "testJoinMaterialization7",
        "testJoinAggregateMaterializationNoAggregateFuncs7"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{2}], agg#0\u003d[COUNT()])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[1], expr#3\u003d[+($t1, $t2)], empid\u003d[$t0], EXPR$1\u003d[$t3])\\n  EnumerableAggregate(group\u003d[{0}], agg#0\u003d[$SUM0($1)])\\n    EnumerableUnion(all\u003d[true])\\n      EnumerableAggregate(group\u003d[{1}], agg#0\u003d[COUNT()])\\n        EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\\n          EnumerableCalc(expr#0..3\u003d[{inputs}], deptno\u003d[$t1], empid\u003d[$t2])\\n            EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\\n              EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name0\u003d[$t2])\\n                EnumerableTableScan(table\u003d[[hr, locations]])\\n              EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], deptno\u003d[$t3], empid\u003d[$t0], name10\u003d[$t5])\\n                EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[inner])\\n                  EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..2\u003d[{exprs}])\\n                    EnumerableTableScan(table\u003d[[hr, dependents]])\\n                  EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], expr#5\u003d[10], expr#6\u003d[\u003e($t0, $t5)], expr#7\u003d[20], expr#8\u003d[\u003c($t0, $t7)], expr#9\u003d[11], expr#10\u003d[\u003e\u003d($t9, $t0)], expr#11\u003d[19], expr#12\u003d[\u003c\u003d($t11, $t0)], expr#13\u003d[OR($t10, $t12)], expr#14\u003d[AND($t6, $t8, $t13)], deptno\u003d[$t0], name0\u003d[$t4], $condition\u003d[$t14])\\n                    EnumerableTableScan(table\u003d[[hr, depts]])\\n          EnumerableCalc(expr#0..4\u003d[{inputs}], deptno\u003d[$t1])\\n            EnumerableTableScan(table\u003d[[hr, emps]])\\n      EnumerableAggregate(group\u003d[{1}], agg#0\u003d[$SUM0($2)])\\n        EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{0}], S\u003d[$SUM0($2)])\\n  EnumerableJoin(condition\u003d[\u003d($1, $3)], joinType\u003d[inner])\\n    EnumerableTableScan(table\u003d[[hr, m0]])\\n    EnumerableTableScan(table\u003d[[hr, depts]])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{4}], S\u003d[$SUM0($6)])\\n  EnumerableJoin(condition\u003d[\u003d($0, $5)], joinType\u003d[inner])\\n    EnumerableTableScan(table\u003d[[hr, depts]])\\n    EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{4}], S\u003d[$SUM0($2)])\\n  EnumerableJoin(condition\u003d[\u003d($1, $3)], joinType\u003d[inner])\\n    EnumerableTableScan(table\u003d[[hr, m0]])\\n    EnumerableTableScan(table\u003d[[hr, depts]])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{1}], S\u003d[$SUM0($6)])\\n  EnumerableJoin(condition\u003d[\u003d($0, $5)], joinType\u003d[inner])\\n    EnumerableTableScan(table\u003d[[hr, depts]])\\n    EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableCalc(expr#0..2\u003d[{inputs}], empid0\u003d[$t1])\\n  EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0\u003d[{inputs}], expr#1\u003d[CAST($t0):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name\u003d[$t1])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], empid\u003d[$t0], name0\u003d[$t2])\\n      EnumerableTableScan(table\u003d[[hr, dependents]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..2\u003d[{inputs}], empid0\u003d[$t0])\\n  EnumerableJoin(condition\u003d[\u003d($1, $2)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], empid\u003d[$t0], name0\u003d[$t2])\\n      EnumerableTableScan(table\u003d[[hr, dependents]])\\n    EnumerableCalc(expr#0\u003d[{inputs}], expr#1\u003d[CAST($t0):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name\u003d[$t1])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableCalc(expr#0..4\u003d[{inputs}], empid\u003d[$t2])\\n  EnumerableJoin(condition\u003d[\u003d($1, $4)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0\u003d[{inputs}], expr#1\u003d[CAST($t0):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..1\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..2\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[hr, dependents]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..4\u003d[{inputs}], empid\u003d[$t0])\\n  EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..2\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[hr, dependents]])\\n    EnumerableCalc(expr#0\u003d[{inputs}], expr#1\u003d[CAST($t0):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..1\u003d[{exprs}])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{2}])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{0}])\\n  EnumerableUnion(all\u003d[true])\\n    EnumerableAggregate(group\u003d[{1}])\\n      EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\\n        EnumerableCalc(expr#0..3\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n          EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\\n            EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], deptno\u003d[$t3], empid\u003d[$t0], name10\u003d[$t5])\\n              EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[inner])\\n                EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..2\u003d[{exprs}])\\n                  EnumerableTableScan(table\u003d[[hr, dependents]])\\n                EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], expr#5\u003d[10], expr#6\u003d[\u003e($t0, $t5)], expr#7\u003d[11], expr#8\u003d[\u003e\u003d($t7, $t0)], expr#9\u003d[AND($t6, $t8)], deptno\u003d[$t0], name0\u003d[$t4], $condition\u003d[$t9])\\n                  EnumerableTableScan(table\u003d[[hr, depts]])\\n            EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name0\u003d[$t2])\\n              EnumerableTableScan(table\u003d[[hr, locations]])\\n        EnumerableCalc(expr#0..4\u003d[{inputs}], deptno\u003d[$t1])\\n          EnumerableTableScan(table\u003d[[hr, emps]])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], empid\u003d[$t1])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{2}])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{0}])\\n  EnumerableUnion(all\u003d[true])\\n    EnumerableAggregate(group\u003d[{1}])\\n      EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\\n        EnumerableCalc(expr#0..3\u003d[{inputs}], deptno\u003d[$t1], empid\u003d[$t2])\\n          EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\\n            EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name0\u003d[$t2])\\n              EnumerableTableScan(table\u003d[[hr, locations]])\\n            EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], deptno\u003d[$t3], empid\u003d[$t0], name10\u003d[$t5])\\n              EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[inner])\\n                EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], proj#0..2\u003d[{exprs}])\\n                  EnumerableTableScan(table\u003d[[hr, dependents]])\\n                EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], expr#5\u003d[10], expr#6\u003d[\u003e($t0, $t5)], expr#7\u003d[20], expr#8\u003d[\u003c($t0, $t7)], expr#9\u003d[11], expr#10\u003d[\u003e\u003d($t9, $t0)], expr#11\u003d[19], expr#12\u003d[\u003c\u003d($t11, $t0)], expr#13\u003d[OR($t10, $t12)], expr#14\u003d[AND($t6, $t8, $t13)], deptno\u003d[$t0], name0\u003d[$t4], $condition\u003d[$t14])\\n                  EnumerableTableScan(table\u003d[[hr, depts]])\\n        EnumerableCalc(expr#0..4\u003d[{inputs}], deptno\u003d[$t1])\\n          EnumerableTableScan(table\u003d[[hr, emps]])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], empid\u003d[$t1])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n\\n\"",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.JdbcTest",
      "failingMethods": [
        "testAlmostBushy",
        "testDistinctCount",
        "testNotInEmptyQuery",
        "testInnerJoinValues"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableCalc(expr#0..1\u003d[{inputs}], EMPNO\u003d[$t1], DESC\u003d[$t0])\\n  EnumerableAggregate(group\u003d[{1, 2}])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t3):INTEGER NOT NULL], expr#5\u003d[\u003d($t4, $t0)], expr#6\u003d[\u0027SameName\u0027], expr#7\u003d[\u003d($t1, $t6)], expr#8\u003d[AND($t5, $t7)], proj#0..3\u003d[{exprs}], $condition\u003d[$t8])\\n      EnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n        EnumerableValues(tuples\u003d[[{ 10, \u0027SameName\u0027 }]])\\n        EnumerableTableScan(table\u003d[[SALES, EMPS]])\\n\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{0, 3}])\\n  EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t1):INTEGER NOT NULL], expr#5\u003d[\u003d($t4, $t2)], expr#6\u003d[\u0027SameName\u0027], expr#7\u003d[\u003d($t3, $t6)], expr#8\u003d[AND($t5, $t7)], proj#0..3\u003d[{exprs}], $condition\u003d[$t8])\\n    EnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n      EnumerableTableScan(table\u003d[[SALES, EMPS]])\\n      EnumerableValues(tuples\u003d[[{ 10, \u0027SameName\u0027 }]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: \"DEPTNO\u003d10\\nDEPTNO\u003d10\\nDEPTNO\u003d20\\nDEPTNO\u003d30\\nDEPTNO\u003d30\\nDEPTNO\u003d50\\nDEPTNO\u003d50\\nDEPTNO\u003d60\\nDEPTNO\u003dnull\"\n     but: was \"DEPTNO\u003d10\\nDEPTNO\u003d10\\nDEPTNO\u003d20\\nDEPTNO\u003d30\\nDEPTNO\u003d30\\nDEPTNO\u003d50\\nDEPTNO\u003d50\\nDEPTNO\u003d60\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableAggregate(group\u003d[{0}], m0\u003d[COUNT($1)])\\n  EnumerableAggregate(group\u003d[{1, 3}])\\n    EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\\n      EnumerableCalc(expr#0..9\u003d[{inputs}], expr#10\u003d[CAST($t4):INTEGER], expr#11\u003d[1997], expr#12\u003d[\u003d($t10, $t11)], time_id\u003d[$t0], the_year\u003d[$t4], $condition\u003d[$t12])\\n        EnumerableTableScan(table\u003d[[foodmart2, time_by_day]])\\n      EnumerableCalc(expr#0..7\u003d[{inputs}], time_id\u003d[$t1], unit_sales\u003d[$t7])\\n        EnumerableTableScan(table\u003d[[foodmart2, sales_fact_1997]])\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{1}], m0\u003d[COUNT($0)])\\n  EnumerableAggregate(group\u003d[{1, 3}])\\n    EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\\n      EnumerableCalc(expr#0..7\u003d[{inputs}], time_id\u003d[$t1], unit_sales\u003d[$t7])\\n        EnumerableTableScan(table\u003d[[foodmart2, sales_fact_1997]])\\n      EnumerableCalc(expr#0..9\u003d[{inputs}], expr#10\u003d[CAST($t4):INTEGER], expr#11\u003d[1997], expr#12\u003d[\u003d($t10, $t11)], time_id\u003d[$t0], the_year\u003d[$t4], $condition\u003d[$t12])\\n        EnumerableTableScan(table\u003d[[foodmart2, time_by_day]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableJoin(condition\u003d[\u003d($0, $38)], joinType\u003d[inner]): rowcount \u003d 7.050660528307499E8, cumulative cost \u003d {1.0640240216183146E9 rows, 777302.0 cpu, 0.0 io}\\n  EnumerableJoin(condition\u003d[\u003d($2, $8)], joinType\u003d[inner]): rowcount \u003d 2.0087351932499997E7, cumulative cost \u003d {2.117504719375143E7 rows, 724261.0 cpu, 0.0 io}\\n    EnumerableTableScan(table\u003d[[foodmart2, sales_fact_1997]]): rowcount \u003d 86837.0, cumulative cost \u003d {86837.0 rows, 86838.0 cpu, 0.0 io}\\n    EnumerableCalc(expr#0..28\u003d[{inputs}], expr#29\u003d[\u0027San Francisco\u0027], expr#30\u003d[\u003d($t9, $t29)], proj#0..28\u003d[{exprs}], $condition\u003d[$t30]): rowcount \u003d 1542.1499999999999, cumulative cost \u003d {11823.15 rows, 637423.0 cpu, 0.0 io}\\n      EnumerableTableScan(table\u003d[[foodmart2, customer]]): rowcount \u003d 10281.0, cumulative cost \u003d {10281.0 rows, 10282.0 cpu, 0.0 io}\\n  EnumerableCalc(expr#0..14\u003d[{inputs}], expr#15\u003d[\u0027Washington\u0027], expr#16\u003d[\u003d($t2, $t15)], proj#0..14\u003d[{exprs}], $condition\u003d[$t16]): rowcount \u003d 234.0, cumulative cost \u003d {1794.0 rows, 53041.0 cpu, 0.0 io}\\n    EnumerableTableScan(table\u003d[[foodmart2, product]]): rowcount \u003d 1560.0, cumulative cost \u003d {1560.0 rows, 1561.0 cpu, 0.0 io}\\n\"\n     but: was \"PLAN\u003dEnumerableJoin(condition\u003d[\u003d($0, $38)], joinType\u003d[inner]): rowcount \u003d 7.050660528307499E8, cumulative cost \u003d {7.454406462104479E8 rows, 777302.0 cpu, 0.0 io}\n  EnumerableJoin(condition\u003d[\u003d($2, $8)], joinType\u003d[inner]): rowcount \u003d 2.0087351932499997E7, cumulative cost \u003d {2.028417090205708E7 rows, 724261.0 cpu, 0.0 io}\n    EnumerableTableScan(table\u003d[[foodmart2, sales_fact_1997]]): rowcount \u003d 86837.0, cumulative cost \u003d {86837.0 rows, 86838.0 cpu, 0.0 io}\n    EnumerableCalc(expr#0..28\u003d[{inputs}], expr#29\u003d[\u0027San Francisco\u0027], expr#30\u003d[\u003d($t9, $t29)], proj#0..28\u003d[{exprs}], $condition\u003d[$t30]): rowcount \u003d 1542.1499999999999, cumulative cost \u003d {11823.15 rows, 637423.0 cpu, 0.0 io}\n      EnumerableTableScan(table\u003d[[foodmart2, customer]]): rowcount \u003d 10281.0, cumulative cost \u003d {10281.0 rows, 10282.0 cpu, 0.0 io}\n  EnumerableCalc(expr#0..14\u003d[{inputs}], expr#15\u003d[\u0027Washington\u0027], expr#16\u003d[\u003d($t2, $t15)], proj#0..14\u003d[{exprs}], $condition\u003d[$t16]): rowcount \u003d 234.0, cumulative cost \u003d {1794.0 rows, 53041.0 cpu, 0.0 io}\n    EnumerableTableScan(table\u003d[[foodmart2, product]]): rowcount \u003d 1560.0, cumulative cost \u003d {1560.0 rows, 1561.0 cpu, 0.0 io}\n\n\"",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.StreamTest",
      "failingMethods": [
        "testStreamToRelationJoin"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"EnumerableCalc(expr#0..6\u003d[{inputs}], proj#0..1\u003d[{exprs}], SUPPLIERID\u003d[$t6])\\n  EnumerableJoin(condition\u003d[\u003d($4, $5)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t2):VARCHAR(32) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\" NOT NULL], proj#0..4\u003d[{exprs}])\\n      EnumerableInterpreter\\n        BindableTableScan(table\u003d[[STREAM_JOINS, ORDERS, (STREAM)]])\\n    EnumerableInterpreter\\n      BindableTableScan(table\u003d[[STREAM_JOINS, PRODUCTS]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..6\u003d[{inputs}], ROWTIME\u003d[$t2], ORDERID\u003d[$t3], SUPPLIERID\u003d[$t1])\\n  EnumerableJoin(condition\u003d[\u003d($0, $6)], joinType\u003d[inner])\\n    EnumerableInterpreter\\n      BindableTableScan(table\u003d[[STREAM_JOINS, PRODUCTS]])\\n    EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[CAST($t2):VARCHAR(32) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\" NOT NULL], proj#0..4\u003d[{exprs}])\\n      EnumerableInterpreter\\n        BindableTableScan(table\u003d[[STREAM_JOINS, ORDERS, (STREAM)]])\\n\\n\"",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.LatticeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTwoLattices",
        "testTileAlgorithm2"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while preparing [select s.\"unit_sales\", p.\"brand_name\"\nfrom \"foodmart\".\"sales_fact_1997\" as s\njoin \"foodmart\".\"product\" as p using (\"product_id\")\n]",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while executing [explain plan for select distinct t.\"the_year\", t.\"quarter\"\nfrom \"foodmart\".\"sales_fact_1997\" as s\njoin \"foodmart\".\"time_by_day\" as t using (\"time_id\")\n]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.apache.calcite.test.CoreQuidemTest",
      "failingMethods": [
        "test[5: quidem(sql/sub-query.iq)]",
        "test[9: quidem(sql/some.iq)]",
        "test[4: quidem(sql/join.iq)]",
        "test[3: quidem(sql/agg.iq)]"
      ],
      "erroringMethods": [
        "test[1: quidem(sql/misc.iq)]"
      ],
      "failures": [
        {
          "failureName": "java.lang.reflect.InvocationTargetException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Files differ: /root/workspace/apache/calcite/380148861/core/target/surefire/sql/agg.iq /root/workspace/apache/calcite/380148861/core/target/test-classes/sql/agg.iq\n1408,1410c1408\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableJoin(condition\u003d[\u003d($1, $2)], joinType\u003d[inner])\n1412a1411,1412\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n1426,1429c1426,1427\n\u003c EnumerableAggregate(group\u003d[{}], EXPR$0\u003d[SUM($2)])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e EnumerableAggregate(group\u003d[{}], EXPR$0\u003d[SUM($1)])\n\u003e   EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\n1431a1430,1431\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n1449,1452c1449,1450\n\u003c   EnumerableAggregate(group\u003d[{0, 3}], EXPR$0\u003d[SUM($2)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableAggregate(group\u003d[{2, 3}], EXPR$0\u003d[SUM($1)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\n1454a1453,1454\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n1472,1475c1472,1473\n\u003c   EnumerableAggregate(group\u003d[{3}], EXPR$0\u003d[SUM($2)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableAggregate(group\u003d[{2}], EXPR$0\u003d[SUM($1)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\n1477a1476,1477\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n1495,1498c1495,1496\n\u003c   EnumerableAggregate(group\u003d[{3}], EXPR$0\u003d[MIN($2)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableAggregate(group\u003d[{2}], EXPR$0\u003d[MIN($1)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\n1500a1499,1500\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n1514,1517c1514,1515\n\u003c EnumerableAggregate(group\u003d[{}], C\u003d[COUNT()], S\u003d[SUM($2)])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e EnumerableAggregate(group\u003d[{}], C\u003d[COUNT()], S\u003d[SUM($1)])\n\u003e   EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\n1519a1518,1519\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n1537,1540c1537,1538\n\u003c   EnumerableAggregate(group\u003d[{3}], C\u003d[COUNT()], S\u003d[SUM($2)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableAggregate(group\u003d[{2}], C\u003d[COUNT()], S\u003d[SUM($1)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\n1542a1541,1542\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n1565,1568c1565,1566\n\u003c   EnumerableAggregate(group\u003d[{0, 2}], C\u003d[COUNT()], S\u003d[SUM($3)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $4)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableAggregate(group\u003d[{1, 4}], C\u003d[COUNT()], S\u003d[SUM($2)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($3, $4)], joinType\u003d[inner])\n1570a1569,1570\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n1589,1592c1589,1590\n\u003c   EnumerableAggregate(group\u003d[{2}], C\u003d[COUNT()], S\u003d[SUM($3)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $4)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableAggregate(group\u003d[{1}], C\u003d[COUNT()], S\u003d[SUM($2)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($3, $4)], joinType\u003d[inner])\n1594a1593,1594\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n1617,1620c1617,1618\n\u003c   EnumerableAggregate(group\u003d[{0, 2}], C\u003d[COUNT()], S\u003d[SUM($3)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $4)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableAggregate(group\u003d[{1, 4}], C\u003d[COUNT()], S\u003d[SUM($2)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($3, $4)], joinType\u003d[inner])\n1622a1621,1622\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n1648,1651c1648,1649\n\u003c   EnumerableAggregate(group\u003d[{2}], C\u003d[COUNT()], S\u003d[SUM($2)])\n\u003c     EnumerableJoin(condition\u003d[\u003d($0, $3)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c         EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e   EnumerableAggregate(group\u003d[{1}], C\u003d[COUNT()], S\u003d[SUM($1)])\n\u003e     EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\n1653a1652,1653\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n1787,1790c1787,1788\n\u003c EnumerableCalc(expr#0..2\u003d[{inputs}], EMPNO\u003d[$t1], DEPTNO\u003d[$t0])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t2])\n\u003e   EnumerableJoin(condition\u003d[\u003d($1, $2)], joinType\u003d[inner])\n1792a1791,1792\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Files differ: /root/workspace/apache/calcite/380148861/core/target/surefire/sql/join.iq /root/workspace/apache/calcite/380148861/core/target/test-classes/sql/join.iq\n125,130c125,131\n\u003c EnumerableAggregate(group\u003d[{0, 2}])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003c     EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003c       EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e EnumerableCalc(expr#0..1\u003d[{inputs}], DEPTNO0\u003d[$t1], DEPTNO\u003d[$t0])\n\u003e   EnumerableAggregate(group\u003d[{1, 2}])\n\u003e     EnumerableJoin(condition\u003d[\u003d($1, $2)], joinType\u003d[inner])\n\u003e       EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003e         EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e       EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n145,148c146,147\n\u003c EnumerableAggregate(group\u003d[{0}])\n\u003c   EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e EnumerableAggregate(group\u003d[{2}])\n\u003e   EnumerableJoin(condition\u003d[\u003d($1, $2)], joinType\u003d[inner])\n150a150,151\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], DEPTNO\u003d[$t0])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n198,208c199,208\n\u003c EnumerableCalc(expr#0..1\u003d[{inputs}], DEPTNO\u003d[$t1], ENAME\u003d[$t0])\n\u003c   EnumerableAggregate(group\u003d[{1, 3}])\n\u003c     EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[inner])\n\u003c       EnumerableCalc(expr#0..7\u003d[{inputs}], expr#8\u003d[10], expr#9\u003d[+($t7, $t8)], proj#0..1\u003d[{exprs}], $f8\u003d[$t9])\n\u003c         EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003c       EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[+($t1, $t3)], expr#5\u003d[CAST($t4):INTEGER], DEPTNO\u003d[$t1], $f16\u003d[$t5])\n\u003c         EnumerableJoin(condition\u003d[\u003d($1, $3)], joinType\u003d[inner])\n\u003c           EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003c             EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003c           EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003c             EnumerableTableScan(table\u003d[[scott, EMP]])\n---\n\u003e EnumerableAggregate(group\u003d[{0, 3}])\n\u003e   EnumerableJoin(condition\u003d[\u003d($1, $4)], joinType\u003d[inner])\n\u003e     EnumerableCalc(expr#0..3\u003d[{inputs}], expr#4\u003d[+($t1, $t3)], expr#5\u003d[CAST($t4):INTEGER], DEPTNO\u003d[$t1], $f16\u003d[$t5])\n\u003e       EnumerableJoin(condition\u003d[\u003d($1, $3)], joinType\u003d[inner])\n\u003e         EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003e           EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e         EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], DEPTNO\u003d[$t7])\n\u003e           EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e     EnumerableCalc(expr#0..7\u003d[{inputs}], expr#8\u003d[10], expr#9\u003d[+($t7, $t8)], proj#0..1\u003d[{exprs}], $f8\u003d[$t9])\n\u003e       EnumerableTableScan(table\u003d[[scott, EMP]])\n233,236c233,234\n\u003c EnumerableCalc(expr#0..4\u003d[{inputs}], DEPTNO\u003d[$t3], DEPTNO0\u003d[$t0])\n\u003c   EnumerableJoin(condition\u003d[\u003d($1, $4)], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[2], expr#4\u003d[*($t0, $t3)], DEPTNO\u003d[$t0], $f1\u003d[$t4])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e EnumerableCalc(expr#0..4\u003d[{inputs}], DEPTNO\u003d[$t1], DEPTNO0\u003d[$t3])\n\u003e   EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[inner])\n238a237,238\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[2], expr#4\u003d[*($t0, $t3)], DEPTNO\u003d[$t0], $f1\u003d[$t4])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Files differ: /root/workspace/apache/calcite/380148861/core/target/surefire/sql/sub-query.iq /root/workspace/apache/calcite/380148861/core/target/test-classes/sql/sub-query.iq\n601,604c601,602\n\u003c EnumerableCalc(expr#0..4\u003d[{inputs}], SAL\u003d[$t4])\n\u003c   EnumerableJoin(condition\u003d[AND(\u003d($1, $3), \u003d($0, $2))], joinType\u003d[inner])\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[CAST($t1):VARCHAR(14) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], expr#4\u003d[\u003d($t3, $t1)], proj#0..1\u003d[{exprs}], $condition\u003d[$t4])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e EnumerableCalc(expr#0..4\u003d[{inputs}], SAL\u003d[$t2])\n\u003e   EnumerableJoin(condition\u003d[AND(\u003d($1, $4), \u003d($0, $3))], joinType\u003d[inner])\n606a605,606\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[CAST($t1):VARCHAR(14) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\"], expr#4\u003d[\u003d($t3, $t1)], proj#0..1\u003d[{exprs}], $condition\u003d[$t4])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Files differ: /root/workspace/apache/calcite/380148861/core/target/surefire/sql/some.iq /root/workspace/apache/calcite/380148861/core/target/test-classes/sql/some.iq\n111c111\n\u003c EnumerableCalc(expr#0..10\u003d[{inputs}], expr#11\u003d[0], expr#12\u003d[\u003d($t1, $t11)], expr#13\u003d[false], expr#14\u003d[\u003c\u003d($t8, $t0)], expr#15\u003d[IS TRUE($t14)], expr#16\u003d[true], expr#17\u003d[\u003e($t1, $t2)], expr#18\u003d[null], expr#19\u003d[CASE($t12, $t13, $t15, $t16, $t17, $t18, $t14)], expr#20\u003d[NOT($t19)], EMPNO\u003d[$t3], ENAME\u003d[$t4], JOB\u003d[$t5], MGR\u003d[$t6], HIREDATE\u003d[$t7], SAL\u003d[$t8], COMM\u003d[$t9], DEPTNO\u003d[$t10], X\u003d[$t20])\n---\n\u003e EnumerableCalc(expr#0..10\u003d[{inputs}], expr#11\u003d[0], expr#12\u003d[\u003d($t9, $t11)], expr#13\u003d[false], expr#14\u003d[\u003c\u003d($t5, $t8)], expr#15\u003d[IS TRUE($t14)], expr#16\u003d[true], expr#17\u003d[\u003e($t9, $t10)], expr#18\u003d[null], expr#19\u003d[CASE($t12, $t13, $t15, $t16, $t17, $t18, $t14)], expr#20\u003d[NOT($t19)], proj#0..7\u003d[{exprs}], X\u003d[$t20])\n112a113\n\u003e     EnumerableTableScan(table\u003d[[scott, EMP]])\n115d115\n\u003c     EnumerableTableScan(table\u003d[[scott, EMP]])\n",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 1
    }
  ]
}