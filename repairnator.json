{
  "totalNumberSkippingTests": 1,
  "bugType": "only_fail",
  "totalNumberErroringTests": 80,
  "repo": "lukas-krecan/JsonUnit",
  "bugCommit": "https://github.com/lukas-krecan/JsonUnit/commit/095bbc417d4c",
  "failingModule": "/root/workspace/lukas-krecan/JsonUnit/266938952/tests/test-jsonp",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 35,
  "error-types": [
    "java.lang.UnsupportedOperationException",
    "java.lang.IndexOutOfBoundsException",
    "java.lang.AssertionError",
    "javax.json.stream.JsonParsingException",
    "java.lang.ClassCastException",
    "java.lang.Exception",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1942,
  "failing-test-cases": [
    {
      "className": "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest",
      "failingMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#stringValueShouldMatch",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyNumberShouldFailOnString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyBooleanShouldAcceptTrue",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyBooleanShouldFailOnNull",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyNumberShouldAcceptAnInt",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#isStringEqualToShouldPass",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyNumberShouldFailOnObject",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyBooleanShouldFailOnString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#stringValueShouldFailIfDoesNotMatch",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyStringShouldFailOnBoolean",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIgnore",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyStringShouldFailOnNull",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testEqualsToNull",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyNumberShouldAcceptAFloat",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testOkNull",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIgnoreDifferent",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyStringShouldFailOnObject",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#ifMatcherDoesNotMatchReportDifference",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyBooleanShouldFailOnObject",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#nullValueShouldFailIfDoesNotMatch",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyNumberShouldFailOnNull"
      ],
      "erroringMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#negativeArrayIndexShouldCountBackwardsAndReportFailure",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertToleranceFailure",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testOkNumberInString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertNode",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIssue3",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAcceptEscapedPath",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertTolerance",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertDifferentType",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertPathArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyStringShouldAcceptAString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertToleranceDifferentOrder",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAcceptEscapedPathWithTwoDots",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertDifferentTypeInt",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#negativeArrayIndexShouldCountBackwards",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#negativeArrayIndexOutOfBounds",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAcceptEscapedPathAndShowCorrectErrorMessage",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testLongPaths",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testEqualsToArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIssue3Original",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testEqualsToBoolean",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAllowUnquotedKeysAndCommentInExpectedValue",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIssue3SpaceStrings",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertPath",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#positiveArrayIndexOutOfBounds",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#objectShouldMatch",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertPathArrayOk",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#objectMatcherShouldFailIfNotFound",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertNodeInExpectOnly",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#equalsShouldFailOnStringAndANumber",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testNotEqualsToToArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testMoreNodes",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testOkNumber",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testEqualsToDoubleArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAllowWeirdCharsInArrayPattern",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#arrayContainsShouldMatch",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testOkFloat",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIssue3NoSpace",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testDeprecation"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"${json-unit.any-number}\"\u0027, got \u00271\u0027. ",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a boolean], got \u0027{\"a\":1}\u0027. \u003e but was:\u003c...de \"test\". Expected [\u0027\"${json-unit.any-boolean}\"\u0027], got \u0027{\"a\":1}\u0027. \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Node \"test\" is not equal to \"1\".",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a boolean, got \u0027\"true\"\u0027]. \u003e but was:\u003c...de \"test\". Expected [\"\"${json-unit.any-boolean}\"\", got \"\"true\"\"]. \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a string], got \u0027null\u0027. \u003e but was:\u003c...de \"test\". Expected [\u0027\"${json-unit.any-string}\"\u0027], got \u0027null\u0027. \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"${json-unit.any-boolean}\"\u0027, got \u0027true\u0027. ",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 47 at (line no\u003d1, column no\u003d2, offset\u003d1)",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 101 at (line no\u003d1, column no\u003d3, offset\u003d2), expecting \u0027r\u0027",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ull\u003e      but: was \"[one]\"\u003e but was:\u003c...ull\u003e      but: was \"[\\\"one\\\"]\"\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"${json-unit.any-number}\"\u0027, got \u00271.1\u0027. ",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"##IGNORE##\"\u0027, got \u00271\u0027. ",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a boolean], got \u0027null\u0027. \u003e but was:\u003c...de \"test\". Expected [\u0027\"${json-unit.any-boolean}\"\u0027], got \u0027null\u0027. \u003e",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Node \"test\" does not match. Expected: \"one\"      but: was \"\\\"one\\\"\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027{}\u0027, got \u0027null\u0027. ",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a string], got \u0027{\"a\":1}\u0027. \u003e but was:\u003c...de \"test\". Expected [\u0027\"${json-unit.any-string}\"\u0027], got \u0027{\"a\":1}\u0027. \u003e",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a number], got \u0027{\"a\":1}\u0027. \u003e but was:\u003c...de \"test\". Expected [\u0027\"${json-unit.any-number}\"\u0027], got \u0027{\"a\":1}\u0027. \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a number, got \u0027\"one\"\u0027]. \u003e but was:\u003c...de \"test\". Expected [\"\"${json-unit.any-number}\"\", got \"\"one\"\"]. \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d10, offset\u003d9). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d9, offset\u003d8). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"${json-unit.ignore}\"\u0027, got \u00271\u0027. ",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d10, offset\u003d9). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027{}\u0027, got \u0027null\u0027. ",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ents are different: [Matcher \"positive\" does not match value -1 in node \"test\". \u003c-1\u003e was less than \u003c0\u003e] \u003e but was:\u003c...ents are different: [Different value found in node \"test\". Expected \u0027\"${json-unit.matches:positive}\"\u0027, got \u0027-1\u0027.] \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a string], got \u0027true\u0027. \u003e but was:\u003c...de \"test\". Expected [\u0027\"${json-unit.any-string}\"\u0027], got \u0027true\u0027. \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cjava.lang.UnsupportedOperationException\u003e",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...de \"test\". Expected [a number], got \u0027null\u0027. \u003e but was:\u003c...de \"test\". Expected [\u0027\"${json-unit.any-number}\"\u0027], got \u0027null\u0027. \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...two\"      but: was \"[one]\"\u003e but was:\u003c...two\"      but: was \"[\\\"one\\\"]\"\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 21,
      "nbErrors": 39
    },
    {
      "className": "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest",
      "failingMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#matcherShouldMatch",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testIgnoreObjectDifferentPlaceholder",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#matcherParameterShouldBeIgnored",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#failIfMatcherNotFound",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#strictStructureEqualsShouldFailOnNull",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testRegex",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testIgnoreOneElement",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#regexShouldFail",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#structureEqualsShouldPassOnNull",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testIgnoreArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testIgnoreObject",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testIgnoreObjectErrorInSibling",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#ifMatcherDoesNotMatchReportDifference"
      ],
      "erroringMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testNumberAndString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOkFloat",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEqualsNodeFail",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testSimpleDifferent",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#assertPartNotEqualsShouldPass",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testComparisonWhenOverTolerance",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertJsonNodePresentInArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOk",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOkNumber",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#shouldFailIfQuotationMarksMissingOnActualKeys",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#shouldIgnoreValuesWhenToleranceSet",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEqualsNode",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#parametrizedMatcherShouldFail",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEqualsNodeIgnore",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOkDouble",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEmptyValues",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#shouldParseExpectedValueLeniently",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#parametrizedMatcherShouldMatch",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#missingParameterShouldResultInEmptyString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testNotEqualWhenToleranceNotSet",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testSimpleIgnore",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testComparisonWhenWithinToleranceNegative",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOkReaders",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPart",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testSimple",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#assertPartNotEqualsShouldFailWithCorrectMessage",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testInvalidJsonActual",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartArrayOk",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOkString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartNonexisting",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEqualsNodeStringFail"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"@IGNORE\"\u0027, got \u0027{\"object\":{\"another\":1}}\u0027. ",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"${json-unit.matches:positive}param\"\u0027, got \u00271\u0027. ",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 101 at (line no\u003d1, column no\u003d3, offset\u003d2), expecting \u0027r\u0027",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \"\"${json-unit.regex}[A-Z]+\"\", got \"\"ABCD\"\". ",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"${json-unit.matches:positive}\"\u0027, got \u00271\u0027. ",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c... Expected 1, got 2. []\u003e but was:\u003c... Expected 1, got 2. [Different value found in node \"test.object\". Expected \u0027\"${json-unit.ignore}\"\u0027, got \u0027{\"another\":1}\u0027. ]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d21, offset\u003d20). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003cjavax.json.stream.JsonParsingException\u003e",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ents are different: [Matcher \"unknown\" not found]. \u003e but was:\u003c...ents are different: [Different value found in node \"test\". Expected \u0027\"${json-unit.matches:unknown}\"\u0027, got \u0027-1\u0027]. \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d2, offset\u003d1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...est].  Extra: \"foo\" []\u003e but was:\u003c...est].  Extra: \"foo\" [Different value found in node \"test\". Expected \u0027\"${json-unit.ignore}\"\u0027, got \u00271\u0027. ]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.NumberFormatException\u003e but was\u003cjavax.json.stream.JsonParsingException\u003e",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 3, Size: 2",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 101 at (line no\u003d1, column no\u003d3, offset\u003d2), expecting \u0027r\u0027",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"${json-unit.ignore}\"\u0027, got \u0027[1,2,3]\u0027. ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027\"${json-unit.ignore}\"\u0027, got \u0027{\"object\":{\"another\":1}}\u0027. ",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...und in node \"test\". [Pattern \"[A-Z]+\" did not match \"123]\". \u003e but was:\u003c...und in node \"test\". [Expected \"\"${json-unit.regex}[A-Z]+\"\", got \"\"123\"]\". \u003e",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different keys found in node \"\". Expected [test], got []. Missing: \"test\"  ",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 47 at (line no\u003d1, column no\u003d2, offset\u003d1)",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ents are different: [Matcher \"positive\" does not match value -1 in node \"test\". \u003c-1\u003e was less than \u003c0\u003e] \u003e but was:\u003c...ents are different: [Different value found in node \"test\". Expected \u0027\"${json-unit.matches:positive}\"\u0027, got \u0027-1\u0027.] \u003e",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ifferent: Different [value found in node \"\". Expected \u0027{\"test\":3}\u0027, got \u0027null\u0027.] \u003e but was:\u003c...ifferent: Different [keys found in node \"\". Expected [test], got []. Missing: \"test\" ] \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003cjavax.json.stream.JsonParsingException\u003e",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        }
      ],
      "nbFailures": 13,
      "nbErrors": 32
    },
    {
      "className": "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest",
      "failingMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#ifMatcherDoesNotMatchReportDifference"
      ],
      "erroringMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testGenericsInt",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testDifferentPartValue",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testGenericsIntAndString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testJsonNode",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testEquals",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testPresent",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#shouldNotFailOnEmptyInput",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testAssertDifferentTypeInt",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testGenericsStringInference"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "org.glassfish.json.JsonNumberImpl$JsonIntNumber cannot be cast to javax.json.JsonObject",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ents are different: [Matcher \"positive\" does not match value -1 in node \"test\". \u003c-1\u003e was less than \u003c0\u003e] \u003e but was:\u003c...ents are different: [Different value found in node \"test\". Expected \u0027\"${json-unit.matches:positive}\"\u0027, got \u0027-1\u0027.] \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 9
    }
  ]
}