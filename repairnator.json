{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 19,
  "repo": "INRIA/spoon",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 4,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "ResolveDependency": 20,
      "BuildProject": 26,
      "NPERepair": 7,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 5,
      "CloneRepository": 6,
      "NopolRepair": 229,
      "CheckoutPatchedBuild": 0,
      "TestProject": 430,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 8,
      "AstorRepair": 191,
      "CommitPatch": 9
    },
    "FailureNames": [
      "spoon.SpoonException",
      "java.lang.AssertionError",
      "java.lang.NullPointerException",
      "org.junit.ComparisonFailure"
    ],
    "NbFailingTests": 24,
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/df2e2874d0b23519abb44d34672f09d456905ae3",
    "ReproductionDate": "Apr 12, 2018 10:02:28 PM",
    "BuggyBuildId": 365786055,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/365786055",
    "BuggyBuildDate": "Apr 12, 2018 10:02:11 PM",
    "BugCommit": "df2e2874d0b23519abb44d34672f09d456905ae3",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 1417,
    "NbLibraries": 14,
    "NbFileApp": 1100,
    "NbFileTests": 1324,
    "NbCPU": 32,
    "FreeMemory": 3245446368,
    "TotalMemory": 6147276800,
    "AngelicValuesByTest": {
      "spoon/test/annotation/AnnotationTest": 0,
      "spoon/test/template/TemplateEnumAccessTest": 0,
      "spoon/processing/ProcessingTest": 0,
      "spoon/test/prettyprinter/PrintChangesTest": 0,
      "spoon/test/compilationunit/TestCompilationUnit": 0,
      "spoon/test/pkg/PackageTest": 0,
      "spoon/test/template/TemplateReplaceReturnTest": 0,
      "spoon/test/template/TemplateTest": 0,
      "spoon/MavenLauncherTest": 0,
      "spoon/test/main/MainTest": 0,
      "spoon/test/architecture/SpoonArchitectureEnforcerTest": 0,
      "spoon/test/prettyprinter/PrinterTest": 0,
      "spoon/test/annotation/AnnotationValuesTest": 0,
      "spoon/test/prettyprinter/DefaultPrettyPrinterTest": 0,
      "spoon/test/api/APITest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 496637680,
      "ComputeClasspath": 558751856,
      "ComputeTestDir": 479769712,
      "ResolveDependency": 650439232,
      "BuildProject": 601240672,
      "NPERepair": 560478792,
      "ComputeSourceDir": 558751856,
      "InitRepoToPush": 641676648,
      "CloneRepository": 604499192,
      "NopolRepair": 3423086688,
      "CheckoutPatchedBuild": 3245446368,
      "TestProject": 566957192,
      "GatherTestInformation": 542830480,
      "PushIncriminatedBuild": 580627128,
      "AstorRepair": 499945288,
      "CommitPatch": 3245446368
    }
  },
  "failingModule": "/root/workspace/INRIA/spoon/365786055",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 5,
  "error-types": [
    "spoon.SpoonException",
    "java.lang.AssertionError",
    "java.lang.NullPointerException",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1417,
  "failing-test-cases": [
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testSpecPackage"
      ],
      "erroringMethods": [
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testFactorySubFactory",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testGoodTestClassNames"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "you have created a new package or removed an existing one, please declare it explicitly in SpoonArchitectureEnforcerTest#testSpecPackage\n\nDetails: Package spoon.reflect.visitor.printer.change presents in computed but not expected set.",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.template.TemplateEnumAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateEnumAccessTest#testEnumAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "spoon.MavenLauncherTest#spoonMavenLauncherTest",
        "spoon.MavenLauncherTest#mavenLauncherTestMultiModulesAndVariables"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#printClassCreatedWithSpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.processing.ProcessingTest#testSpoonTagger"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.annotation.AnnotationValuesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationValuesTest#testValuesOnJava7Annotation",
        "spoon.test.annotation.AnnotationValuesTest#testValuesOnJava8Annotation"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.template.TemplateReplaceReturnTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateReplaceReturnTest#testNoReturnReplaceTemplate",
        "spoon.test.template.TemplateReplaceReturnTest#testReturnReplaceTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilationunit.TestCompilationUnit#testGetUnitTypeWorksWithDeclaredPackage",
        "spoon.test.compilationunit.TestCompilationUnit#testNewlyCreatedCUWouldGetAPartialPosition"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.api.APITest#testOutputDestinationHandlerWithCUFactory"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.PrintChangesTest",
      "failingMethods": [
        "spoon.test.prettyprinter.PrintChangesTest#testPrintUnchaged",
        "spoon.test.prettyprinter.PrintChangesTest#testPrintChanged"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inter.testclasses;\n\n[import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? ]\u003e but was:\u003c...inter.testclasses;\n\n[\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inter.testclasses;\n\n[import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? ]\u003e but was:\u003c...inter.testclasses;\n\n[\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String modified \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationTest#testAnnotatedElementTypes",
        "spoon.test.annotation.AnnotationTest#testAbstractAllAnnotationProcessorWithGlobalAnnotation"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateTest#substituteTypeAccessReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest#testTest",
        "spoon.test.main.MainTest#testSourcePositionTreeIsCorrectlyOrdered"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The SourcePosition of elements are not consistent\nparentFragment: |1789, 1793|null|\notherFragment: |1783, 1787|File|",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.prettyprinter.PrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.PrinterTest#testPrinterTokenListener"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.pkg.PackageTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.pkg.PackageTest#testPackage"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}