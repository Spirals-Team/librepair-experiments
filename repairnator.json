{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 503,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/392718178",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 165,
  "error-types": [
    "java.lang.IndexOutOfBoundsException",
    "spoon.SpoonException",
    "java.lang.AssertionError",
    "java.lang.RuntimeException",
    "java.util.NoSuchElementException",
    "java.lang.NullPointerException",
    "java.lang.Exception",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1378,
  "failing-test-cases": [
    {
      "className": "spoon.test.modifiers.TestModifiers",
      "failingMethods": [],
      "erroringMethods": [
        "testGetModifiersHelpers"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.staticFieldAccess.StaticAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testReferences"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.field.FieldTest",
      "failingMethods": [
        "testFieldImplicitTarget"
      ],
      "erroringMethods": [
        "testGetDefaultExpression",
        "testAddFieldsAtTop"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.casts.CastTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCast2",
        "testCast1",
        "testTypeAnnotationOnCast",
        "testCase4",
        "testCast3"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.template.TemplateClassAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testClassAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.ClassAccessTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testShadowModelEqualsNormalModel",
        "testSuperOfActualTypeArgumentsOfReturnTypeOfMethod"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Spoon Factory model is missing implementation package spoon.support.reflect.declaration",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.model.BlockTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIterationStatements",
        "testAddEmptyBlock"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.ctBlock.TestCtBlock",
      "failingMethods": [
        "testAddStatementInBlock"
      ],
      "erroringMethods": [
        "testAddStatementInCase"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.annotation.AnnotationValuesTest",
      "failingMethods": [
        "testValuesOnJava7Annotation"
      ],
      "erroringMethods": [
        "testValuesOnJava8Annotation"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Annotation isn\u0027t present on the current element.",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.strings.StringLiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSnippetFullClass"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.constructorcallnewclass.NewClassTest",
      "failingMethods": [
        "testMoreThan9NewClass"
      ],
      "erroringMethods": [
        "testCtNewClassInNoClasspath",
        "testNewClassWithInterface",
        "testNewClassWithInterfaceGeneric",
        "testNewClassInEnumeration",
        "testNewClassWithObjectClass",
        "testNewClassInterfaceWithParameters"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 3, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c13\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 2, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.sourcePosition.SourcePositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "equalPositionsHaveSameHashcode",
        "testSourcePositionOfSecondPrimitiveType"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [
        "testInvalidateCacheOfCompiler",
        "testOverrideOutputWriter",
        "testPrintNotAllSourcesWithFilter",
        "testPrintNotAllSourcesWithNames",
        "testOutputDestinationHandler",
        "testPrintNotAllSourcesInCommandLine",
        "testAddProcessorMethodInSpoonAPI"
      ],
      "erroringMethods": [
        "testSetterInNodes"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c4\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 7,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFieldAccessNameSubstitutionInInnerClass",
        "testTemplateInheritance",
        "testTemplateWithWrongUsedStringParam",
        "testExtensionBlock",
        "testSimpleTemplate",
        "testAnotherFieldAccessNameSubstitution",
        "testTemplateInterfaces",
        "substituteTypeAccessReference",
        "testTemplateMatcher",
        "testFieldAccessNameSubstitution",
        "substituteStringLiteral",
        "testStatementTemplateRootSubstitution",
        "testTemplateC1",
        "testTemplateArrayAccess",
        "testSubstitutionInsertAllNtoN",
        "testCheckBoundTemplate",
        "testTemplateMatcherWithWholePackage",
        "testExpressionTemplate",
        "createTypeFromTemplate",
        "testTemplateMatcherMatchTwoSnippets",
        "testObjectIsNotParamTemplate",
        "testTemplateInvocationSubstitution",
        "testSubstituteInnerClass",
        "substituteSubString"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.ObjectIsNotParamTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.SubStringTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.FieldAccessOfInnerClassTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.SimpleTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.inheritance.InterfaceTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.TypeReferenceClassAccessTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.FieldAccessTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.constructors.TemplateWithFieldsAndMethods_Wrong is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.inheritance.SuperTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.bounds.CheckBoundTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.AnotherFieldAccessTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.constructors.TemplateWithConstructor is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.SubstituteLiteralTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.SubstituteRootTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Template parameter AnIfaceModel doesn\u0027t match to any local type",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.ArrayAccessTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.InvocationTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.InnerClassTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 24
    },
    {
      "className": "spoon.test.condition.ConditionalTest",
      "failingMethods": [
        "testBlockInConditionAndLoop"
      ],
      "erroringMethods": [
        "testConditionalWithAssignment",
        "testConditional",
        "testNoBlockInConditionAndLoop"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.factory.ConstructorFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCreate"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reflect.visitor.ReferenceQueryTest",
      "failingMethods": [],
      "erroringMethods": [
        "getAllTypeReferencesInEnum"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.interfaces.TestInterfaceWithoutSetup",
      "failingMethods": [],
      "erroringMethods": [
        "testModifierFromInterfaceFieldAndMethod"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.intercession.RemoveTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRemoveAllStatements"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.query_function.VariableReferencesTest",
      "failingMethods": [
        "testCheckModelConsistency",
        "testVariableScopeFunction"
      ],
      "erroringMethods": [
        "testPotentialVariableAccessFromStaticMethod"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Two variables [int field; in VariableReferencesModelTest#annonymous block,int field; in A#annonymous block] has same value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.PrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRuleCanBeBuild",
        "testPrinterTokenListener",
        "testPrintingOfOrphanFieldReference"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Printing of spoon.support.reflect.reference.CtTypeReferenceImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:prettyprinter\n CtClassImpl:PrinterTest\n CtMethodImpl:testPrinterTokenListener\n CtBlockImpl\n CtForEachImpl\n CtBlockImpl\n CtInvocationImpl\n CtNewClassImpl\n CtClassImpl:1\n CtFieldImpl:lastToken\n CtTypeReferenceImpl:String\nat position (/root/workspace/INRIA/spoon/392718178/src/test/java/spoon/test/prettyprinter/PrinterTest.java:261) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.reference.CtTypeReferenceImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:prettyprinter\n CtPackageImpl:testclasses\n CtClassImpl:Rule\n CtClassImpl:Phoneme\n CtFieldImpl:COMPARATOR\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:compare\n CtAnnotationImpl\n CtTypeReferenceImpl:Override\nfailed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.change.ChangeCollectorTest",
      "failingMethods": [
        "testChangeCollector"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[subPackage]\u003e but was:\u003c[]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceGenericTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMethodWithoutReferences",
        "testOneReferenceWithMethodNotGenericOutOfTheClass",
        "testReferencesBetweenMethods",
        "testExecutableReferences",
        "testMethodGenericWithoutReferences",
        "testOneReferenceWithGenericMethodOutOfTheClass",
        "testReferencesBetweenConstructorsInOtherClass",
        "testOneReferenceBetweenMethodsInSameClass",
        "testMultiReferenceWithGenericMethodOutOfTheClass",
        "testMultiReferencesBetweenMethodsWithoutGenericInSameClass",
        "testReferencesBetweenConstructors",
        "testMultiReferenceBetweenMethodsWithGenericInSameClass"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "spoon.test.template.TemplateInvocationSubstitutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSubstitutionByExpression",
        "testInvocationSubstitutionByStatement",
        "testInvocationSubstitutionByExpression"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.InvocationSubstitutionByExpressionTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.InvocationSubstitutionByStatementTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.SubstitutionByExpressionTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.targeted.TargetedExpressionTest",
      "failingMethods": [
        "testTargetOfFieldAccess",
        "testCastWriteWithGenerics",
        "testTargetsOfInv",
        "testTargetsOfFieldAccess",
        "testClassDeclaredInALambda",
        "testStaticTargetsOfInv",
        "testTargetsOfStaticFieldAccess"
      ],
      "erroringMethods": [
        "testCtThisAccess",
        "testCtSuperAccess",
        "testTargetsOfFieldAccessInInnerClass",
        "testStaticTargetsOfInvNoClasspath",
        "testStaticTargetsOfFieldAccessNoClasspath",
        "testTargetsOfFieldInAnonymousClass",
        "testTargetsOfInvInInnerClass",
        "testInitializeFieldAccessInNoclasspathMode",
        "testTargetsOfInvInAnonymousClass"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c8\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c10\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c10\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 7,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testWithImportFromItf",
        "testWithSimpleImportNoAutoimport",
        "testWithStaticInheritedImport",
        "testInternalImportWhenNoClasspath",
        "testWithNoImport",
        "testSimpleStaticImport",
        "testWithSimpleImport",
        "testWithStaticStarredImportFromInterface"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [
        "getConstructor",
        "testDefaultConstructorAreOk"
      ],
      "erroringMethods": [
        "testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "testNoClasspathWithSuperClassOfAClassInAnInterface",
        "testCloneAnonymousClassInvocationWithAutoimports",
        "testSpoonShouldInferImplicitPackageInNoClasspath",
        "testParentOfTheEnclosingClassOfStaticClass",
        "testCloneAnonymousClassInvocation"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: not null\n     but: was null",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected same:\u003cFoo(java.lang.String arg0, java.lang.Object ) {\n}\u003e was not:\u003cFoo(java.lang.String[][] arg0) {\n}\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.variable.AccessFullyQualifiedFieldTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStaticImportWithAutoImport",
        "testNoFQNAndStaticImport"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.reference.CtTypeReferenceImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:variable\n CtPackageImpl:testclasses\n CtClassImpl:MultiBurritos\n CtMethodImpl:bidule\n CtBlockImpl\n CtConstructorCallImpl\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:run\n CtBlockImpl\n CtAssignmentImpl\n CtFieldWriteImpl\n CtTypeAccessImpl\n CtTypeReferenceImpl:MultiBurritos\nfailed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.reference.CtTypeReferenceImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:variable\n CtPackageImpl:testclasses\n CtClassImpl:MultiBurritos\n CtMethodImpl:bidule\n CtBlockImpl\n CtConstructorCallImpl\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:run\n CtAnnotationImpl\n CtTypeReferenceImpl:Override\nfailed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.filters.FilterTest",
      "failingMethods": [
        "testOverriddenMethodsFromSubClassOfAbstractClass",
        "testInvalidQueryStepFailurePolicyIgnore",
        "testQueryInQuery",
        "testFunctionQueryStep",
        "testQueryBuilderWithFilterChain",
        "testOverriddenMethodFromSubClassOfInterface",
        "testClassCastExceptionOnForEach",
        "testInvalidQueryStep",
        "testReflectionBasedTypeFilter",
        "testSubInheritanceHierarchyResolver",
        "testOverridingMethodFromSubClassOfAbstractClass",
        "testOverridingMethodFromInterface",
        "testEarlyTerminatingQuery",
        "testgetTopDefinitions",
        "testLineFilter",
        "testFilterQueryStep",
        "testOverridingMethodFromSubClassOfInterface",
        "testOverridingMethodFromAbstractClass"
      ],
      "erroringMethods": [
        "testAnnotationFilter",
        "testReturnOrThrowFilter",
        "testParentFunction",
        "testFilters",
        "classCastExceptionIsNotThrown",
        "intersectionOfTwoFilters",
        "testFieldAccessFilter",
        "filteredElementsAreOfTheCorrectType",
        "unionOfTwoFilters",
        "testInvocationFilterWithExecutableInLibrary"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c3\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c5\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c5\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c6\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 18,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.template.TemplateArrayAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testArrayAccess",
        "testArrayLengthAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.SubstituteArrayAccessTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.SubstituteArrayLengthTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.control.ControlTest",
      "failingMethods": [],
      "erroringMethods": [
        "testModelBuildingFor",
        "testModelBuildingDoWhile"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "testBuildLiternal",
        "testCharLiteralInNoClasspath",
        "testEscapedString"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.reference.AnnotationFieldReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAnnotationFieldReference"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [],
      "erroringMethods": [
        "testGetUnitTypeWorksWithDeclaredType"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.declaration.UnknownDeclarationTest",
      "failingMethods": [
        "testUnknownCalls"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.interfaces.InterfaceTest",
      "failingMethods": [
        "testDefaultMethodInInterface"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "The default method must to be well printed expected:\u003c...me(java.lang.String [zoneString) {\n    return java.time.ZonedDateTime.of(getLocalDateTime(), spoon.test.interfaces.testclasses.InterfaceWithDefaultMethods.getZoneId(zoneString));]\n}\u003e but was:\u003c...me(java.lang.String [arg0) {]\n}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.reflect.declaration.CtTypeInformationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetAllMethodsReturnsTheRightNumber"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.signature.SignatureTest",
      "failingMethods": [],
      "erroringMethods": [
        "testLiteralSignature",
        "testNullSignature",
        "testMethodInvocationSignatureStaticFieldsVariables",
        "testArgumentNotNullForExecutableReference"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.arrays.ArraysTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInitializeWithNewArray",
        "testArrayReferences"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.enums.EnumsTest",
      "failingMethods": [
        "testAnnotationsOnEnum",
        "testNestedPrivateEnumValues",
        "testEnumWithoutField"
      ],
      "erroringMethods": [
        "testModelBuildingEnum"
      ],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cpublic []enum Burritos {\n    ...\u003e but was:\u003cpublic [final ]enum Burritos {\n    ...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[private]\u003e but was:\u003c[private, final]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cpublic []enum Foo {\n    @java...\u003e but was:\u003cpublic [final ]enum Foo {\n    @java...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [
        "testTypeParameterReferenceAsActualTypeArgument",
        "testWildCardonShadowClass",
        "testGenericInField",
        "testGenericsInQualifiedNameInConstructorCall"
      ],
      "erroringMethods": [
        "testModelBuildingSimilarSignatureMethods",
        "testNewClassGenerics",
        "testIsSameSignatureWithReferencedGenerics",
        "testMethodTypingContext",
        "testConstructorCallGenerics",
        "testGetExecDeclarationOfEnumSetOf",
        "testModelBuildingTree",
        "testCannotAdaptTypeOfNonTypeScope",
        "testInvocationGenerics",
        "testCtTypeReference_getSuperclass",
        "testGenericsOnLocalType",
        "testInstanceOfMapEntryGeneric",
        "testBugCommonCollection",
        "testName",
        "testDiamond2",
        "testModelBuildingGenericConstructor",
        "testGenericMethodCallWithExtend",
        "testClassTypingContext",
        "testTypeParameterDeclarer",
        "testIsSameSignatureWithMethodGenerics",
        "testMethodsWithGenericsWhoExtendsObject",
        "testAccessToGenerics",
        "testGenericsInConstructorCall",
        "testBugComparableComparator",
        "testDiamond1"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected same:\u003cpublic class ClassThatDefinesANewTypeArgument\u003cT\u003e {\n    public ClassThatDefinesANewTypeArgument() {\n    }\n\n    void foo(T arg0) {\n    }\n}\u003e was not:\u003cnull\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 4,
      "nbErrors": 25
    },
    {
      "className": "spoon.test.model.SwitchCaseTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIterationStatements",
        "testSwitchStatementOnAString"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.method_overriding.MethodOverriddingTest",
      "failingMethods": [
        "testInterfaceMethodsCanOverrideObjectMethods"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.method.MethodTest",
      "failingMethods": [
        "testGetAllMethodsAdaptingType",
        "testSearchMethodWithGeneric"
      ],
      "erroringMethods": [
        "testGetAllMethods"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ger\u003e void method1(T [t]) {\n}\u003e but was:\u003c...ger\u003e void method1(T [arg0]) {\n}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.variable.AccessTest",
      "failingMethods": [
        "testCanVisitFieldAccessAndSubClasses",
        "testStackedAssignments",
        "testCanVisitArrayAccessAndSubClasses",
        "testCanVisitVariableAccessAndSubClasses",
        "testRHS"
      ],
      "erroringMethods": [
        "testAccessToStringOnPostIncrement",
        "testVariableAccessInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.constructor.ConstructorTest",
      "failingMethods": [
        "callParamConstructor",
        "testImplicitConstructor",
        "testTransformationOnConstructorWithInsertBegin",
        "testTypeAnnotationWithConstructorsOnFormalType",
        "testTypeAnnotationOnExceptionDeclaredInConstructors",
        "testTransformationOnConstructorWithInsertBefore"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c{\n[    enclosingInstance.super();\n]}\u003e but was:\u003c{\n[]}\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 6,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.parent.ParentTest",
      "failingMethods": [
        "testHasParent"
      ],
      "erroringMethods": [
        "testParentOfCtPackageReference",
        "testParentOfCtVariableReference",
        "testParentOfGenericInTypeReference",
        "testParentSet",
        "testParentOfCtExecutableReference"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSrcMainJava",
        "metamodelPackageRule",
        "testFactorySubFactory"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtFieldReadImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:factory\n CtClassImpl:TypeFactory\n CtMethodImpl:get\n CtBlockImpl\n CtIfImpl\n CtBlockImpl\n CtIfImpl\n CtBlockImpl\n CtInvocationImpl\n CtNewClassImpl\n CtClassImpl:3\n CtMethodImpl:scan\n CtBlockImpl\n CtIfImpl\n CtBlockImpl\n CtInvocationImpl\n CtFieldReadImpl:factory\nat position (/root/workspace/INRIA/spoon/392718178/src/main/java/spoon/reflect/factory/TypeFactory.java:551) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateCloneVisitor",
        "testGenerateReplacementVisitor",
        "testGenerateCtBiScanner",
        "testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "File not found",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.testing.CtElementAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEqualityBetweenTwoDifferentCtElement"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cjava.lang.NullPointerException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.executable.ExecutableTest",
      "failingMethods": [
        "testGetReference",
        "testInfoInsideAnonymousExecutable"
      ],
      "erroringMethods": [
        "testBlockInExecutable"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003cpublic static int getInt1() {\n}\u003e but was:\u003cnull\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.replace.ReplaceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testReplaceExecutableReferenceByAnotherOne",
        "testReplaceStmtByListStatements",
        "testReplaceStatement",
        "testReplaceAllTypeRefenceWithGenerics",
        "testReplaceExpression",
        "testReplaceStmtByList",
        "testReplaceAParameterReferenceToFieldReference",
        "testReplaceReplace",
        "testReplaceAPackageReferenceByAnotherOne",
        "testReplaceSet",
        "testReplaceBlockTry",
        "testReplaceMethod",
        "testReplaceField",
        "testReplaceTwoMethods",
        "testReplaceStmtByListStatementsAndNull",
        "testReplaceBlock"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    },
    {
      "className": "spoon.test.type.TypeTest",
      "failingMethods": [
        "testTypeAccessForTypeAccessInInstanceOf",
        "testTypeAccessForDotClass",
        "testTypeMemberOrder",
        "testIntersectionTypeReferenceInGenericsAndCasts",
        "testTypeAccessOfArrayObjectInFullyQualifiedName",
        "testTypeReferenceInGenericsAndCasts",
        "testIntersectionTypeOnTopLevelType"
      ],
      "erroringMethods": [
        "testTypeAccessOnPrimitive",
        "testPolyTypBindingInTernaryExpression"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[\u003cinit\u003e, method1, field2, TypeMembersOrder, method4, field5, , nestedType6, field7, method8]\u003e but was:\u003c[\u003cinit\u003e, method1, method4, TypeMembersOrder, method8, field2, field5, field7, nestedType6]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...omparable\u003cNUMBER\u003e\u003e {[]}\u003e but was:\u003c...omparable\u003cNUMBER\u003e\u003e {[\n    public Mole() {\n    }\n]}\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 2
    },
    {
      "className": "spoon.reflect.ast.CloneTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCopyMethod"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.factory.TypeFactoryTest",
      "failingMethods": [
        "testGetClassInAnInterface",
        "testGetClassWithDollarAndNestedClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInsertEnd",
        "testEqualConstructor",
        "testInsertBegin",
        "testInsertIfIntercession",
        "testInsertAfter"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.fieldaccesses.FieldAccessTest",
      "failingMethods": [
        "testTypeDeclaredInAnonymousClass",
        "testFieldAccessWithoutAnyImport",
        "testFieldWriteWithPlusEqualsOperation",
        "testIncrementationOnAVarIsAUnaryOperator",
        "testTypeOfFieldAccess"
      ],
      "erroringMethods": [
        "testFieldAccessInLambda",
        "testFieldAccessAutoExplicit",
        "testFieldAccessInAnonymousClass",
        "testBCUBug20140402",
        "testFieldAccessDeclaredInADefaultClass",
        "testFieldAccessNoClasspath",
        "testBUG20160112",
        "testGetReference",
        "testFieldAccessOnUnknownType",
        "testTargetedAccessPosition",
        "testModelBuildingFieldAccesses"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...sses.Mole.Delicious [delicious]\u003e but was:\u003c...sses.Mole.Delicious [arg0]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 5,
      "nbErrors": 11
    },
    {
      "className": "spoon.test.delete.DeleteTest",
      "failingMethods": [
        "testDeleteAStatementInConstructor",
        "testDeleteAStatementInMethod",
        "testDeleteReturn"
      ],
      "erroringMethods": [
        "testDeleteACaseOfASwitch",
        "testDeleteChainOfAssignment",
        "testDeleteConditionInACondition",
        "testDeleteAStatementInAnonymousExecutable",
        "testDeleteStatementInCase",
        "testDeleteAStatementInStaticAnonymousExecutable"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.template.PatternTest",
      "failingMethods": [
        "testMatchOfMapAttribute",
        "testMatchOfAttribute",
        "testMatchOfMapKeySubstring",
        "testGenerateMethodWithSelfReferences",
        "testGenerateClassWithSelfReferences",
        "testMatchOfMapAttributeAndOtherAnnotations",
        "testMatchSample1",
        "testMatchInSet"
      ],
      "erroringMethods": [
        "testMatchForeachWithOuterSubstitution",
        "testPatternToString",
        "testMatchParameterValue",
        "testPatternParameters",
        "testMatchGreedyMultiValueMinCount2",
        "testPatternMatchOfMultipleElements",
        "testMatchParameterValueType",
        "testExtensionDecoupledSubstitutionVisitor",
        "testMatchParameterCondition",
        "testMatchReluctantMultivalueMinCount1",
        "testMatchPossesiveMultiValueUnlimited",
        "testMatchReluctantMultivalue",
        "testMatchPossesiveMultiValueMinCount2",
        "testMatchGreedyMultiValueUnlimited",
        "testMatchGreedyMultiValueMaxCountLimit",
        "testGenerateMultiValues",
        "testGenerateIfElse",
        "testMatchForeach",
        "testMatchReluctantMultivalueExactly2",
        "testMatchPossesiveMultiValueMinCount",
        "testMatchIfElse",
        "testMatchPossesiveMultiValueMaxCount4"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cm[atcher1]\u003e but was:\u003cm[2]\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c6\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[\u003cinit\u003e, local, sameType, sameTypeStatic, anotherMethod, someMethod, Local, foo]\u003e but was:\u003c[\u003cinit\u003e, foo, anotherMethod, someMethod, local, sameType, sameTypeStatic, Local]\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c6\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[matcher1]\u003e but was:\u003c[sample2]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c4\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "PatternBuilder has no CtElement to provide a Factory",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[Generated by spoon.test.template.testclasses.types.AClassWithMethodsAndRefs#foo(AClassWithMethodsAndRefs.java:30)]\u003e but was:\u003c[]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 8,
      "nbErrors": 22
    },
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFullyQualifiedException",
        "testExceptionJava7",
        "testModelBuildingInitializer",
        "testRethrowingExceptionsJava7",
        "testMultiTryCatchWithCustomExceptions",
        "testTryCatchVariableGetType",
        "testCatchOrder",
        "testTryWithResources",
        "testTryWithOneResource"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.parent.NullParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAssertNullExpression",
        "testReturnNullExpression",
        "testLocalVariableNullDefaultExpression",
        "testFieldNullDefaultExpression",
        "testForLoopNullChildren",
        "testIfNullBranches",
        "testTargetedAccessNullTarget",
        "testTargetedExpressionNullTarget"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [
        "testFullQualifiedNameImport",
        "testNotImportExecutableType",
        "testImportStarredPackageWithNonVisibleClass",
        "testSpoonWithImports",
        "testImportOfInvocationOfStaticMethod",
        "testNullable",
        "testAnotherMissingImport",
        "testImportOfInvocationOfPrivateClass"
      ],
      "erroringMethods": [
        "testImportOfAnInnerClassInAClassPackage",
        "testStaticMethodWithDifferentClassSameNameCollision",
        "testSortImportPutStaticImportAfterTypeImport",
        "testAccessToNestedClass",
        "testStaticImportForInvocationInNoClasspath",
        "testImportOfAnInnerClassInASuperClassAvailableInLibrary",
        "testNestedStaticPathWithTypedParameter",
        "testNestedAccessPathWithTypedParameterWithImports",
        "testStaticMethodWithDifferentClassSameNameJava3NoCollision",
        "testNewInnerClassDefinesInItsClassAndSuperClass",
        "testNestedAccessPathWithTypedParameter",
        "testAccessType",
        "testDeepNestedStaticPathWithTypedParameter",
        "testCanAccess",
        "testNestedStaticPathWithTypedParameterWithImports",
        "testStaticMethodWithDifferentClassSameNameJava7NoCollision",
        "testDeepNestedStaticPathWithTypedParameterWithImports",
        "testImportStaticAndFieldAccess",
        "testImportOfAnInnerClassInASuperClassPackageAutoImport",
        "testImportWithGenerics",
        "testSuperInheritanceHierarchyFunctionNoClasspath",
        "testImportOfAnInnerClassInASuperClassPackageFullQualified",
        "testImportStaticAndFieldAccessWithImport"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...lass A {\n    public [class ArrayList extends java.util.ArrayList {]}\n}\u003e but was:\u003c...lass A {\n    public [A() {\n    }\n\n    public class ArrayList extends java.util.ArrayList {\n        public ArrayList() {\n        }\n    ]}\n}\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected same:\u003cpublic void doSomething(externallib.SomeType\u003cjava.lang.String\u003e someType) {\n}\u003e was not:\u003cnull\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.reference.CtTypeReferenceImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:imports\n CtPackageImpl:testclasses\n CtClassImpl:StaticNoOrdered\n CtMethodImpl:testMachin\n CtBlockImpl\n CtLocalVariableImpl:test\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:annotationType\n CtAnnotationImpl\n CtTypeReferenceImpl:Override\nfailed",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 8,
      "nbErrors": 23
    },
    {
      "className": "spoon.test.snippets.SnippetTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIssue981",
        "testCompileSnippetSeveralTimes",
        "testCompileSnippetWithContext",
        "testCompileStatementWithReturn",
        "testSnippetFullClass"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRenameLocalVariableToSameName"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The target of refactoring is not defined",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.initializers.InitializerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testModelBuildingInitializer",
        "testModelBuildingStaticInitializer"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetAllExecutablesForInterfaces",
        "testPackageInNoClasspath",
        "testSubTypeAnonymous",
        "testIgnoreEnclosingClassInActualTypes",
        "testRecursiveTypeReference",
        "testConstructorCallInNoClasspath",
        "testArgumentOfAInvocationIsNotATypeAccess",
        "testGetTypeDeclaration",
        "testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics",
        "testInvocationWithFieldAccessInNoClasspath",
        "testAnnotationOnMethodWithPrimitiveReturnTypeInNoClasspath",
        "testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath",
        "doNotCloseLoader",
        "testTypeDeclarationWildcard",
        "loadReferencedClassFromClasspath",
        "testEqualityTypeReference",
        "testTypeReferenceSpecifiedInClassDeclarationInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 17
    },
    {
      "className": "spoon.test.loop.LoopTest",
      "failingMethods": [],
      "erroringMethods": [
        "testForeachShouldHaveAlwaysABlockInItsBody",
        "testAnnotationInForLoop"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "testThisInConstructorAfterATransformation",
        "testTransformedInstanceofAfterATransformation",
        "testThisInConstructor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtFieldReadImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:testclasses\n CtClassImpl:CtRenameLocalVariableRefactoringTestSubject\n CtMethodImpl:nestedClassMethodWithRefs\n CtBlockImpl\n CtInvocationImpl\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:accept\n CtBlockImpl\n CtTryImpl\n CtBlockImpl\n CtInvocationImpl\n CtBinaryOperatorImpl\n CtFieldReadImpl:var2\nat position (/root/workspace/INRIA/spoon/392718178/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:94) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtFieldReadImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:testclasses\n CtClassImpl:CtRenameLocalVariableRefactoringTestSubject\n CtMethodImpl:nestedClassMethodWithRefs\n CtBlockImpl\n CtInvocationImpl\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:accept\n CtBlockImpl\n CtTryImpl\n CtBlockImpl\n CtInvocationImpl\n CtBinaryOperatorImpl\n CtFieldReadImpl:var2\nat position (/root/workspace/INRIA/spoon/392718178/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:94) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtFieldReadImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:testclasses\n CtClassImpl:CtRenameLocalVariableRefactoringTestSubject\n CtMethodImpl:nestedClassMethodWithRefs\n CtBlockImpl\n CtInvocationImpl\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:accept\n CtBlockImpl\n CtTryImpl\n CtBlockImpl\n CtInvocationImpl\n CtBinaryOperatorImpl\n CtFieldReadImpl:var2\nat position (/root/workspace/INRIA/spoon/392718178/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:94) failed",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtFieldReadImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:test\n CtPackageImpl:refactoring\n CtPackageImpl:testclasses\n CtClassImpl:CtRenameLocalVariableRefactoringTestSubject\n CtMethodImpl:nestedClassMethodWithRefs\n CtBlockImpl\n CtInvocationImpl\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:accept\n CtBlockImpl\n CtTryImpl\n CtBlockImpl\n CtInvocationImpl\n CtBinaryOperatorImpl\n CtFieldReadImpl:var2\nat position (/root/workspace/INRIA/spoon/392718178/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:94) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.ctBodyHolder.CtBodyHolderTest",
      "failingMethods": [
        "testMethod",
        "testConstructor"
      ],
      "erroringMethods": [
        "testWhileWithBlock",
        "testForWithBlock",
        "testTryCatch",
        "testForWithStatement"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 3",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 2",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.annotation.AnnotationLoopTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAnnotationDeclaredInForInit"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateReplaceReturnTest",
      "failingMethods": [],
      "erroringMethods": [
        "testReturnReplaceTemplate",
        "testNoReturnReplaceTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.ReturnReplaceTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.ReturnReplaceTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [
        "testCreateRepeatableAnnotationWithArrays",
        "testRepeatSameAnnotationOnField",
        "testRepeatSameAnnotationOnClass",
        "testRepeatSameAnnotationOnMethod",
        "testAnnotationTypeAndFieldOnField",
        "testRepeatableAnnotationAreManagedWithArrays",
        "testRepeatSameAnnotationOnParameter",
        "testFieldAndMethodInAnnotation",
        "testRepeatSameAnnotationOnConstructor",
        "testUsageOfTypeAnnotationOnParameterInMethod",
        "testRepeatableAnnotationAreManaged"
      ],
      "erroringMethods": [
        "testModelBuildingAnnotationBoundUsage",
        "testAccessAnnotationValue",
        "testGetAnnotationOuter",
        "testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod",
        "testWritingAnnotParamArray",
        "testPersistenceProperty",
        "testUsageOfTypeAnnotationOnLocalVariableInMethod",
        "testUsageOfTypeAnnotationWithGenericTypesInStatements",
        "testCreateRepeatableAnnotation",
        "testRepeatSameAnnotationOnLocalVariable",
        "testUsageOfTypeAnnotationInNewInstance",
        "testUsageOfTypeAnnotationInExtendsImplementsOfAClass",
        "testReplaceAnnotationValue",
        "testAnnotationParameterTypes",
        "testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration",
        "testUsageOfTypeAnnotationInReturnTypeInMethod",
        "testAnnotationWithDefaultArrayValue",
        "testAnnotationIntrospection",
        "testModelBuildingAnnotationBound",
        "testUsageOfParametersInTypeAnnotation",
        "testAnnotatedElementTypes",
        "testInnerAnnotationsWithArray",
        "testDefaultValueInAnnotationsForAnnotationFields",
        "testUsageOfTypeAnnotationInCast"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Method must to have multi annotation of the same type expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Parameter must to have multi annotation of the same type expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[java.lang.String value \u003d \"\"];\u003e but was:\u003c[static final java.lang.String value];\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "cannot assign an array to a non-array annotation element",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Parameter type with a type annotation must have it in its model expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Constructor must to have multi annotation of the same type expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Class must to have multi annotation of the same type expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Field must to have multi annotation of the same type expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 11,
      "nbErrors": 24
    },
    {
      "className": "spoon.test.invocations.InvocationTest",
      "failingMethods": [
        "testIssue1753",
        "testTypeOfStaticInvocation"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.strings.StringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testModelBuildingInitializer"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.jar.JarTest",
      "failingMethods": [
        "testFile",
        "testResource"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.pkg.PackageTest",
      "failingMethods": [
        "testRenamePackageAndPrettyPrintWithProcessor",
        "testPrintPackageInfoWhenNothingInPackage"
      ],
      "erroringMethods": [
        "testAddAnnotationToPackage",
        "testPackage",
        "testGetFQNInNoClassPath"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.varargs.VarArgsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testModelBuildingInitializer"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.serializable.SourcePositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSourcePosition"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateEnumAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEnumAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The template spoon.test.template.testclasses.EnumAccessTemplate is not part of model. Add template sources to spoon template path.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.methodreference.MethodReferenceTest",
      "failingMethods": [
        "testReferenceBuilderWithComplexGenerics",
        "testGetGenericExecutableReference"
      ],
      "erroringMethods": [
        "testNoClasspathExecutableReferenceExpression",
        "testReferenceToAJavaUtilClassConstructor",
        "testReferenceToAnInstanceMethodOfMultiParticularObject",
        "testReferenceToAStaticMethod",
        "testReferenceToAClassParametrizedConstructor",
        "testReferenceToAConstructor",
        "testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType",
        "testReferenceToAnInstanceMethodOfAParticularObject",
        "testGetGenericMethodFromReference"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected same:\u003c\u003cU extends java.io.Reader\u003e void method(T arg0, U arg1) {\n}\u003e was not:\u003cnull\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected same:\u003cpublic \u003cELEMENT, STREAM extends java.util.stream.BaseStream\u003cELEMENT, STREAM\u003e\u003e java.util.List\u003cELEMENT\u003e assertThat(java.util.stream.BaseStream\u003c? extends ELEMENT, STREAM\u003e arg0) {\n}\u003e was not:\u003cnull\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.factory.AnnotationFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAnnotate"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.executable.ExecutableRefTest",
      "failingMethods": [
        "constructorTest",
        "methodTest",
        "testOverridingMethod"
      ],
      "erroringMethods": [
        "testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.ctCase.SwitchCaseTest",
      "failingMethods": [],
      "erroringMethods": [
        "insertBeforeStatementInSwitchCaseWithoutException",
        "insertAfterStatementInSwitchCaseWithoutException"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [
        "testCtModel",
        "testClassAccessCreatedFromFactories"
      ],
      "erroringMethods": [
        "testClone",
        "testFactoryOverriding"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c5\u003e but was:\u003c6\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.enums.EnumsTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEnumsFromInterface",
        "testEnumsType"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.constructorcallnewclass.ConstructorCallTest",
      "failingMethods": [],
      "erroringMethods": [
        "testConstructorCallStringWithoutParameters",
        "testConstructorCallObjectWithParameters",
        "testConstructorCallStringWithParameters",
        "testConstructorCallWithGenericArray",
        "testConstructorCallObjectWithoutParameters"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 4, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 2, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 3, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.comparison.EqualTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEqualsDetails",
        "testEqualsComment",
        "testEqualsActualTypeRef",
        "testEqualsMultitype"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.ctElement.MetadataTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMetadata"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: -1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.TopLevelTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTopLevelType"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.LinesTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPrettyPrinterWithLines"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.NoClasspathTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetStaticDependency",
        "test",
        "testInheritanceInNoClassPathWithClasses"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.ctType.CtTypeParameterTest",
      "failingMethods": [
        "testTypeErasure"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Missing paramI in spoon.test.ctType.testclasses.ErasureModelA(I,J extends C extends B extends java.lang.Exception,D extends java.util.List)",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRoleOnField",
        "testMetamodelWithoutSources"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Spoon Factory model is missing implementation package spoon.support.reflect.declaration",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.limits.utils.InternalTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStaticFinalFieldInAnonymousClass",
        "testInternalClasses"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.testing.CtPackageAssertTest",
      "failingMethods": [
        "testEqualityBetweenTwoCtPackageWithDifferentTypes"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception: java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.intercession.insertBefore.InsertMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInsertBeforeWithoutBrace",
        "testInsertAfterSwitchCase",
        "testInsertBefore",
        "insertBeforeAndUpdateParent",
        "testInsertAfterWithBrace",
        "testInsertAfterWithoutBrace",
        "testInsertBeforeSwitchCase",
        "testInsertBeforeWithBrace",
        "testInsertAfter"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.factory.FieldFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCreate",
        "testCreateFromSource"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.position.PositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPositionGeneric",
        "testPositionMethod",
        "testPositionField",
        "testEmptyModifiersOfMethod",
        "testPositionOfAnnonymousType",
        "defaultConstructorPositionTest",
        "testPositionParameterTypeReference",
        "testPositionAnnotation",
        "testPositionClass",
        "testPositionTryCatch",
        "testPositionAbstractMethod",
        "testPositionStatement",
        "testPositionMethodTypeParameter",
        "testArrayArgParameter",
        "testPositionInterface",
        "testPositionOfAnnonymousTypeByNewInterface",
        "testPositionClassWithComments"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 17
    },
    {
      "className": "spoon.test.model.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetDeclaredOrIheritedFieldByReflection",
        "testTypeInfoIsInterface",
        "testGetUsedTypesForTypeInRootPackage",
        "superclassTest",
        "testGetUsedTypes",
        "testGetAllExecutables",
        "testGetDeclaredOrIheritedFieldOnType",
        "testGetDeclaredOrIheritedFieldOnTypeRef"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.reference.CloneReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetDeclarationOfFieldAfterClone",
        "testGetDeclarationAfterClone"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.prettyprinter.QualifiedThisRefTest",
      "failingMethods": [
        "testQualifiedThisRef"
      ],
      "erroringMethods": [
        "testPrintCtFieldAccessWorkEvenWhenParentNotInitialized",
        "testCloneThisAccess"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [
        "testScan"
      ],
      "erroringMethods": [
        "testScannerCallsAllProperties",
        "testScannerContract"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3616\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtFieldReadImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:reflect\n CtPackageImpl:factory\n CtClassImpl:TypeFactory\n CtMethodImpl:get\n CtBlockImpl\n CtIfImpl\n CtBlockImpl\n CtIfImpl\n CtBlockImpl\n CtInvocationImpl\n CtNewClassImpl\n CtClassImpl:3\n CtMethodImpl:scan\n CtBlockImpl\n CtIfImpl\n CtBlockImpl\n CtInvocationImpl\n CtFieldReadImpl:factory\nat position (/root/workspace/INRIA/spoon/392718178/src/main/java/spoon/reflect/factory/TypeFactory.java:551) failed",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [
        "testAllMethodsSameSignatureFunction",
        "testExecutableReferenceFilter",
        "testSubInheritanceHierarchyFunction",
        "testCtParameterRemoveRefactoringValidationCheck"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The signature spoon.test.refactoring.parameter.testclasses.TypeA#method1(java.lang.Exception) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The spoon.test.refactoring.parameter.testclasses.TypeB not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.processing.ProcessingTest",
      "failingMethods": [
        "testProcessorWithGenericType",
        "testCallProcessorWithMultipleTypes"
      ],
      "erroringMethods": [
        "testInsertEnd",
        "testInsertBegin"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.reference.VariableAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testReferencesInInitExpression",
        "testDeclarationArray",
        "testSuperAccess",
        "testReferences",
        "testVariableAccessDeclarationInAnonymousClass",
        "testGetDeclarationAfterClone"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.secondaryclasses.ClassesTest",
      "failingMethods": [],
      "erroringMethods": [
        "testClassWithInternalPublicClassOrInterf",
        "testAnonymousClass",
        "testAnonymousClassInStaticField",
        "testTopLevel",
        "testIsAnonymousMethodInCtClass"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [
        "testPrintAMethodWithGeneric",
        "useFullyQualifiedNamesInCtElementImpl_toString",
        "autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent",
        "testPrintAMethodWithImports",
        "testPrintAClassWithImports"
      ],
      "erroringMethods": [
        "testTernaryParenthesesOnLocalVariable",
        "superInvocationWithEnclosingInstance",
        "printerCanPrintInvocationWithoutException",
        "importsFromMultipleTypesSupported"
      ],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...AClass {\n    public [List\u003c?\u003e aMethod() {\n        return new ArrayList\u003c\u003e();\n    }\n\n    public List\u003c? extends ArrayList\u003e aMethodWithGeneric() {\n        return new ArrayList\u003c\u003e();]\n    }\n}\u003e but was:\u003c...AClass {\n    public [AClass() {\n    }\n\n    public List\u003c?\u003e aMethod() {\n    }\n\n    public List\u003c? extends ArrayList\u003e aMethodWithGeneric() {]\n    }\n}\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...thodWithGeneric() {\n[    return new ArrayList\u003c\u003e();\n]}\u003e but was:\u003c...thodWithGeneric() {\n[]}\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "the toString method of CtElementImpl should not shorten type names as it has no context or import statements expected:\u003c...List\u003c?\u003e aMethod() {\n[    return new java.util.ArrayList\u003c\u003e();\n]}\u003e but was:\u003c...List\u003c?\u003e aMethod() {\n[]}\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...List\u003c?\u003e aMethod() {\n[    return new ArrayList\u003c\u003e();\n]}\u003e but was:\u003c...List\u003c?\u003e aMethod() {\n[]}\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "We use FQN for E1 expected:\u003c...SameNameAsLocal() {\n[    localField \u003d spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision.ENUM.E1.ordinal();\n]}\u003e but was:\u003c...SameNameAsLocal() {\n[]}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.visitor.AssignmentsEqualsTest",
      "failingMethods": [
        "testEquals"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [
        "testRemoveComment",
        "testBlockComment",
        "testCommentsInComment1And2",
        "testInLineComment",
        "testCombinedPackageInfoComment"
      ],
      "erroringMethods": [
        "testJavaDocCommentOnUnix",
        "testCommentsInResourcesWithWindowsEOL",
        "testJavaDocCommentOnMac",
        "testJavaDocEmptyCommentAndTag",
        "testJavadocShortAndLongComment",
        "testWildComments",
        "testDocumentationContract"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c6\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[/* comment1 */\n// comment2\n/**\n * Comment3\n */\n]@java.lang.Deprecate...\u003e but was:\u003c[]@java.lang.Deprecate...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c69\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c52\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 5,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testComputeImportsInClassWithSameName",
        "testImportOnSpoon",
        "testComputeImportsInClass",
        "testComputeMinimalImportsInClass",
        "testMultiCatchImport"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Printing of spoon.support.reflect.reference.CtTypeReferenceImpl on path \n CtPackageImpl:spoon\n CtClassImpl:Launcher\n CtFieldImpl:RESOURCES_FILE_FILTER\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:accept\n CtAnnotationImpl\n CtTypeReferenceImpl:Override\nfailed",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.ctType.CtTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testHasMethodInDirectMethod",
        "testIsSubTypeOfonTypeReferences",
        "testHasMethodNotHasMethod",
        "testIsSubTypeOfonTypeParameters",
        "testHasMethodInDefaultMethod",
        "testIsSubTypeOf",
        "testHasMethodInSuperClass",
        "testHasMethodOnNull"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.visibility.VisibilityTest",
      "failingMethods": [
        "testFullyQualifiedNameOfTypeReferenceWithGeneric",
        "testName"
      ],
      "erroringMethods": [
        "testMethodeWithNonAccessibleTypeArgument",
        "testInvocationVisibilityInFieldDeclaration"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.model.AnonymousExecutableTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStatements"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.path.PathTest",
      "failingMethods": [
        "testMultiPathFromString"
      ],
      "erroringMethods": [
        "testPathFromString",
        "testGetPathFromNonParent",
        "testBuilderMethod",
        "testRoles",
        "testBuilder",
        "testWildcards"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.util.NoSuchElementException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c3\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.serializable.SerializableTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSerialCtStatement",
        "testSerializationModelStreamer",
        "testSerialFile"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.eval.EvalTest",
      "failingMethods": [],
      "erroringMethods": [
        "testDoNotSimplify",
        "testArrayLength",
        "testStringConcatenation",
        "testVisitorPartialEvaluator_if",
        "testVisitorPartialEvaluator_binary",
        "testDoNotSimplifyToExpressionWhenStatementIsExpected",
        "testDoNotSimplifyCasts",
        "testVisitorPartialEvaluatorScanner",
        "testTryCatchAndStatement"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceTest",
      "failingMethods": [
        "testCallMethodOfClassNotPresent"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.parameters.ParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetParameterReferenceInLambdaNoClasspath",
        "testParameterInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Printing of spoon.support.reflect.code.CtFieldReadImpl on path \n CtPackageImpl:spoon\n CtPackageImpl:experimental\n CtPackageImpl:modelobs\n CtClassImpl:ChangeCollector\n CtMethodImpl:getChanges\n CtBlockImpl\n CtInvocationImpl\n CtNewClassImpl\n CtClassImpl:1\n CtMethodImpl:enter\n CtBlockImpl\n CtIfImpl\n CtBinaryOperatorImpl\n CtFieldReadImpl:depth\nat position (/root/workspace/INRIA/spoon/392718178/src/main/java/spoon/experimental/modelobs/ChangeCollector.java:94) failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.visitor.VisitorTest",
      "failingMethods": [
        "testRecursiveDescent"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.lambda.LambdaTest",
      "failingMethods": [
        "testInterfaceWithObjectMethods",
        "testGetOverriddenMethodWithFunction",
        "testLambdaFilter"
      ],
      "erroringMethods": [
        "testLambdaExpressionWithExpressionBodyAndWithMultiParametersTyped",
        "testLambdaExpressionWithExpressionBodyAndWithMultiParameters",
        "testLambdaExpressionWithExpressionBodyAndWithParameterTyped",
        "testLambdaWithPrimitiveParameter",
        "testTypeParameterOfLambdaWithoutType",
        "testTypeParameterWithImplicitArrayType",
        "testEqualsLambdaParameterRef",
        "testLambdaExpressionWithStatementBodyAndWithoutParameters",
        "testLambdaExpressionWithExpressionBodyAndWithoutTypeForParameter",
        "testTypeParameterOfLambdaWithoutType2",
        "testLambdaMethod",
        "testLambdaExpressionInIfConditional",
        "testBuildExecutableReferenceFromLambda",
        "testLambdaExpressionWithExpressionBodyAndWithoutParameter",
        "testLambdaExpressionWithStatementBodyAndWithParameter"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 5, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 2, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 4, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 7, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "List should contain m but it is missing.",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 8, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 3, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 8, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 1, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 6, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 15
    },
    {
      "className": "spoon.testing.AbstractAssertTest",
      "failingMethods": [
        "testTransformationWithProcessorInstantiated",
        "testTransformationWithProcessorName",
        "testTransformationFromCtElementWithProcessor",
        "testTransformationWithProcessorClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "spoon.support.reflect.declaration.CtFieldImpl@6a and public int j; aren\u0027t equals.",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "spoon.testing.testclasses.Foo and spoon.testing.testclasses.Bar aren\u0027t equals.",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "spoon.testing.testclasses.Foo and spoon.testing.testclasses.Bar aren\u0027t equals.",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "spoon.testing.testclasses.Foo and spoon.testing.testclasses.Bar aren\u0027t equals.",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.javadoc.JavaDocTest",
      "failingMethods": [
        "testJavaDocReprint"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...lic class Bar {\n    [/**\n     * Creates an annotation type.\n     *\n     * @param owner\n     *   the package of the annotation type\n     * @param simpleName\n     *   the name of annotation\n     */\n    public \u003cT\u003e CtAnnotationType\u003c?\u003e create(CtPackage owner, String simpleName) {\n        return null;]\n    }\n}\u003e but was:\u003c...lic class Bar {\n    [public Bar() {\n    }\n\n    public \u003cT\u003e CtAnnotationType\u003c?\u003e create(CtPackage arg0, String arg1) {]\n    }\n}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.compilation.CompilationTest",
      "failingMethods": [
        "testSingleClassLoader",
        "testExoticClassLoader"
      ],
      "erroringMethods": [
        "testNewInstance",
        "compileTest",
        "testPrecompile",
        "testNewInstanceFromExistingClass"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Foo subtype of IFoo",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 4
    },
    {
      "className": "spoon.support.compiler.jdt.ExtendedStringLiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "testExtendedStringLiteral"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}