{
  "totalNumberSkippingTests": 109,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "apache/calcite",
  "bugCommit": "https://github.com/apache/calcite/compare/9dc61aea2bcf...a8cb62b55087",
  "failingModule": "/root/workspace/apache/calcite/366987997/core",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 16,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 4660,
  "failing-test-cases": [
    {
      "className": "org.apache.calcite.test.JdbcAdapterTest",
      "failingMethods": [
        "org.apache.calcite.test.JdbcAdapterTest#testTableModifyInsertWithSubQuery",
        "org.apache.calcite.test.JdbcAdapterTest#testCrossJoinWithJoinKeyAndFilterPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testJoin3TablesPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testCrossJoinWithJoinKeyPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testInPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testMixedJoinWithOrPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testMixedJoinPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testNonEquiJoinPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testCartesianJoinWithoutKeyPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testTableModifyUpdate",
        "org.apache.calcite.test.JdbcAdapterTest#testNonEquiJoinReverseConditionPlan",
        "org.apache.calcite.test.JdbcAdapterTest#testEquiJoinPlan"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcTableModify(table\u003d[[foodmart, expense_fact]], operation\u003d[INSERT], flattened\u003d[false])\\n    JdbcProject(store_id\u003d[$0], account_id\u003d[$1], exp_date\u003d[$2], time_id\u003d[+($3, 1)], category_id\u003d[$4], currency_id\u003d[$5], amount\u003d[$6])\\n      JdbcFilter(condition\u003d[\u003d($0, 666)])\\n        JdbcTableScan(table\u003d[[foodmart, expense_fact]])\\n\"\n     but: was \"PLAN\u003dEnumerableTableModify(table\u003d[[foodmart, expense_fact]], operation\u003d[INSERT], flattened\u003d[false])\\n  EnumerableCalc(expr#0..6\u003d[{inputs}], expr#7\u003d[1], expr#8\u003d[+($t3, $t7)], proj#0..2\u003d[{exprs}], time_id\u003d[$t8], category_id\u003d[$t4], currency_id\u003d[$t5], amount\u003d[$t6])\\n    JdbcToEnumerableConverter\\n      JdbcFilter(condition\u003d[\u003d($0, 666)])\\n        JdbcTableScan(table\u003d[[foodmart, expense_fact]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dEnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n  JdbcToEnumerableConverter\\n    JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1])\\n      JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n  JdbcToEnumerableConverter\\n    JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n      JdbcTableScan(table\u003d[[SCOTT, DEPT]])\"\n     but: was \"PLAN\u003dEnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n  EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n    JdbcToEnumerableConverter\\n      JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n  EnumerableCalc(expr#0..2\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n    JdbcToEnumerableConverter\\n      JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$2], ENAME\u003d[$3], EMPNO0\u003d[$2], ENAME0\u003d[$3])\\n    JdbcJoin(condition\u003d[AND(\u003d($4, $0), \u003e($5, $1))], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], MGR\u003d[$3], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..5\u003d[{inputs}], expr#6\u003d[\u003e($t3, $t5)], proj#0..1\u003d[{exprs}], EMPNO0\u003d[$t0], ENAME0\u003d[$t1], $condition\u003d[$t6])\\n  EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], MGR\u003d[$t3], SAL\u003d[$t5])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], SAL\u003d[$t5])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$3], ENAME\u003d[$4], GRADE\u003d[$0])\\n    JdbcJoin(condition\u003d[AND(\u003e($5, $1), \u003c($5, $2))], joinType\u003d[inner])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..5\u003d[{inputs}], expr#6\u003d[\u003e($t2, $t4)], expr#7\u003d[\u003c($t2, $t5)], expr#8\u003d[AND($t6, $t7)], proj#0..1\u003d[{exprs}], GRADE\u003d[$t3], $condition\u003d[$t8])\\n  EnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], SAL\u003d[$t5])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n    JdbcToEnumerableConverter\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$3], ENAME\u003d[$4], DNAME\u003d[$8], GRADE\u003d[$0])\\n    JdbcJoin(condition\u003d[AND(\u003e($5, $1), \u003c($5, $2))], joinType\u003d[inner])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n      JdbcJoin(condition\u003d[\u003d($3, $4)], joinType\u003d[inner])\\n        JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5], DEPTNO\u003d[$7])\\n          JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n        JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n          JdbcTableScan(table\u003d[[SCOTT, DEPT]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..8\u003d[{inputs}], EMPNO\u003d[$t2], ENAME\u003d[$t3], DNAME\u003d[$t1], GRADE\u003d[$t6])\\n  EnumerableJoin(condition\u003d[\u003d($0, $5)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..2\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n    EnumerableCalc(expr#0..6\u003d[{inputs}], expr#7\u003d[\u003e($t2, $t5)], expr#8\u003d[\u003c($t2, $t6)], expr#9\u003d[AND($t7, $t8)], proj#0..6\u003d[{exprs}], $condition\u003d[$t9])\\n      EnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n        EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], SAL\u003d[$t5], DEPTNO\u003d[$t7])\\n          JdbcToEnumerableConverter\\n            JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n        JdbcToEnumerableConverter\\n          JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$2], ENAME\u003d[$3], DEPTNO\u003d[$4], DNAME\u003d[$1])\\n    JdbcJoin(condition\u003d[\u003d($4, $0)], joinType\u003d[inner])\\n      JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DEPTNO\u003d[$7])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..4\u003d[{inputs}], proj#0..2\u003d[{exprs}], DNAME\u003d[$t4])\\n  EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], DEPTNO\u003d[$t7])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n    EnumerableCalc(expr#0..2\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DEPTNO\u003d[$3], DNAME\u003d[$4])\\n    JdbcJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DEPTNO\u003d[$7])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..4\u003d[{inputs}], proj#0..1\u003d[{exprs}], DEPTNO\u003d[$t3], DNAME\u003d[$t4])\\n  EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], DEPTNO\u003d[$t7])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n    EnumerableCalc(expr#0..2\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DEPTNO\u003d[$3], DNAME\u003d[$4])\\n    JdbcJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], DEPTNO\u003d[$7])\\n        JdbcFilter(condition\u003d[\u003d(CAST($7):INTEGER, 20)])\\n          JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(DEPTNO\u003d[$0], DNAME\u003d[$1])\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..4\u003d[{inputs}], proj#0..1\u003d[{exprs}], DEPTNO\u003d[$t3], DNAME\u003d[$t4])\\n  EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], DEPTNO\u003d[$t7])\\n      JdbcToEnumerableConverter\\n        JdbcFilter(condition\u003d[\u003d(CAST($7):INTEGER, 20)])\\n          JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n    EnumerableCalc(expr#0..2\u003d[{inputs}], proj#0..1\u003d[{exprs}])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, DEPT]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan [org.apache.calcite.DataContext root;\n\npublic org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {\n  root \u003d root0;\n  return new org.apache.calcite.linq4j.AbstractEnumerable(){\n      public org.apache.calcite.linq4j.Enumerator enumerator() {\n        return new org.apache.calcite.linq4j.Enumerator(){\n            public final org.apache.calcite.linq4j.Enumerator inputEnumerator \u003d org.apache.calcite.runtime.ResultSetEnumerable.of(((org.apache.calcite.adapter.jdbc.JdbcSchema) root.getRootSchema().getSubSchema(\"foodmart\").unwrap(org.apache.calcite.adapter.jdbc.JdbcSchema.class)).getDataSource(), \"SELECT *\\nFROM \\\"foodmart\\\".\\\"store\\\"\\nWHERE \\\"store_name\\\" \u003d \u0027Store 1\u0027 OR \\\"store_name\\\" \u003d \u0027Store 10\u0027 OR \\\"store_name\\\" \u003d \u0027Store 11\u0027 OR \\\"store_name\\\" \u003d \u0027Store 15\u0027 OR \\\"store_name\\\" \u003d \u0027Store 16\u0027 OR \\\"store_name\\\" \u003d \u0027Store 24\u0027 OR \\\"store_name\\\" \u003d \u0027Store 3\u0027 OR \\\"store_name\\\" \u003d \u0027Store 7\u0027\", new org.apache.calcite.linq4j.function.Function1() {\n              public org.apache.calcite.linq4j.function.Function0 apply(final java.sql.ResultSet resultSet) {\n                return new org.apache.calcite.linq4j.function.Function0() {\n                    public Object apply() {\n                      try {\n                        final Object[] values \u003d new Object[24];\n                        values[0] \u003d resultSet.getInt(1);\n                        if (resultSet.wasNull()) {\n                          values[0] \u003d null;\n                        }\n                        values[1] \u003d resultSet.getObject(2);\n                        values[2] \u003d resultSet.getInt(3);\n                        if (resultSet.wasNull()) {\n                          values[2] \u003d null;\n                        }\n                        values[3] \u003d resultSet.getObject(4);\n                        values[4] \u003d resultSet.getInt(5);\n                        if (resultSet.wasNull()) {\n                          values[4] \u003d null;\n                        }\n                        values[5] \u003d resultSet.getObject(6);\n                        values[6] \u003d resultSet.getObject(7);\n                        values[7] \u003d resultSet.getObject(8);\n                        values[8] \u003d resultSet.getObject(9);\n                        values[9] \u003d resultSet.getObject(10);\n                        values[10] \u003d resultSet.getObject(11);\n                        values[11] \u003d resultSet.getObject(12);\n                        values[12] \u003d resultSet.getObject(13);\n                        values[13] \u003d org.apache.calcite.runtime.SqlFunctions.toLongOptional(resultSet.getTimestamp(14));\n                        if (resultSet.wasNull()) {\n                          values[13] \u003d null;\n                        }\n                        values[14] \u003d org.apache.calcite.runtime.SqlFunctions.toLongOptional(resultSet.getTimestamp(15));\n                        if (resultSet.wasNull()) {\n                          values[14] \u003d null;\n                        }\n                        values[15] \u003d resultSet.getInt(16);\n                        if (resultSet.wasNull()) {\n                          values[15] \u003d null;\n                        }\n                        values[16] \u003d resultSet.getInt(17);\n                        if (resultSet.wasNull()) {\n                          values[16] \u003d null;\n                        }\n                        values[17] \u003d resultSet.getInt(18);\n                        if (resultSet.wasNull()) {\n                          values[17] \u003d null;\n                        }\n                        values[18] \u003d resultSet.getInt(19);\n                        if (resultSet.wasNull()) {\n                          values[18] \u003d null;\n                        }\n                        values[19] \u003d resultSet.getBoolean(20);\n                        if (resultSet.wasNull()) {\n                          values[19] \u003d null;\n                        }\n                        values[20] \u003d resultSet.getBoolean(21);\n                        if (resultSet.wasNull()) {\n                          values[20] \u003d null;\n                        }\n                        values[21] \u003d resultSet.getBoolean(22);\n                        if (resultSet.wasNull()) {\n                          values[21] \u003d null;\n                        }\n                        values[22] \u003d resultSet.getBoolean(23);\n                        if (resultSet.wasNull()) {\n                          values[22] \u003d null;\n                        }\n                        values[23] \u003d resultSet.getBoolean(24);\n                        if (resultSet.wasNull()) {\n                          values[23] \u003d null;\n                        }\n                        return values;\n                      } catch (java.sql.SQLException e) {\n                        throw new RuntimeException(\n                          e);\n                      }\n                    }\n                  }\n                ;\n              }\n              public Object apply(final Object resultSet) {\n                return apply(\n                  (java.sql.ResultSet) resultSet);\n              }\n            }\n            ).enumerator();\n            public void reset() {\n              inputEnumerator.reset();\n            }\n\n            public boolean moveNext() {\n              return inputEnumerator.moveNext();\n            }\n\n            public void close() {\n              inputEnumerator.close();\n            }\n\n            public Object current() {\n              final Object[] current \u003d (Object[]) inputEnumerator.current();\n              return new Object[] {\n                  current[0],\n                  current[3]};\n            }\n\n          };\n      }\n\n    };\n}\n\n\npublic Class getElementType() {\n  return java.lang.Object[].class;\n}\n\n\n] contains [getDataSource(), \"SELECT \\\"store_id\\\", \\\"store_name\\\"\\nFROM \\\"foodmart\\\".\\\"store\\\"\\nWHERE \\\"store_name\\\" \u003d \u0027Store 1\u0027 OR \\\"store_name\\\" \u003d \u0027Store 10\u0027 OR \\\"store_name\\\" \u003d \u0027Store 11\u0027 OR \\\"store_name\\\" \u003d \u0027Store 15\u0027 OR \\\"store_name\\\" \u003d \u0027Store 16\u0027 OR \\\"store_name\\\" \u003d \u0027Store 24\u0027 OR \\\"store_name\\\" \u003d \u0027Store 3\u0027 OR \\\"store_name\\\" \u003d \u0027Store 7\u0027\"]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcTableModify(table\u003d[[foodmart, expense_fact]], operation\u003d[UPDATE], updateColumnList\u003d[[account_id]], sourceExpressionList\u003d[[888]], flattened\u003d[false])\\n    JdbcProject(store_id\u003d[$0], account_id\u003d[$1], exp_date\u003d[$2], time_id\u003d[$3], category_id\u003d[$4], currency_id\u003d[$5], amount\u003d[$6], EXPR$0\u003d[888])\\n      JdbcFilter(condition\u003d[\u003d($0, 666)])\\n        JdbcTableScan(table\u003d[[foodmart, expense_fact]])\"\n     but: was \"PLAN\u003dEnumerableTableModify(table\u003d[[foodmart, expense_fact]], operation\u003d[UPDATE], updateColumnList\u003d[[account_id]], sourceExpressionList\u003d[[888]], flattened\u003d[false])\\n  EnumerableCalc(expr#0..6\u003d[{inputs}], expr#7\u003d[888], proj#0..7\u003d[{exprs}])\\n    JdbcToEnumerableConverter\\n      JdbcFilter(condition\u003d[\u003d($0, 666)])\\n        JdbcTableScan(table\u003d[[foodmart, expense_fact]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$3], ENAME\u003d[$4], GRADE\u003d[$0])\\n    JdbcJoin(condition\u003d[AND(\u003c\u003d($1, $5), \u003e\u003d($2, $5))], joinType\u003d[inner])\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..5\u003d[{inputs}], expr#6\u003d[\u003c\u003d($t4, $t2)], expr#7\u003d[\u003e\u003d($t5, $t2)], expr#8\u003d[AND($t6, $t7)], proj#0..1\u003d[{exprs}], GRADE\u003d[$t3], $condition\u003d[$t8])\\n  EnumerableJoin(condition\u003d[true], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], SAL\u003d[$t5])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n    JdbcToEnumerableConverter\\n      JdbcTableScan(table\u003d[[SCOTT, SALGRADE]])\\n\\n\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"PLAN\u003dJdbcToEnumerableConverter\\n  JdbcProject(EMPNO\u003d[$3], ENAME\u003d[$4], EMPNO0\u003d[$3], ENAME0\u003d[$4])\\n    JdbcJoin(condition\u003d[AND(\u003d($5, $0), OR(\u003e($7, $2), \u003e($1, $6)))], joinType\u003d[inner])\\n      JdbcProject(EMPNO\u003d[$0], HIREDATE\u003d[$4], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n      JdbcProject(EMPNO\u003d[$0], ENAME\u003d[$1], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5])\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..7\u003d[{inputs}], expr#8\u003d[\u003e($t4, $t7)], expr#9\u003d[\u003e($t6, $t3)], expr#10\u003d[OR($t8, $t9)], proj#0..1\u003d[{exprs}], EMPNO0\u003d[$t0], ENAME0\u003d[$t1], $condition\u003d[$t10])\\n  EnumerableJoin(condition\u003d[\u003d($2, $5)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], MGR\u003d[$t3], HIREDATE\u003d[$t4], SAL\u003d[$t5])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n    EnumerableCalc(expr#0..7\u003d[{inputs}], EMPNO\u003d[$t0], HIREDATE\u003d[$t4], SAL\u003d[$t5])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[SCOTT, EMP]])\\n\\n\"",
          "isError": false
        }
      ],
      "nbFailures": 12,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.JdbcTest",
      "failingMethods": [
        "org.apache.calcite.test.JdbcTest#testSelfJoinCount",
        "org.apache.calcite.test.JdbcTest#testUpdateBind"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "UPDATE",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"JdbcToEnumerableConverter\\n  JdbcAggregate(group\u003d[{}], C\u003d[COUNT()])\\n    JdbcJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n      JdbcProject(store_id\u003d[$0])\\n        JdbcTableScan(table\u003d[[foodmart, store]])\\n      JdbcProject(store_id\u003d[$0])\\n        JdbcTableScan(table\u003d[[foodmart, store]])\\n\"\n     but: was \"PLAN\u003dEnumerableAggregate(group\u003d[{}], C\u003d[COUNT()])\\n  EnumerableJoin(condition\u003d[\u003d($0, $1)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0..23\u003d[{inputs}], store_id\u003d[$t0])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[foodmart, store]])\\n    EnumerableCalc(expr#0..23\u003d[{inputs}], store_id\u003d[$t0])\\n      JdbcToEnumerableConverter\\n        JdbcTableScan(table\u003d[[foodmart, store]])\\n\\n\"",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.LatticeTest",
      "failingMethods": [
        "org.apache.calcite.test.LatticeTest#testJG"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: a string containing \"JdbcToEnumerableConverter\\n  JdbcAggregate(group\u003d[{3, 6, 8, 9, 10, 12}], m0\u003d[COUNT()], m1\u003d[$SUM0($2)], m2\u003d[$SUM0($3)])\\n    JdbcJoin(condition\u003d[\u003d($4, $11)], joinType\u003d[inner])\\n      JdbcJoin(condition\u003d[\u003d($1, $7)], joinType\u003d[inner])\\n        JdbcJoin(condition\u003d[\u003d($0, $5)], joinType\u003d[inner])\\n          JdbcProject(product_id\u003d[$0], time_id\u003d[$1], store_sales\u003d[$5], unit_sales\u003d[$7])\\n            JdbcTableScan(table\u003d[[foodmart, sales_fact_1997]])\\n          JdbcProject(product_class_id\u003d[$0], product_id\u003d[$1], recyclable_package\u003d[$8])\\n            JdbcTableScan(table\u003d[[foodmart, product]])\\n        JdbcProject(time_id\u003d[$0], the_day\u003d[$2], the_year\u003d[$4], quarter\u003d[$8])\\n          JdbcTableScan(table\u003d[[foodmart, time_by_day]])\\n      JdbcProject(product_class_id\u003d[$0], product_family\u003d[$4])\\n        JdbcTableScan(table\u003d[[foodmart, product_class]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..8\u003d[{inputs}], unit_sales\u003d[$t3], recyclable_package\u003d[$t4], the_day\u003d[$t0], the_year\u003d[$t1], quarter\u003d[$t2], product_family\u003d[$t5], m0\u003d[$t6], m1\u003d[$t7], m2\u003d[$t8])\\n  EnumerableAggregate(group\u003d[{1, 2, 3, 7, 10, 12}], m0\u003d[COUNT()], m1\u003d[$SUM0($6)], m2\u003d[$SUM0($7)])\\n    EnumerableJoin(condition\u003d[\u003d($0, $5)], joinType\u003d[inner])\\n      EnumerableCalc(expr#0..9\u003d[{inputs}], time_id\u003d[$t0], the_day\u003d[$t2], the_year\u003d[$t4], quarter\u003d[$t8])\\n        JdbcToEnumerableConverter\\n          JdbcTableScan(table\u003d[[foodmart, time_by_day]])\\n      EnumerableJoin(condition\u003d[\u003d($4, $7)], joinType\u003d[inner])\\n        EnumerableJoin(condition\u003d[\u003d($0, $5)], joinType\u003d[inner])\\n          EnumerableCalc(expr#0..7\u003d[{inputs}], proj#0..1\u003d[{exprs}], store_sales\u003d[$t5], unit_sales\u003d[$t7])\\n            JdbcToEnumerableConverter\\n              JdbcTableScan(table\u003d[[foodmart, sales_fact_1997]])\\n          EnumerableCalc(expr#0..14\u003d[{inputs}], proj#0..1\u003d[{exprs}], recyclable_package\u003d[$t8])\\n            JdbcToEnumerableConverter\\n              JdbcTableScan(table\u003d[[foodmart, product]])\\n        EnumerableCalc(expr#0..4\u003d[{inputs}], product_class_id\u003d[$t0], product_family\u003d[$t4])\\n          JdbcToEnumerableConverter\\n            JdbcTableScan(table\u003d[[foodmart, product_class]])\\n\\n\"",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.CoreQuidemTest",
      "failingMethods": [
        "org.apache.calcite.test.CoreQuidemTest#test[3: quidem(sql/agg.iq)]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Files differ: /root/workspace/apache/calcite/366987997/core/target/surefire/sql/agg.iq /root/workspace/apache/calcite/366987997/core/target/test-classes/sql/agg.iq\n2057c2057\n\u003c | SCOTT |\n---\n\u003e | sa    |\n2071c2071\n\u003c | SCOTT |\n---\n\u003e | sa    |\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}