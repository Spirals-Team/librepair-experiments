{
  "bugType": "only_fail",
  "hostname": "spirals-repairnator",
  "repo": "evanchooly/kibble",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 20,
      "ComputeTestDir": 0,
      "BuildProject": 164,
      "InitRepoToPush": 0,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "AstorJMut": 4,
      "CloneRepository": 3,
      "CheckoutPatchedBuild": 0,
      "NopolAllTests": 1,
      "NPEFix": 0,
      "TestProject": 59,
      "GatherTestInformation": 0,
      "CommitPatch": 0
    },
    "NbFailingTests": 16,
    "NbErroringTests": 0,
    "NbSkippingTests": 0,
    "NbRunningTests": 52,
    "BugCommitUrl": "http://github.com/evanchooly/kibble/commit/1e596b5e8717cb0b3ba603af64f8f822519d5b30",
    "ReproductionDate": "Jul 25, 2018 1:31:26 AM",
    "BuggyBuildId": 407846739,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/evanchooly/kibble/builds/407846739",
    "BuggyBuildDate": "Jul 25, 2018 1:31:13 AM",
    "BugCommit": "1e596b5e8717cb0b3ba603af64f8f822519d5b30",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 15,
    "NbFileApp": 0,
    "NbFileTests": 0,
    "NbCPU": 4,
    "FreeMemory": 174771624,
    "TotalMemory": 256376832,
    "AngelicValuesByTest": {
      "com/antwerkz/kibble/model/KibbleFileTest:com/antwerkz/kibble/model/ConstructorTest:com/antwerkz/kibble/model/KibbleFunctionTest:com/antwerkz/kibble/model/AnnotationHolderTest:com/antwerkz/kibble/model/KibbleObjectTest:com/antwerkz/kibble/KibbleTest:com/antwerkz/kibble/model/KibbleTypeTest:": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 152512600,
      "ComputeClasspath": 130936320,
      "ComputeTestDir": 125043520,
      "BuildProject": 147207808,
      "InitRepoToPush": 134097640,
      "ComputeSourceDir": 174771624,
      "ComputeModules": 174771624,
      "AstorJMut": 181416744,
      "CloneRepository": 156048704,
      "CheckoutPatchedBuild": 174771624,
      "NopolAllTests": 157025736,
      "NPEFix": 157025736,
      "TestProject": 145884528,
      "GatherTestInformation": 143527504,
      "CommitPatch": 174771624
    },
    "NbSucceedingTests": 36
  },
  "failing-test-cases": [
    {
      "className": "com.antwerkz.kibble.model.KibbleFileTest",
      "failingMethods": [
        "resolveClassesInFile",
        "imports",
        "resolve",
        "resolveClassesInAnotherFile"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [package com.antwerkz.kibble  import java.lang.String as anotherAlias import java.sql.ResultSet as aliasName] but found [package com.antwerkz.kibble   import java.lang.String as anotherAlias import java.sql.ResultSet as aliasName]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.antwerkz.testing.Second] but found [Second]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.antwerkz.testing.Second] but found [Second]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.antwerkz.testing.Second] but found [Second]",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.ConstructorTest",
      "failingMethods": [
        "imports"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [import com.foo.Bob import org.box.Bla  class temp(val temp: Bob) {     constructor(foo: Bla): this()  } ] but found [ import com.foo.Bob import org.box.Bla  class temp(val temp: Bob) {     constructor(foo: Bla): this()  } ]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.KibbleFunctionTest",
      "failingMethods": [
        "generics",
        "varargs"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [fun \u003cT\u003e foo(t: T)] but found [fun \u003cT\u003e foo(t: T) ]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [fun temp(vararg bob: String) {     return 4 } ] but found [ fun temp(vararg bob: String) {     return 4 } ]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.AnnotationHolderTest",
      "failingMethods": [
        "functions"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [import kotlin.annotation.Retention  @Bob(name \u003d Feller) @Retention fun foo()] but found [ import kotlin.annotation.Retention  @Bob(name \u003d Feller) @Retention fun foo() ]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.KibbleObjectTest",
      "failingMethods": [
        "functions"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [object temp {     fun something(): Junk {         println(\"something\")     } } ] but found [object temp {     fun something(): Junk {         println(\"something\")     } } ]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.KibbleTest",
      "failingMethods": [
        "writeSource",
        "standalone",
        "create"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [val topLevel: Int \u003d 4  open class KibbleTest {     val property: Double \u003d 0.0     protected fun test(): Double {         println(\"hello\")         return 0.0     } }  fun bareMethod() {     println(\"hi\") } ] but found [ val topLevel: Int \u003d 4  open class KibbleTest {     val property: Double \u003d 0.0     protected fun test(): Double {         println(\"hello\")         return 0.0     } }  fun bareMethod() {     println(\"hi\") } ]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [println(\"hi\") return \"hi\"] but found [    println(\"hi\") return \"hi\"]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [package com.antwerkz.test  import java.util.ArrayList import java.util.HashMap as HMap import javax.annotation.Generated  interface Dummy {     fun what() }  @Generated(\"I\u0027m the value\", date \u003d \"123455\", comments \u003d \"Fingers crossed\") internal abstract class KotlinSampleClass(val cost: Double, ignored: Int): ParentClass(21), Cloneable {     var name: String? \u003d null     protected open val age: Double \u003d -1.0     val list: List\u003cString\u003e \u003d ArrayList()     val map: HMap\u003cString, Int\u003e \u003d java.util.HashMap()     var time: Int? \u003d null     @SuppressWarnings(\"message\")     protected lateinit var random: String     @SuppressWarnings(\"message\")     protected fun output(count: Long) {         println(\"age \u003d $age\")     }     override fun toString(): String {         return \"KotlinSampleClass(name\u003d\u0027$name\u0027, time\u003d$time, age\u003d$age, list\u003d$list, map\u003d$map)\"     } }  open class ParentClass(val blurb: Int) { }  ] but found [package com.antwerkz.test   import java.util.ArrayList import java.util.HashMap as HMap import javax.annotation.Generated  interface Dummy {     fun what() }  @Generated(\"I\u0027m the value\", date \u003d \"123455\", comments \u003d \"Fingers crossed\") internal abstract class KotlinSampleClass(val cost: Double, ignored: Int): ParentClass(21), Cloneable {     var name: String? \u003d null     protected open val age: Double \u003d -1.0     val list: List\u003cString\u003e \u003d ArrayList()     val map: HMap\u003cString, Int\u003e \u003d java.util.HashMap()     var time: Int? \u003d null     @SuppressWarnings(\"message\")     protected lateinit var random: String     @SuppressWarnings(\"message\")     protected fun output(count: Long) {         println(\"age \u003d $age\")     }     override fun toString(): String {         return \"KotlinSampleClass(name\u003d\u0027$name\u0027, time\u003d$time, age\u003d$age, list\u003d$list, map\u003d$map)\"     } }  open class ParentClass(val blurb: Int) { } ]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.KibbleTypeTest",
      "failingMethods": [
        "simpleType",
        "components",
        "generics",
        "fullyQualified"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [Map.Entry] but found [Entry]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [java.math.BigDecimal] but found [BigDecimal]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.foo.bar.SomeType\u003ckotlin.String, kotlin.Double\u003e?] but found [SomeType\u003cString, Double\u003e?]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.foo.bar.Type] but found [Type]",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    }
  ],
  "failingModule": "/root/workspace/evanchooly/kibble/407846739",
  "bugCommit": "https://github.com/evanchooly/kibble/compare/8b04e4333326...1e596b5e8717"
}