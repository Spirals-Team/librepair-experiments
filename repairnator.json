{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "swagger-api/swagger-core",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 4,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "ResolveDependency": 20,
      "BuildProject": 36,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 2,
      "CloneRepository": 7,
      "NopolRepair": 3,
      "CheckoutPatchedBuild": 0,
      "TestProject": 16,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 5,
      "AstorRepair": 2,
      "CommitPatch": 4
    },
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "NbFailingTests": 1,
    "BugCommitUrl": "http://github.com/swagger-api/swagger-core/commit/62577e8a4abbe506b1d6aaf95b85cc06e2906e7c",
    "ReproductionDate": "Apr 16, 2018 8:25:02 AM",
    "BuggyBuildId": 367008248,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/swagger-api/swagger-core/builds/367008248",
    "BuggyBuildDate": "Apr 16, 2018 8:24:55 AM",
    "BugCommit": "62577e8a4abbe506b1d6aaf95b85cc06e2906e7c",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 423,
    "NbLibraries": 94,
    "NbFileApp": 362,
    "NbFileTests": 616,
    "NbCPU": 32,
    "FreeMemory": 488967520,
    "TotalMemory": 683147264,
    "AngelicValuesByTest": {
      "io/swagger/v3/jaxrs2/annotations/operations/AnnotatedOperationMethodTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 577317144,
      "ComputeClasspath": 601078704,
      "ComputeTestDir": 555998864,
      "ResolveDependency": 470709400,
      "BuildProject": 650817600,
      "NPERepair": 604537752,
      "ComputeSourceDir": 601078704,
      "InitRepoToPush": 498034536,
      "CloneRepository": 674792512,
      "NopolRepair": 563619984,
      "CheckoutPatchedBuild": 488967520,
      "TestProject": 612224584,
      "GatherTestInformation": 600013752,
      "PushIncriminatedBuild": 604537752,
      "AstorRepair": 531875088,
      "CommitPatch": 488967520
    }
  },
  "failingModule": "/root/workspace/swagger-api/swagger-core/367008248/modules/swagger-jaxrs2",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 1,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 423,
  "failing-test-cases": [
    {
      "className": "io.swagger.v3.jaxrs2.annotations.operations.AnnotatedOperationMethodTest",
      "failingMethods": [
        "io.swagger.v3.jaxrs2.annotations.operations.AnnotatedOperationMethodTest#testCompletePetResource"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [openapi: 3.0.1\npaths:\n  /pet/findByTags:\n    get:\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma seperated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          description: Pets matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid tag value\n  /pet/findByCategory/{category}:\n    get:\n      summary: Finds Pets by category\n      operationId: findPetsByCategory\n      parameters:\n      - name: category\n        in: path\n        description: Category value that need to be considered for filter\n        required: true\n        style: matrix\n        schema:\n          $ref: \u0027#/components/schemas/Category\u0027\n      - name: skip\n        in: query\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid category value\n  /pet/{petId}:\n    get:\n      summary: Find pet by ID\n      description: Returns a pet when 0 \u003c ID \u003c\u003d 10.  ID \u003e 10 or nonintegers will simulate\n        API error conditions\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: The pet\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n            application/xml:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid ID supplied\n        404:\n          description: Pet not found\n  /pet/bodynoannotation:\n    post:\n      summary: Add a new pet to the store no annotation\n      operationId: addPetNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n      responses:\n        405:\n          description: Invalid input\n  /pet/bodyid:\n    post:\n      summary: Add a new pet to the store passing an integer with generic parameter\n        annotation\n      operationId: addPetByInteger\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n        required: true\n      responses:\n        405:\n          description: Invalid input\n  /pet/bodyidnoannotation:\n    post:\n      summary: Add a new pet to the store passing an integer without parameter annotation\n      operationId: addPetByIntegerNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n      responses:\n        405:\n          description: Invalid input\n  /pet:\n    put:\n      summary: Update an existing pet\n      operationId: updatePet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n        required: true\n      responses:\n        400:\n          description: Invalid ID supplied\n        404:\n          description: Pet not found\n        405:\n          description: Validation exception\n    post:\n      summary: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n        required: true\n      responses:\n        405:\n          description: Invalid input\n  /pet/findByStatus:\n    get:\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma seperated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        schema:\n          type: string\n      - name: skip\n        in: query\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid status value\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \u0027#/components/schemas/Category\u0027\n        name:\n          type: string\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: \u0027#/components/schemas/Tag\u0027\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available,pending,sold\n      xml:\n        name: Pet\n] but found [openapi: 3.0.1\npaths:\n  /pet/bodyid:\n    post:\n      summary: Add a new pet to the store passing an integer with generic parameter\n        annotation\n      operationId: addPetByInteger\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n        required: true\n      responses:\n        405:\n          description: Invalid input\n  /pet/{petId}:\n    get:\n      summary: Find pet by ID\n      description: Returns a pet when 0 \u003c ID \u003c\u003d 10.  ID \u003e 10 or nonintegers will simulate\n        API error conditions\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: The pet\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n            application/xml:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid ID supplied\n        404:\n          description: Pet not found\n  /pet:\n    put:\n      summary: Update an existing pet\n      operationId: updatePet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n        required: true\n      responses:\n        400:\n          description: Invalid ID supplied\n        404:\n          description: Pet not found\n        405:\n          description: Validation exception\n    post:\n      summary: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n        required: true\n      responses:\n        405:\n          description: Invalid input\n  /pet/bodynoannotation:\n    post:\n      summary: Add a new pet to the store no annotation\n      operationId: addPetNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n      responses:\n        405:\n          description: Invalid input\n  /pet/bodyidnoannotation:\n    post:\n      summary: Add a new pet to the store passing an integer without parameter annotation\n      operationId: addPetByIntegerNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n      responses:\n        405:\n          description: Invalid input\n  /pet/findByStatus:\n    get:\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma seperated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        schema:\n          type: string\n      - name: skip\n        in: query\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma seperated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          description: Pets matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid tag value\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \u0027#/components/schemas/Category\u0027\n        name:\n          type: string\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: \u0027#/components/schemas/Tag\u0027\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available,pending,sold\n      xml:\n        name: Pet\n]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}