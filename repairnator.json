{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 87,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/399891829",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 6,
  "error-types": [
    "spoon.SpoonException",
    "java.lang.AssertionError",
    "java.lang.NoClassDefFoundError",
    "java.lang.ExceptionInInitializerError",
    "java.lang.NullPointerException"
  ],
  "totalNumberRunningTests": 1209,
  "failing-test-cases": [
    {
      "className": "spoon.test.template.TemplateInvocationSubstitutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSubstitutionByExpression",
        "testInvocationSubstitutionByStatement",
        "testInvocationSubstitutionByExpression"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.parent.ContractOnSettersParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class spoon.test.parent.ContractOnSettersParametrizedTest",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSrcMainJava",
        "testInterfacesAreCtScannable"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMetamodelCachedInFactory",
        "spoonMetaModelTest",
        "testRuntimeMetamodel",
        "testMetamodelWithoutSources"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.template.TemplateEnumAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEnumAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateReplacementVisitor",
        "testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [
        "testImportOnSpoon"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Import scanner missed 1 imports expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "specificationCoreFactoryCreate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateClassAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testClassAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateArrayAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testArrayAccess",
        "testArrayLengthAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testShadowModelEqualsNormalModel"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtAnnotationFieldAccess.cast method signature: setTypeCasts(java.util.List)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [
        "testGenericsOverriding",
        "testisGeneric",
        "testIsSameSignatureWithReferencedGenerics"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003cfalse\u003e but was:\u003ctrue\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testScannerCallsAllProperties"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.ctBodyHolder.CtBodyHolderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testWhileWithBlock",
        "testForWithBlock",
        "testMethod",
        "testTryCatch",
        "testConstructor",
        "testForWithStatement"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateReplaceReturnTest",
      "failingMethods": [],
      "erroringMethods": [
        "testReturnReplaceTemplate",
        "testNoReturnReplaceTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [],
      "erroringMethods": [
        "testSetterInNodes"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFieldAccessNameSubstitutionInInnerClass",
        "testTemplateInheritance",
        "testTemplateWithWrongUsedStringParam",
        "testExtensionBlock",
        "testSimpleTemplate",
        "testAnotherFieldAccessNameSubstitution",
        "testTemplateInterfaces",
        "substituteTypeAccessReference",
        "testTemplateMatcher",
        "testFieldAccessNameSubstitution",
        "substituteStringLiteral",
        "testStatementTemplateRootSubstitution",
        "testTemplateC1",
        "testTemplateArrayAccess",
        "testSubstitutionInsertAllNtoN",
        "testCheckBoundTemplate",
        "testTemplateMatcherWithWholePackage",
        "testExpressionTemplate",
        "createTypeFromTemplate",
        "testTemplateMatcherMatchTwoSnippets",
        "testObjectIsNotParamTemplate",
        "testTemplateInvocationSubstitution",
        "testSubstituteInnerClass",
        "substituteSubString"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 24
    },
    {
      "className": "spoon.test.method.MethodTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetAllMethodsAdaptingType"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.SetParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class spoon.test.parent.ContractOnSettersParametrizedTest",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.PatternTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPatternToString",
        "testMatchOfAttribute",
        "testPatternMatchOfMultipleElements",
        "testMatchInSet",
        "testMatchReluctantMultivalueMinCount1",
        "testMatchPossesiveMultiValueUnlimited",
        "testMatchReluctantMultivalue",
        "testMatchGreedyMultiValueUnlimited",
        "testMatchOfMapKeySubstring",
        "testMatchGreedyMultiValueMaxCountLimit",
        "testGenerateMethodWithSelfReferences",
        "testGenerateMultiValues",
        "testGenerateClassWithSelfReferences",
        "testGenerateIfElse",
        "testMatchOfMapAttributeAndOtherAnnotations",
        "testMatchPossesiveMultiValueMinCount",
        "testMatchForeachWithOuterSubstitution",
        "testMatchOfMapAttribute",
        "testMatchParameterValue",
        "testPatternParameters",
        "testMatchGreedyMultiValueMinCount2",
        "testMatchParameterValueType",
        "testExtensionDecoupledSubstitutionVisitor",
        "testMatchSample1",
        "testAddGeneratedBy",
        "testMatchParameterCondition",
        "testMatchPossesiveMultiValueMinCount2",
        "testMatchForeach",
        "testMatchReluctantMultivalueExactly2",
        "testMatchIfElse",
        "testMatchPossesiveMultiValueMaxCount4"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Conflict on CtParameter.defaultExpression method signature: setDefaultExpression(spoon.reflect.code.CtExpression)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 31
    }
  ]
}