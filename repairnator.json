{
  "totalNumberSkippingTests": 1,
  "bugType": "only_fail",
  "totalNumberErroringTests": 8,
  "repo": "everit-org/json-schema",
  "bugCommit": "https://github.com/everit-org/json-schema/compare/a6611ddf89cb...93eb8c8fd464",
  "failingModule": "/root/workspace/everit-org/json-schema/239379531/tests",
  "hostname": "repairnator",
  "totalNumberFailingTests": 13,
  "error-types": [
    "java.io.UncheckedIOException",
    "java.lang.AssertionError",
    "java.lang.ClassCastException"
  ],
  "totalNumberRunningTests": 1047,
  "failing-test-cases": [
    {
      "className": "org.everit.json.schema.V6TestSuiteTest",
      "failingMethods": [
        "org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with const keyword]",
        "org.everit.json.schema.V6TestSuiteTest#test[[exclusiveMaximum.json]/exclusiveMaximum validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[propertyNames.json]/propertyNames with boolean schema false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const with object]",
        "org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const with null]",
        "org.everit.json.schema.V6TestSuiteTest#test[[propertyNames.json]/propertyNames validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[exclusiveMinimum.json]/exclusiveMinimum validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/ref overrides any sibling keywords]"
      ],
      "erroringMethods": [
        "org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change - change folder in subschema]",
        "org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/$ref to boolean schema true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/Recursive references between schemas]",
        "org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/$ref to boolean schema false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change - change folder]"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [contains.json]/array without item 5 is invalid",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.io.FileNotFoundException: http://localhost:1234/scope_change_defs1.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.io.FileNotFoundException: http://localhost:1234/scope_change_defs1.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.io.FileNotFoundException: http://localhost:1234/scope_change_defs2.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.io.FileNotFoundException: http://localhost:1234/scope_change_defs2.json",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [exclusiveMaximum.json]/boundary point is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [exclusiveMaximum.json]/above the exclusiveMaximum is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [exclusiveMinimum.json]/boundary point is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [exclusiveMinimum.json]/below the exclusiveMinimum is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false failure for [ref.json]/ref valid, maxItems ignored",
          "isError": false
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.io.FileNotFoundException: http://localhost:1234/node",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.io.FileNotFoundException: http://localhost:1234/node",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/another value is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/another type is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/another object is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/another type is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/not null is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [propertyNames.json]/some property names invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [propertyNames.json]/object with any properties is invalid",
          "isError": false
        }
      ],
      "nbFailures": 13,
      "nbErrors": 8
    }
  ]
}