{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "failingModule": "/root/workspace/prestodb/presto/353166250/presto-main",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 2,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 4220,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.sql.planner.optimizations.TestOptimizeMixedDistinctAggregations",
      "failingMethods": [
        "com.facebook.presto.sql.planner.optimizations.TestOptimizeMixedDistinctAggregations#testNestedType",
        "com.facebook.presto.sql.planner.optimizations.TestOptimizeMixedDistinctAggregations#testMixedDistinctAggregationOptimizer"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(AggregationNode)\n        AggregationMatcher{groupingSets\u003d[[CUSTKEY]], masks\u003d{}, groudId\u003dOptional.empty, step\u003dSINGLE}\n        bind arbitrary -\u003e arbitrary (*) \n        bind count -\u003e count (*) \n        - node(ProjectNode)\n            - node(AggregationNode)\n                AggregationMatcher{groupingSets\u003d[[CUSTKEY, ORDERDATE, GROUP]], masks\u003d{}, groudId\u003dOptional.empty, step\u003dSINGLE}\n                bind MAX -\u003e max (TOTALPRICE) \n                - node(GroupIdNode)\n                    GroupIdMatcher{groups\u003d[[CUSTKEY, TOTALPRICE], [CUSTKEY, ORDERDATE]]}\n                    - anyTree\n                        - node(TableScanNode)\n                            TableScanMatcher{expectedTableName\u003dorders}\n                            bind TOTALPRICE -\u003e Column orders:totalprice\n                            bind CUSTKEY -\u003e Column orders:custkey\n                            bind ORDERDATE -\u003e Column orders:orderdate\n\n] but found [\n\n- Output[custkey, s, d] \u003d\u003e [custkey:bigint, max:double, count:bigint]\n        s :\u003d max\n        d :\u003d count\n    - Aggregate[custkey] \u003d\u003e [custkey:bigint, max:double, count:bigint]\n            max :\u003d \"max\"(\"totalprice\")\n            count :\u003d \"count\"(DISTINCT \"orderdate\")\n        - ScanProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d null] \u003d\u003e [custkey:bigint, totalprice:double, orderdate:date]\n                Cost: {rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}\n                totalprice :\u003d tpch:totalprice\n                custkey :\u003d tpch:custkey\n                orderdate :\u003d tpch:orderdate\n\n] which resolves to [\n\n- Output[custkey, s, d] \u003d\u003e [custkey:bigint, max:double, count:bigint]\n        s :\u003d max\n        d :\u003d count\n    - Aggregate[custkey] \u003d\u003e [custkey:bigint, max:double, count:bigint]\n            max :\u003d \"max\"(\"totalprice\")\n            count :\u003d \"count\"(DISTINCT \"orderdate\")\n        - ScanProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d null] \u003d\u003e [custkey:bigint, totalprice:double, orderdate:date]\n                Cost: {rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}\n                totalprice :\u003d tpch:totalprice\n                custkey :\u003d tpch:custkey\n                orderdate :\u003d tpch:orderdate\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(AggregationNode)\n        bind arbitrary -\u003e arbitrary (*) \n        bind count -\u003e count (*) \n        - node(ProjectNode)\n            - node(AggregationNode)\n                bind max -\u003e max (*) \n                - anyTree\n                    - node(ValuesNode)\n                        ValuesMatcher{outputSymbolAliases\u003d{}, expectedOutputSymbolCount\u003dOptional.empty, expectedRows\u003dOptional.empty}\n\n] but found [\n\n- Output[_col0, _col1] \u003d\u003e [count:bigint, max:integer]\n        _col0 :\u003d count\n        _col1 :\u003d max\n    - Aggregate \u003d\u003e [count:bigint, max:integer]\n            count :\u003d \"count\"(DISTINCT \"field\")\n            max :\u003d \"max\"(\"field_0\")\n        - Values \u003d\u003e [field:row(integer, integer), field_0:integer]\n                Cost: {rows: 1 (20B), cpu: ?, memory: ?, network: ?}\n                (\"$literal$row(field0 integer,field1 integer)\"(\"from_base64\"(\u0027CwAAAFJPV19FTEVNRU5UAgAAAAkAAABJTlRfQVJSQVkJAAAASU5UX0FSUkFZAQAAAAABAAAAAQAAAAACAAAA\u0027)), 3)\n\n] which resolves to [\n\n- Output[_col0, _col1] \u003d\u003e [count:bigint, max:integer]\n        _col0 :\u003d count\n        _col1 :\u003d max\n    - Aggregate \u003d\u003e [count:bigint, max:integer]\n            count :\u003d \"count\"(DISTINCT \"field\")\n            max :\u003d \"max\"(\"field_0\")\n        - Values \u003d\u003e [field:row(integer, integer), field_0:integer]\n                Cost: {rows: 1 (20B), cpu: ?, memory: ?, network: ?}\n                (\"$literal$row(field0 integer,field1 integer)\"(\"from_base64\"(\u0027CwAAAFJPV19FTEVNRU5UAgAAAAkAAABJTlRfQVJSQVkJAAAASU5UX0FSUkFZAQAAAAABAAAAAQAAAAACAAAA\u0027)), 3)\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    }
  ]
}