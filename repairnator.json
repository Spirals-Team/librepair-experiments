{
  "totalNumberSkippingTests": 6,
  "bugType": "failing_passing",
  "pr-remote-repo": "kiiadi/kotlinpoet",
  "pr-head-commit-id": "44be6017107ea7d8603954d3aa1cfc971d42a651",
  "totalNumberErroringTests": 0,
  "pr-id": 316,
  "repo": "square/kotlinpoet",
  "pr-head-commit-id-url": "https://github.com/square/kotlinpoet/commit/44be6017107ea7d8603954d3aa1cfc971d42a651",
  "is-pr": "true",
  "failingModule": "/root/workspace/square/kotlinpoet/332613503",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 4,
  "error-types": [
    "org.junit.ComparisonFailure"
  ],
  "pr-base-commit-id-url": "https://github.com/square/kotlinpoet/commit/87f4f1b0cb34c628b4f16c29bb26a5ccdb3aef32",
  "pr-base-commit-id": "87f4f1b0cb34c628b4f16c29bb26a5ccdb3aef32",
  "totalNumberRunningTests": 361,
  "failing-test-cases": [
    {
      "className": "com.squareup.kotlinpoet.TypeSpecTest",
      "failingMethods": [
        "com.squareup.kotlinpoet.TypeSpecTest#anonymousClassToString",
        "com.squareup.kotlinpoet.TypeSpecTest#anonymousClassWithMultipleSuperTypes",
        "com.squareup.kotlinpoet.TypeSpecTest#multilineStatementWithAnonymousClass",
        "com.squareup.kotlinpoet.TypeSpecTest#anonymousInnerClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cobject : []java.lang.Runnable {...\u003e but was:\u003cobject : [ ]java.lang.Runnable {...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...Runnable \u003d object : []Message(), Runnable ...\u003e but was:\u003c...Runnable \u003d object : [ ]Message(), Runnable ...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...    return object : [Comparator\u003cString\u003e {             override fun compare(a: String, b: String): Int {                 // Prefix the strings and compare them                 return a.substring(0, length)                         .compareTo(b.substring(0, length))             }         }     }      fun sortPrefix(list: List\u003cString\u003e, final length: Int) {         Collections.sort(                 list,                 object :] Comparator\u003cString\u003e ...\u003e but was:\u003c...    return object : [ Comparator\u003cString\u003e {             override fun compare(a: String, b: String): Int {                 // Prefix the strings and compare them                 return a.substring(0, length)                         .compareTo(b.substring(0, length))             }         }     }      fun sortPrefix(list: List\u003cString\u003e, final length: Int) {         Collections.sort(                 list,                 object : ] Comparator\u003cString\u003e ...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...oo, Bar\u003e \u003d object : [Thing.Thang\u003cFoo, Bar\u003e() {         override fun call(final thung: Thung\u003cin Foo\u003e): Thung\u003cin Bar\u003e \u003d object :] SimpleThung\u003cBar\u003e(th...\u003e but was:\u003c...oo, Bar\u003e \u003d object : [ Thing.Thang\u003cFoo, Bar\u003e() {         override fun call(final thung: Thung\u003cin Foo\u003e): Thung\u003cin Bar\u003e \u003d object : ] SimpleThung\u003cBar\u003e(th...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    }
  ]
}