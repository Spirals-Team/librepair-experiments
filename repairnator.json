{
  "totalNumberSkippingTests": 133,
  "bugType": "only_fail",
  "totalNumberErroringTests": 8088,
  "repo": "spring-projects/spring-data-redis",
  "failingModule": "/root/workspace/spring-projects/spring-data-redis/399617435",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 0,
  "error-types": [
    "org.springframework.data.redis.connection.PoolException",
    "org.junit.AssumptionViolatedException",
    "org.springframework.data.redis.RedisConnectionFailureException",
    "io.lettuce.core.RedisConnectionException",
    "org.springframework.beans.factory.BeanCreationException",
    "java.lang.NoClassDefFoundError",
    "java.lang.ExceptionInInitializerError",
    "java.lang.Exception"
  ],
  "totalNumberRunningTests": 10114,
  "failing-test-cases": [
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHashCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "hSetNxShouldOperateCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hSetNxShouldReturnFalseIfFieldAlreadyExists[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hGetShouldReturnValueForExistingField[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hExistsShouldReturnFalseForNonExistingField[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hGetAllShouldReturnEntriesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hMGetShouldReturnValueForFields[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hSetShouldOperateCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hMSetSouldSetValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hGetShouldReturnNullForNotExistingField[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hDelShouldRemoveSingleFieldsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hExistsShouldReturnTrueForExistingField[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hMGetShouldReturnNullValueForFieldsThatHaveNoValue[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hValsShouldReturnValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hStrLenReturnsZeroWhenKeyDoesNotExist[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hScanShouldIterateOverHash[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hLenShouldReturnSizeCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hDelShouldRemoveMultipleFieldsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hMSetShouldOverwriteValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hKeysShouldReturnFieldsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hStrLenReturnsZeroWhenFieldDoesNotExist[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]",
        "hStrLenReturnsFieldLength[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@10c04710]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 42
    },
    {
      "className": "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.cache.RedisCacheTests",
      "failingMethods": [],
      "erroringMethods": [
        "getWithCallableShouldResolveValueIfNotPresent[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "getShouldReturnNullWhenKeyDoesNotExist[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putIfAbsentShouldAddEntryIfNotExists[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "shouldReadAndWriteSimpleCacheKey[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getShouldReturnNullWhenKeyDoesNotExist[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "computePrefixCreatesCacheKeyCorrectly[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "computePrefixCreatesCacheKeyCorrectly[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getShouldReturnNullWhenKeyDoesNotExist[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "getShouldReturnNullWhenKeyDoesNotExist[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "computePrefixCreatesCacheKeyCorrectly[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putIfAbsentShouldReturnExistingNullValueIfExists[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putNullShouldAddEntryForNullValue[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "getShouldRetrieveEntry[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "getWithCallableShouldNotResolveValueIfPresent[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getShouldReturnValueWrapperHoldingNullIfNullValueStored[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "getWithCallableShouldNotResolveValueIfPresent[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putIfAbsentShouldAddEntryIfNotExists[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putNullShouldAddEntryForNullValue[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getWithCallableShouldResolveValueIfNotPresent[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "shouldRejectNonInvalidKey[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "getWithCallableShouldNotResolveValueIfPresent[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putIfAbsentShouldReturnExistingNullValueIfExists[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "getWithCallableShouldResolveValueIfNotPresent[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "putShouldAddEntry[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "shouldAllowComplexKeyWithToStringMethod[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "putShouldAddEntry[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getShouldReturnValueWrapperHoldingNullIfNullValueStored[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "evictShouldRemoveKey[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putIfAbsentShouldReturnExistingIfExists[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "shouldReadAndWriteSimpleCacheKey[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "getShouldReturnValueWrapperHoldingNullIfNullValueStored[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentShouldAddEntryIfNotExists[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "getShouldReturnValueWrapperHoldingNullIfNullValueStored[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "computePrefixCreatesCacheKeyCorrectly[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "shouldRejectNonInvalidKey[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putShouldAddEntry[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentShouldAddEntryIfNotExists[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "getShouldRetrieveEntry[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentShouldReturnExistingIfExists[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "shouldRejectNonInvalidKey[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putIfAbsentShouldReturnExistingIfExists[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putNullShouldAddEntryForNullValue[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "computePrefixCreatesCacheKeyCorrectly[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "getShouldRetrieveEntry[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putShouldAddEntry[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "getShouldRetrieveEntry[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "shouldAllowComplexKeyWithToStringMethod[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putNullShouldAddEntryForNullValue[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "shouldRejectNonInvalidKey[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putIfAbsentShouldAddEntryIfNotExists[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "getShouldRetrieveEntry[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "shouldAllowComplexKeyWithToStringMethod[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "putShouldAddEntry[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putIfAbsentShouldAddEntryIfNotExists[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "shouldRejectNonInvalidKey[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putIfAbsentShouldReturnExistingNullValueIfExists[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "evictShouldRemoveKey[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "shouldReadAndWriteSimpleCacheKey[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentShouldReturnExistingNullValueIfExists[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentShouldReturnExistingIfExists[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getShouldReturnNullWhenKeyDoesNotExist[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getWithCallableShouldNotResolveValueIfPresent[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "fetchKeyWithComputedPrefixReturnsExpectedResult[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentShouldReturnExistingNullValueIfExists[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "shouldReadAndWriteSimpleCacheKey[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "getWithCallableShouldResolveValueIfNotPresent[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "fetchKeyWithComputedPrefixReturnsExpectedResult[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "shouldReadAndWriteSimpleCacheKey[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "putNullShouldAddEntryForNullValue[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "fetchKeyWithComputedPrefixReturnsExpectedResult[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "evictShouldRemoveKey[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getShouldRetrieveEntry[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "shouldRejectNonInvalidKey[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentShouldReturnExistingNullValueIfExists[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "fetchKeyWithComputedPrefixReturnsExpectedResult[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "evictShouldRemoveKey[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "putShouldAddEntry[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putIfAbsentShouldReturnExistingIfExists[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "fetchKeyWithComputedPrefixReturnsExpectedResult[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getShouldReturnValueWrapperHoldingNullIfNullValueStored[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "getWithCallableShouldNotResolveValueIfPresent[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "getShouldReturnValueWrapperHoldingNullIfNullValueStored[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getWithCallableShouldResolveValueIfNotPresent[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "getWithCallableShouldResolveValueIfNotPresent[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "fetchKeyWithComputedPrefixReturnsExpectedResult[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "putNullShouldAddEntryForNullValue[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "computePrefixCreatesCacheKeyCorrectly[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "getWithCallableShouldNotResolveValueIfPresent[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "putIfAbsentShouldReturnExistingIfExists[0: JedisConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "shouldReadAndWriteSimpleCacheKey[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "putIfAbsentWithNullShouldAddNullValueEntryIfNotExists[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]",
        "evictShouldRemoveKey[5: LettuceConnectionFactory \u0026 OxmSerializer]",
        "evictShouldRemoveKey[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "shouldAllowComplexKeyWithToStringMethod[4: LettuceConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "getShouldReturnNullWhenKeyDoesNotExist[2: JedisConnectionFactory \u0026 OxmSerializer]",
        "shouldAllowComplexKeyWithToStringMethod[1: JedisConnectionFactory \u0026 GenericJackson2JsonRedisSerializer]",
        "shouldAllowComplexKeyWithToStringMethod[3: LettuceConnectionFactory \u0026 JdkSerializationRedisSerializer]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 102
    },
    {
      "className": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
      "failingMethods": [],
      "erroringMethods": [
        "listenerShouldNotReactToDeleteEvents",
        "listenerShouldPublishEventCorrectly"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "saveAndFindQualified",
        "saveAndFindUnqualified"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.core.script.AbstractDefaultScriptExecutorTests",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldFindByBooleanIsFalse",
        "shouldFindByBooleanIsTrue",
        "shouldApplyTopKeywordCorrectly",
        "shouldReturnEmptyListWhenPageableOutOfBoundsUsingFindAll",
        "shouldApplyTopKeywordCorrectlyWhenCriteriaPresent",
        "shouldConsiderCustomTypeMapper",
        "shouldReturnEmptyListWhenPageableOutOfBoundsUsingQueryMethod",
        "nearQueryShouldFindNothingIfOutOfRange",
        "shouldReturnNewObjectInstanceOnImmutableSaveAll",
        "shouldFindByExample",
        "shouldApplyPageableCorrectlyWhenUsingFindAll",
        "findReturnsPageCorrectly",
        "nearQueryShouldReturnResultsCorrectlyOnNestedProperty",
        "findUsingOrReturnsResultCorrectly",
        "simpleFindByMultipleProperties",
        "findReturnsReferenceDataCorrectly",
        "simpleFindShouldReturnEntitiesCorrectly",
        "shouldReturnNewObjectInstanceOnImmutableSave",
        "nearQueryShouldReturnResultsCorrectly",
        "shouldApplyFirstKeywordCorrectly",
        "shouldProperlyReadNestedImmutableObject",
        "shouldApplyPageableCorrectlyWhenUsingFindByWithoutCriteria"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 22
    },
    {
      "className": "org.springframework.data.redis.support.BoundKeyOperationsTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubResubscribeTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubResubscribeTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveHashOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "entries[raw]",
        "getAbsentKey[raw]",
        "put[raw]",
        "scan[raw]",
        "remove[raw]",
        "putAll[String]",
        "keys[String]",
        "size[raw]",
        "hasKey[String]",
        "putAll[raw]",
        "multiGet[raw]",
        "multiGetAbsentKeys[raw]",
        "entries[String]",
        "increment[raw]",
        "values[String]",
        "scan[String]",
        "put[String]",
        "putIfAbsent[raw]",
        "delete[String]",
        "multiGet[String]",
        "incrementDouble[raw]",
        "multiGetAbsentKeys[String]",
        "get[raw]",
        "remove[String]",
        "keys[raw]",
        "size[String]",
        "putIfAbsent[String]",
        "delete[raw]",
        "increment[String]",
        "hasKey[raw]",
        "getAbsentKey[String]",
        "incrementDouble[String]",
        "get[String]",
        "values[raw]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 34
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
      "failingMethods": [],
      "erroringMethods": [
        "testResetConnection",
        "connectionAppliesClientName",
        "testGetNewConnectionOnError",
        "testGetConnectionException",
        "testResetAndInitConnection",
        "factoryUsesElastiCacheMasterWithoutMaster",
        "factoryCreatesPooledConnections",
        "factoryUsesElastiCacheMasterSlaveConnections",
        "dbIndexShouldBePropagatedCorrectly",
        "factoryShouldReturnReactiveConnectionWhenCorrectly",
        "testConnectionErrorNoValidate",
        "testCreateFactoryWithPool",
        "testInitConnection",
        "testGetSharedConnectionNotShared",
        "connectsThroughRedisSocket",
        "testDisableSharedConnection",
        "testSelectDb",
        "testGetConnectionNotSharedBadHostname",
        "testValidateNoError",
        "factoryWorksWithoutClientResources",
        "getClientNameShouldEqualWithFactorySetting",
        "factoryUsesMasterSlaveConnections"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 22
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "testScanWorksCorrectly[6]",
        "testContainsObject[3]",
        "testClear[5]",
        "testAdd[5]",
        "testDiff[7]",
        "testDiffAndStore[8]",
        "testUnionAndStore[7]",
        "testToString[11]",
        "testIsEmpty[8]",
        "testToString[12]",
        "testUnionAndStore[14]",
        "testToString[3]",
        "testDiffAndStore[7]",
        "testSize[7]",
        "testToArray[5]",
        "testEquals[8]",
        "testGetKey[10]",
        "testAddAll[6]",
        "testEquals[12]",
        "testDiffAndStore[11]",
        "testContainsObject[2]",
        "testScanWorksCorrectly[7]",
        "testIterator[0]",
        "testAddAll[7]",
        "testEquals[7]",
        "testClear[4]",
        "testUnionAndStore[6]",
        "testDiff[8]",
        "testIsEmpty[9]",
        "testAdd[6]",
        "testToString[10]",
        "testToString[4]",
        "testUnionAndStore[13]",
        "testDiffAndStore[6]",
        "testSize[8]",
        "testToArray[4]",
        "testDiffAndStore[10]",
        "testEquals[13]",
        "testContainsObject[5]",
        "testClear[7]",
        "testAdd[3]",
        "testDiff[9]",
        "testIterator[1]",
        "testContainsAll[10]",
        "testUnionAndStore[5]",
        "testIsEmpty[6]",
        "testToString[14]",
        "testSize[9]",
        "testDiffAndStore[5]",
        "testIntersect[14]",
        "testGetKey[12]",
        "testToArray[7]",
        "testDiff[14]",
        "testDiffAndStore[13]",
        "testToString[1]",
        "testScanWorksCorrectly[3]",
        "testAddAll[4]",
        "testEquals[14]",
        "testContainsObject[4]",
        "testScanWorksCorrectly[5]",
        "testIntersect[0]",
        "testAdd[4]",
        "testClear[6]",
        "testUnionAndStore[4]",
        "testIterator[2]",
        "testIsEmpty[7]",
        "testToString[13]",
        "testDiffAndStore[4]",
        "testToArray[6]",
        "testEquals[9]",
        "testGetKey[11]",
        "testToString[2]",
        "testScanWorksCorrectly[4]",
        "testAddAll[5]",
        "testDiffAndStore[12]",
        "testIntersect[9]",
        "testClear[1]",
        "testUnion[9]",
        "testGetKey[3]",
        "testDiff[3]",
        "testAdd[9]",
        "testDiffAndStore[3]",
        "testIsEmpty[4]",
        "testDiff[12]",
        "testToString[7]",
        "testAddAll[2]",
        "testIntersect[12]",
        "testToArray[9]",
        "testUnionAndStore[10]",
        "testIsEmpty[11]",
        "testScanWorksCorrectly[1]",
        "testClear[0]",
        "testUnion[8]",
        "testGetKey[2]",
        "testDiff[4]",
        "testDiffAndStore[2]",
        "testIsEmpty[5]",
        "removeAll[9]",
        "testToString[8]",
        "testIntersect[13]",
        "removeAll[14]",
        "testToArray[8]",
        "testDiff[13]",
        "testToArray[14]",
        "testContainsAll[0]",
        "testScanWorksCorrectly[2]",
        "testAddAll[3]",
        "testIsEmpty[12]",
        "testToArrayWithGenerics[1]",
        "testContainsObject[1]",
        "testUnion[7]",
        "testUnion[10]",
        "testClear[3]",
        "testRemoveObject[8]",
        "testIntersect[10]",
        "testUnionAndStore[9]",
        "testGetKey[1]",
        "testDiff[5]",
        "testAdd[7]",
        "testContainsAll[1]",
        "testToString[5]",
        "testDiffAndStore[1]",
        "testIsEmpty[2]",
        "removeAll[8]",
        "testDiff[10]",
        "removeAll[13]",
        "testHashCode[0]",
        "testAddAll[0]",
        "testEquals[10]",
        "testUnion[11]",
        "testUnionAndStore[12]",
        "testUnion[6]",
        "testToArrayWithGenerics[0]",
        "testClear[2]",
        "testRemoveObject[9]",
        "testRemoveObject[10]",
        "testUnionAndStore[8]",
        "testDiff[6]",
        "testGetKey[0]",
        "testAdd[8]",
        "testContainsObject[0]",
        "testContainsAll[2]",
        "testToString[6]",
        "testDiffAndStore[0]",
        "removeAll[7]",
        "testIsEmpty[3]",
        "testDiff[11]",
        "testScanWorksCorrectly[0]",
        "testAddAll[1]",
        "testIsEmpty[10]",
        "testHashCode[1]",
        "testIntersect[11]",
        "removeAll[12]",
        "testEquals[11]",
        "testUnionAndStore[11]",
        "testUnion[12]",
        "testEquals[0]",
        "testUnion[5]",
        "testRemoveObject[6]",
        "testHashCode[10]",
        "testAddAll[14]",
        "testSize[10]",
        "testIntersect[5]",
        "removeAll[10]",
        "testGetKey[7]",
        "testRemoveObject[11]",
        "testIterator[7]",
        "testToArrayWithGenerics[3]",
        "testClear[10]",
        "testContainsAll[3]",
        "removeAll[6]",
        "testAdd[11]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "removeAll[11]",
        "testToArray[11]",
        "testUnion[13]",
        "testUnion[4]",
        "testToArrayWithGenerics[2]",
        "testRemoveObject[7]",
        "testIntersect[6]",
        "testGetKey[6]",
        "testSize[11]",
        "testRemoveObject[12]",
        "testScanWorksCorrectly[14]",
        "testIterator[8]",
        "testSize[0]",
        "removeAll[5]",
        "testContainsAll[4]",
        "testDiff[0]",
        "testIterator[9]",
        "testIsEmpty[1]",
        "testAdd[10]",
        "testHashCode[3]",
        "testToArray[10]",
        "testUnion[14]",
        "testRemoveObject[4]",
        "testAddAll[12]",
        "testEquals[2]",
        "testSize[12]",
        "testIntersect[7]",
        "testGetKey[5]",
        "testAdd[13]",
        "testRemoveObject[13]",
        "testToArrayWithGenerics[5]",
        "testSize[1]",
        "testUnion[3]",
        "testClear[12]",
        "removeAll[4]",
        "testDiff[1]",
        "testContainsAll[5]",
        "testToString[9]",
        "testHashCode[4]",
        "testContainsObject[10]",
        "testToArray[13]",
        "testIsEmpty[13]",
        "testHashCode[12]",
        "testEquals[1]",
        "testIntersect[8]",
        "testAddAll[13]",
        "testRemoveObject[5]",
        "testSize[13]",
        "testGetKey[4]",
        "testSize[2]",
        "testRemoveObject[14]",
        "testDiff[2]",
        "testUnion[2]",
        "testToArrayWithGenerics[4]",
        "testClear[11]",
        "testContainsAll[6]",
        "testAdd[12]",
        "testHashCode[5]",
        "testContainsObject[11]",
        "testToArrayWithGenerics[14]",
        "testHashCode[11]",
        "testToArray[12]",
        "testIsEmpty[14]",
        "removeAll[3]",
        "testSize[14]",
        "testAdd[1]",
        "testEquals[4]",
        "testIterator[13]",
        "testContainsObject[7]",
        "testAddAll[10]",
        "testIntersect[1]",
        "testToArrayWithGenerics[7]",
        "testClear[9]",
        "testSize[3]",
        "testUnion[1]",
        "testIterator[3]",
        "testContainsAll[12]",
        "testUnionAndStore[3]",
        "testScanWorksCorrectly[11]",
        "testHashCode[6]",
        "testToArray[1]",
        "testClear[14]",
        "testContainsAll[7]",
        "testToArrayWithGenerics[13]",
        "testContainsObject[12]",
        "testIterator[14]",
        "testRemoveObject[2]",
        "removeAll[2]",
        "testHashCode[14]",
        "testGetKey[14]",
        "testEquals[3]",
        "testContainsObject[6]",
        "testIterator[12]",
        "testAddAll[11]",
        "testSize[4]",
        "testIntersect[2]",
        "testAdd[2]",
        "testClear[8]",
        "testAdd[14]",
        "testUnion[0]",
        "testToArrayWithGenerics[6]",
        "testContainsAll[11]",
        "testUnionAndStore[2]",
        "testScanWorksCorrectly[10]",
        "testIterator[4]",
        "testUnionAndStore[1]",
        "testToArray[0]",
        "testHashCode[7]",
        "testContainsAll[8]",
        "testClear[13]",
        "testToArrayWithGenerics[12]",
        "testContainsObject[13]",
        "removeAll[1]",
        "testDiffAndStore[14]",
        "testToString[0]",
        "testHashCode[13]",
        "testGetKey[13]",
        "testRemoveObject[3]",
        "testScanWorksCorrectly[8]",
        "testAddAll[8]",
        "testGetKey[9]",
        "testContainsObject[14]",
        "testToArrayWithGenerics[11]",
        "testEquals[6]",
        "testIterator[11]",
        "testIterator[5]",
        "testToArrayWithGenerics[9]",
        "testSize[5]",
        "testContainsAll[9]",
        "testIntersect[3]",
        "testScanWorksCorrectly[13]",
        "testUnionAndStore[0]",
        "testContainsAll[14]",
        "testHashCode[8]",
        "testToArray[3]",
        "testContainsObject[9]",
        "testRemoveObject[0]",
        "removeAll[0]",
        "testAddAll[9]",
        "testIntersect[4]",
        "testEquals[5]",
        "testAdd[0]",
        "testGetKey[8]",
        "testContainsObject[8]",
        "testIterator[10]",
        "testScanWorksCorrectly[9]",
        "testToArrayWithGenerics[10]",
        "testIterator[6]",
        "testToArrayWithGenerics[8]",
        "testDiffAndStore[9]",
        "testScanWorksCorrectly[12]",
        "testContainsAll[13]",
        "testHashCode[9]",
        "testToArray[2]",
        "testSize[6]",
        "testRemoveObject[1]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 330
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReadBackExplicitTimeToLive[1]",
        "partialUpdate[0]",
        "partialUpdateSimpleTypedList[1]",
        "shouldReadBackExplicitTimeToLiveToPrimitiveField[0]",
        "partialUpdateObjectType[0]",
        "partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[0]",
        "shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[0]",
        "updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[1]",
        "partialUpdateComplexTypedMap[1]",
        "partialUpdateSimpleType[1]",
        "findProcessesCallbackReturningSingleIdCorrectly[0]",
        "partialUpdateSimpleTypedMap[1]",
        "shouldReadImmutableType[0]",
        "findProcessesCallbackReturningNullCorrectly[1]",
        "savesObjectCorrectly[0]",
        "shouldWriteImmutableType[1]",
        "partialUpdateComplexType[0]",
        "partialUpdateObjectTypedList[1]",
        "partialUpdateObjectTypedMap[0]",
        "shouldReadBackExplicitTimeToLiveWhenFetchingList[1]",
        "findProcessesCallbackReturningMultipleIdsCorrectly[0]",
        "partialUpdateComplexTypedList[0]",
        "partialUpdateSimpleTypedList[0]",
        "findProcessesCallbackReturningMultipleIdsCorrectly[1]",
        "shouldReadBackExplicitTimeToLiveWhenFetchingList[0]",
        "partialUpdate[1]",
        "partialUpdateObjectType[1]",
        "partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[1]",
        "shouldReadBackExplicitTimeToLiveToPrimitiveField[1]",
        "updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[0]",
        "shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[1]",
        "partialUpdateComplexTypedMap[0]",
        "findProcessesCallbackReturningSingleIdCorrectly[1]",
        "partialUpdateSimpleTypedMap[0]",
        "partialUpdateSimpleType[0]",
        "findProcessesCallbackReturningNullCorrectly[0]",
        "shouldReadImmutableType[1]",
        "savesObjectCorrectly[1]",
        "partialUpdateComplexType[1]",
        "partialUpdateObjectTypedList[0]",
        "shouldWriteImmutableType[0]",
        "partialUpdateObjectTypedMap[1]",
        "shouldReadBackExplicitTimeToLive[0]",
        "partialUpdateComplexTypedList[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 88
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveValueOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "multiGet[String/Person/JDK]",
        "size[String/OXM]",
        "incrementByFloatDelta[String/Person/JDK]",
        "incrementByFloatDelta[Long]",
        "multiSetIfAbsent[Pooled/Person/JDK]",
        "getAndSet[String/Person/JDK]",
        "size[Double]",
        "setWithExpiry[Generic Jackson 2]",
        "setBit[String/Person/JDK]",
        "setIfPresentWithExpiry[raw]",
        "incrementByLongDelta[String/Person/JDK]",
        "setBit[Person/JDK]",
        "increment[Double]",
        "decrementByLongDelta[Jackson2]",
        "getBit[Double]",
        "get[String/Person/JDK]",
        "append[String]",
        "getBit[String/OXM]",
        "multiGet[Jackson2]",
        "setWithExpiry[raw]",
        "multiSetIfAbsent[String/Person/OXM]",
        "increment[String/Person/JDK]",
        "setIfPresent[String/OXM]",
        "size[String]",
        "multiSetIfAbsent[raw]",
        "setIfPresentWithExpiry[Generic Jackson 2]",
        "delete[Jackson2]",
        "setWithExpiry[Double]",
        "decrementByLongDelta[Person/JDK]",
        "multiSet[Jackson2]",
        "increment[String]",
        "setWithExpiry[String]",
        "append[Pooled/Person/JDK]",
        "append[String/Person/OXM]",
        "set[Long]",
        "size[Jackson2]",
        "size[String/Person/JDK]",
        "setIfAbsent[String/Person/JDK]",
        "append[Double]",
        "set[Person/JDK]",
        "delete[String/OXM]",
        "setIfPresentWithExpiry[Long]",
        "setRange[Jackson2]",
        "setIfAbsent[raw]",
        "getRange[Generic Jackson 2]",
        "set[String/Person/OXM]",
        "setBit[Jackson2]",
        "incrementByFloatDelta[String/OXM]",
        "multiSetIfAbsent[Generic Jackson 2]",
        "getRange[String/OXM]",
        "getAndSet[raw]",
        "multiSet[Pooled/Person/JDK]",
        "get[String/OXM]",
        "multiSet[String/Person/OXM]",
        "incrementByLongDelta[Double]",
        "setIfAbsent[Double]",
        "append[raw]",
        "decrement[Jackson2]",
        "bitField[Pooled/Person/JDK]",
        "bitField[String/Person/OXM]",
        "incrementByFloatDelta[Jackson2]",
        "append[Jackson2]",
        "multiGet[Person/JDK]",
        "decrement[Generic Jackson 2]",
        "getRange[String/Person/JDK]",
        "delete[Double]",
        "decrement[Pooled/Person/JDK]",
        "setIfPresentWithExpiry[String]",
        "getAndSet[Generic Jackson 2]",
        "setWithExpiry[String/Person/JDK]",
        "setRange[String/Person/JDK]",
        "incrementByFloatDelta[Generic Jackson 2]",
        "multiSet[raw]",
        "setIfPresent[String/Person/JDK]",
        "size[Generic Jackson 2]",
        "increment[Generic Jackson 2]",
        "get[Generic Jackson 2]",
        "bitField[Long]",
        "incrementByLongDelta[Jackson2]",
        "setIfAbsentWithExpiry[String/Person/OXM]",
        "setIfAbsentWithExpiry[Jackson2]",
        "getBit[Jackson2]",
        "setWithExpiry[String/OXM]",
        "getRange[Person/JDK]",
        "setIfAbsent[Jackson2]",
        "setWithExpiry[Pooled/Person/JDK]",
        "getRange[Pooled/Person/JDK]",
        "setRange[Person/JDK]",
        "increment[Long]",
        "getBit[Long]",
        "increment[Jackson2]",
        "decrement[String/Person/JDK]",
        "decrementByLongDelta[Long]",
        "delete[Person/JDK]",
        "multiSetIfAbsent[String]",
        "decrement[raw]",
        "multiSet[Double]",
        "append[Generic Jackson 2]",
        "append[Long]",
        "set[Double]",
        "decrementByLongDelta[String/Person/OXM]",
        "multiSetIfAbsent[Long]",
        "set[raw]",
        "append[String/Person/JDK]",
        "incrementByLongDelta[String]",
        "setIfPresentWithExpiry[Pooled/Person/JDK]",
        "setIfAbsentWithExpiry[raw]",
        "getAndSet[String/OXM]",
        "multiSet[String/OXM]",
        "setBit[String]",
        "set[String/OXM]",
        "setIfAbsentWithExpiry[String/OXM]",
        "multiSetIfAbsent[String/OXM]",
        "bitField[raw]",
        "setRange[Long]",
        "getRange[String]",
        "decrement[String/OXM]",
        "getBit[String/Person/OXM]",
        "delete[String/Person/OXM]",
        "bitField[String/OXM]",
        "increment[Pooled/Person/JDK]",
        "incrementByLongDelta[Pooled/Person/JDK]",
        "getBit[String]",
        "setIfPresent[Long]",
        "multiGet[Double]",
        "setIfPresentWithExpiry[String/Person/JDK]",
        "incrementByLongDelta[Generic Jackson 2]",
        "get[String]",
        "setIfPresent[Pooled/Person/JDK]",
        "setIfAbsent[String/Person/OXM]",
        "get[Person/JDK]",
        "setIfPresent[Double]",
        "setIfAbsent[Pooled/Person/JDK]",
        "setIfPresent[Generic Jackson 2]",
        "setRange[Generic Jackson 2]",
        "setRange[String/OXM]",
        "getRange[Long]",
        "setRange[raw]",
        "setWithExpiry[Person/JDK]",
        "decrement[Person/JDK]",
        "setIfAbsentWithExpiry[Generic Jackson 2]",
        "delete[Long]",
        "incrementByFloatDelta[Double]",
        "getAndSet[String]",
        "get[Double]",
        "append[String/OXM]",
        "set[String]",
        "decrement[Long]",
        "bitField[String/Person/JDK]",
        "setRange[Double]",
        "incrementByFloatDelta[String/Person/OXM]",
        "incrementByFloatDelta[Pooled/Person/JDK]",
        "setIfAbsent[Person/JDK]",
        "getAndSet[Jackson2]",
        "set[Jackson2]",
        "incrementByFloatDelta[String]",
        "multiSet[String/Person/JDK]",
        "multiGet[Pooled/Person/JDK]",
        "setBit[Double]",
        "multiGet[String/Person/OXM]",
        "getAndSet[Long]",
        "getBit[raw]",
        "getRange[raw]",
        "decrementByLongDelta[String/OXM]",
        "setRange[String]",
        "incrementByFloatDelta[Person/JDK]",
        "setWithExpiry[Long]",
        "getRange[Double]",
        "setIfPresent[raw]",
        "multiSetIfAbsent[Jackson2]",
        "size[Pooled/Person/JDK]",
        "setBit[String/Person/OXM]",
        "setBit[Pooled/Person/JDK]",
        "incrementByLongDelta[String/OXM]",
        "setIfAbsentWithExpiry[Long]",
        "multiGet[String]",
        "setIfPresentWithExpiry[String/OXM]",
        "getAndSet[Double]",
        "bitField[Generic Jackson 2]",
        "setIfPresent[String]",
        "setRange[String/Person/OXM]",
        "setWithExpiry[Jackson2]",
        "setBit[String/OXM]",
        "multiSet[Long]",
        "get[String/Person/OXM]",
        "getAndSet[String/Person/OXM]",
        "getAndSet[Pooled/Person/JDK]",
        "setIfAbsent[Generic Jackson 2]",
        "get[Pooled/Person/JDK]",
        "multiSetIfAbsent[String/Person/JDK]",
        "size[String/Person/OXM]",
        "bitField[String]",
        "get[Jackson2]",
        "multiSet[Generic Jackson 2]",
        "increment[String/OXM]",
        "bitField[Jackson2]",
        "setRange[Pooled/Person/JDK]",
        "decrementByLongDelta[String]",
        "setIfAbsent[String/OXM]",
        "setIfPresentWithExpiry[Jackson2]",
        "incrementByLongDelta[raw]",
        "decrement[String/Person/OXM]",
        "decrement[Double]",
        "setIfAbsent[String]",
        "setIfPresent[Person/JDK]",
        "append[Person/JDK]",
        "bitField[Double]",
        "incrementByFloatDelta[raw]",
        "multiSet[String]",
        "getBit[Person/JDK]",
        "multiGet[raw]",
        "setIfAbsentWithExpiry[Double]",
        "multiSetIfAbsent[Double]",
        "setIfAbsentWithExpiry[Pooled/Person/JDK]",
        "decrement[String]",
        "setBit[Generic Jackson 2]",
        "setBit[Long]",
        "incrementByLongDelta[Long]",
        "set[Generic Jackson 2]",
        "setIfPresentWithExpiry[Double]",
        "decrementByLongDelta[Generic Jackson 2]",
        "setWithExpiry[String/Person/OXM]",
        "delete[String/Person/JDK]",
        "setIfAbsentWithExpiry[Person/JDK]",
        "delete[raw]",
        "getRange[String/Person/OXM]",
        "size[Person/JDK]",
        "multiSet[Person/JDK]",
        "multiGet[Long]",
        "set[Pooled/Person/JDK]",
        "multiGet[String/OXM]",
        "setIfAbsentWithExpiry[String]",
        "bitField[Person/JDK]",
        "multiGet[Generic Jackson 2]",
        "get[Long]",
        "setIfPresent[Jackson2]",
        "multiSetIfAbsent[Person/JDK]",
        "setIfPresentWithExpiry[String/Person/OXM]",
        "getBit[Generic Jackson 2]",
        "increment[Person/JDK]",
        "decrementByLongDelta[Pooled/Person/JDK]",
        "size[raw]",
        "increment[String/Person/OXM]",
        "setIfPresentWithExpiry[Person/JDK]",
        "incrementByLongDelta[Person/JDK]",
        "getRange[Jackson2]",
        "increment[raw]",
        "getAndSet[Person/JDK]",
        "decrementByLongDelta[Double]",
        "getBit[String/Person/JDK]",
        "delete[String]",
        "set[String/Person/JDK]",
        "setIfAbsent[Long]",
        "get[raw]",
        "decrementByLongDelta[raw]",
        "setIfPresent[String/Person/OXM]",
        "getBit[Pooled/Person/JDK]",
        "size[Long]",
        "decrementByLongDelta[String/Person/JDK]",
        "delete[Pooled/Person/JDK]",
        "setIfAbsentWithExpiry[String/Person/JDK]",
        "setBit[raw]",
        "delete[Generic Jackson 2]",
        "incrementByLongDelta[String/Person/OXM]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 264
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveZSetOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "size[String/OXM]",
        "reverseRank[String/Person/OXM]",
        "incrementScore[Long]",
        "rangeByScoreWithScoresWithLimit[Double]",
        "reverseRangeByScoreWithScores[raw]",
        "range[Pooled/Person/JDK]",
        "rangeWithScores[Person/JDK]",
        "size[Double]",
        "intersectAndStoreWithAggregation[Double]",
        "count[String/Person/OXM]",
        "rangeByLex[String]",
        "range[String/OXM]",
        "reverseRank[String/OXM]",
        "range[String/Person/OXM]",
        "count[Jackson2]",
        "reverseRangeByScoreWithScores[Generic Jackson 2]",
        "unionAndStoreWithAggregation[String/Person/OXM]",
        "rangeByScore[Person/JDK]",
        "rangeByLex[String/OXM]",
        "intersectAndStore[String]",
        "add[raw]",
        "rangeByLex[String/Person/OXM]",
        "rangeByLex[Pooled/Person/JDK]",
        "rangeByLexWithLimit[String]",
        "unionAndStore[raw]",
        "rangeByScoreWithScoresWithLimit[String]",
        "reverseRangeByScoreWithScoresWithLimit[raw]",
        "removeRange[String/OXM]",
        "rangeWithScores[String/Person/OXM]",
        "removeRange[String/Person/JDK]",
        "rangeWithScores[Pooled/Person/JDK]",
        "rangeByScoreWithLimit[Pooled/Person/JDK]",
        "size[String]",
        "reverseRank[Long]",
        "intersectAndStoreWithAggregation[String/Person/JDK]",
        "reverseRangeWithScores[String/OXM]",
        "reverseRangeByLexLimit[String/Person/OXM]",
        "reverseRangeByScoreWithLimit[String/Person/OXM]",
        "delete[Jackson2]",
        "rangeByScoreWithLimit[String/Person/OXM]",
        "score[Jackson2]",
        "reverseRangeByLexLimit[Generic Jackson 2]",
        "intersectAndStoreWithAggregation[String]",
        "removeRangeByScore[String]",
        "rangeByLexWithLimit[String/Person/OXM]",
        "addAll[raw]",
        "rangeByLexWithLimit[Pooled/Person/JDK]",
        "intersectAndStore[Person/JDK]",
        "reverseRangeByScoreWithLimit[Pooled/Person/JDK]",
        "remove[String/Person/OXM]",
        "remove[Pooled/Person/JDK]",
        "remove[String/OXM]",
        "removeRangeByScore[String/Person/JDK]",
        "size[Jackson2]",
        "size[String/Person/JDK]",
        "rangeWithScores[Generic Jackson 2]",
        "reverseRangeByScoreWithScores[Person/JDK]",
        "count[String]",
        "incrementScore[String/Person/JDK]",
        "delete[String/OXM]",
        "unionAndStore[Pooled/Person/JDK]",
        "rank[String/Person/JDK]",
        "unionAndStore[String/Person/OXM]",
        "remove[raw]",
        "add[String/Person/OXM]",
        "rangeByScore[Long]",
        "add[Pooled/Person/JDK]",
        "rangeByScoreWithScoresWithLimit[String/OXM]",
        "intersectAndStoreWithAggregation[Jackson2]",
        "reverseRank[Jackson2]",
        "rangeByScoreWithScoresWithLimit[Generic Jackson 2]",
        "reverseRangeByScoreWithScores[Long]",
        "incrementScore[raw]",
        "removeRangeByScore[Double]",
        "range[String]",
        "add[Generic Jackson 2]",
        "unionAndStoreWithAggregation[Generic Jackson 2]",
        "reverseRangeByScoreWithLimit[Person/JDK]",
        "reverseRangeWithScores[Double]",
        "rangeByLex[Double]",
        "rangeByScoreWithLimit[Jackson2]",
        "range[Long]",
        "intersectAndStore[Double]",
        "unionAndStoreWithAggregation[Jackson2]",
        "reverseRangeWithScores[Long]",
        "count[raw]",
        "rangeByLexWithLimit[Person/JDK]",
        "rangeByScoreWithScores[Long]",
        "reverseRangeByLexLimit[String/OXM]",
        "unionAndStoreWithAggregation[Pooled/Person/JDK]",
        "rangeByScoreWithScoresWithLimit[String/Person/JDK]",
        "unionAndStore[Generic Jackson 2]",
        "delete[Double]",
        "addAll[String/OXM]",
        "reverseRangeByScoreWithScoresWithLimit[String/Person/JDK]",
        "reverseRangeByScoreWithLimit[Double]",
        "count[Person/JDK]",
        "addAll[Long]",
        "size[Generic Jackson 2]",
        "reverseRangeWithScores[Pooled/Person/JDK]",
        "range[Person/JDK]",
        "score[raw]",
        "rangeByScore[Pooled/Person/JDK]",
        "reverseRangeByScoreWithScoresWithLimit[Double]",
        "rank[String/OXM]",
        "intersectAndStore[Long]",
        "add[String/OXM]",
        "incrementScore[String/OXM]",
        "reverseRangeByScore[String/Person/OXM]",
        "incrementScore[String]",
        "rangeByScore[String/OXM]",
        "rangeByScoreWithLimit[String/OXM]",
        "rangeWithScores[Long]",
        "reverseRangeByScoreWithScores[Jackson2]",
        "unionAndStore[Long]",
        "reverseRank[raw]",
        "reverseRangeByScore[raw]",
        "reverseRangeByScoreWithScores[Pooled/Person/JDK]",
        "rangeWithScores[String/OXM]",
        "intersectAndStore[String/Person/OXM]",
        "score[Generic Jackson 2]",
        "reverseRangeByScoreWithLimit[String]",
        "rangeByScoreWithScoresWithLimit[String/Person/OXM]",
        "reverseRangeByScoreWithScoresWithLimit[Pooled/Person/JDK]",
        "reverseRange[Double]",
        "rangeByScoreWithLimit[raw]",
        "reverseRangeByScore[String]",
        "reverseRangeByScoreWithScoresWithLimit[Long]",
        "rangeByScore[Double]",
        "reverseRangeByLex[String/Person/JDK]",
        "intersectAndStoreWithAggregation[Person/JDK]",
        "reverseRangeByScoreWithLimit[String/OXM]",
        "reverseRangeByScore[Double]",
        "rangeByScore[Jackson2]",
        "unionAndStore[String]",
        "delete[Person/JDK]",
        "rangeByScoreWithLimit[Long]",
        "scan[String/OXM]",
        "reverseRangeByScoreWithScoresWithLimit[String/OXM]",
        "intersectAndStoreWithAggregation[Long]",
        "rangeByScore[String/Person/JDK]",
        "rangeByLexWithLimit[Jackson2]",
        "intersectAndStore[Jackson2]",
        "reverseRangeByScore[Person/JDK]",
        "reverseRangeByLexLimit[Person/JDK]",
        "rank[Jackson2]",
        "intersectAndStoreWithAggregation[String/Person/OXM]",
        "reverseRangeByScoreWithLimit[Jackson2]",
        "rangeByScoreWithScores[String/Person/JDK]",
        "rangeByScore[Generic Jackson 2]",
        "reverseRange[String]",
        "removeRangeByScore[Long]",
        "count[Generic Jackson 2]",
        "rangeByScore[String]",
        "reverseRangeWithScores[Jackson2]",
        "range[Generic Jackson 2]",
        "reverseRange[Pooled/Person/JDK]",
        "count[String/Person/JDK]",
        "removeRangeByScore[String/Person/OXM]",
        "addAll[Double]",
        "reverseRange[Generic Jackson 2]",
        "add[Long]",
        "reverseRangeByScoreWithLimit[raw]",
        "unionAndStoreWithAggregation[Person/JDK]",
        "intersectAndStore[raw]",
        "rangeWithScores[Jackson2]",
        "scan[Long]",
        "rank[raw]",
        "score[String/Person/JDK]",
        "reverseRangeWithScores[Generic Jackson 2]",
        "reverseRangeWithScores[String/Person/JDK]",
        "removeRangeByScore[String/OXM]",
        "removeRangeByScore[Jackson2]",
        "reverseRange[raw]",
        "scan[String/Person/OXM]",
        "reverseRangeByScoreWithScores[String/OXM]",
        "delete[String/Person/OXM]",
        "range[String/Person/JDK]",
        "reverseRangeByScoreWithScoresWithLimit[String]",
        "reverseRangeByScoreWithLimit[Long]",
        "reverseRangeByLex[Pooled/Person/JDK]",
        "count[Pooled/Person/JDK]",
        "reverseRangeByScoreWithScores[String/Person/JDK]",
        "add[Jackson2]",
        "reverseRangeByLex[Person/JDK]",
        "addAll[String/Person/OXM]",
        "reverseRangeByLex[Generic Jackson 2]",
        "rangeByLexWithLimit[Double]",
        "incrementScore[Person/JDK]",
        "add[Person/JDK]",
        "remove[Double]",
        "removeRange[String/Person/OXM]",
        "score[Pooled/Person/JDK]",
        "rangeByLex[Jackson2]",
        "rangeByLexWithLimit[Long]",
        "score[String/Person/OXM]",
        "rangeByScoreWithLimit[Person/JDK]",
        "rangeByLex[Long]",
        "removeRange[Double]",
        "score[Person/JDK]",
        "rangeByScoreWithScores[Pooled/Person/JDK]",
        "reverseRange[Long]",
        "delete[Long]",
        "rangeByScoreWithScores[String/Person/OXM]",
        "reverseRangeByScoreWithScores[Double]",
        "reverseRange[String/OXM]",
        "reverseRangeByLex[Jackson2]",
        "removeRange[Pooled/Person/JDK]",
        "reverseRangeByLex[Double]",
        "rank[Pooled/Person/JDK]",
        "unionAndStoreWithAggregation[String/Person/JDK]",
        "scan[Jackson2]",
        "reverseRangeByScoreWithScoresWithLimit[Generic Jackson 2]",
        "add[String]",
        "reverseRangeByScore[Generic Jackson 2]",
        "remove[String]",
        "rank[String/Person/OXM]",
        "addAll[Person/JDK]",
        "reverseRange[String/Person/JDK]",
        "removeRangeByScore[raw]",
        "rangeByScoreWithLimit[Double]",
        "reverseRangeByLexLimit[String]",
        "removeRangeByScore[Person/JDK]",
        "rangeByScoreWithScoresWithLimit[Person/JDK]",
        "add[Double]",
        "reverseRangeByLex[String]",
        "reverseRangeByScoreWithLimit[String/Person/JDK]",
        "rangeByScoreWithScores[Generic Jackson 2]",
        "rank[Generic Jackson 2]",
        "scan[raw]",
        "score[Long]",
        "remove[Person/JDK]",
        "reverseRangeByLexLimit[Double]",
        "size[Pooled/Person/JDK]",
        "reverseRangeByScore[Long]",
        "rangeByScoreWithScores[String/OXM]",
        "rangeByScoreWithScoresWithLimit[raw]",
        "rangeByLex[raw]",
        "rangeByScore[raw]",
        "unionAndStore[Person/JDK]",
        "rangeByScoreWithScoresWithLimit[Pooled/Person/JDK]",
        "unionAndStore[String/OXM]",
        "remove[Jackson2]",
        "reverseRangeByScoreWithScoresWithLimit[String/Person/OXM]",
        "rangeByScoreWithScores[raw]",
        "rangeByScoreWithLimit[String/Person/JDK]",
        "incrementScore[Pooled/Person/JDK]",
        "add[String/Person/JDK]",
        "removeRange[Generic Jackson 2]",
        "unionAndStoreWithAggregation[Double]",
        "range[raw]",
        "incrementScore[String/Person/OXM]",
        "reverseRangeByLex[raw]",
        "remove[String/Person/JDK]",
        "rangeByLexWithLimit[String/Person/JDK]",
        "rangeByLexWithLimit[raw]",
        "size[String/Person/OXM]",
        "addAll[String]",
        "rangeWithScores[String/Person/JDK]",
        "reverseRangeByScoreWithScores[String]",
        "reverseRangeByScore[String/OXM]",
        "scan[Person/JDK]",
        "reverseRangeByLexLimit[Jackson2]",
        "incrementScore[Generic Jackson 2]",
        "count[String/OXM]",
        "removeRange[String]",
        "removeRange[Person/JDK]",
        "reverseRank[Person/JDK]",
        "reverseRange[Person/JDK]",
        "reverseRangeByLexLimit[raw]",
        "reverseRangeWithScores[String/Person/OXM]",
        "rangeByScore[String/Person/OXM]",
        "reverseRangeByScore[Pooled/Person/JDK]",
        "removeRangeByScore[Generic Jackson 2]",
        "addAll[Jackson2]",
        "reverseRangeByLex[Long]",
        "reverseRangeByLexLimit[Long]",
        "unionAndStore[Double]",
        "unionAndStoreWithAggregation[Long]",
        "rangeByScoreWithScores[String]",
        "scan[String]",
        "intersectAndStore[Pooled/Person/JDK]",
        "scan[String/Person/JDK]",
        "unionAndStoreWithAggregation[String]",
        "reverseRank[String]",
        "reverseRangeByScore[String/Person/JDK]",
        "rangeWithScores[String]",
        "score[String]",
        "rangeByScoreWithScores[Double]",
        "reverseRange[Jackson2]",
        "rangeByScoreWithScores[Person/JDK]",
        "delete[String/Person/JDK]",
        "intersectAndStoreWithAggregation[raw]",
        "delete[raw]",
        "size[Person/JDK]",
        "unionAndStoreWithAggregation[raw]",
        "reverseRangeByScoreWithScores[String/Person/OXM]",
        "reverseRangeByScoreWithScoresWithLimit[Jackson2]",
        "incrementScore[Double]",
        "unionAndStore[String/Person/JDK]",
        "unionAndStore[Jackson2]",
        "remove[Generic Jackson 2]",
        "unionAndStoreWithAggregation[String/OXM]",
        "reverseRangeByLex[String/OXM]",
        "rank[Long]",
        "rank[String]",
        "rangeByLex[Person/JDK]",
        "range[Double]",
        "incrementScore[Jackson2]",
        "rangeByLexWithLimit[Generic Jackson 2]",
        "reverseRank[Double]",
        "rangeByScoreWithScoresWithLimit[Long]",
        "reverseRangeWithScores[String]",
        "rangeByLex[String/Person/JDK]",
        "intersectAndStore[String/Person/JDK]",
        "intersectAndStore[Generic Jackson 2]",
        "removeRange[Long]",
        "count[Long]",
        "rangeByLex[Generic Jackson 2]",
        "rangeByLexWithLimit[String/OXM]",
        "intersectAndStoreWithAggregation[String/OXM]",
        "rangeWithScores[Double]",
        "rangeByScoreWithLimit[Generic Jackson 2]",
        "addAll[String/Person/JDK]",
        "rangeByScoreWithLimit[String]",
        "score[Double]",
        "intersectAndStoreWithAggregation[Pooled/Person/JDK]",
        "size[raw]",
        "reverseRangeByScoreWithLimit[Generic Jackson 2]",
        "removeRangeByScore[Pooled/Person/JDK]",
        "rank[Person/JDK]",
        "reverseRank[String/Person/JDK]",
        "reverseRangeByLexLimit[Pooled/Person/JDK]",
        "reverseRange[String/Person/OXM]",
        "rangeByScoreWithScores[Jackson2]",
        "remove[Long]",
        "rank[Double]",
        "delete[String]",
        "removeRange[raw]",
        "reverseRangeWithScores[raw]",
        "count[Double]",
        "reverseRangeByScore[Jackson2]",
        "rangeByScoreWithScoresWithLimit[Jackson2]",
        "addAll[Pooled/Person/JDK]",
        "size[Long]",
        "scan[Generic Jackson 2]",
        "scan[Pooled/Person/JDK]",
        "score[String/OXM]",
        "reverseRangeWithScores[Person/JDK]",
        "delete[Pooled/Person/JDK]",
        "removeRange[Jackson2]",
        "reverseRank[Generic Jackson 2]",
        "reverseRangeByLex[String/Person/OXM]",
        "intersectAndStoreWithAggregation[Generic Jackson 2]",
        "delete[Generic Jackson 2]",
        "reverseRangeByScoreWithScoresWithLimit[Person/JDK]",
        "scan[Double]",
        "intersectAndStore[String/OXM]",
        "rangeWithScores[raw]",
        "reverseRangeByLexLimit[String/Person/JDK]",
        "range[Jackson2]",
        "reverseRank[Pooled/Person/JDK]",
        "addAll[Generic Jackson 2]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 363
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveSetOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "distinctRandomMembers[String/Person/OXM]",
        "differenceAndStore[Double]",
        "members[String/Person/JDK]",
        "distinctRandomMembers[Pooled/Person/JDK]",
        "difference[Double]",
        "union[Jackson2]",
        "randomMembers[String]",
        "intersectAndStore[String]",
        "add[raw]",
        "union[String/OXM]",
        "isMember[raw]",
        "pop[Pooled/Person/JDK]",
        "pop[String/Person/OXM]",
        "unionAndStore[raw]",
        "distinctRandomMembers[Jackson2]",
        "difference[String]",
        "move[Generic Jackson 2]",
        "intersect[raw]",
        "delete[Jackson2]",
        "randomMembers[Double]",
        "pop[Jackson2]",
        "union[Long]",
        "intersectAndStore[Person/JDK]",
        "remove[String/Person/OXM]",
        "union[Generic Jackson 2]",
        "remove[Pooled/Person/JDK]",
        "remove[String/OXM]",
        "union[String/Person/OXM]",
        "union[String]",
        "move[Double]",
        "distinctRandomMembers[Person/JDK]",
        "union[Pooled/Person/JDK]",
        "difference[Person/JDK]",
        "delete[String/OXM]",
        "unionAndStore[Pooled/Person/JDK]",
        "popWithCount[Long]",
        "unionAndStore[String/Person/OXM]",
        "popWithCount[String/Person/JDK]",
        "remove[raw]",
        "add[String/Person/OXM]",
        "add[Pooled/Person/JDK]",
        "difference[String/OXM]",
        "add[Generic Jackson 2]",
        "differenceAndStore[String]",
        "differenceAndStore[Long]",
        "differenceAndStore[Pooled/Person/JDK]",
        "intersect[String/OXM]",
        "randomMembers[raw]",
        "distinctRandomMembers[String/OXM]",
        "differenceAndStore[String/Person/OXM]",
        "intersectAndStore[Double]",
        "move[String/OXM]",
        "randomMembers[Pooled/Person/JDK]",
        "unionAndStore[Generic Jackson 2]",
        "isMember[String]",
        "randomMembers[String/Person/OXM]",
        "delete[Double]",
        "popWithCount[raw]",
        "distinctRandomMembers[raw]",
        "members[Generic Jackson 2]",
        "isMember[Person/JDK]",
        "intersectAndStore[Long]",
        "randomMember[Double]",
        "add[String/OXM]",
        "intersect[String]",
        "unionAndStore[Long]",
        "difference[Jackson2]",
        "move[String]",
        "members[Long]",
        "distinctRandomMembers[String]",
        "intersectAndStore[String/Person/OXM]",
        "members[Jackson2]",
        "members[raw]",
        "unionAndStore[String]",
        "delete[Person/JDK]",
        "scan[String/OXM]",
        "randomMember[Person/JDK]",
        "intersectAndStore[Jackson2]",
        "intersect[Double]",
        "intersect[String/Person/JDK]",
        "move[Pooled/Person/JDK]",
        "randomMembers[String/OXM]",
        "add[Long]",
        "union[Double]",
        "differenceAndStore[Person/JDK]",
        "intersectAndStore[raw]",
        "move[String/Person/JDK]",
        "scan[Long]",
        "scan[String/Person/OXM]",
        "distinctRandomMembers[Generic Jackson 2]",
        "delete[String/Person/OXM]",
        "pop[raw]",
        "isMember[String/Person/OXM]",
        "intersect[Generic Jackson 2]",
        "add[Jackson2]",
        "intersect[Pooled/Person/JDK]",
        "difference[raw]",
        "add[Person/JDK]",
        "remove[Double]",
        "randomMember[raw]",
        "randomMember[Generic Jackson 2]",
        "members[Person/JDK]",
        "difference[Generic Jackson 2]",
        "intersect[Long]",
        "randomMembers[String/Person/JDK]",
        "pop[String]",
        "delete[Long]",
        "randomMembers[Long]",
        "popWithCount[Jackson2]",
        "scan[Jackson2]",
        "add[String]",
        "isMember[String/Person/JDK]",
        "remove[String]",
        "members[String/Person/OXM]",
        "differenceAndStore[Jackson2]",
        "pop[Double]",
        "isMember[Jackson2]",
        "difference[Long]",
        "pop[String/Person/JDK]",
        "popWithCount[Pooled/Person/JDK]",
        "move[Person/JDK]",
        "isMember[String/OXM]",
        "members[Pooled/Person/JDK]",
        "add[Double]",
        "popWithCount[String/Person/OXM]",
        "distinctRandomMembers[String/Person/JDK]",
        "popWithCount[String]",
        "differenceAndStore[String/Person/JDK]",
        "pop[String/OXM]",
        "popWithCount[Person/JDK]",
        "scan[raw]",
        "members[Double]",
        "difference[Pooled/Person/JDK]",
        "randomMember[String/Person/OXM]",
        "randomMember[Pooled/Person/JDK]",
        "difference[String/Person/OXM]",
        "differenceAndStore[Generic Jackson 2]",
        "remove[Person/JDK]",
        "popWithCount[Double]",
        "unionAndStore[Person/JDK]",
        "unionAndStore[String/OXM]",
        "remove[Jackson2]",
        "randomMember[Jackson2]",
        "add[String/Person/JDK]",
        "remove[String/Person/JDK]",
        "union[String/Person/JDK]",
        "scan[Person/JDK]",
        "randomMembers[Generic Jackson 2]",
        "intersect[Person/JDK]",
        "differenceAndStore[String/OXM]",
        "intersect[Jackson2]",
        "pop[Generic Jackson 2]",
        "unionAndStore[Double]",
        "differenceAndStore[raw]",
        "randomMember[Long]",
        "scan[String]",
        "intersectAndStore[Pooled/Person/JDK]",
        "scan[String/Person/JDK]",
        "distinctRandomMembers[Double]",
        "members[String/OXM]",
        "isMember[Double]",
        "randomMembers[Person/JDK]",
        "union[Person/JDK]",
        "move[raw]",
        "delete[String/Person/JDK]",
        "delete[raw]",
        "pop[Long]",
        "unionAndStore[String/Person/JDK]",
        "randomMember[String]",
        "unionAndStore[Jackson2]",
        "remove[Generic Jackson 2]",
        "union[raw]",
        "randomMembers[Jackson2]",
        "randomMember[String/Person/JDK]",
        "difference[String/Person/JDK]",
        "distinctRandomMembers[Long]",
        "popWithCount[Generic Jackson 2]",
        "intersectAndStore[String/Person/JDK]",
        "intersectAndStore[Generic Jackson 2]",
        "move[String/Person/OXM]",
        "move[Jackson2]",
        "members[String]",
        "popWithCount[String/OXM]",
        "isMember[Long]",
        "remove[Long]",
        "delete[String]",
        "intersect[String/Person/OXM]",
        "pop[Person/JDK]",
        "scan[Generic Jackson 2]",
        "move[Long]",
        "scan[Pooled/Person/JDK]",
        "randomMember[String/OXM]",
        "isMember[Generic Jackson 2]",
        "delete[Pooled/Person/JDK]",
        "isMember[Pooled/Person/JDK]",
        "delete[Generic Jackson 2]",
        "scan[Double]",
        "intersectAndStore[String/OXM]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 198
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveSetCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "sIsMemberShouldReturnFalseWhenValueNotContainedInKey[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sRemShouldRemoveValues[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sRemShouldRemoveSingleValue[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sInterShouldIntersectSetsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sDiffShouldBeExcecutedCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sDiffStoreShouldBeExcecutedCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sRandMemberReturnsRandomMember[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sAddShouldAddValues[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sPopShouldReturnNullWhenNotPresent[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sIsMemberShouldReturnTrueWhenValueContainedInKey[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sPopShouldRetrieveRandomValue[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sMoveShouldReturnOperateCorrectlyWhenValueAlreadyPresentInTarget[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sScanShouldIterateOverSet[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sPopCountShouldRetrieveValues[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sAddShouldAddSingleValue[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sCardShouldCountValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sMembersReadsValuesFromSetCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sRandMemberReturnsRandomMembers[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sMoveShouldReturnFalseIfValueIsNotAMember[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sMoveShouldMoveValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sUnionStoreShouldReturnSizeCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sUnionShouldCombineSetsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]",
        "sInterStoreShouldReturnSizeCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@63b95a30]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 46
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
      "failingMethods": [],
      "erroringMethods": [
        "testScanWorksCorrectly[6]",
        "testPut[3]",
        "testKeySet[10]",
        "testIncrementDouble[0]",
        "testPropertiesList[12]",
        "testClear[5]",
        "testRemove[0]",
        "testDefaultInit[4]",
        "testConcurrentReplaceOneArg[2]",
        "testIsEmpty[8]",
        "testConcurrentRemove[5]",
        "testPropertiesLoad[1]",
        "testEntrySet[5]",
        "testScanWorksCorrectly[7]",
        "testPut[2]",
        "testPropertiesList[13]",
        "testSetProperty[9]",
        "testIncrementDouble[1]",
        "testClear[4]",
        "testDefaultInit[3]",
        "testConcurrentReplaceOneArg[1]",
        "testRemove[1]",
        "testKeySet[11]",
        "testIsEmpty[9]",
        "testContainsKey[10]",
        "testGetProperty[13]",
        "testConcurrentRemove[4]",
        "testPropertiesLoad[2]",
        "testEntrySet[4]",
        "testPut[1]",
        "testIncrementNotNumber[11]",
        "testSetProperty[8]",
        "testPropertiesList[10]",
        "testClear[7]",
        "testDefaultInit[2]",
        "testConcurrentReplaceOneArg[12]",
        "testKeySet[12]",
        "testConcurrentReplaceOneArg[4]",
        "testIsEmpty[6]",
        "testContainsKey[11]",
        "testConcurrentRemove[3]",
        "testPropertiesLoad[3]",
        "testScanWorksCorrectly[3]",
        "testEntrySet[3]",
        "testPut[0]",
        "testIncrementNotNumber[12]",
        "testScanWorksCorrectly[5]",
        "testSetProperty[7]",
        "testPropertiesList[11]",
        "testDefaultInit[1]",
        "testClear[6]",
        "testKeySet[13]",
        "testConcurrentReplaceOneArg[3]",
        "testContainsKey[12]",
        "testConcurrentReplaceOneArg[13]",
        "testIsEmpty[7]",
        "testConcurrentRemove[2]",
        "testEntrySet[2]",
        "testPropertiesLoad[4]",
        "testScanWorksCorrectly[4]",
        "testIncrementNotNumber[13]",
        "testClear[1]",
        "testDefaultInit[0]",
        "testContainsKey[8]",
        "testReplaceNullNewValue[8]",
        "testIsEmpty[4]",
        "testRemove[4]",
        "testPropertiesList[9]",
        "testSetProperty[11]",
        "testPropertiesLoad[5]",
        "testEntrySet[1]",
        "testConcurrentRemove[9]",
        "testScanWorksCorrectly[1]",
        "testKeySet[9]",
        "testValues[0]",
        "testClear[0]",
        "testContainsKey[7]",
        "testReplaceNullNewValue[9]",
        "testIsEmpty[5]",
        "testRemove[5]",
        "testPropertiesLoad[6]",
        "testEntrySet[0]",
        "testSetProperty[10]",
        "testConcurrentRemove[8]",
        "testScanWorksCorrectly[2]",
        "testReplaceNullNewValue[6]",
        "testClear[3]",
        "testConcurrentReplaceOneArg[0]",
        "testRemove[2]",
        "testConcurrentReplaceTwoArgs[0]",
        "testIsEmpty[2]",
        "testPropertiesList[7]",
        "testPropertiesLoad[7]",
        "testConcurrentRemove[7]",
        "testClear[2]",
        "testContainsKey[9]",
        "testReplaceNullNewValue[7]",
        "testConcurrentReplaceTwoArgs[1]",
        "testIncrementNotNumber[0]",
        "testIsEmpty[3]",
        "testRemove[3]",
        "testPropertiesList[8]",
        "testPropertiesLoad[8]",
        "testScanWorksCorrectly[0]",
        "testConcurrentRemove[6]",
        "testEquals[0]",
        "testReplaceNullNewValue[4]",
        "testPutIfAbsent[10]",
        "testHashCode[10]",
        "testValues[3]",
        "testGetKey[7]",
        "testPropertiesSave[11]",
        "testPut[10]",
        "testGetOperations[3]",
        "testConcurrentReplaceTwoArgs[2]",
        "testRemove[8]",
        "testReplaceNullOldValue[6]",
        "testConcurrentRemove[11]",
        "testGet[7]",
        "testPropertiesLoad[9]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "testPut[11]",
        "testStringPropertyNames[4]",
        "testIncrement[2]",
        "testNotEquals[11]",
        "testPutIfAbsent[11]",
        "testPropertiesSave[12]",
        "testReplaceNullNewValue[5]",
        "testConcurrentReplaceTwoArgs[3]",
        "testValues[4]",
        "testPropertyNames[0]",
        "testGetKey[6]",
        "testNotEquals[9]",
        "testGetOperations[2]",
        "testSize[0]",
        "testPutIfAbsent[0]",
        "testGet[6]",
        "testReplaceNullOldValue[7]",
        "testRemove[9]",
        "testConcurrentRemove[12]",
        "testIsEmpty[1]",
        "testIncrement[1]",
        "testNotEquals[8]",
        "testNotEquals[12]",
        "testHashCode[3]",
        "testPut[12]",
        "testStringPropertyNames[5]",
        "testPropertiesSave[13]",
        "testConcurrentReplaceTwoArgs[4]",
        "testEquals[2]",
        "testPropertyNames[1]",
        "testValues[1]",
        "testReplaceNullNewValue[2]",
        "testGetKey[5]",
        "testSize[1]",
        "testGetOperations[5]",
        "testReplaceNullOldValue[8]",
        "testReplaceNullValue[10]",
        "testGet[9]",
        "testHashCode[4]",
        "testRemove[6]",
        "testIncrement[0]",
        "testNotEquals[7]",
        "testNotEquals[13]",
        "testPut[13]",
        "testStringPropertyNames[2]",
        "testHashCode[12]",
        "testEquals[1]",
        "testReplaceNullNewValue[3]",
        "testConcurrentReplaceTwoArgs[5]",
        "testPropertyNames[2]",
        "testValues[2]",
        "testGetOperations[4]",
        "testGetKey[4]",
        "testSize[2]",
        "testConcurrentRemove[10]",
        "testDefaultInit[9]",
        "testRemove[7]",
        "testReplaceNullOldValue[9]",
        "testGet[8]",
        "testHashCode[5]",
        "testStringPropertyNames[3]",
        "testNotEquals[6]",
        "testHashCode[11]",
        "testConcurrentReplaceTwoArgs[6]",
        "testReplaceNullNewValue[0]",
        "testPropertyNames[3]",
        "testEquals[4]",
        "testConcurrentReplaceOneArg[10]",
        "testStringPropertyNames[10]",
        "testSize[3]",
        "testGet[2]",
        "testContainsKey[13]",
        "testReplaceNullOldValue[2]",
        "testDefaultInit[8]",
        "testReplaceNullValue[12]",
        "testConcurrentRemove[1]",
        "testHashCode[6]",
        "testGetProperty[10]",
        "testGetPropertyDefault[11]",
        "testValues[7]",
        "testNotEquals[5]",
        "testStringPropertyNames[8]",
        "testEquals[3]",
        "testPropertyNames[4]",
        "testStringPropertyNames[9]",
        "testReplaceNullNewValue[1]",
        "testConcurrentReplaceTwoArgs[7]",
        "testSize[4]",
        "testStringPropertyNames[11]",
        "testConcurrentReplaceOneArg[11]",
        "testDefaultInit[7]",
        "testGet[1]",
        "testReplaceNullOldValue[3]",
        "testReplaceNullValue[11]",
        "testConcurrentRemove[0]",
        "testHashCode[7]",
        "testValues[8]",
        "testGetPropertyDefault[10]",
        "testNotEquals[4]",
        "testHashCode[13]",
        "testPutIfAbsent[12]",
        "testPropertyNames[5]",
        "testGetKey[9]",
        "testConcurrentReplaceTwoArgs[8]",
        "testEquals[6]",
        "testSize[5]",
        "testGetOperations[1]",
        "testReplaceNullOldValue[4]",
        "testDefaultInit[6]",
        "testGet[4]",
        "testGetProperty[12]",
        "testConcurrentRemove[13]",
        "testGet[5]",
        "testHashCode[8]",
        "testGetProperty[0]",
        "testGetPropertyDefault[13]",
        "testValues[5]",
        "testNotEquals[3]",
        "testStringPropertyNames[6]",
        "testPropertyNames[6]",
        "testGetOperations[0]",
        "testEquals[5]",
        "testGetKey[8]",
        "testConcurrentReplaceTwoArgs[9]",
        "testPutIfAbsent[13]",
        "testPropertiesSave[10]",
        "testDefaultInit[5]",
        "testReplaceNullOldValue[5]",
        "testGet[3]",
        "testReplaceNullValue[13]",
        "testGetProperty[11]",
        "testHashCode[9]",
        "testGetProperty[1]",
        "testSize[6]",
        "testValues[6]",
        "testGetPropertyDefault[12]",
        "testStringPropertyNames[7]",
        "testNotEquals[2]",
        "testPropertyNames[7]",
        "testIncrementDouble[10]",
        "testRemoveNullValue[11]",
        "testGetProperty[2]",
        "testSize[7]",
        "testPutIfAbsent[7]",
        "testRemove[13]",
        "testEquals[8]",
        "testIncrementNotNumber[9]",
        "testGetKey[10]",
        "testRemoveNullValue[7]",
        "testEquals[12]",
        "testPropertyNames[8]",
        "testNotEquals[1]",
        "testValues[11]",
        "testEquals[7]",
        "testIncrementDouble[11]",
        "testGetPropertyDefault[0]",
        "testNotEquals[0]",
        "testIncrement[9]",
        "testSize[8]",
        "testPutIfAbsent[8]",
        "testGetPropertyDefault[1]",
        "testGetProperty[3]",
        "testRemoveNullValue[12]",
        "testRemove[12]",
        "testPutAll[13]",
        "testRemoveNullValue[8]",
        "testPutAll[9]",
        "testValues[12]",
        "testEquals[13]",
        "testPropertyNames[9]",
        "testPropertiesLoad[10]",
        "testReplaceNullOldValue[0]",
        "testStringPropertyNames[12]",
        "testPutIfAbsent[5]",
        "testGet[0]",
        "testGetProperty[4]",
        "testIncrement[8]",
        "testReplaceNullValue[2]",
        "testSize[9]",
        "testPropertyNames[10]",
        "testRemove[11]",
        "testGetPropertyDefault[2]",
        "testIncrementDouble[12]",
        "testRemoveNullValue[13]",
        "testGetKey[12]",
        "testRemoveNullValue[9]",
        "testGetOperations[12]",
        "testValues[9]",
        "testPropertiesLoad[11]",
        "testKeySet[0]",
        "testReplaceNullOldValue[1]",
        "testStringPropertyNames[13]",
        "testReplaceNullValue[0]",
        "testGetProperty[5]",
        "testReplaceNullValue[1]",
        "testGetPropertyDefault[3]",
        "testPutIfAbsent[6]",
        "testIncrement[7]",
        "testIncrementDouble[13]",
        "testRemove[10]",
        "testEquals[9]",
        "testGetKey[11]",
        "testGetOperations[13]",
        "testValues[10]",
        "testPropertiesLoad[12]",
        "testContainsValue[1]",
        "testGetKey[3]",
        "testPutIfAbsent[3]",
        "testGetOperations[7]",
        "testPropertiesSave[9]",
        "testPropertyNames[12]",
        "testGetProperty[6]",
        "testStringPropertyNames[0]",
        "testGetPropertyDefault[4]",
        "testReplaceNullValue[4]",
        "testIncrement[6]",
        "testPutAll[10]",
        "testGetOperations[10]",
        "testIsEmpty[11]",
        "testContainsValue[12]",
        "testContainsValue[2]",
        "testPropertiesLoad[13]",
        "testPutIfAbsent[4]",
        "testGetKey[2]",
        "testGetOperations[6]",
        "testPropertyNames[11]",
        "testGetPropertyDefault[5]",
        "testGetProperty[7]",
        "testIncrement[5]",
        "testReplaceNullValue[3]",
        "testStringPropertyNames[1]",
        "testContainsValue[13]",
        "testGetOperations[11]",
        "testIsEmpty[12]",
        "testGetKey[1]",
        "testPutIfAbsent[1]",
        "testReplaceNullValue[6]",
        "testGetPropertyDefault[6]",
        "testGetOperations[9]",
        "testIncrement[4]",
        "testHashCode[0]",
        "testEquals[10]",
        "testPutAll[12]",
        "testGetProperty[8]",
        "testContainsValue[10]",
        "testValues[13]",
        "testContainsValue[0]",
        "testPutIfAbsent[2]",
        "testGetOperations[8]",
        "testGetKey[0]",
        "testReplaceNullValue[5]",
        "testGetPropertyDefault[7]",
        "testPropertyNames[13]",
        "testPutAll[11]",
        "testIsEmpty[10]",
        "testIncrement[3]",
        "testNotEquals[10]",
        "testHashCode[1]",
        "testGetProperty[9]",
        "testContainsValue[11]",
        "testEquals[11]",
        "testContainsValue[5]",
        "testIncrement[10]",
        "testPutAll[1]",
        "testSize[10]",
        "testEntrySet[13]",
        "testPropertiesList[4]",
        "testIncrementDouble[8]",
        "testContainsKey[4]",
        "testGetPropertyDefault[8]",
        "testIncrementNotNumber[1]",
        "testPropertiesSave[4]",
        "testClear[10]",
        "testReplaceNullValue[8]",
        "testKeySet[5]",
        "testIncrement[11]",
        "testSetProperty[1]",
        "testContainsValue[6]",
        "testPutAll[0]",
        "testConcurrentReplaceOneArg[9]",
        "testRemoveNullValue[0]",
        "testSize[11]",
        "testPropertiesList[5]",
        "testContainsKey[3]",
        "testIncrementDouble[9]",
        "testPropertiesSave[5]",
        "testReplaceNullValue[7]",
        "testPropertiesList[6]",
        "testKeySet[6]",
        "testSetProperty[0]",
        "testIncrementNotNumber[2]",
        "testGetPropertyDefault[9]",
        "testRemoveNullValue[1]",
        "testContainsValue[3]",
        "testPutAll[3]",
        "testSize[12]",
        "testGet[11]",
        "testPut[9]",
        "testPropertiesList[2]",
        "testIncrementDouble[6]",
        "testContainsKey[6]",
        "testPropertiesSave[7]",
        "testPropertiesSave[6]",
        "testClear[12]",
        "testDefaultInit[11]",
        "testSetProperty[13]",
        "testKeySet[7]",
        "testIncrementNotNumber[3]",
        "testIsEmpty[13]",
        "testSize[13]",
        "testRemoveNullValue[2]",
        "testReplaceNullOldValue[10]",
        "testContainsValue[4]",
        "testPutAll[2]",
        "testGet[10]",
        "testPut[8]",
        "testDefaultInit[13]",
        "testPropertiesList[3]",
        "testContainsKey[5]",
        "testIncrementDouble[7]",
        "testPropertiesSave[8]",
        "testClear[11]",
        "testSetProperty[12]",
        "testDefaultInit[12]",
        "testReplaceNullValue[9]",
        "testKeySet[8]",
        "testIncrementNotNumber[4]",
        "testConcurrentReplaceOneArg[6]",
        "testReplaceNullOldValue[11]",
        "testRemoveNullValue[3]",
        "testSetProperty[6]",
        "testContainsKey[0]",
        "testGet[13]",
        "testKeySet[1]",
        "testIncrementDouble[4]",
        "testClear[9]",
        "testReplaceNullNewValue[10]",
        "testPropertiesList[0]",
        "testPut[7]",
        "testScanWorksCorrectly[11]",
        "testPropertiesSave[0]",
        "testPutAll[6]",
        "testIncrementNotNumber[5]",
        "testRemoveNullValue[4]",
        "testIncrementNotNumber[10]",
        "testSetProperty[5]",
        "testEntrySet[9]",
        "testReplaceNullOldValue[12]",
        "testKeySet[2]",
        "testGet[12]",
        "testPutAll[4]",
        "testIncrementDouble[5]",
        "testReplaceNullNewValue[11]",
        "testClear[8]",
        "testPropertiesList[1]",
        "testPut[6]",
        "testScanWorksCorrectly[10]",
        "testConcurrentReplaceTwoArgs[10]",
        "testConcurrentReplaceOneArg[5]",
        "testEntrySet[10]",
        "testPropertiesSave[1]",
        "testDefaultInit[10]",
        "testClear[13]",
        "testPutAll[5]",
        "testIncrementNotNumber[6]",
        "testGetKey[13]",
        "testSetProperty[4]",
        "testScanWorksCorrectly[8]",
        "testContainsKey[2]",
        "testContainsValue[7]",
        "testEntrySet[8]",
        "testConcurrentReplaceOneArg[8]",
        "testKeySet[3]",
        "testReplaceNullOldValue[13]",
        "testIncrementDouble[2]",
        "testPut[5]",
        "testReplaceNullNewValue[12]",
        "testScanWorksCorrectly[13]",
        "testEntrySet[11]",
        "testConcurrentReplaceTwoArgs[11]",
        "testConcurrentReplaceTwoArgs[12]",
        "testPropertiesSave[2]",
        "testPutIfAbsent[9]",
        "testIncrementNotNumber[7]",
        "testPutAll[8]",
        "testIncrement[13]",
        "testSetProperty[3]",
        "testRemoveNullValue[5]",
        "testContainsKey[1]",
        "testContainsValue[8]",
        "testConcurrentReplaceOneArg[7]",
        "testEntrySet[7]",
        "testScanWorksCorrectly[9]",
        "testIncrementDouble[3]",
        "testEntrySet[12]",
        "testPut[4]",
        "testScanWorksCorrectly[12]",
        "testReplaceNullNewValue[13]",
        "testConcurrentReplaceTwoArgs[13]",
        "testPropertiesSave[3]",
        "testRemoveNullValue[10]",
        "testKeySet[4]",
        "testPutAll[7]",
        "testIncrementNotNumber[8]",
        "testEntrySet[6]",
        "testPropertiesLoad[0]",
        "testIncrement[12]",
        "testSetProperty[2]",
        "testRemoveNullValue[6]",
        "testContainsValue[9]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 532
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveGeoOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.DefaultHashOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDelete[0]",
        "lengthOfValue[1]",
        "testDelete[1]",
        "lengthOfValue[0]",
        "testEntries[0]",
        "testHScanReadsValuesFully[0]",
        "testEntries[1]",
        "testHScanReadsValuesFully[1]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDecrementAndGet[1]",
        "testGetAndDecrement[1]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "testGetAndAdd[1]",
        "testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[0]",
        "testGetAndIncrement[0]",
        "testCheckAndSet[1]",
        "testAddAndGet[1]",
        "testGetAndSet[1]",
        "testIncrementAndGet[0]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[1]",
        "testGetAndAdd[0]",
        "testGetAndDecrement[0]",
        "testCheckAndSet[0]",
        "testDecrementAndGet[0]",
        "testGetAndIncrement[1]",
        "testGetAndSet[0]",
        "testAddAndGet[0]",
        "testIncrementAndGet[1]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 26
    },
    {
      "className": "org.springframework.data.redis.cache.LegacyRedisCacheTests",
      "failingMethods": [],
      "erroringMethods": [
        "testCachePut[3]",
        "testConcurrentRead[1]",
        "testCacheGetSynchronized[10]",
        "testCacheGetSynchronizedNullAllowingNull[11]",
        "testCacheGetShouldRetunInstanceOfCorrectType[15]",
        "testCacheGetSynchronizedNullNotAllowingNull[12]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[1]",
        "testCacheGetShouldThrowExceptionOnInvalidType[4]",
        "testCacheGetShouldRetunInstanceOfCorrectType[8]",
        "testCacheGetSynchronizedNullNotAllowingNull[8]",
        "testCachePut[17]",
        "testCacheGetSynchronized[3]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[2]",
        "testCachePut[2]",
        "testConcurrentRead[0]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[10]",
        "testCacheGetShouldRetunInstanceOfCorrectType[16]",
        "testCacheGetSynchronizedNullWithStoredNull[15]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[2]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[2]",
        "testCacheGetSynchronizedNullWithStoredNull[5]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[17]",
        "testCacheGetShouldRetunInstanceOfCorrectType[9]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[1]",
        "testCacheGetSynchronized[4]",
        "testCacheGetShouldThrowExceptionOnInvalidType[5]",
        "testCacheGetSynchronized[12]",
        "testCacheGetShouldRetunInstanceOfCorrectType[13]",
        "testCacheGetSynchronizedNullNotAllowingNull[10]",
        "testCachePut[1]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[16]",
        "testCacheGetShouldThrowExceptionOnInvalidType[6]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[0]",
        "testCacheGetSynchronized[5]",
        "testCacheGetSynchronized[11]",
        "testCacheGetShouldRetunInstanceOfCorrectType[14]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[1]",
        "testCacheGetSynchronizedNullWithStoredNull[17]",
        "testCachePut[0]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[0]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[4]",
        "testCacheGetSynchronizedNullWithStoredNull[7]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[15]",
        "testCacheGetSynchronized[6]",
        "testCacheGetShouldThrowExceptionOnInvalidType[7]",
        "testCacheGetSynchronized[14]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[1]",
        "testCacheClear[3]",
        "testCacheClear[10]",
        "testConcurrentRead[5]",
        "testCacheGetSynchronizedNullNotAllowingNull[16]",
        "testCacheClear[11]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[5]",
        "testCacheGetShouldThrowExceptionOnInvalidType[0]",
        "testCacheGetShouldThrowExceptionOnInvalidType[12]",
        "testCacheGetShouldReturnCachedInstance[0]",
        "testConcurrentRead[17]",
        "testCacheClear[2]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[0]",
        "testCacheGetSynchronized[13]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[16]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[3]",
        "testCacheGetSynchronizedNullWithStoredNull[9]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[10]",
        "testConcurrentRead[4]",
        "testCacheGetShouldReturnCachedInstance[1]",
        "testCacheClear[12]",
        "testCacheGetSynchronizedNullWithStoredNull[11]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[6]",
        "testCacheGetSynchronized[0]",
        "testCacheGetSynchronizedNullAllowingNull[17]",
        "testCacheGetShouldThrowExceptionOnInvalidType[1]",
        "testCacheGetSynchronizedNullAllowingNull[3]",
        "testCacheGetShouldThrowExceptionOnInvalidType[13]",
        "testCacheClear[1]",
        "testCacheGetSynchronizedNullAllowingNull[13]",
        "testConcurrentRead[16]",
        "testCacheGetShouldRetunInstanceOfCorrectType[17]",
        "testConcurrentRead[3]",
        "testCacheGetSynchronized[16]",
        "testCacheGetSynchronizedNullNotAllowingNull[14]",
        "testCacheGetShouldReturnCachedInstance[2]",
        "testCacheClear[13]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[3]",
        "testCacheGetShouldThrowExceptionOnInvalidType[2]",
        "testCacheGetSynchronized[1]",
        "testCacheGetShouldThrowExceptionOnInvalidType[10]",
        "testCacheClear[0]",
        "testCacheGetSynchronized[15]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[14]",
        "testConcurrentRead[15]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[5]",
        "testConcurrentRead[2]",
        "testCacheClear[14]",
        "testCacheGetSynchronizedNullWithStoredNull[13]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[4]",
        "testCacheGetShouldReturnCachedInstance[3]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[0]",
        "testCacheGetSynchronizedNullAllowingNull[1]",
        "testCacheGetSynchronized[2]",
        "testCacheGetSynchronizedNullAllowingNull[15]",
        "testCacheGetShouldThrowExceptionOnInvalidType[3]",
        "testCacheGetShouldThrowExceptionOnInvalidType[11]",
        "testCacheGetSynchronizedNullAllowingNull[9]",
        "testCacheGetShouldThrowExceptionOnInvalidType[16]",
        "testCacheGetShouldRetunInstanceOfCorrectType[0]",
        "testCacheGetSynchronizedNullNotAllowingNull[0]",
        "testConcurrentRead[14]",
        "testConcurrentRead[9]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[17]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[13]",
        "testCacheClear[7]",
        "testCacheGetShouldReturnCachedInstance[4]",
        "testCacheGetShouldReturnCachedInstance[15]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[10]",
        "testCacheClear[15]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[9]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[5]",
        "testCacheGetShouldThrowExceptionOnInvalidType[17]",
        "testCacheGetShouldRetunInstanceOfCorrectType[1]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[12]",
        "testConcurrentRead[13]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[7]",
        "testConcurrentRead[8]",
        "testCacheGetShouldReturnCachedInstance[13]",
        "testCacheClear[6]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[14]",
        "testCacheGetSynchronized[17]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[15]",
        "testCacheGetShouldReturnCachedInstance[5]",
        "testCacheGetShouldReturnCachedInstance[14]",
        "testCacheClear[16]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[17]",
        "testConcurrentRead[12]",
        "testCacheGetSynchronizedNullAllowingNull[7]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[4]",
        "testCacheGetSynchronizedNullNotAllowingNull[2]",
        "testCachePut[10]",
        "testCacheGetShouldThrowExceptionOnInvalidType[14]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[9]",
        "testCachePut[9]",
        "testConcurrentRead[7]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[15]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[11]",
        "testCacheClear[5]",
        "testCacheGetShouldReturnCachedInstance[6]",
        "testCacheClear[17]",
        "testCacheGetShouldReturnCachedInstance[17]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[7]",
        "testConcurrentRead[11]",
        "testCacheGetShouldRetunInstanceOfCorrectType[2]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[3]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[10]",
        "testCachePut[11]",
        "testCacheGetShouldThrowExceptionOnInvalidType[15]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[9]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[8]",
        "testCachePut[8]",
        "testConcurrentRead[6]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[16]",
        "testCacheClear[4]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[12]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[8]",
        "testCacheGetShouldReturnCachedInstance[7]",
        "testCacheGetShouldReturnCachedInstance[16]",
        "testConcurrentRead[10]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[15]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[7]",
        "testCacheGetSynchronizedNullAllowingNull[5]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[2]",
        "testCacheGetShouldRetunInstanceOfCorrectType[3]",
        "testCachePut[12]",
        "testCachePut[7]",
        "testCacheGetShouldRetunInstanceOfCorrectType[11]",
        "testCacheGetSynchronizedNullNotAllowingNull[4]",
        "testCacheGetShouldReturnCachedInstance[9]",
        "testCacheGetShouldReturnCachedInstance[10]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[13]",
        "testCacheGetSynchronized[7]",
        "testCacheGetShouldReturnCachedInstance[8]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[9]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[6]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[14]",
        "testCacheGetShouldRetunInstanceOfCorrectType[4]",
        "testCacheGetShouldThrowExceptionOnInvalidType[8]",
        "testCachePut[13]",
        "testCacheGetShouldThrowExceptionOnInvalidType[9]",
        "testCachePut[6]",
        "testCacheGetShouldRetunInstanceOfCorrectType[12]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[14]",
        "testCacheGetSynchronized[8]",
        "testCacheGetSynchronizedNullWithStoredNull[1]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[13]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[5]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[13]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[8]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[6]",
        "testCachePut[14]",
        "testCacheGetShouldRetunInstanceOfCorrectType[5]",
        "testCachePut[5]",
        "testCacheGetSynchronizedNullNotAllowingNull[6]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[11]",
        "testCacheClear[9]",
        "testCacheGetShouldReturnCachedInstance[12]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[16]",
        "testCacheGetSynchronized[9]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[12]",
        "testCacheGetShouldRetunInstanceOfCorrectType[6]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[7]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[4]",
        "testCachePut[15]",
        "testCachePut[4]",
        "testCacheGetShouldRetunInstanceOfCorrectType[10]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[12]",
        "testCacheClear[8]",
        "testCacheGetShouldReturnCachedInstance[11]",
        "testCacheGetSynchronizedNullWithStoredNull[3]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[17]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[11]",
        "testCacheGetSynchronizedThrowsExceptionInValueLoader[6]",
        "testCacheGetShouldRetunInstanceOfCorrectType[7]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[11]",
        "testCachePut[16]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[3]",
        "cachePutWithNullShouldErrorAndLeaveExistingKeyUntouched[8]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.cache.Cache$ValueRetrievalException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalStateException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 225
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveListOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "trim[String]",
        "rightPushWithPivot[Pooled/Person/JDK]",
        "size[String/OXM]",
        "rightPop[Double]",
        "rightPushWithPivot[String/Person/OXM]",
        "size[Double]",
        "index[Double]",
        "index[String/Person/JDK]",
        "rightPopAndLeftPush[String/OXM]",
        "leftPop[Pooled/Person/JDK]",
        "leftPop[String/OXM]",
        "rightPopAndLeftPushWithTimeout[String/Person/OXM]",
        "rightPopWithTimeout[String]",
        "rightPopAndLeftPushWithTimeout[Pooled/Person/JDK]",
        "rightPopWithTimeout[raw]",
        "leftPopWithTimeout[String/Person/OXM]",
        "leftPopWithTimeout[Pooled/Person/JDK]",
        "size[String]",
        "trim[Double]",
        "rightPopAndLeftPush[Generic Jackson 2]",
        "delete[Jackson2]",
        "rightPushIfPresent[Jackson2]",
        "index[raw]",
        "leftPopWithMillisecondTimeoutShouldFail[Jackson2]",
        "leftPopWithMillisecondTimeoutShouldFail[String/Person/JDK]",
        "remove[String/Person/OXM]",
        "remove[Pooled/Person/JDK]",
        "remove[String/OXM]",
        "leftPush[Jackson2]",
        "set[Long]",
        "size[Jackson2]",
        "size[String/Person/JDK]",
        "leftPushWithPivot[raw]",
        "trim[String/OXM]",
        "leftPop[Long]",
        "leftPopWithTimeout[Jackson2]",
        "rightPush[Generic Jackson 2]",
        "set[Person/JDK]",
        "leftPushIfPresent[Long]",
        "leftPush[Person/JDK]",
        "rightPushAll[String]",
        "delete[String/OXM]",
        "remove[raw]",
        "rightPopAndLeftPushWithTimeout[Generic Jackson 2]",
        "set[String/Person/OXM]",
        "leftPushWithPivot[Generic Jackson 2]",
        "rightPushWithPivot[Generic Jackson 2]",
        "leftPush[String/OXM]",
        "leftPopWithMillisecondTimeoutShouldFail[Long]",
        "rightPushAll[raw]",
        "trim[Pooled/Person/JDK]",
        "rightPop[Jackson2]",
        "trim[String/Person/OXM]",
        "rightPop[String]",
        "leftPushWithPivot[Pooled/Person/JDK]",
        "rightPopAndLeftPush[Long]",
        "index[Person/JDK]",
        "leftPushWithPivot[String/Person/OXM]",
        "rightPushWithPivot[String/OXM]",
        "index[Generic Jackson 2]",
        "trim[Generic Jackson 2]",
        "delete[Double]",
        "leftPop[raw]",
        "leftPushAll[String]",
        "leftPopWithMillisecondTimeoutShouldFail[Generic Jackson 2]",
        "rightPushIfPresent[Pooled/Person/JDK]",
        "trim[String/Person/JDK]",
        "size[Generic Jackson 2]",
        "leftPushWithPivot[String/OXM]",
        "leftPushAll[String/OXM]",
        "rightPopAndLeftPush[String/Person/JDK]",
        "leftPopWithTimeout[Generic Jackson 2]",
        "leftPushAll[String/Person/JDK]",
        "leftPushWithPivot[Jackson2]",
        "leftPushIfPresent[String]",
        "index[Long]",
        "leftPushAll[Double]",
        "rightPopWithTimeout[Jackson2]",
        "trim[Long]",
        "leftPop[Person/JDK]",
        "leftPop[Jackson2]",
        "rightPop[Generic Jackson 2]",
        "leftPopWithTimeout[String/OXM]",
        "delete[Person/JDK]",
        "rightPush[String/Person/OXM]",
        "leftPush[Generic Jackson 2]",
        "rightPopAndLeftPushWithTimeout[Double]",
        "rightPush[Jackson2]",
        "leftPush[Pooled/Person/JDK]",
        "leftPushIfPresent[Double]",
        "rightPushAll[Jackson2]",
        "rightPushAll[Pooled/Person/JDK]",
        "rightPopAndLeftPush[Pooled/Person/JDK]",
        "rightPush[String]",
        "rightPopWithTimeout[Double]",
        "set[Double]",
        "leftPushWithPivot[String]",
        "leftPush[raw]",
        "rightPopWithTimeout[String/OXM]",
        "rightPop[Pooled/Person/JDK]",
        "set[raw]",
        "rightPushWithPivot[raw]",
        "rightPopWithTimeout[Long]",
        "rightPopAndLeftPushWithTimeout[String/OXM]",
        "rightPushIfPresent[String/Person/JDK]",
        "rightPopWithTimeout[String/Person/OXM]",
        "leftPushIfPresent[raw]",
        "leftPushIfPresent[String/Person/JDK]",
        "set[String/OXM]",
        "rightPush[Person/JDK]",
        "rightPushWithPivot[Double]",
        "rightPushIfPresent[Generic Jackson 2]",
        "rightPushWithPivot[Jackson2]",
        "leftPushAll[Long]",
        "rightPushIfPresent[String/OXM]",
        "leftPop[String/Person/OXM]",
        "leftPushIfPresent[Generic Jackson 2]",
        "rightPush[raw]",
        "rightPopAndLeftPush[raw]",
        "leftPushIfPresent[Pooled/Person/JDK]",
        "leftPushAll[Generic Jackson 2]",
        "delete[String/Person/OXM]",
        "index[String]",
        "rightPop[String/OXM]",
        "leftPushAll[Pooled/Person/JDK]",
        "trim[Jackson2]",
        "rightPop[String/Person/JDK]",
        "rightPop[raw]",
        "remove[Double]",
        "rightPopWithTimeout[Generic Jackson 2]",
        "leftPushIfPresent[Person/JDK]",
        "rightPushIfPresent[Double]",
        "leftPopWithTimeout[String/Person/JDK]",
        "rightPushAll[String/OXM]",
        "rightPop[Long]",
        "rightPushWithPivot[Long]",
        "leftPushAll[Person/JDK]",
        "index[Jackson2]",
        "delete[Long]",
        "rightPopAndLeftPush[Double]",
        "set[String]",
        "remove[String]",
        "rightPushAll[Long]",
        "rightPop[Person/JDK]",
        "rightPushAll[Generic Jackson 2]",
        "rightPushIfPresent[raw]",
        "rightPushIfPresent[Long]",
        "leftPushIfPresent[Jackson2]",
        "set[Jackson2]",
        "leftPopWithMillisecondTimeoutShouldFail[Person/JDK]",
        "rightPushWithPivot[String]",
        "leftPop[String]",
        "leftPopWithTimeout[String]",
        "leftPop[String/Person/JDK]",
        "rightPush[String/OXM]",
        "rightPopAndLeftPushWithTimeout[Person/JDK]",
        "remove[Person/JDK]",
        "size[Pooled/Person/JDK]",
        "leftPopWithMillisecondTimeoutShouldFail[String/Person/OXM]",
        "leftPopWithMillisecondTimeoutShouldFail[raw]",
        "leftPush[String/Person/JDK]",
        "rightPushIfPresent[Person/JDK]",
        "leftPopWithMillisecondTimeoutShouldFail[Pooled/Person/JDK]",
        "remove[Jackson2]",
        "rightPush[Long]",
        "rightPushWithPivot[String/Person/JDK]",
        "leftPushWithPivot[String/Person/JDK]",
        "leftPopWithTimeout[Long]",
        "leftPushWithPivot[Double]",
        "trim[Person/JDK]",
        "leftPushWithPivot[Person/JDK]",
        "rightPushAll[String/Person/JDK]",
        "leftPopWithTimeout[raw]",
        "remove[String/Person/JDK]",
        "rightPush[Double]",
        "size[String/Person/OXM]",
        "leftPush[Double]",
        "rightPushIfPresent[String]",
        "index[String/Person/OXM]",
        "index[Pooled/Person/JDK]",
        "rightPopAndLeftPush[Person/JDK]",
        "rightPushAll[String/Person/OXM]",
        "rightPopWithTimeout[String/Person/JDK]",
        "leftPush[Long]",
        "leftPushAll[raw]",
        "rightPopAndLeftPushWithTimeout[String]",
        "leftPush[String]",
        "rightPushIfPresent[String/Person/OXM]",
        "leftPushIfPresent[String/OXM]",
        "rightPopAndLeftPushWithTimeout[raw]",
        "rightPopAndLeftPushWithTimeout[Jackson2]",
        "set[Generic Jackson 2]",
        "leftPushWithPivot[Long]",
        "delete[String/Person/JDK]",
        "delete[raw]",
        "rightPopAndLeftPush[Jackson2]",
        "size[Person/JDK]",
        "set[Pooled/Person/JDK]",
        "rightPopAndLeftPush[String/Person/OXM]",
        "remove[Generic Jackson 2]",
        "leftPush[String/Person/OXM]",
        "rightPopWithTimeout[Person/JDK]",
        "rightPush[Pooled/Person/JDK]",
        "leftPopWithMillisecondTimeoutShouldFail[Double]",
        "trim[raw]",
        "index[String/OXM]",
        "rightPush[String/Person/JDK]",
        "rightPushWithPivot[Person/JDK]",
        "rightPop[String/Person/OXM]",
        "leftPop[Generic Jackson 2]",
        "size[raw]",
        "leftPushIfPresent[String/Person/OXM]",
        "remove[Long]",
        "leftPop[Double]",
        "leftPushAll[Jackson2]",
        "rightPopWithTimeout[Pooled/Person/JDK]",
        "delete[String]",
        "leftPopWithMillisecondTimeoutShouldFail[String]",
        "set[String/Person/JDK]",
        "rightPopAndLeftPushWithTimeout[String/Person/JDK]",
        "rightPushAll[Double]",
        "leftPopWithTimeout[Double]",
        "rightPushAll[Person/JDK]",
        "size[Long]",
        "leftPushAll[String/Person/OXM]",
        "rightPopAndLeftPushWithTimeout[Long]",
        "delete[Pooled/Person/JDK]",
        "leftPopWithMillisecondTimeoutShouldFail[String/OXM]",
        "leftPopWithTimeout[Person/JDK]",
        "delete[Generic Jackson 2]",
        "rightPopAndLeftPush[String]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 231
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "listOperationLPushShouldBeCommittedCorrectly",
        "valueOperationSetShouldBeCommittedCorrectly",
        "listOperationLPushShoudBeRolledBackCorrectly",
        "valueOperationSetShouldBeRolledBackCorrectly",
        "valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisMapTests",
      "failingMethods": [],
      "erroringMethods": [
        "testScanWorksCorrectly[6]",
        "testPut[3]",
        "testKeySet[10]",
        "testReplaceNullOldValue[15]",
        "testIncrementDouble[0]",
        "testClear[5]",
        "testRemove[0]",
        "testConcurrentReplaceOneArg[2]",
        "testConcurrentReplaceOneArg[14]",
        "testIsEmpty[8]",
        "testConcurrentRemove[5]",
        "testIncrementNotNumber[14]",
        "testEntrySet[5]",
        "testScanWorksCorrectly[7]",
        "testPut[2]",
        "testIncrementDouble[1]",
        "testClear[4]",
        "testConcurrentReplaceOneArg[1]",
        "testRemove[1]",
        "testKeySet[11]",
        "testIsEmpty[9]",
        "testConcurrentReplaceOneArg[15]",
        "testContainsKey[10]",
        "testConcurrentRemove[4]",
        "testEntrySet[4]",
        "testReplaceNullValue[15]",
        "testIncrementNotNumber[15]",
        "testPut[1]",
        "testIncrementNotNumber[11]",
        "testClear[7]",
        "testConcurrentReplaceOneArg[12]",
        "testKeySet[12]",
        "testConcurrentReplaceOneArg[4]",
        "testIsEmpty[6]",
        "testContainsKey[11]",
        "testConcurrentRemove[3]",
        "testScanWorksCorrectly[3]",
        "testEntrySet[3]",
        "testPut[0]",
        "testIncrementNotNumber[12]",
        "testScanWorksCorrectly[5]",
        "testClear[6]",
        "testKeySet[13]",
        "testConcurrentReplaceOneArg[3]",
        "testContainsKey[12]",
        "testConcurrentReplaceOneArg[13]",
        "testIsEmpty[7]",
        "testConcurrentRemove[2]",
        "testEntrySet[2]",
        "testScanWorksCorrectly[4]",
        "testIncrementNotNumber[13]",
        "testClear[1]",
        "testKeySet[14]",
        "testContainsKey[8]",
        "testReplaceNullNewValue[8]",
        "testIsEmpty[4]",
        "testRemove[4]",
        "testEntrySet[1]",
        "testConcurrentRemove[9]",
        "testPut[15]",
        "testScanWorksCorrectly[1]",
        "testKeySet[9]",
        "testValues[0]",
        "testClear[0]",
        "testContainsKey[7]",
        "testReplaceNullNewValue[9]",
        "testKeySet[15]",
        "testIsEmpty[5]",
        "testRemove[5]",
        "testEntrySet[0]",
        "testConcurrentRemove[8]",
        "testScanWorksCorrectly[2]",
        "testReplaceNullNewValue[6]",
        "testClear[3]",
        "testConcurrentReplaceOneArg[0]",
        "testRemove[2]",
        "testConcurrentReplaceTwoArgs[0]",
        "testIsEmpty[2]",
        "testConcurrentRemove[7]",
        "testClear[2]",
        "testContainsKey[9]",
        "testReplaceNullNewValue[7]",
        "testConcurrentReplaceTwoArgs[1]",
        "testIncrementNotNumber[0]",
        "testIsEmpty[3]",
        "testRemove[3]",
        "testScanWorksCorrectly[0]",
        "testConcurrentRemove[6]",
        "testEquals[0]",
        "testReplaceNullNewValue[4]",
        "testPutIfAbsent[10]",
        "testHashCode[10]",
        "testValues[3]",
        "testGetKey[7]",
        "testPut[10]",
        "testGetOperations[3]",
        "testConcurrentReplaceTwoArgs[2]",
        "testRemove[8]",
        "testReplaceNullOldValue[6]",
        "testConcurrentRemove[11]",
        "testGet[7]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "testPut[11]",
        "testIncrement[2]",
        "testNotEquals[11]",
        "testPutIfAbsent[11]",
        "testReplaceNullNewValue[5]",
        "testConcurrentReplaceTwoArgs[3]",
        "testValues[4]",
        "testGetKey[6]",
        "testNotEquals[9]",
        "testGetOperations[2]",
        "testSize[0]",
        "testPutIfAbsent[0]",
        "testGet[6]",
        "testReplaceNullOldValue[7]",
        "testRemove[9]",
        "testConcurrentRemove[12]",
        "testIsEmpty[1]",
        "testIncrement[1]",
        "testNotEquals[8]",
        "testNotEquals[12]",
        "testHashCode[3]",
        "testPut[12]",
        "testConcurrentReplaceTwoArgs[4]",
        "testEquals[2]",
        "testNotEquals[14]",
        "testValues[1]",
        "testReplaceNullNewValue[2]",
        "testGetKey[5]",
        "testSize[1]",
        "testGetOperations[5]",
        "testReplaceNullOldValue[8]",
        "testReplaceNullValue[10]",
        "testGet[9]",
        "testHashCode[4]",
        "testRemove[6]",
        "testIncrement[0]",
        "testNotEquals[7]",
        "testNotEquals[13]",
        "testPut[13]",
        "testHashCode[12]",
        "testEquals[1]",
        "testReplaceNullNewValue[3]",
        "testConcurrentReplaceTwoArgs[5]",
        "testValues[2]",
        "testNotEquals[15]",
        "testGetOperations[4]",
        "testGetKey[4]",
        "testSize[2]",
        "testConcurrentRemove[10]",
        "testRemove[7]",
        "testReplaceNullOldValue[9]",
        "testGet[8]",
        "testHashCode[5]",
        "testNotEquals[6]",
        "testPut[14]",
        "testHashCode[11]",
        "testConcurrentReplaceTwoArgs[6]",
        "testReplaceNullNewValue[0]",
        "testEquals[4]",
        "testPutIfAbsent[14]",
        "testConcurrentReplaceOneArg[10]",
        "testSize[3]",
        "testGet[2]",
        "testContainsKey[13]",
        "testReplaceNullOldValue[2]",
        "testReplaceNullValue[12]",
        "testConcurrentRemove[1]",
        "testHashCode[6]",
        "testConcurrentRemove[15]",
        "testValues[7]",
        "testNotEquals[5]",
        "testHashCode[14]",
        "testEquals[3]",
        "testPutIfAbsent[15]",
        "testReplaceNullNewValue[1]",
        "testConcurrentReplaceTwoArgs[7]",
        "testSize[4]",
        "testConcurrentReplaceOneArg[11]",
        "testGet[1]",
        "testReplaceNullOldValue[3]",
        "testContainsKey[14]",
        "testReplaceNullValue[11]",
        "testConcurrentRemove[0]",
        "testHashCode[7]",
        "testValues[8]",
        "testNotEquals[4]",
        "testHashCode[13]",
        "testPutIfAbsent[12]",
        "testGetKey[9]",
        "testConcurrentReplaceTwoArgs[8]",
        "testEquals[6]",
        "testSize[5]",
        "testGetOperations[1]",
        "testReplaceNullOldValue[4]",
        "testGet[4]",
        "testContainsKey[15]",
        "testConcurrentRemove[13]",
        "testGet[5]",
        "testHashCode[8]",
        "testValues[5]",
        "testNotEquals[3]",
        "testReplaceNullValue[14]",
        "testGetOperations[0]",
        "testEquals[5]",
        "testGetKey[8]",
        "testConcurrentReplaceTwoArgs[9]",
        "testPutIfAbsent[13]",
        "testReplaceNullOldValue[5]",
        "testGet[3]",
        "testReplaceNullValue[13]",
        "testConcurrentRemove[14]",
        "testHashCode[9]",
        "testSize[6]",
        "testHashCode[15]",
        "testValues[6]",
        "testNotEquals[2]",
        "testGetOperations[14]",
        "testIncrementDouble[10]",
        "testRemoveNullValue[11]",
        "testSize[7]",
        "testPutIfAbsent[7]",
        "testRemove[13]",
        "testEquals[8]",
        "testIncrementNotNumber[9]",
        "testGetKey[10]",
        "testRemoveNullValue[7]",
        "testEquals[12]",
        "testPutAll[14]",
        "testNotEquals[1]",
        "testValues[11]",
        "testGetOperations[15]",
        "testEquals[7]",
        "testIncrementDouble[11]",
        "testNotEquals[0]",
        "testIncrement[9]",
        "testSize[8]",
        "testPutIfAbsent[8]",
        "testRemoveNullValue[12]",
        "testRemove[12]",
        "testPutAll[13]",
        "testRemoveNullValue[8]",
        "testPutAll[9]",
        "testValues[12]",
        "testEquals[13]",
        "testContainsValue[15]",
        "testReplaceNullOldValue[0]",
        "testPutIfAbsent[5]",
        "testGet[0]",
        "testIncrement[8]",
        "testReplaceNullValue[2]",
        "testSize[9]",
        "testRemove[11]",
        "testIncrementDouble[12]",
        "testRemoveNullValue[13]",
        "testGetKey[12]",
        "testRemoveNullValue[9]",
        "testGetOperations[12]",
        "testValues[9]",
        "testEquals[14]",
        "testEquals[15]",
        "testKeySet[0]",
        "testReplaceNullOldValue[1]",
        "testReplaceNullValue[0]",
        "testRemoveNullValue[14]",
        "testReplaceNullValue[1]",
        "testPutIfAbsent[6]",
        "testIncrement[7]",
        "testIncrementDouble[13]",
        "testRemove[10]",
        "testEquals[9]",
        "testGetKey[11]",
        "testPutAll[15]",
        "testGetOperations[13]",
        "testValues[10]",
        "testContainsValue[1]",
        "testGetKey[3]",
        "testPutIfAbsent[3]",
        "testGetOperations[7]",
        "testRemoveNullValue[15]",
        "testIncrementDouble[14]",
        "testReplaceNullValue[4]",
        "testIncrement[6]",
        "testPutAll[10]",
        "testValues[15]",
        "testGetOperations[10]",
        "testIsEmpty[11]",
        "testContainsValue[12]",
        "testContainsValue[14]",
        "testContainsValue[2]",
        "testPutIfAbsent[4]",
        "testGetKey[2]",
        "testGetOperations[6]",
        "testIncrement[5]",
        "testIncrementDouble[15]",
        "testReplaceNullValue[3]",
        "testContainsValue[13]",
        "testGetOperations[11]",
        "testIsEmpty[12]",
        "testGetKey[1]",
        "testPutIfAbsent[1]",
        "testReplaceNullValue[6]",
        "testGetOperations[9]",
        "testIncrement[4]",
        "testHashCode[0]",
        "testEquals[10]",
        "testPutAll[12]",
        "testContainsValue[10]",
        "testValues[13]",
        "testContainsValue[0]",
        "testPutIfAbsent[2]",
        "testGetOperations[8]",
        "testGetKey[0]",
        "testReplaceNullValue[5]",
        "testPutAll[11]",
        "testIsEmpty[10]",
        "testIncrement[3]",
        "testNotEquals[10]",
        "testValues[14]",
        "testHashCode[1]",
        "testContainsValue[11]",
        "testEquals[11]",
        "testIsEmpty[15]",
        "testContainsValue[5]",
        "testIncrement[10]",
        "testPutAll[1]",
        "testSize[10]",
        "testEntrySet[13]",
        "testScanWorksCorrectly[15]",
        "testIncrementDouble[8]",
        "testContainsKey[4]",
        "testReplaceNullNewValue[14]",
        "testIncrementNotNumber[1]",
        "testClear[10]",
        "testConcurrentReplaceTwoArgs[14]",
        "testReplaceNullValue[8]",
        "testKeySet[5]",
        "testIncrement[11]",
        "testContainsValue[6]",
        "testPutAll[0]",
        "testConcurrentReplaceOneArg[9]",
        "testRemoveNullValue[0]",
        "testSize[11]",
        "testScanWorksCorrectly[14]",
        "testEntrySet[14]",
        "testContainsKey[3]",
        "testIncrementDouble[9]",
        "testReplaceNullNewValue[15]",
        "testReplaceNullValue[7]",
        "testConcurrentReplaceTwoArgs[15]",
        "testKeySet[6]",
        "testIncrementNotNumber[2]",
        "testRemoveNullValue[1]",
        "testContainsValue[3]",
        "testPutAll[3]",
        "testSize[12]",
        "testGet[11]",
        "testPut[9]",
        "testEntrySet[15]",
        "testIncrementDouble[6]",
        "testContainsKey[6]",
        "testClear[12]",
        "testKeySet[7]",
        "testIncrementNotNumber[3]",
        "testIsEmpty[13]",
        "testSize[13]",
        "testRemoveNullValue[2]",
        "testReplaceNullOldValue[10]",
        "testContainsValue[4]",
        "testPutAll[2]",
        "testGet[10]",
        "testPut[8]",
        "testContainsKey[5]",
        "testIncrementDouble[7]",
        "testClear[11]",
        "testReplaceNullValue[9]",
        "testIsEmpty[14]",
        "testKeySet[8]",
        "testIncrementNotNumber[4]",
        "testConcurrentReplaceOneArg[6]",
        "testReplaceNullOldValue[11]",
        "testSize[14]",
        "testRemoveNullValue[3]",
        "testContainsKey[0]",
        "testGet[13]",
        "testKeySet[1]",
        "testIncrementDouble[4]",
        "testClear[9]",
        "testReplaceNullNewValue[10]",
        "testPut[7]",
        "testScanWorksCorrectly[11]",
        "testClear[14]",
        "testIncrement[15]",
        "testPutAll[6]",
        "testIncrementNotNumber[5]",
        "testGetKey[14]",
        "testRemoveNullValue[4]",
        "testIncrementNotNumber[10]",
        "testEntrySet[9]",
        "testReplaceNullOldValue[12]",
        "testSize[15]",
        "testKeySet[2]",
        "testGet[12]",
        "testPutAll[4]",
        "testIncrementDouble[5]",
        "testReplaceNullNewValue[11]",
        "testClear[8]",
        "testPut[6]",
        "testScanWorksCorrectly[10]",
        "testConcurrentReplaceTwoArgs[10]",
        "testConcurrentReplaceOneArg[5]",
        "testEntrySet[10]",
        "testClear[13]",
        "testPutAll[5]",
        "testIncrementNotNumber[6]",
        "testGetKey[13]",
        "testIncrement[14]",
        "testScanWorksCorrectly[8]",
        "testContainsKey[2]",
        "testContainsValue[7]",
        "testEntrySet[8]",
        "testConcurrentReplaceOneArg[8]",
        "testGet[15]",
        "testKeySet[3]",
        "testReplaceNullOldValue[13]",
        "testIncrementDouble[2]",
        "testPut[5]",
        "testReplaceNullNewValue[12]",
        "testScanWorksCorrectly[13]",
        "testEntrySet[11]",
        "testConcurrentReplaceTwoArgs[11]",
        "testConcurrentReplaceTwoArgs[12]",
        "testPutIfAbsent[9]",
        "testIncrementNotNumber[7]",
        "testRemove[15]",
        "testPutAll[8]",
        "testIncrement[13]",
        "testRemoveNullValue[5]",
        "testContainsKey[1]",
        "testContainsValue[8]",
        "testConcurrentReplaceOneArg[7]",
        "testGet[14]",
        "testEntrySet[7]",
        "testScanWorksCorrectly[9]",
        "testReplaceNullOldValue[14]",
        "testIncrementDouble[3]",
        "testEntrySet[12]",
        "testPut[4]",
        "testScanWorksCorrectly[12]",
        "testReplaceNullNewValue[13]",
        "testConcurrentReplaceTwoArgs[13]",
        "testRemoveNullValue[10]",
        "testClear[15]",
        "testKeySet[4]",
        "testPutAll[7]",
        "testIncrementNotNumber[8]",
        "testRemove[14]",
        "testEntrySet[6]",
        "testGetKey[15]",
        "testIncrement[12]",
        "testRemoveNullValue[6]",
        "testContainsValue[9]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 464
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveStringCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "mSetNXShouldAddMultipleKeyValuePairs[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "mSetShouldAddMultipleKeyValuePairs[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "pSetEXshouldSetKeyAndExpirationTime[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitCountShouldCountInRangeCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "getBitShouldReturnValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "getSetShouldNotEmitPreviousValueCorrectlyWhenNotExists[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "appendShouldDoItsThing[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "setBitShouldReturnValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "getSetShouldReturnPreviousValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitOpOrShouldWorkAsExpected[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitCountShouldReturnValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "setRangeShouldReturnNewStringLengthCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "getShouldRetrieveValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitFieldIncrByWithOverflowShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "setEXshouldSetKeyAndExpirationTime[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitFieldIncrByShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "mGetShouldRetrieveValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitFieldSetShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "getShouldRetrieveValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitfieldShouldAllowMultipleSubcommands[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "setNXshouldOnlySetValueWhenNotPresent[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "getShouldNotEmitValueValueIfAbsent[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitFieldGetShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitPosShouldReturnPositionCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "mGetShouldRetrieveValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "strLenShouldReturnValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "getRangeShouldReturnSubstringCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "getShouldRetrieveValuesWithNullCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitPosShouldReturnPositionInRangeCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "setShouldAddValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitOpAndShouldWorkAsExpected[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "bitNotShouldThrowExceptionWhenMoreThanOnSourceKey[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "mSetNXShouldNotAddMultipleKeyValuePairsWhenAlreadyExit[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "mGetShouldRetrieveNullValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "setShouldAddValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]",
        "setNXshouldNotSetValueWhenAlreadyPresent[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@64845c40]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 72
    },
    {
      "className": "org.springframework.data.redis.core.ReactiveRedisTemplateIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "preciseExpire[String]",
        "expire[Person/JDK]",
        "expireAt[String]",
        "unlinkMany[raw]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[String/OXM]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[raw]",
        "rename[Jackson2]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[Long]",
        "preciseExpireAt[String]",
        "preciseExpire[Double]",
        "move[Generic Jackson 2]",
        "executeScriptWithElementReaderAndWriter[Double]",
        "expireAt[String/Person/JDK]",
        "unlinkMany[Generic Jackson 2]",
        "rename[Generic Jackson 2]",
        "preciseExpireAt[Double]",
        "unlinkMany[Person/JDK]",
        "move[Double]",
        "preciseExpireAt[String/OXM]",
        "shouldApplyCustomSerializationContextToValues[String/Person/OXM]",
        "expire[raw]",
        "exists[String/OXM]",
        "shouldApplyCustomSerializationContextToValues[Pooled/Person/JDK]",
        "preciseExpire[Pooled/Person/JDK]",
        "preciseExpire[String/Person/OXM]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[Pooled/Person/JDK]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[Generic Jackson 2]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[String/Person/OXM]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[raw]",
        "unlinkMany[String/Person/JDK]",
        "executeScript[Double]",
        "move[String/OXM]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[String/Person/OXM]",
        "renameNx[Double]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[Pooled/Person/JDK]",
        "renameNx[String/Person/OXM]",
        "type[Person/JDK]",
        "renameNx[Long]",
        "shouldApplyCustomSerializationContextToValues[Generic Jackson 2]",
        "preciseExpireAt[raw]",
        "renameNx[Person/JDK]",
        "preciseExpire[Generic Jackson 2]",
        "expireAt[raw]",
        "expire[String]",
        "expire[Double]",
        "exists[String/Person/JDK]",
        "expireAt[Generic Jackson 2]",
        "expireAt[Jackson2]",
        "shouldApplyCustomSerializationContextToHash[String/Person/JDK]",
        "expire[String/OXM]",
        "expire[Jackson2]",
        "shouldApplyCustomSerializationContextToHash[Person/JDK]",
        "executeScriptWithElementReaderAndWriter[String/Person/JDK]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/OXM]",
        "move[String]",
        "rename[String/Person/OXM]",
        "expireAt[Long]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[String/OXM]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[String/Person/OXM]",
        "rename[Long]",
        "executeScript[Person/JDK]",
        "executeScript[String/Person/OXM]",
        "scan[String/OXM]",
        "executeScript[Long]",
        "unlinkMany[String/Person/OXM]",
        "unlink[Jackson2]",
        "type[String/Person/OXM]",
        "executeScriptWithElementReaderAndWriter[Jackson2]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String]",
        "move[Pooled/Person/JDK]",
        "preciseExpire[Person/JDK]",
        "unlink[raw]",
        "unlink[String/Person/OXM]",
        "expire[Long]",
        "move[String/Person/JDK]",
        "scan[Long]",
        "expireAt[Double]",
        "exists[Double]",
        "shouldApplyCustomSerializationContextToHash[Pooled/Person/JDK]",
        "rename[Person/JDK]",
        "scan[String/Person/OXM]",
        "shouldApplyCustomSerializationContextToValues[String/OXM]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/Person/OXM]",
        "expire[String/Person/OXM]",
        "rename[Double]",
        "type[Double]",
        "preciseExpireAt[Generic Jackson 2]",
        "shouldApplyCustomSerializationContextToHash[Generic Jackson 2]",
        "unlink[String]",
        "shouldApplyCustomSerializationContextToHash[String/OXM]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[Generic Jackson 2]",
        "executeScript[Jackson2]",
        "shouldApplyCustomSerializationContextToValues[String/Person/JDK]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[String]",
        "exists[Generic Jackson 2]",
        "renameNx[Jackson2]",
        "expireAt[Pooled/Person/JDK]",
        "type[String]",
        "expireAt[Person/JDK]",
        "preciseExpire[String/Person/JDK]",
        "expireAt[String/Person/OXM]",
        "rename[String]",
        "scan[Jackson2]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[Long]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[Double]",
        "type[Jackson2]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[String/Person/JDK]",
        "type[Long]",
        "unlinkMany[Long]",
        "unlink[Double]",
        "type[Generic Jackson 2]",
        "type[String/OXM]",
        "renameNx[String/OXM]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Long]",
        "move[Person/JDK]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[String/Person/JDK]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[String]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[raw]",
        "shouldApplyCustomSerializationContextToValues[Person/JDK]",
        "executeScriptWithElementReaderAndWriter[Person/JDK]",
        "executeScriptWithElementReaderAndWriter[Pooled/Person/JDK]",
        "scan[raw]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[Generic Jackson 2]",
        "exists[String]",
        "executeScriptWithElementReaderAndWriter[String/Person/OXM]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[raw]",
        "preciseExpireAt[String/Person/OXM]",
        "preciseExpireAt[Pooled/Person/JDK]",
        "preciseExpire[String/OXM]",
        "shouldApplyCustomSerializationContextToHash[String]",
        "shouldApplyCustomSerializationContextToHash[Long]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[Double]",
        "exists[String/Person/OXM]",
        "exists[Pooled/Person/JDK]",
        "unlink[Person/JDK]",
        "executeScriptWithElementReaderAndWriter[Generic Jackson 2]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Double]",
        "exists[Long]",
        "executeScript[String/OXM]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[Jackson2]",
        "scan[Person/JDK]",
        "shouldApplyCustomSerializationContextToValues[raw]",
        "shouldApplyCustomSerializationContextToHash[raw]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[String/OXM]",
        "preciseExpireAt[String/Person/JDK]",
        "renameNx[Pooled/Person/JDK]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[Long]",
        "shouldApplyCustomSerializationContextToHash[Jackson2]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[Person/JDK]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Jackson2]",
        "unlinkMany[String/OXM]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Pooled/Person/JDK]",
        "shouldApplyCustomSerializationContextToValues[Double]",
        "shouldApplyCustomSerializationContextToValues[Long]",
        "rename[String/Person/JDK]",
        "unlinkMany[Double]",
        "unlinkMany[Jackson2]",
        "scan[String]",
        "scan[String/Person/JDK]",
        "executeScriptWithElementReaderAndWriter[raw]",
        "exists[raw]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[String/Person/JDK]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[Pooled/Person/JDK]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[String]",
        "move[raw]",
        "executeScriptWithElementReaderAndWriter[Long]",
        "preciseExpireAt[Person/JDK]",
        "executeScript[Pooled/Person/JDK]",
        "type[raw]",
        "rename[raw]",
        "unlink[Long]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[String/Person/JDK]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[Jackson2]",
        "rename[String/OXM]",
        "unlinkMany[Pooled/Person/JDK]",
        "rename[Pooled/Person/JDK]",
        "getTtlForAbsentKeyShouldCompleteWithoutValue[Person/JDK]",
        "exists[Person/JDK]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[Person/JDK]",
        "type[Pooled/Person/JDK]",
        "preciseExpireAt[Jackson2]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[Double]",
        "executeScript[Generic Jackson 2]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Generic Jackson 2]",
        "preciseExpireAt[Long]",
        "executeScriptWithElementReaderAndWriter[String]",
        "preciseExpire[raw]",
        "move[String/Person/OXM]",
        "move[Jackson2]",
        "renameNx[raw]",
        "listenToChannelPatternShouldReceiveChannelMessagesCorrectly[Jackson2]",
        "shouldApplyCustomSerializationContextToValues[Jackson2]",
        "expire[String/Person/JDK]",
        "expireAt[String/OXM]",
        "unlink[Generic Jackson 2]",
        "unlink[String/OXM]",
        "unlink[Pooled/Person/JDK]",
        "executeScript[raw]",
        "renameNx[String]",
        "renameNx[String/Person/JDK]",
        "executeScriptWithElementReaderAndWriter[String/OXM]",
        "expire[Pooled/Person/JDK]",
        "shouldApplyCustomSerializationContextToHash[String/Person/OXM]",
        "scan[Generic Jackson 2]",
        "move[Long]",
        "renameNx[Generic Jackson 2]",
        "shouldApplyCustomSerializationContextToValues[String]",
        "scan[Pooled/Person/JDK]",
        "exists[Jackson2]",
        "executeScript[String]",
        "preciseExpire[Long]",
        "unlink[String/Person/JDK]",
        "getTtlForKeyWithoutExpiryShouldCompleteWithZeroDuration[Person/JDK]",
        "expire[Generic Jackson 2]",
        "unlinkMany[String]",
        "scan[Double]",
        "type[String/Person/JDK]",
        "executeScript[String/Person/JDK]",
        "shouldApplyCustomSerializationContextToHash[Double]",
        "preciseExpire[Jackson2]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 220
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveGeoCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "geoRadiusShouldApplyLimit[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoHash[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoRadiusByMemberShouldReturnMembersCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoRadiusByMemberShouldApplyLimit[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoDistShouldReturnDistanceInMetersByDefault[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoPos[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoDistShouldReturnDistanceInDesiredMetric[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoRadiusShouldReturnDistanceCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoHashNotExisting[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoRadiusByMemberShouldReturnDistanceCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoAddShouldAddSingleGeoLocationCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoPosNonExisting[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoAddShouldAddMultipleGeoLocationsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]",
        "geoRadiusShouldReturnMembersCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@4a5379e1]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 28
    },
    {
      "className": "org.springframework.data.redis.listener.ReactiveRedisMessageListenerContainerIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldPublishAndReceiveMessage[Standalone]",
        "listenToPatternShouldReceiveMessagesCorrectly[Standalone]",
        "shouldReceivePatternMessages[Pooled]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[Standalone]",
        "shouldPublishAndReceiveMessage[Pooled]",
        "shouldReceivePatternMessages[Standalone]",
        "shouldReceiveChannelMessages[Pooled]",
        "listenToChannelShouldReceiveChannelMessagesCorrectly[Pooled]",
        "listenToPatternShouldReceiveMessagesCorrectly[Pooled]",
        "shouldReceiveChannelMessages[Standalone]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.DefaultValueOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "setIfPresentReturnsTrueWhenKeyExists[2]",
        "testGetSet[3]",
        "testIncrementDouble[0]",
        "testSetWithExpirationWithTimeUnitMilliseconds[3]",
        "testIncrementLong[7]",
        "testMultiSetIfAbsent[8]",
        "testDecrementByLong[3]",
        "testSetIfAbsentWithExpirationEX[2]",
        "testSetRange[3]",
        "testSetWithExpirationEX[7]",
        "testDeserializeKey[3]",
        "testSetWithExpirationPX[8]",
        "testSetIfAbsentWithExpirationPX[2]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[5]",
        "testDecrement[3]",
        "testRawKeys[2]",
        "testGetRange[5]",
        "testSize[7]",
        "setIfPresentShouldSetExpirationCorrectly[0]",
        "testSetAndGetBit[7]",
        "testSetIfAbsentWithExpiration[2]",
        "testSetRange[4]",
        "setIfPresentReturnsTrueWhenKeyExists[1]",
        "testSetIfAbsentWithExpirationEX[3]",
        "testGetSet[4]",
        "testIncrementDouble[1]",
        "testSetWithExpirationWithTimeUnitMilliseconds[4]",
        "testIncrementLong[6]",
        "testDeserializeKey[4]",
        "testDecrementByLong[2]",
        "testSetWithExpirationEX[8]",
        "testSetIfPresentWithExpirationEX[8]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[4]",
        "testSetIfAbsentWithExpirationPX[1]",
        "testGetRange[6]",
        "testMultiSetIfAbsent[7]",
        "testSize[8]",
        "testDecrement[2]",
        "testSetWithExpirationPX[7]",
        "testRawKeys[1]",
        "testSetIfAbsentWithExpiration[1]",
        "setIfPresentShouldSetExpirationCorrectly[1]",
        "testGetAndSet[8]",
        "testSetAndGetBit[6]",
        "setIfPresentReturnsTrueWhenKeyExists[4]",
        "testGetSet[5]",
        "testMultiSetIfAbsentFailure[1]",
        "testSetWithExpirationWithTimeUnitMilliseconds[5]",
        "testIncrementLong[5]",
        "testDeserializeKey[1]",
        "testSetRange[1]",
        "testSetIfAbsentWithExpirationEX[0]",
        "testRawKeysCollection[2]",
        "testAppend[0]",
        "testIncrement[8]",
        "testDecrementByLong[5]",
        "testRawKeys[0]",
        "testSetIfAbsentWithExpirationPX[0]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[7]",
        "testGetRange[7]",
        "testSetIfPresentWithExpirationPX[8]",
        "testDecrement[1]",
        "setIfPresentShouldSetExpirationCorrectly[2]",
        "testGetAndSet[7]",
        "testSetAndGetBit[5]",
        "testSetIfAbsentWithExpiration[4]",
        "setIfPresentReturnsTrueWhenKeyExists[3]",
        "testGetSet[6]",
        "testMultiSetIfAbsentFailure[0]",
        "testIncrementLong[4]",
        "testSetWithExpirationWithTimeUnitMilliseconds[6]",
        "testDeserializeKey[2]",
        "testSetIfAbsentWithExpirationEX[1]",
        "testDecrementByLong[4]",
        "testRawKeysCollection[1]",
        "testSetRange[2]",
        "testRawKeysCollection[0]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[6]",
        "testIncrement[7]",
        "testDecrement[0]",
        "testSetAndGetBit[4]",
        "testGetRange[8]",
        "setIfPresentShouldSetExpirationCorrectly[3]",
        "testGetAndSet[6]",
        "testSetIfAbsentWithExpiration[3]",
        "testSetIfAbsent[0]",
        "testSetIfAbsentWithExpirationEX[6]",
        "testIncrementLong[3]",
        "testSetWithExpirationWithTimeUnitMilliseconds[7]",
        "testSetRange[7]",
        "testGetSet[7]",
        "testSetWithExpirationEX[3]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[0]",
        "testRawKeysCollection[4]",
        "setIfPresentReturnsTrueWhenKeyExists[6]",
        "testDecrement[8]",
        "testDecrement[7]",
        "testMultiSet[0]",
        "testRawKeys[6]",
        "testGetRange[1]",
        "testSetIfAbsentWithExpiration[6]",
        "testDeserializeKey[7]",
        "testIncrement[6]",
        "testSetIfPresentWithExpirationPX[6]",
        "testSetAndGetBit[3]",
        "testGetAndSet[5]",
        "testSetIfAbsent[1]",
        "testIncrementLong[2]",
        "testSetWithExpirationWithTimeUnitMilliseconds[8]",
        "testSetRange[8]",
        "testSetIfAbsentWithExpirationEX[7]",
        "testGetSet[8]",
        "testSetWithExpirationEX[4]",
        "testRawKeysCollection[3]",
        "setIfPresentReturnsTrueWhenKeyExists[5]",
        "testGetRange[2]",
        "testDecrement[6]",
        "testDeserializeKey[8]",
        "testMultiSet[1]",
        "testRawKeys[5]",
        "testIncrement[5]",
        "testSetAndGetBit[2]",
        "testSetIfPresentWithExpirationPX[7]",
        "testSetIfAbsentWithExpiration[5]",
        "testGetAndSet[4]",
        "testIncrementLong[1]",
        "testSetRange[5]",
        "testSetIfAbsentWithExpirationEX[4]",
        "testRawKeysCollection[6]",
        "testSetWithExpirationEX[5]",
        "testDeserializeKey[5]",
        "setIfPresentReturnsTrueWhenKeyExists[8]",
        "testDecrementByLong[1]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[2]",
        "testRawKeys[4]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[3]",
        "testGetRange[3]",
        "testSetIfAbsentWithExpiration[8]",
        "testDecrement[5]",
        "testIncrement[4]",
        "testSetAndGetBit[1]",
        "testSetIfPresentWithExpirationPX[4]",
        "testGetAndSet[3]",
        "testSetIfAbsentWithExpirationEX[5]",
        "testIncrementLong[0]",
        "testSetRange[6]",
        "testDecrementByLong[0]",
        "testRawKeysCollection[5]",
        "testDeserializeKey[6]",
        "setIfPresentReturnsTrueWhenKeyExists[7]",
        "testSetWithExpirationEX[6]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[1]",
        "testRawKeys[3]",
        "testSetIfAbsentWithExpiration[7]",
        "testDecrement[4]",
        "testSetAndGetBit[0]",
        "testGetRange[4]",
        "testSetIfPresentWithExpirationPX[5]",
        "testIncrement[3]",
        "testGetAndSet[2]",
        "setIfPresentShouldSetExpirationCorrectly[8]",
        "testMultiSetIfAbsentFailure[7]",
        "testRawKeysCollection[8]",
        "testIncrementDouble[8]",
        "testGetAndSet[1]",
        "testMultiSetIfAbsent[0]",
        "testSetIfPresentWithExpirationEX[1]",
        "testMultiSet[4]",
        "testSetWithExpirationPX[0]",
        "testAppend[6]",
        "testIncrement[2]",
        "testSetIfPresentWithExpirationPX[2]",
        "testSetWithExpiration[8]",
        "testSetIfAbsent[5]",
        "testMultiSetIfAbsentFailure[6]",
        "testRawKeysCollection[7]",
        "testSize[0]",
        "testGetAndSet[0]",
        "testSetWithExpirationEX[0]",
        "testSetIfPresentWithExpirationEX[0]",
        "testMultiSet[5]",
        "testIncrement[1]",
        "testSetIfPresentWithExpirationPX[3]",
        "testSetWithExpiration[7]",
        "testAppend[5]",
        "testSetIfAbsent[6]",
        "testSetIfAbsent[2]",
        "testSetIfAbsentWithExpirationEX[8]",
        "testSetWithExpirationEX[1]",
        "testSetIfPresentWithExpirationEX[3]",
        "testIncrementDouble[6]",
        "testSize[1]",
        "testMultiSetIfAbsent[2]",
        "testMultiSet[2]",
        "testAppend[8]",
        "testIncrement[0]",
        "testSetWithExpirationPX[2]",
        "testSetWithExpiration[6]",
        "testRawKeys[8]",
        "testSetIfPresentWithExpirationPX[0]",
        "testSetIfAbsent[3]",
        "testSetWithExpirationEX[2]",
        "testSize[2]",
        "testMultiSetIfAbsentFailure[8]",
        "testIncrementDouble[7]",
        "testSetIfAbsentWithExpirationPX[8]",
        "testGetRange[0]",
        "testMultiSetIfAbsent[1]",
        "testSetIfPresentWithExpirationEX[2]",
        "testMultiSet[3]",
        "testSetWithExpirationPX[1]",
        "testSetWithExpiration[5]",
        "testAppend[7]",
        "testSetIfPresentWithExpirationPX[1]",
        "testSetIfAbsent[4]",
        "testRawKeys[7]",
        "testMultiSetIfAbsentFailure[3]",
        "setIfPresentShouldSetExpirationCorrectly[4]",
        "testSetWithExpiration[3]",
        "testSetIfPresentWithExpirationEX[5]",
        "testIncrementDouble[4]",
        "testSize[3]",
        "testSetIfAbsentWithExpirationPX[7]",
        "testDecrementByLong[7]",
        "testSetWithExpirationPX[4]",
        "testAppend[2]",
        "testMultiSetIfAbsent[4]",
        "testSetWithExpiration[4]",
        "testMultiSet[8]",
        "testMultiSetIfAbsentFailure[2]",
        "setIfPresentShouldSetExpirationCorrectly[5]",
        "testSetWithExpiration[2]",
        "testSize[4]",
        "testDeserializeKey[0]",
        "testIncrementDouble[5]",
        "testSetWithExpirationWithTimeUnitMilliseconds[0]",
        "testSetIfPresentWithExpirationEX[4]",
        "testSetRange[0]",
        "testGetSet[0]",
        "testSetIfAbsentWithExpirationPX[6]",
        "testMultiSetIfAbsent[3]",
        "testSetIfAbsentWithExpirationPX[5]",
        "testDecrementByLong[6]",
        "setIfPresentReturnsFalseWhenKeyDoesNotExist[8]",
        "testAppend[1]",
        "testSetWithExpirationPX[3]",
        "testSetWithExpiration[1]",
        "setIfPresentReturnsTrueWhenKeyExists[0]",
        "testMultiSetIfAbsentFailure[5]",
        "setIfPresentShouldSetExpirationCorrectly[6]",
        "testIncrementDouble[2]",
        "testSetWithExpirationWithTimeUnitMilliseconds[1]",
        "testSize[5]",
        "testGetSet[1]",
        "testSetIfPresentWithExpirationEX[7]",
        "testSetIfAbsentWithExpirationPX[4]",
        "testAppend[4]",
        "testMultiSetIfAbsent[6]",
        "testSetWithExpirationPX[6]",
        "testMultiSet[6]",
        "testSetIfAbsentWithExpiration[0]",
        "testSetIfAbsent[7]",
        "testSetWithExpiration[0]",
        "testMultiSetIfAbsentFailure[4]",
        "setIfPresentShouldSetExpirationCorrectly[7]",
        "testIncrementDouble[3]",
        "testSetWithExpirationWithTimeUnitMilliseconds[2]",
        "testSetIfPresentWithExpirationEX[6]",
        "testIncrementLong[8]",
        "testGetSet[2]",
        "testDecrementByLong[8]",
        "testSetIfAbsentWithExpirationPX[3]",
        "testSetWithExpirationPX[5]",
        "testAppend[3]",
        "testMultiSetIfAbsent[5]",
        "testSize[6]",
        "testSetIfAbsent[8]",
        "testMultiSet[7]",
        "testSetAndGetBit[8]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 539
    },
    {
      "className": "org.springframework.data.redis.core.DefaultGeoOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisZSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "testScanWorksCorrectly[6]",
        "testContainsObject[3]",
        "testRangeByLexUnboundedWithLimit[14]",
        "testClear[5]",
        "testFirst[0]",
        "testRemove[0]",
        "testAdd[5]",
        "testRangeByLexBoundedWithLimit[9]",
        "testReverseRangeWithScores[3]",
        "testUnionAndStore[7]",
        "testRangeByLexUnbounded[8]",
        "testToString[11]",
        "testIntersectAndStore[5]",
        "testIsEmpty[8]",
        "testToString[12]",
        "testRangeByScore[1]",
        "testReverseRange[6]",
        "testReverseRank[13]",
        "testReverseRangeByScoreWithScores[3]",
        "testReverseRangeByScore[5]",
        "testRangeByScore[10]",
        "testRemoveByScore[14]",
        "testContainsObject[2]",
        "testReverseRangeByScoreWithScores[4]",
        "testScanWorksCorrectly[7]",
        "testIterator[0]",
        "testFirst[1]",
        "testClear[4]",
        "testRangeByLexBoundedWithLimit[8]",
        "testUnionAndStore[6]",
        "testRemove[1]",
        "testReverseRangeWithScores[4]",
        "testIntersectAndStore[4]",
        "testIsEmpty[9]",
        "testAdd[6]",
        "testRangeByLexUnbounded[7]",
        "testToString[10]",
        "testReverseRangeByScoreWithScores[14]",
        "testRangeByScore[0]",
        "testReverseRange[5]",
        "testRemoveByScore[9]",
        "testReverseRangeByScore[6]",
        "testRangeByScore[11]",
        "testReverseRank[12]",
        "testContainsObject[5]",
        "testAddWithScore[10]",
        "testClear[7]",
        "testDefaultScore[10]",
        "testAdd[3]",
        "testIterator[1]",
        "testContainsAll[10]",
        "testIntersectAndStore[3]",
        "testUnionAndStore[5]",
        "testRangeByLexBoundedWithLimit[7]",
        "testIsEmpty[6]",
        "testToString[14]",
        "testReverseRangeWithScores[5]",
        "testRangeByScore[3]",
        "testReverseRangeByScore[7]",
        "testAddWithScore[11]",
        "testReverseRange[8]",
        "testLast[9]",
        "testReverseRank[11]",
        "testReverseRangeByScoreWithScores[1]",
        "testScanWorksCorrectly[3]",
        "testRemoveByScore[8]",
        "testRemoveByScore[12]",
        "testRangeByScore[12]",
        "testContainsObject[4]",
        "testScanWorksCorrectly[5]",
        "testAdd[4]",
        "testClear[6]",
        "testIntersectAndStore[2]",
        "testUnionAndStore[4]",
        "testIterator[2]",
        "testRangeByLexUnbounded[9]",
        "testRangeByLexBoundedWithLimit[6]",
        "testIsEmpty[7]",
        "testToString[13]",
        "testReverseRangeWithScores[6]",
        "testReverseRangeByScore[8]",
        "testRemoveByScore[7]",
        "testRangeByScore[2]",
        "testReverseRange[7]",
        "testScanWorksCorrectly[4]",
        "testRangeByScore[13]",
        "testReverseRank[10]",
        "testReverseRangeByScoreWithScores[2]",
        "testRemoveByScore[13]",
        "testClear[1]",
        "testReverseRangeByScoreWithScores[7]",
        "testRangeByScore[14]",
        "testAdd[9]",
        "testRangeByLexBoundedWithLimit[5]",
        "testLastException[3]",
        "testLast[7]",
        "testRange[9]",
        "testIntersectAndStore[1]",
        "testIsEmpty[4]",
        "testRemoveByScore[10]",
        "testRemove[4]",
        "testReverseRangeWithScores[7]",
        "testReverseRangeByScoreWithScores[11]",
        "testDefaultScore[9]",
        "testRangeByScoreWithScores[0]",
        "testRemoveByScore[6]",
        "testReverseRangeByScore[9]",
        "testScanWorksCorrectly[1]",
        "testRangeByLexUnboundedWithLimit[10]",
        "testClear[0]",
        "testReverseRangeByScoreWithScores[8]",
        "testRangeByLexBoundedWithLimit[4]",
        "testIntersectAndStore[0]",
        "testLastException[4]",
        "testIsEmpty[5]",
        "testRange[8]",
        "testLast[8]",
        "removeAll[9]",
        "testRemove[5]",
        "testReverseRangeWithScores[8]",
        "testRemoveByScore[5]",
        "testReverseRangeByScoreWithScores[10]",
        "testDefaultScore[8]",
        "removeAll[14]",
        "testRangeByScoreWithScores[1]",
        "testToArray[14]",
        "testRemoveByScore[11]",
        "testReverseRange[9]",
        "testContainsAll[0]",
        "testScanWorksCorrectly[2]",
        "testRangeByLexUnboundedWithLimit[11]",
        "testToArrayWithGenerics[1]",
        "testContainsObject[1]",
        "testReverseRangeByScoreWithScores[5]",
        "testRangeByLexUnboundedWithLimit[12]",
        "testClear[3]",
        "testRemoveObject[8]",
        "testRangeByScoreWithScores[2]",
        "testRemoveByScore[3]",
        "testRank[13]",
        "testUnionAndStore[9]",
        "testRemove[2]",
        "testLastException[0]",
        "testAdd[7]",
        "testLast[5]",
        "testReverseRangeWithScores[9]",
        "testContainsAll[1]",
        "testRangeByLexBoundedWithLimit[3]",
        "testIsEmpty[2]",
        "removeAll[8]",
        "testReverseRangeByScoreWithScores[13]",
        "removeAll[13]",
        "testRemoveByScore[4]",
        "testDefaultScore[7]",
        "testRangeByLexUnboundedWithLimit[13]",
        "testReverseRangeByScoreWithScores[6]",
        "testToArrayWithGenerics[0]",
        "testRangeByScoreWithScores[3]",
        "testDefaultScore[5]",
        "testRank[14]",
        "testClear[2]",
        "testRemoveObject[9]",
        "testRemoveByScore[2]",
        "testRemoveObject[10]",
        "testUnionAndStore[8]",
        "testAdd[8]",
        "testContainsObject[0]",
        "testLastException[1]",
        "testLastException[2]",
        "testContainsAll[2]",
        "testLast[6]",
        "testRangeByLexBoundedWithLimit[2]",
        "removeAll[7]",
        "testIsEmpty[3]",
        "testRemove[3]",
        "testReverseRangeByScoreWithScores[12]",
        "testScanWorksCorrectly[0]",
        "testReverseRank[14]",
        "testDefaultScore[6]",
        "removeAll[12]",
        "testEquals[0]",
        "testRank[6]",
        "testHashCode[10]",
        "testDefaultScore[4]",
        "testGetKey[7]",
        "testRangeWithScores[7]",
        "testIterator[7]",
        "testFirstException[1]",
        "testToArrayWithGenerics[3]",
        "testRange[10]",
        "testRemove[8]",
        "testIntersectAndStore[11]",
        "testLast[13]",
        "testLastException[12]",
        "testContainsAll[3]",
        "removeAll[6]",
        "testLast[3]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "testRank[10]",
        "testAddWithScore[5]",
        "testRange[5]",
        "testRank[5]",
        "testToArrayWithGenerics[2]",
        "testRangeByLexBounded[0]",
        "testDefaultScore[3]",
        "testRank[12]",
        "testGetKey[6]",
        "testIterator[8]",
        "testSize[0]",
        "testFirstException[2]",
        "removeAll[5]",
        "testIntersectAndStore[12]",
        "testContainsAll[4]",
        "testRemove[9]",
        "testIterator[9]",
        "testIsEmpty[1]",
        "testRangeWithScores[6]",
        "testLast[4]",
        "testHashCode[3]",
        "testAddWithScore[6]",
        "testRank[11]",
        "testReverseRangeByScore[10]",
        "testLastException[13]",
        "testRangeWithScores[14]",
        "testLast[14]",
        "testRange[4]",
        "testEquals[2]",
        "testRank[4]",
        "testReverseRangeByScoreWithScores[9]",
        "testDefaultScore[2]",
        "testFirst[14]",
        "testGetKey[5]",
        "testLast[0]",
        "testRangeByLexBounded[1]",
        "testRangeWithScores[9]",
        "testFirstException[3]",
        "testToArrayWithGenerics[5]",
        "testRange[12]",
        "testSize[1]",
        "testRange[7]",
        "removeAll[4]",
        "testRangeByLexUnboundedWithLimit[0]",
        "testLast[1]",
        "testAddWithScore[3]",
        "testContainsAll[5]",
        "testHashCode[4]",
        "testRemove[6]",
        "testLastException[14]",
        "testHashCode[12]",
        "testIntersectAndStore[13]",
        "testDefaultScore[1]",
        "testEquals[1]",
        "testRank[3]",
        "testRangeWithScores[8]",
        "testGetKey[4]",
        "testRangeByLexBounded[2]",
        "testSize[2]",
        "testFirstException[4]",
        "testRange[11]",
        "testToArrayWithGenerics[4]",
        "testReverseRangeByScore[0]",
        "testRangeByLexUnboundedWithLimit[1]",
        "testRange[6]",
        "testRemove[7]",
        "testContainsAll[6]",
        "testLast[2]",
        "testHashCode[5]",
        "testAddWithScore[4]",
        "testHashCode[11]",
        "removeAll[3]",
        "testIntersectAndStore[14]",
        "testDefaultScore[0]",
        "testAdd[1]",
        "testEquals[4]",
        "testFirst[12]",
        "testReverseRangeByScore[13]",
        "testContainsObject[7]",
        "testRangeByLexBounded[3]",
        "testToArrayWithGenerics[7]",
        "testRange[14]",
        "testSize[3]",
        "testDefaultScore[12]",
        "testRank[2]",
        "testIterator[3]",
        "testContainsAll[12]",
        "testUnionAndStore[3]",
        "testReverseRangeByScore[1]",
        "testHashCode[6]",
        "testRangeWithScores[3]",
        "testAddWithScore[1]",
        "testContainsAll[7]",
        "testRangeByLexUnbounded[13]",
        "testAddWithScore[13]",
        "testRange[1]",
        "testFirst[11]",
        "removeAll[2]",
        "testHashCode[14]",
        "testEquals[3]",
        "testContainsObject[6]",
        "testFirst[13]",
        "testReverseRangeByScore[14]",
        "testRangeByLexBounded[4]",
        "testSize[4]",
        "testDefaultScore[11]",
        "testAdd[2]",
        "testRange[13]",
        "testRank[1]",
        "testToArrayWithGenerics[6]",
        "testContainsAll[11]",
        "testUnionAndStore[2]",
        "testIterator[4]",
        "testUnionAndStore[1]",
        "testRangeWithScores[2]",
        "testReverseRangeByScore[2]",
        "testLast[10]",
        "testAddWithScore[2]",
        "testHashCode[7]",
        "testContainsAll[8]",
        "testRangeByLexUnbounded[12]",
        "testRange[0]",
        "testAddWithScore[12]",
        "removeAll[1]",
        "testToString[0]",
        "testHashCode[13]",
        "testGetKey[9]",
        "testEquals[6]",
        "testIterator[5]",
        "testToArrayWithGenerics[9]",
        "testSize[5]",
        "testContainsAll[9]",
        "testDefaultScore[14]",
        "testRank[0]",
        "testRangeByLexBounded[5]",
        "testUnionAndStore[0]",
        "testLastException[10]",
        "testContainsAll[14]",
        "testHashCode[8]",
        "testLast[11]",
        "testRangeWithScores[5]",
        "testContainsObject[9]",
        "testRangeByLexUnbounded[11]",
        "testReverseRangeByScore[11]",
        "testRange[3]",
        "removeAll[0]",
        "testReverseRangeByScore[3]",
        "testEquals[5]",
        "testReverseRangeByScore[12]",
        "testAdd[0]",
        "testGetKey[8]",
        "testContainsObject[8]",
        "testIterator[6]",
        "testToArrayWithGenerics[8]",
        "testDefaultScore[13]",
        "testRangeByLexBounded[6]",
        "testFirstException[0]",
        "testContainsAll[13]",
        "testLast[12]",
        "testHashCode[9]",
        "testIntersectAndStore[10]",
        "testLastException[11]",
        "testRangeWithScores[4]",
        "testSize[6]",
        "testAddWithScore[0]",
        "testAddWithScore[14]",
        "testRangeByLexUnbounded[10]",
        "testFirst[10]",
        "testReverseRangeByScore[4]",
        "testRange[2]",
        "testScore[8]",
        "testFirstException[13]",
        "testRangeByLexBounded[7]",
        "testRangeByLexBoundedWithLimit[13]",
        "testUnionAndStore[14]",
        "testToString[3]",
        "testFirstException[9]",
        "testSize[7]",
        "testRemove[13]",
        "testToArray[5]",
        "testEquals[8]",
        "testGetKey[10]",
        "testRangeByLexUnboundedWithLimit[6]",
        "testAddAll[6]",
        "testScore[9]",
        "testEquals[12]",
        "testReverseRank[5]",
        "testScore[7]",
        "testAddAll[7]",
        "testEquals[7]",
        "testFirstException[12]",
        "testRangeByLexBounded[8]",
        "testReverseRangeWithScores[10]",
        "testReverseRank[4]",
        "testRangeByLexBoundedWithLimit[14]",
        "testToString[4]",
        "testRangeByLexBounded[9]",
        "testUnionAndStore[13]",
        "testSize[8]",
        "testToArray[4]",
        "testRemove[12]",
        "testRangeByLexUnboundedWithLimit[7]",
        "testEquals[13]",
        "testFirstException[11]",
        "testRangeWithScores[1]",
        "testSize[9]",
        "testRemove[11]",
        "testGetKey[12]",
        "testRangeByLexUnboundedWithLimit[8]",
        "testToArray[7]",
        "testToString[1]",
        "testReverseRank[7]",
        "testAddAll[4]",
        "testEquals[14]",
        "testFirstException[10]",
        "testRangeWithScores[0]",
        "testRangeByLexUnbounded[14]",
        "testRemove[10]",
        "testToArray[6]",
        "testEquals[9]",
        "testGetKey[11]",
        "testRangeByLexUnboundedWithLimit[9]",
        "testToString[2]",
        "testAddAll[5]",
        "testReverseRank[6]",
        "testScore[4]",
        "testGetKey[3]",
        "testFirstException[5]",
        "testReverseRangeWithScores[13]",
        "testRangeByLexUnboundedWithLimit[2]",
        "testReverseRank[1]",
        "testToString[7]",
        "testAddAll[2]",
        "testRangeWithScores[11]",
        "testToArray[9]",
        "testAddWithScore[9]",
        "testUnionAndStore[10]",
        "testIsEmpty[11]",
        "testRank[9]",
        "testScore[3]",
        "testFirstException[6]",
        "testReverseRangeWithScores[14]",
        "testGetKey[2]",
        "testReverseRange[14]",
        "testReverseRank[0]",
        "testToString[8]",
        "testRangeWithScores[10]",
        "testToArray[8]",
        "testRangeByLexBoundedWithLimit[10]",
        "testRangeByLexUnboundedWithLimit[3]",
        "testAddAll[3]",
        "testIsEmpty[12]",
        "testScore[6]",
        "testRank[8]",
        "testFirstException[7]",
        "testGetKey[1]",
        "testReverseRangeWithScores[11]",
        "testReverseRank[3]",
        "testToString[5]",
        "testRangeByLexBoundedWithLimit[11]",
        "testAddWithScore[7]",
        "testHashCode[0]",
        "testAddAll[0]",
        "testEquals[10]",
        "testUnionAndStore[12]",
        "testRangeByLexUnboundedWithLimit[4]",
        "testRangeWithScores[13]",
        "testScore[5]",
        "testRank[7]",
        "testFirstException[14]",
        "testGetKey[0]",
        "testReverseRangeWithScores[12]",
        "testToString[6]",
        "testReverseRank[2]",
        "testRangeByLexBoundedWithLimit[12]",
        "testFirstException[8]",
        "testAddAll[1]",
        "testIsEmpty[10]",
        "testHashCode[1]",
        "testEquals[11]",
        "testRangeByLexUnboundedWithLimit[5]",
        "testUnionAndStore[11]",
        "testAddWithScore[8]",
        "testRangeWithScores[12]",
        "testRemoveObject[6]",
        "testRangeByScore[9]",
        "testAddAll[14]",
        "testRemoveByScore[1]",
        "testRangeByLexBounded[10]",
        "testSize[10]",
        "removeAll[10]",
        "testRangeByScoreWithScores[4]",
        "testRemoveObject[11]",
        "testScore[0]",
        "testFirst[8]",
        "testRangeByLexBoundedWithLimit[1]",
        "testReverseRange[11]",
        "testClear[10]",
        "testAdd[11]",
        "testLastException[7]",
        "testRangeByScoreWithScores[11]",
        "removeAll[11]",
        "testToArray[11]",
        "testRemoveObject[7]",
        "testRemoveByScore[0]",
        "testRangeByLexBounded[11]",
        "testRangeByScoreWithScores[5]",
        "testSize[11]",
        "testRemoveObject[12]",
        "testScanWorksCorrectly[14]",
        "testFirst[9]",
        "testReverseRange[10]",
        "testRangeByLexBoundedWithLimit[0]",
        "testLastException[8]",
        "testAdd[10]",
        "testRangeByScoreWithScores[12]",
        "testRangeByScore[8]",
        "testToArray[10]",
        "testRemoveObject[4]",
        "testRangeByScoreWithScores[6]",
        "testAddAll[12]",
        "testScore[2]",
        "testRangeByLexBounded[12]",
        "testSize[12]",
        "testFirst[6]",
        "testRangeByLexUnbounded[2]",
        "testAdd[13]",
        "testRemoveObject[13]",
        "testClear[12]",
        "testLastException[5]",
        "testReverseRange[13]",
        "testReverseRange[0]",
        "testRangeByLexUnbounded[1]",
        "testToString[9]",
        "testContainsObject[10]",
        "testToArray[13]",
        "testIsEmpty[13]",
        "testRangeByScoreWithScores[7]",
        "testAddAll[13]",
        "testRemoveObject[5]",
        "testSize[13]",
        "testScore[1]",
        "testRangeByLexBounded[13]",
        "testRemoveObject[14]",
        "testFirst[7]",
        "testReverseRange[12]",
        "testClear[11]",
        "testRangeByLexUnbounded[0]",
        "testLastException[6]",
        "testAdd[12]",
        "testRangeByLexBounded[14]",
        "testContainsObject[11]",
        "testRangeByScoreWithScores[10]",
        "testToArrayWithGenerics[14]",
        "testToArray[12]",
        "testIsEmpty[14]",
        "testSize[14]",
        "testRangeByScoreWithScores[8]",
        "testIterator[13]",
        "testAddAll[10]",
        "testRangeByLexUnbounded[4]",
        "testClear[9]",
        "testFirst[4]",
        "testIntersectAndStore[9]",
        "testScanWorksCorrectly[11]",
        "testScore[12]",
        "testToArray[1]",
        "testReverseRange[2]",
        "testClear[14]",
        "testToArrayWithGenerics[13]",
        "testContainsObject[12]",
        "testIterator[14]",
        "testReverseRank[9]",
        "testRemoveObject[2]",
        "testRangeByScore[5]",
        "testGetKey[14]",
        "testRangeByScoreWithScores[9]",
        "testIterator[12]",
        "testAddAll[11]",
        "testFirst[5]",
        "testIntersectAndStore[8]",
        "testRangeByLexUnbounded[3]",
        "testClear[8]",
        "testAdd[14]",
        "testScore[14]",
        "testScanWorksCorrectly[10]",
        "testReverseRangeWithScores[0]",
        "testToArray[0]",
        "testScore[13]",
        "testReverseRange[1]",
        "testClear[13]",
        "testRangeByScore[4]",
        "testToArrayWithGenerics[12]",
        "testContainsObject[13]",
        "testReverseRangeByScoreWithScores[0]",
        "testReverseRank[8]",
        "testGetKey[13]",
        "testRemoveObject[3]",
        "testScanWorksCorrectly[8]",
        "testAddAll[8]",
        "testContainsObject[14]",
        "testFirst[2]",
        "testToArrayWithGenerics[11]",
        "testIterator[11]",
        "testReverseRangeWithScores[1]",
        "testIntersectAndStore[7]",
        "testScanWorksCorrectly[13]",
        "testRangeByLexUnbounded[6]",
        "testScore[10]",
        "testToArray[3]",
        "testLastException[9]",
        "testRangeByScoreWithScores[13]",
        "testReverseRange[4]",
        "testRemoveObject[0]",
        "testRangeByScore[7]",
        "testAddAll[9]",
        "testIterator[10]",
        "testScanWorksCorrectly[9]",
        "testToArrayWithGenerics[10]",
        "testIntersectAndStore[6]",
        "testReverseRangeWithScores[2]",
        "testRangeByLexUnbounded[5]",
        "testFirst[3]",
        "testScanWorksCorrectly[12]",
        "testScore[11]",
        "testToArray[2]",
        "testRangeByScoreWithScores[14]",
        "testReverseRange[3]",
        "testRemove[14]",
        "testRemoveObject[1]",
        "testRangeByScore[6]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 630
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisListTests",
      "failingMethods": [],
      "erroringMethods": [
        "testPeekLast[5]",
        "testRemoveFirst[5]",
        "testTakeLast[13]",
        "testPoll[14]",
        "testContainsObject[3]",
        "testTakeFirst[14]",
        "testRemainingCapacity[1]",
        "testRemove[0]",
        "testAdd[5]",
        "testAddIndexObjectTail[1]",
        "testOfferLast[3]",
        "testPop[13]",
        "testPollLastTimeout[11]",
        "testPop[12]",
        "testRemoveLast[7]",
        "testAddLast[6]",
        "testPollLast[0]",
        "testPeekLast[6]",
        "testPollLast[2]",
        "testContainsObject[2]",
        "testRemoveFirst[6]",
        "testPeek[10]",
        "testRemainingCapacity[2]",
        "testAddIndexObjectTail[0]",
        "testOfferLast[4]",
        "testRemove[1]",
        "testAdd[6]",
        "testPop[14]",
        "testPollLastTimeout[10]",
        "testTake[14]",
        "testRemoveLast[6]",
        "testElement[10]",
        "testTakeLast[12]",
        "testAddLast[5]",
        "testPeekLast[7]",
        "testPollLast[1]",
        "testAddLast[3]",
        "testPoll[12]",
        "testPeekLast[3]",
        "testContainsObject[5]",
        "testAdd[3]",
        "testOfferLast[5]",
        "testTakeFirst[12]",
        "testAddIndexObjectTail[3]",
        "testRemoveFirst[7]",
        "testRemoveLast[9]",
        "testPollLastTimeout[13]",
        "testLast[9]",
        "testAddLast[4]",
        "testAddLast[2]",
        "testPeekLast[4]",
        "testContainsObject[4]",
        "testTakeFirst[13]",
        "testPoll[13]",
        "testTakeLast[14]",
        "testRemainingCapacity[0]",
        "testAddIndexObjectTail[2]",
        "testAdd[4]",
        "testOfferLast[6]",
        "testRemoveFirst[8]",
        "testRemoveLast[8]",
        "testPollLastTimeout[12]",
        "testRemoveFirst[1]",
        "testAdd[9]",
        "testTakeFirst[10]",
        "testLast[7]",
        "testRemove[4]",
        "testPeek[13]",
        "testDrainToCollection[9]",
        "testRemoveLast[3]",
        "testRemoveFirst[2]",
        "testOfferLast[0]",
        "testTakeFirst[11]",
        "testLast[8]",
        "removeAll[9]",
        "testRemove[5]",
        "testPeek[14]",
        "removeAll[14]",
        "testAddLast[9]",
        "testDrainToCollection[8]",
        "testRemoveLast[2]",
        "testContainsAll[0]",
        "testToArrayWithGenerics[1]",
        "testContainsObject[1]",
        "testRemoveFirst[3]",
        "testOfferLast[1]",
        "testRemove[2]",
        "testAdd[7]",
        "testLast[5]",
        "testRemoveLast[5]",
        "testContainsAll[1]",
        "removeAll[8]",
        "testDrainToCollection[7]",
        "removeAll[13]",
        "testAddLast[8]",
        "testPeek[11]",
        "testPeekLast[8]",
        "testRemoveFirst[4]",
        "testToArrayWithGenerics[0]",
        "testOfferLast[2]",
        "testAdd[8]",
        "testContainsObject[0]",
        "testContainsAll[2]",
        "testLast[6]",
        "removeAll[7]",
        "testRemove[3]",
        "testDrainToCollection[6]",
        "testPeek[12]",
        "removeAll[12]",
        "testAddLast[7]",
        "testPeekLast[9]",
        "testRemoveLast[4]",
        "testPollLastTimeout[2]",
        "testTrim[8]",
        "testHashCode[10]",
        "testPutLast[6]",
        "testGetKey[7]",
        "testPollLast[9]",
        "testPut[10]",
        "testPollFirst[12]",
        "testRemoveIndex[4]",
        "testRemainingCapacity[9]",
        "testToArrayWithGenerics[3]",
        "testRemove[8]",
        "testTakeLast[9]",
        "testAddIndexObjectTail[9]",
        "testLast[13]",
        "testContainsAll[3]",
        "removeAll[6]",
        "testAddIndexObjectHead[2]",
        "testDescendingIterator[1]",
        "testLast[3]",
        "testDescendingIterator[13]",
        "testPut[11]",
        "testPollFirst[13]",
        "testDrainToCollection[5]",
        "testGetFirst[12]",
        "testToArrayWithGenerics[2]",
        "testTrim[7]",
        "testRemoveIndex[5]",
        "testPutLast[7]",
        "testPollLastTimeout[3]",
        "testPollFirst[11]",
        "testGetKey[6]",
        "testDescendingIterator[0]",
        "removeAll[5]",
        "testContainsAll[4]",
        "testAddIndexObjectTail[8]",
        "testAddIndexObjectHead[3]",
        "testRemove[9]",
        "testAddIndexObjectMiddle[0]",
        "testLast[4]",
        "testDescendingIterator[12]",
        "testPut[12]",
        "testGetFirst[13]",
        "testLast[14]",
        "testDrainToCollection[4]",
        "testTrim[6]",
        "testRemoveIndex[6]",
        "testPollLast[7]",
        "testPollFirst[10]",
        "testPollLastTimeout[4]",
        "testGetKey[5]",
        "testLast[0]",
        "testToArrayWithGenerics[5]",
        "testRemainingCapacity[7]",
        "testElement[9]",
        "removeAll[4]",
        "testLast[1]",
        "testAddIndexObjectMiddle[1]",
        "testDescendingIterator[3]",
        "testDescendingIterator[11]",
        "testContainsAll[5]",
        "testAddIndexObjectHead[0]",
        "testRemove[6]",
        "testPutLast[4]",
        "testPut[13]",
        "testRemoveLast[1]",
        "testDrainToCollection[3]",
        "testGetFirst[10]",
        "testHashCode[12]",
        "testSet[1]",
        "testTrim[5]",
        "testPollLastTimeout[5]",
        "testRemoveFirst[0]",
        "testRemoveIndex[7]",
        "testPollLast[8]",
        "testGetKey[4]",
        "testAddIndexObjectMiddle[2]",
        "testToArrayWithGenerics[4]",
        "testRemainingCapacity[8]",
        "testSet[0]",
        "testRemove[7]",
        "testContainsAll[6]",
        "testAddIndexObjectHead[1]",
        "testLast[2]",
        "testDescendingIterator[10]",
        "testDescendingIterator[2]",
        "testRemoveLast[0]",
        "testPutLast[5]",
        "testPut[14]",
        "testGetFirst[11]",
        "testHashCode[11]",
        "testDrainToCollection[2]",
        "removeAll[3]",
        "testPollLast[5]",
        "testAdd[1]",
        "testPutLast[10]",
        "testPollLastTimeout[6]",
        "testPoll[10]",
        "testContainsObject[7]",
        "testRemoveIndex[8]",
        "testRemainingCapacity[5]",
        "testToArrayWithGenerics[7]",
        "testTrim[12]",
        "testAddIndexObjectTail[5]",
        "testAddIndexObjectHead[7]",
        "testAddIndexObjectHead[6]",
        "testDrainToCollection[1]",
        "testDescendingIterator[5]",
        "testElement[7]",
        "testPop[8]",
        "testElement[13]",
        "testContainsAll[7]",
        "testSet[3]",
        "removeAll[2]",
        "testHashCode[14]",
        "testRemoveIndex[9]",
        "testPoll[11]",
        "testPollLast[6]",
        "testContainsObject[6]",
        "testRemainingCapacity[6]",
        "testPollLastTimeout[7]",
        "testPutFirst[10]",
        "testAdd[2]",
        "testToArrayWithGenerics[6]",
        "testAddIndexObjectTail[4]",
        "testAddIndexObjectHead[8]",
        "testTrim[11]",
        "testLast[10]",
        "testDrainToCollection[0]",
        "testElement[8]",
        "testPollLastTimeout[14]",
        "testDescendingIterator[4]",
        "testPop[9]",
        "testContainsAll[8]",
        "testElement[14]",
        "removeAll[1]",
        "testSet[2]",
        "testHashCode[13]",
        "testPollLast[3]",
        "testGetKey[9]",
        "testPutLast[8]",
        "testPutLast[12]",
        "testToArrayWithGenerics[9]",
        "testContainsAll[9]",
        "testRemainingCapacity[3]",
        "testPollLastTimeout[8]",
        "testTrim[10]",
        "testDescendingIterator[7]",
        "testAddIndexObjectHead[4]",
        "testElement[11]",
        "testAddIndexObjectTail[7]",
        "testPop[10]",
        "testLast[11]",
        "testContainsObject[9]",
        "testSet[5]",
        "testElement[5]",
        "testTakeLast[11]",
        "removeAll[0]",
        "testPollLast[4]",
        "testTrim[9]",
        "testAdd[0]",
        "testGetKey[8]",
        "testContainsObject[8]",
        "testPutLast[9]",
        "testPutLast[11]",
        "testPollLastTimeout[9]",
        "testRemainingCapacity[4]",
        "testToArrayWithGenerics[8]",
        "testAddIndexObjectTail[6]",
        "testPop[11]",
        "testLast[12]",
        "testAddIndexObjectHead[5]",
        "testDescendingIterator[6]",
        "testElement[12]",
        "testPollFirst[14]",
        "testSet[4]",
        "testElement[6]",
        "testTakeLast[10]",
        "addAllIndexCollectionMiddle[7]",
        "testTakeFirst[8]",
        "testRmoveLastOccurrence[2]",
        "testAddIndexObjectTail[10]",
        "testPutFirst[13]",
        "testPeekFirst[7]",
        "testPoll[2]",
        "testSize[7]",
        "testRemove[13]",
        "testEquals[8]",
        "testRemoveLast[10]",
        "testGetKey[10]",
        "testAddAll[6]",
        "testEquals[12]",
        "testElement[3]",
        "testDescendingIterator[9]",
        "testAddAll[7]",
        "testEquals[7]",
        "addAllIndexCollectionMiddle[8]",
        "testTakeFirst[7]",
        "testRmoveLastOccurrence[3]",
        "testAddIndexObjectTail[11]",
        "testPutFirst[14]",
        "testDescendingIterator[8]",
        "testPeekFirst[8]",
        "testSize[8]",
        "testPoll[1]",
        "testRemove[12]",
        "testRemoveLast[11]",
        "testEquals[13]",
        "testElement[4]",
        "testPollTimeout[14]",
        "addAllIndexCollectionMiddle[9]",
        "testPutFirst[11]",
        "testTakeFirst[6]",
        "testTrim[14]",
        "testRmoveLastOccurrence[0]",
        "testPeekFirst[9]",
        "testSize[9]",
        "testPoll[0]",
        "testRemove[11]",
        "testElement[1]",
        "testGetKey[12]",
        "testAddAll[4]",
        "testEquals[14]",
        "testPutFirst[12]",
        "testTakeFirst[5]",
        "testTrim[13]",
        "testRmoveLastOccurrence[1]",
        "testRemove[10]",
        "testEquals[9]",
        "testGetKey[11]",
        "testElement[2]",
        "testAddAll[5]",
        "testDrainToCollection[12]",
        "testPutLast[2]",
        "testAddAll[2]",
        "testDrainToCollection[13]",
        "testDrainToCollectionWithMaxElements[8]",
        "testOfferLast[11]",
        "testIsEmpty[11]",
        "testRemoveLast[14]",
        "testPutLast[3]",
        "testDrainToCollectionWithMaxElements[9]",
        "testDrainToCollection[14]",
        "testElement[0]",
        "testOfferLast[10]",
        "testAddAll[3]",
        "testIsEmpty[12]",
        "testOfferLast[14]",
        "testDrainToCollection[10]",
        "testCappedCollection[14]",
        "testRemoveLast[12]",
        "testGetFirst[14]",
        "testAddAll[0]",
        "testEquals[10]",
        "testDrainToCollectionWithMaxElements[6]",
        "testPutLast[0]",
        "testOfferLast[13]",
        "testDrainToCollection[11]",
        "testTakeFirst[9]",
        "testRemoveLast[13]",
        "testAddAll[1]",
        "testIsEmpty[10]",
        "testDrainToCollectionWithMaxElements[7]",
        "testEquals[11]",
        "testPutLast[1]",
        "testOfferLast[12]",
        "testCappedCollection[12]",
        "testRemoveObject[11]",
        "testAddIndexObjectHead[13]",
        "testTakeFirst[0]",
        "testPutFirst[1]",
        "testAdd[11]",
        "addAllIndexCollectionTail[0]",
        "testPeek[7]",
        "testRmoveLastOccurrence[13]",
        "testCappedCollection[13]",
        "testRemoveObject[12]",
        "testAddIndexObjectHead[14]",
        "testPoll[9]",
        "testPutFirst[0]",
        "testAdd[10]",
        "testPeek[6]",
        "testIndexOfObject[14]",
        "testRmoveLastOccurrence[12]",
        "testAddIndexObjectHead[11]",
        "testAdd[13]",
        "testRemoveObject[13]",
        "testPoll[8]",
        "testPeek[5]",
        "testContainsObject[10]",
        "testRemainingCapacity[14]",
        "testCappedCollection[10]",
        "addAllIndexCollectionTail[2]",
        "testIsEmpty[13]",
        "testRmoveLastOccurrence[11]",
        "addAllIndexCollectionMiddle[0]",
        "testIndexOfObject[13]",
        "testCappedCollection[11]",
        "testRemoveObject[14]",
        "testAddIndexObjectHead[12]",
        "testPoll[7]",
        "testAdd[12]",
        "testPeek[4]",
        "testContainsObject[11]",
        "addAllIndexCollectionTail[1]",
        "testRemainingCapacity[13]",
        "testToArrayWithGenerics[14]",
        "testRmoveLastOccurrence[10]",
        "testIsEmpty[14]",
        "addAllIndexCollectionMiddle[1]",
        "testIndexOfObject[12]",
        "testRemainingCapacity[11]",
        "testAddIndexObjectTail[14]",
        "testTakeFirst[4]",
        "testRemoveFirst[9]",
        "testOfferLast[7]",
        "testPoll[6]",
        "testIndexOfObject[11]",
        "testPutFirst[5]",
        "testPollTimeout[12]",
        "testToArrayWithGenerics[13]",
        "testContainsObject[12]",
        "testRemainingCapacity[12]",
        "addAllIndexCollectionMiddle[2]",
        "testOffer[14]",
        "testGetKey[14]",
        "addAllIndexCollectionMiddle[4]",
        "testRemainingCapacity[10]",
        "testAddIndexObjectHead[10]",
        "testAdd[14]",
        "testOfferLast[8]",
        "testTakeFirst[3]",
        "testOfferLast[9]",
        "testIndexOfObject[10]",
        "testPoll[5]",
        "testPutFirst[4]",
        "testToArrayWithGenerics[12]",
        "testPollTimeout[13]",
        "testContainsObject[13]",
        "addAllIndexCollectionMiddle[3]",
        "testGetKey[13]",
        "testAddAll[8]",
        "addAllIndexCollectionMiddle[5]",
        "testContainsObject[14]",
        "testToArrayWithGenerics[11]",
        "testAddIndexObjectTail[12]",
        "testTakeFirst[2]",
        "testPoll[4]",
        "testPutFirst[3]",
        "testPollTimeout[10]",
        "testPeek[9]",
        "testOffer[12]",
        "testPeekLast[13]",
        "addAllIndexCollectionMiddle[6]",
        "testAddAll[9]",
        "testToArrayWithGenerics[10]",
        "testAddIndexObjectTail[13]",
        "testRmoveLastOccurrence[14]",
        "testTakeFirst[1]",
        "testPutFirst[2]",
        "testPoll[3]",
        "testPollTimeout[11]",
        "testRemove[14]",
        "testPeek[8]",
        "testOffer[13]",
        "testPeekLast[14]",
        "testAddLast[13]",
        "addAllIndexCollectionTail[9]",
        "testPut[3]",
        "testClear[5]",
        "addAllIndexCollectionHead[2]",
        "testIndexOfObject[4]",
        "testPutFirst[9]",
        "testOfferFirst[3]",
        "testAddFirst[14]",
        "testToString[11]",
        "testIsEmpty[8]",
        "testToString[12]",
        "testOfferFirst[2]",
        "addAllIndexCollectionHead[13]",
        "testRemoveFirst[11]",
        "testOffer[10]",
        "testPeekLast[11]",
        "addAllIndexCollectionTail[8]",
        "testPut[2]",
        "testAddLast[12]",
        "testIterator[0]",
        "testSet[14]",
        "addAllIndexCollectionHead[3]",
        "testClear[4]",
        "testIndexOfObject[5]",
        "testPutFirst[8]",
        "testAddFirst[13]",
        "testIsEmpty[9]",
        "testToString[10]",
        "testRemoveFirst[12]",
        "addAllIndexCollectionHead[12]",
        "testOfferFirst[1]",
        "testOffer[11]",
        "testPeekLast[12]",
        "addAllIndexCollectionTail[7]",
        "testPut[1]",
        "testPutFirst[7]",
        "testClear[7]",
        "addAllIndexCollectionHead[0]",
        "testIndexOfObject[6]",
        "testIterator[1]",
        "testContainsAll[10]",
        "testOfferFirst[0]",
        "testIsEmpty[6]",
        "addAllIndexCollectionHead[11]",
        "testRemoveFirst[13]",
        "testToString[14]",
        "testCappedCollection[0]",
        "testSet[13]",
        "testPut[0]",
        "testAddLast[14]",
        "testRemoveFirstOccurrence[10]",
        "addAllIndexCollectionHead[1]",
        "testPutFirst[6]",
        "testClear[6]",
        "testTake[0]",
        "testIndexOfObject[7]",
        "testIterator[2]",
        "testIsEmpty[7]",
        "addAllIndexCollectionHead[10]",
        "testToString[13]",
        "testRemoveFirst[14]",
        "testPeekLast[10]",
        "testSet[12]",
        "testClear[1]",
        "testRemoveFirstOccurrence[11]",
        "addAllIndexCollectionHead[6]",
        "testOfferFirst[7]",
        "testPollFirst[1]",
        "testIndexOfObject[8]",
        "testRange[9]",
        "testIsEmpty[4]",
        "testPeek[3]",
        "addAllIndexCollectionTail[4]",
        "testCappedCollection[2]",
        "testPollTimeout[8]",
        "testSet[11]",
        "addAllIndexCollectionHead[7]",
        "testPollTimeout[9]",
        "testPollFirst[2]",
        "testClear[0]",
        "testRemoveFirstOccurrence[12]",
        "testOfferFirst[6]",
        "testIndexOfObject[9]",
        "testIsEmpty[5]",
        "testRange[8]",
        "testPeek[2]",
        "addAllIndexCollectionTail[3]",
        "testToArray[14]",
        "testCappedCollection[1]",
        "testSet[10]",
        "testAddLast[11]",
        "testClear[3]",
        "testRemoveObject[8]",
        "testRemoveFirstOccurrence[13]",
        "addAllIndexCollectionHead[4]",
        "testOfferFirst[5]",
        "testCappedCollection[4]",
        "testPeek[1]",
        "testIsEmpty[2]",
        "addAllIndexCollectionTail[6]",
        "addAllIndexCollectionHead[5]",
        "testClear[2]",
        "testRemoveObject[9]",
        "testRemoveFirstOccurrence[14]",
        "testRemoveObject[10]",
        "testPollFirst[0]",
        "testOfferFirst[4]",
        "testAddLast[10]",
        "testIsEmpty[3]",
        "testRemoveFirst[10]",
        "testPeek[0]",
        "addAllIndexCollectionTail[5]",
        "testCappedCollection[3]",
        "testEquals[0]",
        "testIterator[7]",
        "testRange[10]",
        "testTake[5]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "testPollLast[10]",
        "testDrainToCollectionWithMaxElements[4]",
        "testRange[5]",
        "testIterator[8]",
        "testSize[0]",
        "testTake[6]",
        "testIterator[9]",
        "testIsEmpty[1]",
        "testPollLast[11]",
        "testHashCode[3]",
        "testDrainToCollectionWithMaxElements[5]",
        "testRange[4]",
        "testDrainToCollectionWithMaxElements[2]",
        "addAllIndexCollectionHead[8]",
        "testEquals[2]",
        "testRmoveLastOccurrence[8]",
        "testPeekFirst[0]",
        "testOfferFirst[9]",
        "testRange[12]",
        "testSize[1]",
        "testTake[7]",
        "testRange[7]",
        "testHashCode[4]",
        "testPollLast[12]",
        "testDrainToCollectionWithMaxElements[14]",
        "testEquals[1]",
        "testTake[8]",
        "testRmoveLastOccurrence[9]",
        "testOfferFirst[8]",
        "testSize[2]",
        "testPeekFirst[1]",
        "testRange[11]",
        "testRange[6]",
        "testPollLast[13]",
        "testHashCode[5]",
        "addAllIndexCollectionHead[9]",
        "testDrainToCollectionWithMaxElements[3]",
        "testDrainToCollectionWithMaxElements[0]",
        "testEquals[4]",
        "testAddFirst[10]",
        "testRange[14]",
        "testTake[1]",
        "testSize[3]",
        "testRmoveLastOccurrence[6]",
        "testPeekFirst[2]",
        "testIterator[3]",
        "testContainsAll[12]",
        "testHashCode[6]",
        "testIndexOfObject[0]",
        "testPollLast[14]",
        "testRange[1]",
        "testDrainToCollectionWithMaxElements[1]",
        "testEquals[3]",
        "testTake[2]",
        "testSize[4]",
        "testRmoveLastOccurrence[7]",
        "testRange[13]",
        "testPeekFirst[3]",
        "testContainsAll[11]",
        "testIterator[4]",
        "testHashCode[7]",
        "testIndexOfObject[1]",
        "testRange[0]",
        "testToString[0]",
        "testEquals[6]",
        "testIterator[5]",
        "testTake[3]",
        "testSize[5]",
        "testRmoveLastOccurrence[4]",
        "testPeekFirst[4]",
        "testAddFirst[12]",
        "testContainsAll[14]",
        "testHashCode[8]",
        "testIndexOfObject[2]",
        "testRange[3]",
        "testRemoveFirstOccurrence[0]",
        "testEquals[5]",
        "testIndexOfObject[3]",
        "testIterator[6]",
        "testRmoveLastOccurrence[5]",
        "testTake[4]",
        "testAddFirst[11]",
        "testPeekFirst[5]",
        "testContainsAll[13]",
        "testPeekFirst[6]",
        "testHashCode[9]",
        "testSize[6]",
        "testRemoveFirstOccurrence[1]",
        "testRange[2]",
        "testPutLast[14]",
        "testAddFirst[8]",
        "testAddIndexObjectMiddle[7]",
        "testPop[4]",
        "testToString[3]",
        "testOffer[2]",
        "testAddFirst[7]",
        "testTakeLast[1]",
        "testToArray[5]",
        "testSet[7]",
        "testTrim[0]",
        "testRemoveFirstOccurrence[2]",
        "testPutLast[13]",
        "testAddFirst[9]",
        "testAddIndexObjectMiddle[8]",
        "testPop[5]",
        "testToString[4]",
        "testTakeLast[2]",
        "testToArray[4]",
        "testRemoveFirstOccurrence[3]",
        "testSet[6]",
        "testOffer[3]",
        "addAllIndexCollectionMiddle[10]",
        "testSet[9]",
        "testAddIndexObjectMiddle[9]",
        "testAddIndexObjectHead[9]",
        "testGetFirst[8]",
        "testPop[6]",
        "testTakeLast[3]",
        "testRemoveFirstOccurrence[4]",
        "testOffer[0]",
        "testAddFirst[5]",
        "testToArray[7]",
        "testToString[1]",
        "testRemoveIndex[14]",
        "addAllIndexCollectionMiddle[11]",
        "testTakeLast[4]",
        "testPop[7]",
        "testGetFirst[9]",
        "testRemoveFirstOccurrence[5]",
        "testToArray[6]",
        "testSet[8]",
        "testOffer[1]",
        "testAddFirst[6]",
        "testToString[2]",
        "testTake[9]",
        "testAddIndexObjectMiddle[3]",
        "testGetKey[3]",
        "testRemoveIndex[0]",
        "addAllIndexCollectionTail[14]",
        "addAllIndexCollectionTail[13]",
        "testGetFirst[6]",
        "testTakeLast[5]",
        "testOfferFirst[14]",
        "testRemoveFirstOccurrence[6]",
        "testToString[7]",
        "testPop[0]",
        "testAddFirst[3]",
        "testDrainToCollectionWithMaxElements[12]",
        "testToArray[9]",
        "testTrim[4]",
        "testRemoveIndex[1]",
        "testAddIndexObjectMiddle[4]",
        "testGetKey[2]",
        "testGetFirst[7]",
        "addAllIndexCollectionTail[12]",
        "testTakeLast[6]",
        "testRemoveFirstOccurrence[7]",
        "testToString[8]",
        "testToArray[8]",
        "testAddFirst[4]",
        "testPop[1]",
        "testDrainToCollectionWithMaxElements[13]",
        "testTrim[3]",
        "testPollLastTimeout[0]",
        "testAddIndexObjectMiddle[5]",
        "testRemoveIndex[2]",
        "testGetKey[1]",
        "testToString[5]",
        "testPop[2]",
        "testDrainToCollectionWithMaxElements[10]",
        "addAllIndexCollectionTail[11]",
        "testTakeLast[7]",
        "testRemoveFirstOccurrence[8]",
        "testOfferFirst[12]",
        "testHashCode[0]",
        "testGetFirst[4]",
        "testTrim[2]",
        "testAddFirst[1]",
        "testPollLastTimeout[1]",
        "testRemoveIndex[3]",
        "testGetKey[0]",
        "testAddIndexObjectMiddle[6]",
        "testToString[6]",
        "testTakeLast[8]",
        "testPop[3]",
        "testGetFirst[5]",
        "addAllIndexCollectionTail[10]",
        "testDrainToCollectionWithMaxElements[11]",
        "testRemoveFirstOccurrence[9]",
        "testOfferFirst[13]",
        "testDescendingIterator[14]",
        "testHashCode[1]",
        "testTrim[1]",
        "testAddFirst[2]",
        "testPollFirst[5]",
        "testRemoveObject[6]",
        "testAddAll[14]",
        "testSize[10]",
        "removeAll[10]",
        "testAddIndexObjectMiddle[10]",
        "testCappedCollection[6]",
        "testClear[10]",
        "testOfferFirst[10]",
        "testPollTimeout[4]",
        "removeAll[11]",
        "testGetFirst[2]",
        "testToArray[11]",
        "testRemoveObject[7]",
        "testPollFirst[6]",
        "testSize[11]",
        "testCappedCollection[5]",
        "testAddIndexObjectMiddle[11]",
        "testOfferFirst[11]",
        "testGetFirst[3]",
        "testPollTimeout[5]",
        "testAddFirst[0]",
        "testToArray[10]",
        "testRemoveObject[4]",
        "testAddAll[12]",
        "testPollFirst[3]",
        "testSize[12]",
        "testPut[9]",
        "testClear[12]",
        "testOffer[8]",
        "testAddIndexObjectMiddle[12]",
        "testCappedCollection[8]",
        "testToString[9]",
        "testGetFirst[0]",
        "testPollTimeout[6]",
        "testToArray[13]",
        "testPollFirst[4]",
        "testAddAll[13]",
        "testRemoveObject[5]",
        "testSize[13]",
        "testPut[8]",
        "testPeekFirst[14]",
        "testOffer[9]",
        "testClear[11]",
        "testCappedCollection[7]",
        "testAddIndexObjectMiddle[13]",
        "testToArray[12]",
        "testGetFirst[1]",
        "testPollTimeout[7]",
        "testSize[14]",
        "testAddLast[1]",
        "testPeekLast[1]",
        "testPollFirst[9]",
        "testRemoveIndex[13]",
        "testIterator[13]",
        "testAddAll[10]",
        "testClear[9]",
        "testPut[7]",
        "addAllIndexCollectionMiddle[12]",
        "testPeekFirst[13]",
        "testTake[11]",
        "testToArray[1]",
        "testPollTimeout[0]",
        "testClear[14]",
        "testIterator[14]",
        "testOffer[6]",
        "testAddIndexObjectMiddle[14]",
        "testRemoveObject[2]",
        "testAddLast[0]",
        "testPeekLast[2]",
        "testRemoveIndex[12]",
        "testIterator[12]",
        "testAddAll[11]",
        "testPeekFirst[12]",
        "testClear[8]",
        "addAllIndexCollectionMiddle[13]",
        "testPut[6]",
        "testToArray[0]",
        "testOffer[7]",
        "testTake[10]",
        "testCappedCollection[9]",
        "testClear[13]",
        "testPollTimeout[1]",
        "testRemoveObject[3]",
        "testPollFirst[7]",
        "testRemoveIndex[11]",
        "testIterator[11]",
        "testPeekFirst[11]",
        "testPut[5]",
        "addAllIndexCollectionMiddle[14]",
        "testTake[13]",
        "testToArray[3]",
        "testPollTimeout[2]",
        "testRemoveObject[0]",
        "testOffer[4]",
        "testPollFirst[8]",
        "testPeekLast[0]",
        "testRemoveIndex[10]",
        "testIterator[10]",
        "testPeekFirst[10]",
        "testPut[4]",
        "addAllIndexCollectionHead[14]",
        "testTake[12]",
        "testToArray[2]",
        "testTakeLast[0]",
        "testPollTimeout[3]",
        "testRemoveObject[1]",
        "testOffer[5]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1710
    },
    {
      "className": "org.springframework.data.redis.mapping.Jackson2HashMapperTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldWriteReadHashCorrectly[1]",
        "shouldWriteReadHashCorrectly[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.core.DefaultReactiveHyperLogLogOperationsIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "add[Person/JDK]",
        "union[Pooled/Person/JDK]",
        "delete[String/OXM]",
        "union[Jackson2]",
        "add[String/Person/OXM]",
        "add[Pooled/Person/JDK]",
        "add[raw]",
        "union[String/OXM]",
        "delete[Long]",
        "add[String/OXM]",
        "add[Long]",
        "delete[String]",
        "add[String]",
        "union[Double]",
        "add[Generic Jackson 2]",
        "add[String/Person/JDK]",
        "union[Person/JDK]",
        "delete[String/Person/JDK]",
        "delete[Jackson2]",
        "delete[raw]",
        "union[String/Person/JDK]",
        "delete[Pooled/Person/JDK]",
        "delete[String/Person/OXM]",
        "delete[Person/JDK]",
        "union[Long]",
        "union[raw]",
        "add[Jackson2]",
        "union[Generic Jackson 2]",
        "delete[Generic Jackson 2]",
        "add[Double]",
        "union[String/Person/OXM]",
        "union[String]",
        "delete[Double]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 33
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
      "failingMethods": [],
      "erroringMethods": [
        "testNone",
        "testExistingCol"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDecrementAndGet[1]",
        "testExpire[0]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "testGetAndDecrement[1]",
        "testRename[0]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "testGetAndAdd[1]",
        "testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[0]",
        "testGetAndIncrement[0]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "testCheckAndSet[1]",
        "testExpireAt[1]",
        "testAddAndGet[1]",
        "testGetAndSet[1]",
        "testIncrementAndGet[0]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "testExpire[1]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "testGetAndAdd[0]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[1]",
        "testExpireAt[0]",
        "testRename[1]",
        "testGetAndDecrement[0]",
        "testCheckAndSet[0]",
        "testDecrementAndGet[0]",
        "testGetAndIncrement[1]",
        "testGetAndSet[0]",
        "testAddAndGet[0]",
        "testIncrementAndGet[1]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 32
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveScriptingCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "evalShaShouldFail[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "scriptFlushShouldRemoveScripts[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "evalShouldReturnMultiNumbers[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "evalShaShouldReturnKey[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "evalShouldReturnStatus[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "scriptExistsShouldReturnState[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "evalShaShouldReturnMulti[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "evalShouldFailWithScriptError[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "evalShouldReturnBooleanFalse[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]",
        "scriptKillShouldKillScripts[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@65c040c9]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 20
    },
    {
      "className": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
      "failingMethods": [],
      "erroringMethods": [
        "testStopMessageListenerContainers[1]",
        "testStopMessageListenerContainers[0]",
        "testRemoveLastListener[0]",
        "testRemoveLastListener[1]",
        "testStopListening[0]",
        "testStopListening[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "listOperationLPushShouldBeCommittedCorrectly",
        "valueOperationSetShouldBeCommittedCorrectly",
        "listOperationLPushShoudBeRolledBackCorrectly",
        "valueOperationSetShouldBeRolledBackCorrectly",
        "valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.DefaultListOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "testRightPopAndLeftPush[1]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "testLeftPushWithPivot[2]",
        "testLeftPushAll[1]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "testRightPopAndLeftPushTimeout[2]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "testLeftPushIfPresent[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "testRightPushAll[3]",
        "testRightPushAllCollection[6]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "testRightPushWithPivot[6]",
        "testRightPushIfPresent[1]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "testLeftPushAllCollection[7]",
        "testRightPopAndLeftPush[2]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "testLeftPushIfPresent[6]",
        "testLeftPushAll[0]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "testLeftPushWithPivot[1]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "testRightPopAndLeftPushTimeout[3]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "testRightPushAll[2]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "testLeftPushAll[8]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "testRightPushAllCollection[7]",
        "testRightPushIfPresent[2]",
        "testRightPushWithPivot[5]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "testLeftPushAllCollection[6]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "testRightPopAndLeftPushTimeout[0]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "testRightPopAndLeftPush[7]",
        "testLeftPushWithPivot[0]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "testLeftPushIfPresent[3]",
        "testRightPopAndLeftPushTimeout[8]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "testLeftPushWithPivot[8]",
        "testRightPushAll[1]",
        "testLeftPushAll[7]",
        "testLeftPushAllCollection[1]",
        "testRightPushWithPivot[4]",
        "testRightPushAllCollection[8]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "testRightPushAllCollection[0]",
        "testRightPushIfPresent[7]",
        "testLeftPushWithPivot[7]",
        "testRightPopAndLeftPush[0]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "testRightPushAll[8]",
        "testLeftPushAll[6]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "testLeftPushIfPresent[4]",
        "testRightPopAndLeftPushTimeout[1]",
        "testRightPushAll[0]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "testRightPushWithPivot[3]",
        "testLeftPushAllCollection[0]",
        "testRightPushIfPresent[0]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "testRightPopAndLeftPush[8]",
        "testRightPushAllCollection[1]",
        "testLeftPushAllCollection[8]",
        "testRightPushIfPresent[8]",
        "testLeftPushWithPivot[6]",
        "testRightPushAll[7]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "testRightPopAndLeftPush[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "testLeftPushAll[5]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "testRightPopAndLeftPushTimeout[6]",
        "testLeftPushIfPresent[1]",
        "testRightPushWithPivot[2]",
        "testLeftPushAllCollection[3]",
        "testRightPushIfPresent[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "testRightPushAllCollection[2]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "testRightPushAll[6]",
        "testLeftPushWithPivot[5]",
        "testRightPopAndLeftPush[6]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "testLeftPushIfPresent[2]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "testLeftPushAll[4]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "testRightPopAndLeftPushTimeout[7]",
        "testRightPushIfPresent[6]",
        "testRightPushWithPivot[1]",
        "testLeftPushAllCollection[2]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "testRightPushAllCollection[3]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "testRightPopAndLeftPush[3]",
        "testLeftPushWithPivot[4]",
        "testRightPushAll[5]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "testLeftPushIfPresent[7]",
        "testRightPopAndLeftPushTimeout[4]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "testLeftPushAll[3]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "testRightPushWithPivot[0]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "testRightPushIfPresent[3]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "testRightPushWithPivot[8]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "testRightPushAllCollection[4]",
        "testLeftPushAllCollection[5]",
        "testRightPushAll[4]",
        "testLeftPushAll[2]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "testLeftPushWithPivot[3]",
        "testRightPopAndLeftPush[4]",
        "testLeftPushIfPresent[8]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "testLeftPushIfPresent[0]",
        "testRightPopAndLeftPushTimeout[5]",
        "testLeftPushAllCollection[4]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "testRightPushIfPresent[4]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "testRightPushWithPivot[7]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "testRightPushAllCollection[5]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 234
    },
    {
      "className": "org.springframework.data.redis.core.DefaultSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDistinctRandomMembers[0]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[7]",
        "testRemove[0]",
        "testAdd[5]",
        "testRandomMembersNegative[3]",
        "testDistinctRandomMembersNegative[6]",
        "testPop[4]",
        "testPopWithCount[8]",
        "testRemove[8]",
        "testSSCanReadsValuesFully[7]",
        "testRandomMembersWithDuplicates[6]",
        "testPopWithCount[0]",
        "testRandomMember[5]",
        "testMove[2]",
        "testDistinctRandomMembers[1]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[8]",
        "testDistinctRandomMembersNegative[7]",
        "testRandomMembersWithDuplicates[7]",
        "testRemove[1]",
        "testRandomMembersNegative[4]",
        "testAdd[6]",
        "testPop[5]",
        "testPopWithCount[7]",
        "testSSCanReadsValuesFully[6]",
        "testMove[1]",
        "testRandomMember[6]",
        "testDistinctRandomMembers[2]",
        "testDistinctRandomMembersNegative[4]",
        "testAdd[3]",
        "testRandomMembersNegative[1]",
        "testRandomMembersWithDuplicates[8]",
        "testRandomMembersWithDuplicates[0]",
        "testSSCanReadsValuesFully[5]",
        "testPop[6]",
        "testRemove[6]",
        "testMove[4]",
        "testPopWithCount[2]",
        "testDistinctRandomMembers[3]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[0]",
        "testRandomMember[7]",
        "testRandomMembersNegative[2]",
        "testDistinctRandomMembersNegative[5]",
        "testAdd[4]",
        "testRandomMembersWithDuplicates[1]",
        "testRemove[7]",
        "testRandomMember[0]",
        "testSSCanReadsValuesFully[4]",
        "testPop[7]",
        "testMove[3]",
        "testPopWithCount[1]",
        "testRandomMember[8]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[1]",
        "testDistinctRandomMembers[4]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[3]",
        "testAdd[1]",
        "testMove[7]",
        "testDistinctRandomMembersNegative[2]",
        "testRandomMembersNegative[7]",
        "testSSCanReadsValuesFully[3]",
        "testRandomMembersWithDuplicates[2]",
        "testRemove[4]",
        "testPop[8]",
        "testRandomMember[1]",
        "testDistinctRandomMembers[5]",
        "testPop[0]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[2]",
        "testPopWithCount[4]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[4]",
        "testRandomMembersNegative[8]",
        "testDistinctRandomMembersNegative[3]",
        "testMove[6]",
        "testRandomMembersNegative[0]",
        "testAdd[2]",
        "testSSCanReadsValuesFully[2]",
        "testRandomMembersWithDuplicates[3]",
        "testRemove[5]",
        "testMove[5]",
        "testRandomMember[2]",
        "testDistinctRandomMembers[6]",
        "testPop[1]",
        "testPopWithCount[3]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[5]",
        "testDistinctRandomMembersNegative[0]",
        "testRemove[2]",
        "testDistinctRandomMembersNegative[8]",
        "testAdd[7]",
        "testRandomMembersNegative[5]",
        "testSSCanReadsValuesFully[1]",
        "testPop[2]",
        "testRandomMembersWithDuplicates[4]",
        "testDistinctRandomMembers[7]",
        "testRandomMember[3]",
        "testMove[0]",
        "testPopWithCount[6]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[6]",
        "testDistinctRandomMembersNegative[1]",
        "testAdd[0]",
        "testMove[8]",
        "testRandomMembersNegative[6]",
        "testAdd[8]",
        "testSSCanReadsValuesFully[0]",
        "testPop[3]",
        "testRandomMembersWithDuplicates[5]",
        "testRemove[3]",
        "testRandomMember[4]",
        "testDistinctRandomMembers[8]",
        "testSSCanReadsValuesFully[8]",
        "testPopWithCount[5]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 108
    },
    {
      "className": "org.springframework.data.redis.cache.DefaultRedisCacheWriterTests",
      "failingMethods": [],
      "erroringMethods": [
        "putShouldAddEternalEntry[0: JedisConnectionFactory]",
        "putIfAbsentShouldNotAddEternalEntryWhenKeyAlreadyExist[0: JedisConnectionFactory]",
        "putShouldAddEternalEntry[1: LettuceConnectionFactory]",
        "putShouldAddExpiringEntry[0: JedisConnectionFactory]",
        "putShouldOverwriteExistingEternalEntry[1: LettuceConnectionFactory]",
        "putIfAbsentShouldAddExpiringEntryWhenKeyDoesNotExist[1: LettuceConnectionFactory]",
        "putIfAbsentShouldNotAddEternalEntryWhenKeyAlreadyExist[1: LettuceConnectionFactory]",
        "lockingCacheWriterShouldWaitForLockRelease[1: LettuceConnectionFactory]",
        "getShouldReturnNullWhenKeyDoesNotExist[0: JedisConnectionFactory]",
        "lockingCacheWriterShouldIgnoreExistingLockOnDifferenceCache[0: JedisConnectionFactory]",
        "nonLockingCacheWriterShouldIgnoreExistingLock[1: LettuceConnectionFactory]",
        "lockingCacheWriterShouldExitWhenInterruptedWaitForLockRelease[1: LettuceConnectionFactory]",
        "removeShouldDeleteEntry[1: LettuceConnectionFactory]",
        "putShouldOverwriteExistingExpiringEntryAndResetTtl[1: LettuceConnectionFactory]",
        "getShouldReturnValue[0: JedisConnectionFactory]",
        "nonLockingCacheWriterShouldIgnoreExistingLock[0: JedisConnectionFactory]",
        "lockingCacheWriterShouldExitWhenInterruptedWaitForLockRelease[0: JedisConnectionFactory]",
        "putIfAbsentShouldAddExpiringEntryWhenKeyDoesNotExist[0: JedisConnectionFactory]",
        "putShouldOverwriteExistingEternalEntry[0: JedisConnectionFactory]",
        "putIfAbsentShouldAddEternalEntryWhenKeyDoesNotExist[1: LettuceConnectionFactory]",
        "lockingCacheWriterShouldIgnoreExistingLockOnDifferenceCache[1: LettuceConnectionFactory]",
        "putShouldOverwriteExistingExpiringEntryAndResetTtl[0: JedisConnectionFactory]",
        "getShouldReturnValue[1: LettuceConnectionFactory]",
        "removeShouldDeleteEntry[0: JedisConnectionFactory]",
        "cleanShouldRemoveAllKeysByPattern[1: LettuceConnectionFactory]",
        "getShouldReturnNullWhenKeyDoesNotExist[1: LettuceConnectionFactory]",
        "putIfAbsentShouldAddEternalEntryWhenKeyDoesNotExist[0: JedisConnectionFactory]",
        "lockingCacheWriterShouldWaitForLockRelease[0: JedisConnectionFactory]",
        "putShouldAddExpiringEntry[1: LettuceConnectionFactory]",
        "cleanShouldRemoveAllKeysByPattern[0: JedisConnectionFactory]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 30
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveServerCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "configResetstatShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "getClientListShouldReportClient[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "pingShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "setConfigShouldApplyConfiguration[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "standaloneInfoWithSectionShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "dbSizeShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "timeShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "lastSaveShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "infoShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "getConfigShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "flushDbShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "setClientNameShouldSetName[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "saveShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]",
        "flushAllShouldRespondCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6d3b59e2]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 28
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDecrementAndGet[1]",
        "testGetAndDecrement[1]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "testGetAndAdd[1]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "testGetAndIncrement[0]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "testCheckAndSet[1]",
        "testAddAndGet[1]",
        "testGetAndSet[1]",
        "testIncrementAndGet[0]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[0]",
        "testGetExistingValue[0]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "testGetAndAdd[0]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "testGetAndDecrement[0]",
        "testCheckAndSet[0]",
        "testDecrementAndGet[0]",
        "testGetAndIncrement[1]",
        "testGetAndSet[0]",
        "testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[1]",
        "testAddAndGet[0]",
        "testIncrementAndGet[1]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "testGetExistingValue[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 28
    },
    {
      "className": "org.springframework.data.redis.repository.support.QueryByExampleRedisExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReportExistenceCorrectly",
        "shouldNotFindOneByExample",
        "shouldFindAllPagedByExample",
        "shouldNotSupportFindAllOrdered",
        "shouldCountCorrectly",
        "shouldThrowExceptionWhenFindOneByExampleReturnsNonUniqueResult",
        "shouldFindAllByExample",
        "shouldFindOneByExample"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveZSetCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMinRange[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeShouldReturnValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRankShouldReturnIndexCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeByScoreWithScoreShouldReturnTuplesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zAddShouldAddValuesWithScores[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeByScoreShouldReturnValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRankShouldReturnIndexCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zCountShouldCountValuesInRangeWithNegativeInfinity[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeShouldReturnValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zScanShouldIterateOverSortedSet[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zScoreShouldReturnScoreCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeByScoreShouldReturnValuesCorrectlyWithMinExclusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeByLex[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeByScoreShouldReturnValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zCountShouldCountValuesInRangeWithMaxExlusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRemRangeByScoreShouldRemoveValuesCorrectlyWithPositiveInfinity[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zCardShouldReturnSizeCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zCountShouldCountValuesInRange[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRemRangeByScoreShouldRemoveValuesCorrectlyWithNegativeInfinity[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zInterStoreShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeWithScoreShouldReturnTuplesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeWithScoreShouldReturnTuplesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zCountShouldCountValuesInRangeWithMinExlusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeByLex[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zCountShouldCountValuesInRangeWithPositiveInfinity[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMaxExclusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRemRangeByScoreShouldRemoveValuesCorrectlyWithExcludingMaxRange[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zUnionStoreShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRemRangeByRankShouldRemoveValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeByScoreShouldReturnValuesCorrectlyWithMaxExclusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRemRangeByScoreShouldRemoveValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRevRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRemShouldRemoveValuesFromSet[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zRangeByScoreWithScoreShouldReturnTuplesCorrectlyWithMinExclusion[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]",
        "zIncrByShouldInreaseAndReturnScore[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@704c3ca2]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 78
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveNumberCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "hIncrByDoubleShouldIncreaseValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@61ce2d47]",
        "hIncrByIntegerShouldIncreaseValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@61ce2d47]",
        "decrByDoubleShouldDecreaseValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@61ce2d47]",
        "decrByIntegerShouldDecreaseValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@61ce2d47]",
        "incrByDoubleShouldIncreaseValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@61ce2d47]",
        "incrByIntegerShouldIncreaseValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@61ce2d47]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
      "failingMethods": [],
      "erroringMethods": [
        "readonlyTransactionSyncShouldNotExcceedMaxConnections",
        "testNumberOfOperationsIsOne",
        "testNumberOfOperationsEqualToNumberOfConnections",
        "listOperationLPushShouldBeCommittedCorrectly",
        "valueOperationSetShouldBeCommittedCorrectly",
        "testNumberOfOperationsGreaterThanNumberOfConnections",
        "listOperationLPushShoudBeRolledBackCorrectly",
        "valueOperationSetShouldBeRolledBackCorrectly",
        "valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 18
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveKeyCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "randomKeyShouldReturnNullWhenNoKeyExists[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "renameNXShouldAlterKeyNameCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "renameShouldAlterKeyNameCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldMoveToDatabase[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "refcountReturnsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldUnlinkKeysCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldPreciseExpireAtKeysCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "existsShouldReturnTrueForExistingKeys[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "existsShouldReturnFalseForNonExistingKeys[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldPersist[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "keysShouldReturnCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldExpireAtKeysCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "typeShouldReturnTypeCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldDeleteKeysInBatchCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "idldetimeReturnsNullWhenKeyDoesNotExist[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "renameShouldThrowErrorWhenKeyDoesNotExist[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldDeleteKeysInMultipleBatchesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldDeleteKeyCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldDeleteKeysCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "randomKeyShouldReturnAnyKey[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "encodingReturnsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldExpireKeysCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldReportPreciseTimeToLiveCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "scanShouldShouldIterateOverKeyspace[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldUnlinkKeyCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "touchReturnsNrOfKeysTouched[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldReportTimeToLiveCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "renameNXShouldNotAlterExistingKeyName[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldUnlinkKeysInMultipleBatchesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "idletimeReturnsCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldUnlinkKeysInBatchCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "touchReturnsZeroIfNoKeysTouched[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "shouldPreciseExpireKeysCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "refcountReturnsNullWhenKeyDoesNotExist[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]",
        "encodingReturnsVacantWhenKeyDoesNotExist[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@d1b5363]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 70
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
      "failingMethods": [],
      "erroringMethods": [
        "keyExpiredEventShouldRemoveHelperStructures[1]",
        "keyExpiredEventWithoutKeyspaceShouldBeIgnored[0]",
        "getShouldReadSimpleObjectWithColonInIdCorrectly[0]",
        "updateShouldAlterGeoIndexCorrectlyOnDelete[0]",
        "updateShouldRemoveSimpleMapValuesCorrectly[1]",
        "updateShouldAlterIndexDataOnNestedObjectCorrectly[0]",
        "getShouldReadSimpleObjectCorrectly[1]",
        "updateShouldAlterIndexDataForObjectsWithColonInIdCorrectly[0]",
        "putWritesDataCorrectly[0]",
        "putWritesSimpleNestedIndexValuesCorrectly[1]",
        "couldReadsKeyspaceSizeCorrectly[0]",
        "updateShouldAlterGeoIndexCorrectlyOnUpdate[0]",
        "putWritesSimpleIndexDataWithColonCorrectly[0]",
        "keyExpiredEventShouldRemoveHelperStructuresForObjectsWithColonInId[1]",
        "putWritesSimpleIndexDataCorrectly[0]",
        "updateShouldAlterIndexDataOnNestedObjectPathCorrectly[0]",
        "updateShouldRemoveSimpleListValuesCorrectly[1]",
        "updateShouldAlterIndexDataCorrectly[0]",
        "deleteRemovesEntriesCorrectly[1]",
        "getShouldReadSimpleObjectWithColonInIdCorrectly[1]",
        "updateShouldAlterGeoIndexCorrectlyOnDelete[1]",
        "getShouldReadNestedObjectCorrectly[1]",
        "updateShouldRemoveComplexObjectCorrectly[0]",
        "updateShouldRemoveComplexObjectCorrectly[1]",
        "updateShouldRemoveComplexMapValuesCorrectly[1]",
        "updateShouldRemoveComplexListValuesCorrectly[0]",
        "deleteCleansIndexedDataCorrectly[0]",
        "putShouldCreateGeoIndexCorrectly[1]",
        "deleteRemovesEntriesCorrectly[0]",
        "updateShouldAlterIndexDataCorrectly[1]",
        "putShouldCreateGeoIndexCorrectly[0]",
        "getShouldReadNestedObjectCorrectly[0]",
        "deleteShouldRemoveGeoIndexCorrectly[0]",
        "putWritesNestedDataCorrectly[0]",
        "updateShouldRemoveComplexMapValuesCorrectly[0]",
        "putWritesIndexDataCorrectly[1]",
        "deleteCleansIndexedDataCorrectly[1]",
        "updateShouldRemoveComplexListValuesCorrectly[1]",
        "putWritesDataWithColonCorrectly[1]",
        "keyExpiredEventShouldRemoveHelperStructures[0]",
        "updateShouldAlterIndexDataOnNestedObjectCorrectly[1]",
        "keyExpiredEventWithoutKeyspaceShouldBeIgnored[1]",
        "updateShouldRemoveSimpleMapValuesCorrectly[0]",
        "deleteShouldRemoveGeoIndexCorrectly[1]",
        "updateShouldAlterIndexDataForObjectsWithColonInIdCorrectly[1]",
        "getShouldReadSimpleObjectCorrectly[0]",
        "putWritesNestedDataCorrectly[1]",
        "putWritesDataCorrectly[1]",
        "putWritesSimpleIndexDataCorrectly[1]",
        "putWritesIndexDataCorrectly[0]",
        "couldReadsKeyspaceSizeCorrectly[1]",
        "putWritesSimpleNestedIndexValuesCorrectly[0]",
        "keyExpiredEventShouldRemoveHelperStructuresForObjectsWithColonInId[0]",
        "putWritesDataWithColonCorrectly[0]",
        "putWritesSimpleIndexDataWithColonCorrectly[1]",
        "updateShouldRemoveSimpleListValuesCorrectly[0]",
        "updateShouldAlterIndexDataOnNestedObjectPathCorrectly[1]",
        "updateShouldAlterGeoIndexCorrectlyOnUpdate[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 58
    },
    {
      "className": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "testAddMultiple[3]",
        "testZsetUnionWithAggregate[5]",
        "testZScanShouldReadEntireValueRange[7]",
        "testZsetIntersectWithAggregateWeights[5]",
        "testRemove[0]",
        "testReverseRangeByScoreWithScoresOffsetCount[0]",
        "testZsetIntersectWithAggregate[5]",
        "testZsetUnionWithAggregateWeights[1]",
        "testRangeByLexUnbounded[8]",
        "testRangeByLexBounded[7]",
        "testCount[3]",
        "testRemove[8]",
        "testRangeByLexBoundedWithLimit[1]",
        "testReverseRangeByScoreOffsetCount[4]",
        "zCardRetrievesDataCorrectly[2]",
        "testRangeByScoreOffsetCount[8]",
        "testRangeByScoreOffsetCount[0]",
        "testIncrementScore[4]",
        "testZsetUnionWithAggregate[4]",
        "testRangeByLexUnboundedWithLimit[6]",
        "testRangeByScoreWithScoresOffsetCount[2]",
        "sizeRetrievesDataCorrectly[3]",
        "testRangeByScoreWithScoresOffsetCount[4]",
        "testZsetIntersectWithAggregateWeights[6]",
        "testAddMultiple[2]",
        "testZsetUnionWithAggregate[6]",
        "testRangeByLexBounded[0]",
        "testZScanShouldReadEntireValueRange[6]",
        "testRangeByLexBoundedWithLimit[8]",
        "testZsetUnionWithAggregateWeights[0]",
        "testRemove[1]",
        "testRangeByLexBounded[8]",
        "testCount[2]",
        "testRangeByLexUnbounded[7]",
        "testRangeByLexBoundedWithLimit[0]",
        "zCardRetrievesDataCorrectly[3]",
        "testReverseRangeByScoreOffsetCount[3]",
        "testReverseRangeByScoreWithScoresOffsetCount[8]",
        "testZsetUnionWithAggregateWeights[8]",
        "testZsetIntersectWithAggregate[4]",
        "testRangeByLexUnboundedWithLimit[7]",
        "testRangeByScoreOffsetCount[1]",
        "testIncrementScore[5]",
        "sizeRetrievesDataCorrectly[2]",
        "testRangeByScoreWithScoresOffsetCount[3]",
        "sizeRetrievesDataCorrectly[1]",
        "testRangeByScoreWithScoresOffsetCount[5]",
        "testZsetIntersectWithAggregateWeights[3]",
        "testRangeByLexUnbounded[2]",
        "testZScanShouldReadEntireValueRange[5]",
        "testRangeByLexBounded[1]",
        "testZsetIntersectWithAggregate[7]",
        "testCount[1]",
        "testAddMultiple[1]",
        "testRangeByLexBoundedWithLimit[7]",
        "testRangeByScoreOffsetCount[6]",
        "testRangeByLexUnboundedWithLimit[0]",
        "testReverseRangeByScoreOffsetCount[6]",
        "testRangeByLexUnbounded[1]",
        "testZsetUnionWithAggregateWeights[3]",
        "zCardRetrievesDataCorrectly[8]",
        "testReverseRangeByScoreWithScoresOffsetCount[3]",
        "testRemove[6]",
        "testRangeByLexUnboundedWithLimit[8]",
        "zCardRetrievesDataCorrectly[0]",
        "testZsetUnionWithAggregate[2]",
        "testIncrementScore[6]",
        "sizeRetrievesDataCorrectly[0]",
        "testRangeByScoreWithScoresOffsetCount[6]",
        "testCount[8]",
        "testAddMultiple[8]",
        "testZsetIntersectWithAggregateWeights[4]",
        "testReverseRangeByScoreWithScoresOffsetCount[1]",
        "testZsetIntersectWithAggregate[6]",
        "testRangeByLexBounded[2]",
        "testZScanShouldReadEntireValueRange[4]",
        "testCount[0]",
        "testAddMultiple[0]",
        "testRangeByLexBoundedWithLimit[6]",
        "testRangeByLexUnboundedWithLimit[1]",
        "testRemove[7]",
        "zCardRetrievesDataCorrectly[1]",
        "testReverseRangeByScoreOffsetCount[5]",
        "testRangeByScoreOffsetCount[7]",
        "testRangeByLexUnbounded[0]",
        "testZsetUnionWithAggregateWeights[2]",
        "testReverseRangeByScoreWithScoresOffsetCount[2]",
        "sizeRetrievesDataCorrectly[8]",
        "testZsetUnionWithAggregate[3]",
        "testIncrementScore[7]",
        "testIncrementScore[0]",
        "testCount[7]",
        "testRangeByScoreWithScoresOffsetCount[7]",
        "testAddMultiple[7]",
        "testZScanShouldReadEntireValueRange[3]",
        "testRangeByLexUnbounded[4]",
        "testRangeByLexBounded[3]",
        "testRangeByLexBoundedWithLimit[5]",
        "testRangeByLexUnboundedWithLimit[2]",
        "testRemove[4]",
        "testReverseRangeByScoreWithScoresOffsetCount[5]",
        "testZsetIntersectWithAggregate[1]",
        "testReverseRangeByScoreOffsetCount[8]",
        "testZsetUnionWithAggregateWeights[5]",
        "zCardRetrievesDataCorrectly[6]",
        "testZsetUnionWithAggregate[0]",
        "testIncrementScore[8]",
        "testZsetIntersectWithAggregateWeights[0]",
        "sizeRetrievesDataCorrectly[7]",
        "testReverseRangeByScoreOffsetCount[0]",
        "testRangeByScoreOffsetCount[4]",
        "testIncrementScore[1]",
        "testCount[6]",
        "testZsetIntersectWithAggregateWeights[2]",
        "testRangeByScoreWithScoresOffsetCount[8]",
        "testAddMultiple[6]",
        "testRangeByLexBounded[4]",
        "testZScanShouldReadEntireValueRange[2]",
        "testZsetIntersectWithAggregate[8]",
        "testRangeByLexUnbounded[3]",
        "testRangeByLexBoundedWithLimit[4]",
        "testRangeByScoreOffsetCount[5]",
        "testZsetIntersectWithAggregate[0]",
        "zCardRetrievesDataCorrectly[7]",
        "testReverseRangeByScoreOffsetCount[7]",
        "testReverseRangeByScoreWithScoresOffsetCount[4]",
        "testZsetUnionWithAggregateWeights[4]",
        "testRemove[5]",
        "testZsetIntersectWithAggregateWeights[1]",
        "sizeRetrievesDataCorrectly[6]",
        "testZsetUnionWithAggregate[1]",
        "testRangeByLexUnboundedWithLimit[3]",
        "testCount[5]",
        "testAddMultiple[5]",
        "testZsetUnionWithAggregate[7]",
        "testZsetIntersectWithAggregateWeights[7]",
        "testIncrementScore[2]",
        "testRemove[2]",
        "testZScanShouldReadEntireValueRange[1]",
        "testRangeByLexUnbounded[6]",
        "testRangeByLexBounded[5]",
        "zCardRetrievesDataCorrectly[4]",
        "testZsetUnionWithAggregateWeights[7]",
        "testReverseRangeByScoreWithScoresOffsetCount[7]",
        "testRangeByLexBoundedWithLimit[3]",
        "testZsetIntersectWithAggregate[3]",
        "testRangeByScoreWithScoresOffsetCount[0]",
        "sizeRetrievesDataCorrectly[5]",
        "testRangeByScoreOffsetCount[2]",
        "testRangeByLexUnboundedWithLimit[4]",
        "testReverseRangeByScoreOffsetCount[2]",
        "testCount[4]",
        "testAddMultiple[4]",
        "testZsetUnionWithAggregate[8]",
        "testZsetIntersectWithAggregateWeights[8]",
        "testIncrementScore[3]",
        "testZScanShouldReadEntireValueRange[8]",
        "testRangeByLexUnbounded[5]",
        "testRangeByLexBounded[6]",
        "testZScanShouldReadEntireValueRange[0]",
        "testZsetUnionWithAggregateWeights[6]",
        "testRangeByLexBoundedWithLimit[2]",
        "testReverseRangeByScoreWithScoresOffsetCount[6]",
        "testZsetIntersectWithAggregate[2]",
        "testRemove[3]",
        "zCardRetrievesDataCorrectly[5]",
        "testRangeByScoreWithScoresOffsetCount[1]",
        "sizeRetrievesDataCorrectly[4]",
        "testRangeByLexUnboundedWithLimit[5]",
        "testReverseRangeByScoreOffsetCount[1]",
        "testRangeByScoreOffsetCount[3]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 171
    },
    {
      "className": "org.springframework.data.redis.core.script.DefaultReactiveScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldApplyCustomArgsSerializer",
        "executeAddsScriptToScriptCache",
        "shouldReturnBoolean",
        "shouldApplyCustomResultSerializer",
        "testExecuteMixedListResult",
        "shouldReturnValueResult",
        "shouldReturnLong",
        "shouldReturnStatusValue"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveListCommandTests",
      "failingMethods": [],
      "erroringMethods": [
        "rPopLPushShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lRangeShouldReturnValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "pushShouldThrowErrorForMoreThanOneValueWhenUsingExistsOption[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lPopSouldRemoveFirstValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lPushXShouldPrependValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "blPopShouldReturnFirstAvailable[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lIndexShouldReturnValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lRemSouldRemoveAllValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "rPushXShouldAppendValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "rPushShouldAppendValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lPushShouldPrependValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "brPopLPushShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lRemSouldRemoveFirstValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lInsertShouldAddValueCorrectlyBeforeExisting[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lLenShouldReturnSizeCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "rPopSouldRemoveFirstValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lSetSouldSetValueCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lInsertShouldAddValueCorrectlyAfterExisting[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lRemSouldRemoveLastValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "brPopShouldReturnLastAvailable[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]",
        "lTrimShouldReturnValuesCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@72dc9f9d]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 42
    },
    {
      "className": "org.springframework.data.redis.support.collections.SupportXmlTests",
      "failingMethods": [],
      "erroringMethods": [
        "testContainerSetup"
      ],
      "failures": [
        {
          "failureName": "org.springframework.beans.factory.BeanCreationException",
          "failureDetail": "Error creating bean with name \u0027non-existing\u0027: Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceReactiveHyperLogLogCommandsTests",
      "failingMethods": [],
      "erroringMethods": [
        "pfCountWithMultipleKeysShouldReturnCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6b420c8]",
        "pfMergeShouldWorkCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6b420c8]",
        "pfCountShouldReturnCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6b420c8]",
        "pfAddShouldAddToNonExistingKeyCorrectly[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6b420c8]",
        "pfAddShouldReturnZeroWhenValueAlreadyExists[org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider@6b420c8]"
      ],
      "failures": [
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "io.lettuce.core.RedisConnectionException",
          "failureDetail": "Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.RedisTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "testStringTemplateExecutesWithStringConn[8]",
        "testGetExpireMillisUsingPipelining[6]",
        "testUnwatch[4]",
        "testDiscard[6]",
        "testRenameIfAbsent[2]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[3]",
        "testDelete[6]",
        "testExpireAt[3]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[5]",
        "testRenameIfAbsent[3]",
        "testWatchMultipleKeys[5]",
        "testRandomKey[5]",
        "testPersist[2]",
        "testType[4]",
        "testUnwatch[5]",
        "clientListShouldReturnCorrectly[1]",
        "testUnwatch[3]",
        "testExecutePipelinedTxCustomSerializer[8]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[2]",
        "testGetExpireMillisUsingPipelining[7]",
        "testDiscard[7]",
        "testDelete[7]",
        "testExpireAt[4]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[4]",
        "testExpireAt[5]",
        "testRenameIfAbsent[4]",
        "testRandomKey[4]",
        "testWatchMultipleKeys[4]",
        "testType[5]",
        "testPersist[1]",
        "clientListShouldReturnCorrectly[2]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[1]",
        "testUnwatch[2]",
        "testGetExpireMillisUsingPipelining[4]",
        "testDiscard[4]",
        "testStringTemplateExecutesWithStringConn[6]",
        "testExecutePipelinedTxCustomSerializer[7]",
        "testWatchMultipleKeys[8]",
        "testDelete[8]",
        "testExecCustomSerializer[8]",
        "testExpireAt[1]",
        "testExecConversionDisabled[0]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[3]",
        "testRandomKey[3]",
        "testRenameIfAbsent[5]",
        "testWatchMultipleKeys[7]",
        "testWatch[0]",
        "testPersist[0]",
        "testType[2]",
        "testGetExpireMillisForKeyDoesNotExist[7]",
        "clientListShouldReturnCorrectly[3]",
        "testExecutePipelinedTxCustomSerializer[6]",
        "testStringTemplateExecutesWithStringConn[7]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[0]",
        "testUnwatch[1]",
        "testGetExpireMillisUsingPipelining[5]",
        "testDiscard[5]",
        "testExecCustomSerializer[7]",
        "testExpireAt[2]",
        "testExec[8]",
        "testKeys[0]",
        "testExecConversionDisabled[1]",
        "testRandomKey[2]",
        "testRenameIfAbsent[6]",
        "testWatchMultipleKeys[6]",
        "testWatch[1]",
        "testType[3]",
        "testGetExpireMillisForKeyDoesNotExist[8]",
        "clientListShouldReturnCorrectly[4]",
        "testDeleteMultiple[8]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[2]",
        "testGetExpireMillisUsingPipelining[2]",
        "testDelete[2]",
        "testUnwatch[0]",
        "testSortBulkMapper[8]",
        "testKeys[1]",
        "testExecCustomSerializer[6]",
        "testRename[8]",
        "testExec[7]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[7]",
        "testWatchMultipleKeys[1]",
        "testRenameIfAbsent[7]",
        "testGetExpireSecondsForKeyDoesNotExist[8]",
        "testRandomKey[1]",
        "testExpireAt[8]",
        "testExecConversionDisabled[2]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[6]",
        "testWatch[2]",
        "testDeleteMultiple[7]",
        "testType[0]",
        "testSortBulkMapper[7]",
        "testDelete[3]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[4]",
        "testGetExpireMillisUsingPipelining[3]",
        "testKeys[2]",
        "testExecCustomSerializer[5]",
        "testExec[6]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[6]",
        "testRandomKey[0]",
        "testWatchMultipleKeys[0]",
        "testExec[5]",
        "testRenameIfAbsent[8]",
        "testExecConversionDisabled[3]",
        "testKeys[3]",
        "testGetExpireSecondsForKeyDoesNotExist[7]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[8]",
        "testGetExpireMillis[8]",
        "testWatch[3]",
        "testDeleteMultiple[6]",
        "testType[1]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[5]",
        "testSortBulkMapper[6]",
        "testGetExpireMillisUsingPipelining[0]",
        "testExecuteScriptCustomSerializers[8]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[5]",
        "testDiscard[8]",
        "testExecConversionDisabled[4]",
        "testDelete[4]",
        "testExecCustomSerializer[4]",
        "testRename[6]",
        "testExec[4]",
        "testExpireAt[6]",
        "testWatchMultipleKeys[3]",
        "testKeys[4]",
        "testGetExpireSecondsForKeyDoesNotExist[6]",
        "testWatch[4]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[7]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[8]",
        "testDeleteMultiple[5]",
        "testGetExpireMillis[7]",
        "testExecutePipelinedCustomSerializer[0]",
        "testSortBulkMapper[5]",
        "testGetExpireMillisUsingPipelining[1]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[4]",
        "testExecConversionDisabled[5]",
        "testRename[7]",
        "testExecCustomSerializer[3]",
        "testDelete[5]",
        "testExecCustomSerializer[2]",
        "testKeys[5]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[6]",
        "testWatchMultipleKeys[2]",
        "testExec[3]",
        "testExpireAt[7]",
        "testWatch[5]",
        "testGetExpireSecondsForKeyDoesNotExist[5]",
        "clientListShouldReturnCorrectly[0]",
        "testExecutePipelinedCustomSerializer[1]",
        "testDeleteMultiple[4]",
        "testGetExpireMillis[6]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[7]",
        "testSortBulkMapper[4]",
        "testDumpAndRestoreNoTtl[3]",
        "testExpireAtMillisNotSupported[7]",
        "testStringTemplateExecutesWithStringConn[0]",
        "testExecConversionDisabled[6]",
        "testExpireAndGetExpireMillis[0]",
        "testKeys[6]",
        "testExec[2]",
        "testConvertAndSend[5]",
        "testDeleteMultiple[3]",
        "testExecutePipelinedTxCustomSerializer[0]",
        "testExpireAtMillisNotSupported[6]",
        "testStringTemplateExecutesWithStringConn[1]",
        "testDumpAndRestoreNoTtl[2]",
        "testExecConversionDisabled[7]",
        "testExpireAndGetExpireMillis[1]",
        "testExec[1]",
        "testDeleteMultiple[2]",
        "testConvertAndSend[4]",
        "testKeys[7]",
        "testExpireAtMillisNotSupported[5]",
        "testExecConversionDisabled[8]",
        "testRestoreTtl[8]",
        "testGetExpireMillisNotSupported[0]",
        "testDumpAndRestoreNoTtl[1]",
        "testExpireAndGetExpireMillis[2]",
        "testConvertAndSend[7]",
        "testExec[0]",
        "testDeleteMultiple[1]",
        "testKeys[8]",
        "testExpireAtMillisNotSupported[4]",
        "testGetExpireMillisNotSupported[1]",
        "testDumpAndRestoreNoTtl[0]",
        "testExpireAndGetExpireMillis[3]",
        "testDeleteMultiple[0]",
        "testConvertAndSend[6]",
        "testExpireAtMillisNotSupported[3]",
        "testExecutePipelinedTxCustomSerializer[5]",
        "testDiscard[2]",
        "testStringTemplateExecutesWithStringConn[4]",
        "testConvertAndSend[1]",
        "testExecutePipelinedTx[7]",
        "testExecutePipelinedTxCustomSerializer[4]",
        "testStringTemplateExecutesWithStringConn[5]",
        "testDiscard[3]",
        "testExpireAt[0]",
        "testExecutePipelinedTx[8]",
        "testConvertAndSend[0]",
        "testUnwatch[8]",
        "testDiscard[0]",
        "testExecutePipelinedTxCustomSerializer[3]",
        "testRenameIfAbsent[0]",
        "testGetExpireMillisUsingPipelining[8]",
        "testStringTemplateExecutesWithStringConn[2]",
        "testConvertAndSend[3]",
        "testUnwatch[7]",
        "testExecutePipelinedNonNullRedisCallback[8]",
        "testExecutePipelinedTxCustomSerializer[2]",
        "testExpireAtMillisNotSupported[8]",
        "testStringTemplateExecutesWithStringConn[3]",
        "testDiscard[1]",
        "testRenameIfAbsent[1]",
        "testConvertAndSend[2]",
        "testUnwatch[6]",
        "testExecutePipelinedNonNullRedisCallback[7]",
        "testExecutePipelinedTxCustomSerializer[1]",
        "testSortStore[5]",
        "testExecutePipelinedTx[2]",
        "testExpireAndGetExpireMillis[8]",
        "testRestoreTtl[2]",
        "testExecutePipelinedNonNullSessionCallback[3]",
        "testExecutePipelinedNonNullSessionCallback[2]",
        "testGetExpireSeconds[4]",
        "testGetExpireMillisNotSupported[7]",
        "testTemplateNotInitialized[7]",
        "testExecutePipelinedNonNullRedisCallback[6]",
        "testExecutePipelinedTx[3]",
        "testSortStore[6]",
        "testExecutePipelinedNonNullSessionCallback[4]",
        "testRestoreTtl[3]",
        "testGetExpireSeconds[3]",
        "testGetExpireMillisNotSupported[8]",
        "testTemplateNotInitialized[6]",
        "testExecutePipelinedNonNullRedisCallback[5]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[0]",
        "testRestoreTtl[0]",
        "testSortStore[3]",
        "testExecutePipelinedTx[4]",
        "testExecutePipelined[7]",
        "testExecutePipelinedNonNullSessionCallback[0]",
        "testGetExpireSeconds[2]",
        "testExecutePipelinedNonNullRedisCallback[4]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[1]",
        "testSortStore[4]",
        "testExecutePipelinedTx[5]",
        "testDumpAndRestoreNoTtl[8]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[2]",
        "testGetExpireMillisUsingTransactions[8]",
        "testRestoreTtl[1]",
        "testExecutePipelined[8]",
        "testExecutePipelinedNonNullSessionCallback[1]",
        "testGetExpireSeconds[1]",
        "testTemplateNotInitialized[8]",
        "testExecutePipelinedNonNullRedisCallback[3]",
        "testExecutePipelinedTx[6]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[3]",
        "testDumpAndRestoreNoTtl[7]",
        "testRestoreTtl[6]",
        "testExecutePipelined[5]",
        "testExecutePipelinedNonNullSessionCallback[7]",
        "testExpireAndGetExpireMillis[4]",
        "testGetExpireMillisNotSupported[2]",
        "testGetExpireMillisUsingTransactions[7]",
        "testGetExpireNoTimeUnit[0]",
        "testExecutePipelinedNonNullRedisCallback[2]",
        "testExpireAtMillisNotSupported[2]",
        "testSort[8]",
        "testGetExpireSeconds[8]",
        "testDumpAndRestoreNoTtl[6]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[4]",
        "testExecutePipelinedNonNullSessionCallback[8]",
        "testRestoreTtl[7]",
        "testExpireAndGetExpireMillis[5]",
        "testExecutePipelined[6]",
        "testGetExpireMillisNotSupported[3]",
        "testGetExpireMillisUsingTransactions[6]",
        "testGetExpireNoTimeUnit[1]",
        "testConvertAndSend[8]",
        "testExecutePipelinedNonNullRedisCallback[1]",
        "testExpireAtMillisNotSupported[1]",
        "testGetExpireSeconds[7]",
        "testSort[7]",
        "testExecutePipelinedTx[0]",
        "testDumpAndRestoreNoTtl[5]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[5]",
        "testSortStore[7]",
        "testExecutePipelined[3]",
        "testExecutePipelinedNonNullSessionCallback[5]",
        "testRestoreTtl[4]",
        "testExpireAndGetExpireMillis[6]",
        "testGetExpireMillisNotSupported[4]",
        "testGetExpireMillisUsingTransactions[5]",
        "testGetExpireMillisNotSupported[5]",
        "testExecutePipelinedNonNullRedisCallback[0]",
        "testExpireAtMillisNotSupported[0]",
        "testSort[6]",
        "testGetExpireSeconds[6]",
        "testExecutePipelinedTx[1]",
        "testDumpAndRestoreNoTtl[4]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[6]",
        "testGetExpireMillisUsingTransactions[4]",
        "testRestoreTtl[5]",
        "testExecutePipelined[4]",
        "testExecutePipelinedNonNullSessionCallback[6]",
        "testExpireAndGetExpireMillis[7]",
        "testGetExpireMillisNotSupported[6]",
        "testSortStore[8]",
        "testGetExpireSeconds[5]",
        "testSort[5]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[7]",
        "testExecutePipelined[1]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[1]",
        "testGetExpireMillisUsingTransactions[3]",
        "testRename[4]",
        "testExecCustomSerializer[1]",
        "testGetExpireNoTimeUnit[4]",
        "testGetExpireSecondsForKeyDoesNotExist[4]",
        "testGetExpireMillisForKeyDoesNotExist[1]",
        "testWatch[6]",
        "testSort[4]",
        "testExecutePipelinedCustomSerializer[2]",
        "testGetExpireMillis[5]",
        "testExecuteScriptCustomSerializers[5]",
        "testSortBulkMapper[3]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[0]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[8]",
        "testExecuteScriptCustomSerializers[7]",
        "testExecutePipelined[2]",
        "testGetExpireMillisUsingTransactions[2]",
        "testRename[5]",
        "testExecCustomSerializer[0]",
        "testGetExpireNoTimeUnit[5]",
        "testGetExpireMillisForKeyDoesNotExist[2]",
        "testWatch[7]",
        "testGetExpireSecondsForKeyDoesNotExist[3]",
        "testSort[3]",
        "testGetExpireMillis[4]",
        "testExecuteScriptCustomSerializers[6]",
        "testSortBulkMapper[2]",
        "testExecutePipelinedCustomSerializer[3]",
        "testDelete[0]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[3]",
        "testGetExpireMillisUsingTransactions[1]",
        "testRename[2]",
        "testGetExpireNoTimeUnit[2]",
        "testWatch[8]",
        "testGetExpireSecondsForKeyDoesNotExist[2]",
        "testExecuteScriptCustomSerializers[3]",
        "testSortBulkMapper[1]",
        "testTemplateNotInitialized[1]",
        "testSort[2]",
        "testGetExpireMillis[3]",
        "testExecutePipelinedCustomSerializer[4]",
        "testPersist[8]",
        "testDelete[1]",
        "testGetExpireMillisUsingTransactions[0]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[2]",
        "testExecutePipelined[0]",
        "testRename[3]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[8]",
        "testGetExpireNoTimeUnit[3]",
        "testGetExpireMillisForKeyDoesNotExist[0]",
        "testExecuteScriptCustomSerializers[4]",
        "testGetExpireSecondsForKeyDoesNotExist[1]",
        "testSortBulkMapper[0]",
        "testTemplateNotInitialized[0]",
        "testSort[1]",
        "testGetExpireMillis[2]",
        "testExecutePipelinedCustomSerializer[5]",
        "testSortStore[1]",
        "testExecutePipelinedCustomSerializer[7]",
        "testPersist[7]",
        "testRename[0]",
        "testSort[0]",
        "testType[8]",
        "testGetExpireSeconds[0]",
        "testGetExpireNoTimeUnit[8]",
        "testGetExpireSecondsForKeyDoesNotExist[0]",
        "testTemplateNotInitialized[3]",
        "testGetExpireMillisForKeyDoesNotExist[5]",
        "testPersist[6]",
        "clientListShouldReturnCorrectly[5]",
        "testExecutePipelinedCustomSerializer[6]",
        "testGetExpireMillis[1]",
        "testExecuteScriptCustomSerializers[1]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[1]",
        "testSortStore[2]",
        "testExecutePipelinedCustomSerializer[8]",
        "testRename[1]",
        "clientListShouldReturnCorrectly[6]",
        "testGetExpireMillisForKeyDoesNotExist[6]",
        "testTemplateNotInitialized[2]",
        "testRandomKey[8]",
        "countExistingKeysReturnsNumberOfKeysCorrectly[0]",
        "testPersist[5]",
        "testGetExpireMillis[0]",
        "testExecuteScriptCustomSerializers[2]",
        "testGetExpireNoTimeUnit[6]",
        "clientListShouldReturnCorrectly[7]",
        "testTemplateNotInitialized[5]",
        "testType[6]",
        "testGetExpireMillisForKeyDoesNotExist[3]",
        "testRandomKey[7]",
        "testPersist[4]",
        "testSortStore[0]",
        "clientListShouldReturnCorrectly[8]",
        "testGetExpireNoTimeUnit[7]",
        "testType[7]",
        "testGetExpireMillisForKeyDoesNotExist[4]",
        "testTemplateNotInitialized[4]",
        "testRandomKey[6]",
        "testExecuteScriptCustomSerializers[0]",
        "testPersist[3]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 819
    },
    {
      "className": "org.springframework.data.redis.core.ReactiveStringRedisTemplateIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldSetAndGetKeys"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
      "failingMethods": [],
      "erroringMethods": [
        "testReturnResource",
        "testGetResourceValidate",
        "testGetResource",
        "testCreateWithDbIndex",
        "testReturnBrokenResource",
        "poolWorksWithoutClientResources",
        "testGetResourcePoolExhausted"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "org.apache.maven.surefire.junit4.JUnit4Provider",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.JedisConnectionPipelineIntegrationTests",
        "org.springframework.data.redis.connection.jedis.JedisConnectionTransactionIntegrationTests",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionTransactionIntegrationTests",
        "org.springframework.data.redis.connection.jedis.JedisConnectionIntegrationTests",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineTxIntegrationTests",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineIntegrationTests",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionIntegrationTests",
        "org.springframework.data.redis.connection.jedis.JedisConnectionPipelineTxIntegrationTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.JedisConnectionFactoryIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "shardInfoShouldOverrideFactorySettings",
        "shouldInitiaizeWithStandaloneConfiguration"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.ScanTests",
      "failingMethods": [],
      "erroringMethods": [
        "contextLoads[0]",
        "contextLoads[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to 127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    }
  ]
}