{
  "totalNumberSkippingTests": 112,
  "bugType": "only_fail",
  "totalNumberErroringTests": 5,
  "repo": "apache/calcite",
  "failingModule": "/root/workspace/apache/calcite/232850531/core",
  "hostname": "repairnator",
  "totalNumberFailingTests": 7,
  "error-types": [
    "java.lang.AssertionError",
    "java.lang.RuntimeException",
    "skipped",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 4278,
  "failing-test-cases": [
    {
      "className": "org.apache.calcite.test.ReflectiveSchemaTest",
      "failingMethods": [
        "org.apache.calcite.test.ReflectiveSchemaTest#testArrayOfBoxedPrimitives",
        "org.apache.calcite.test.ReflectiveSchemaTest#testOperator",
        "org.apache.calcite.test.ReflectiveSchemaTest#testArrayOfPrimitives",
        "org.apache.calcite.test.ReflectiveSchemaTest#testTableMacroIsView",
        "org.apache.calcite.test.ReflectiveSchemaTest#testTableMacro"
      ],
      "erroringMethods": [
        "org.apache.calcite.test.ReflectiveSchemaTest#testCompareJavaAndSqlTypes"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "java.lang.AssertionError RelDataTypeImpl.getFieldList(RelDataTypeImpl.java:99)",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "java.lang.AssertionError RelDataTypeImpl.getFieldList(RelDataTypeImpl.java:99)",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while executing [select count(\"primitiveBoolean\") as p,\n  count(\"wrapperBoolean\") as w,\n  count(nullif(\"primitiveShort\" \u003e\u003d 0, false)) as sp,\n  count(nullif(\"wrapperShort\" \u003e\u003d 0, false)) as sw,\n  count(nullif(\"primitiveInt\" \u003e\u003d 0, false)) as ip,\n  count(nullif(\"wrapperInteger\" \u003e\u003d 0, false)) as iw,\n  count(nullif(\"primitiveLong\" \u003e\u003d 0, false)) as lp,\n  count(nullif(\"wrapperLong\" \u003e\u003d 0, false)) as lw\nfrom \"s\".\"everyTypes\"]",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 1
    },
    {
      "className": "org.apache.calcite.test.SqlToRelConverterTest",
      "failingMethods": [
        "org.apache.calcite.test.SqlToRelConverterTest#testUpdateBindExtendedColumn",
        "org.apache.calcite.test.SqlToRelConverterTest#testInUncorrelatedSubQueryInSelect",
        "org.apache.calcite.test.SqlToRelConverterTest#testUpdateBindExtendedColumnModifiableView",
        "org.apache.calcite.test.SqlToRelConverterTest#testUpdateSubQuery",
        "org.apache.calcite.test.SqlToRelConverterTest#testMerge"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "CALCITE-1708",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "CALCITE-985",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "CALCITE-1708",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c...(NAME\u003d[$1], EXPR$1\u003d[[CASE(\u003d($2, 0), false, IS NOT NULL($6), true, \u003c($3, $2), null, false])])\n  LogicalJoin(co...\u003e but was:\u003c...(NAME\u003d[$1], EXPR$1\u003d[[OR(AND(\u003c\u003e($2, 0), IS NOT NULL($6)), AND(\u003c\u003e($2, 0), IS NULL($6), \u003c($3, $2), null)])])\n  LogicalJoin(co...\u003e",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "CALCITE-1527",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.JdbcTest",
      "failingMethods": [
        "org.apache.calcite.test.JdbcTest#testBushy",
        "org.apache.calcite.test.JdbcTest#testExplainJoinOrderingWithOr",
        "org.apache.calcite.test.JdbcTest#testCloneGroupBy2Plan",
        "org.apache.calcite.test.JdbcTest#testCloneGroupBy2",
        "org.apache.calcite.test.JdbcTest#testExplainJoin",
        "org.apache.calcite.test.JdbcTest#testJoinJoin",
        "org.apache.calcite.test.JdbcTest#testTableFunctionNonNullableMustBeLiterals",
        "org.apache.calcite.test.JdbcTest#testNtileConstantArgs",
        "org.apache.calcite.test.JdbcTest#testComparingIntAndString",
        "org.apache.calcite.test.JdbcTest#testIn",
        "org.apache.calcite.test.JdbcTest#testCloneQueries",
        "org.apache.calcite.test.JdbcTest#testFoodmartLattice",
        "org.apache.calcite.test.JdbcTest#testNoCalcBetweenJoins",
        "org.apache.calcite.test.JdbcTest#testCorrelatedScalarSubQuery",
        "org.apache.calcite.test.JdbcTest#testTableFunctionCursorsInputs",
        "org.apache.calcite.test.JdbcTest#testNotInQuery",
        "org.apache.calcite.test.JdbcTest#testModelWithMaterializedView",
        "org.apache.calcite.test.JdbcTest#testNotInEmptyQuery",
        "org.apache.calcite.test.JdbcTest#testExplainJoin4",
        "org.apache.calcite.test.JdbcTest#testExplainJoin3",
        "org.apache.calcite.test.JdbcTest#testTableFunctionCursorInputs",
        "org.apache.calcite.test.JdbcTest#testJoinFiveWay",
        "org.apache.calcite.test.JdbcTest#testExplainJoin2"
      ],
      "erroringMethods": [
        "org.apache.calcite.test.JdbcTest#testTrue"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Have no idea how to validate that expression is constant",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "[CALCITE-685]",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "extremely slow - a bit better if you disable ProjectMergeRule",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while executing [select case when deptno \u003d 10 then null else true end as x\nfrom (values (10), (20)) as t(deptno)]",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "SQLException does not include message from nested exception",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "CannotPlanException: Node [rel#24:Subset#6.ENUMERABLE.[]] could not be implemented",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: \"DEPTNO\u003d10\\nDEPTNO\u003d10\\nDEPTNO\u003d20\\nDEPTNO\u003d30\\nDEPTNO\u003d30\\nDEPTNO\u003d50\\nDEPTNO\u003d50\\nDEPTNO\u003d60\\nDEPTNO\u003dnull\"\n     but: was \"\"",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "The actual and expected plan differ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: \"DEPTNO\u003d50\\nDEPTNO\u003d50\\nDEPTNO\u003d60\"\n     but: was \"\"",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "The test returns expected results. Not sure why it is disabled",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "until JdbcSchema can define materialized views",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Fails with org.codehaus.commons.compiler.CompileException: Line 16, Column 112: Cannot compare types \"int\" and \"java.lang.String\"\n",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "CannotPlanException: Node [rel#18:Subset#4.ENUMERABLE.[]] could not be implemented",
          "isError": false
        }
      ],
      "nbFailures": 23,
      "nbErrors": 1
    },
    {
      "className": "org.apache.calcite.test.CalciteSqlOperatorTest",
      "failingMethods": [
        "org.apache.calcite.test.CalciteSqlOperatorTest#testCastInvalid",
        "org.apache.calcite.test.CalciteSqlOperatorTest#testDecodeFunc",
        "org.apache.calcite.test.CalciteSqlOperatorTest#testLikeEscape2"
      ],
      "erroringMethods": [
        "org.apache.calcite.test.CalciteSqlOperatorTest#testIsNotDistinctFromOperator",
        "org.apache.calcite.test.CalciteSqlOperatorTest#testAndOperator2",
        "org.apache.calcite.test.CalciteSqlOperatorTest#testIsDistinctFromOperator"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "java.sql.SQLException: Error while executing SQL \"values (cast(null as integer) is not distinct from 2)\": null",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "[CALCITE-1439] Handling errors during constant reduction",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[b]\u003e but was:\u003c[d]\u003e",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "[CALCITE-525] Exception-handling in built-in functions",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "java.sql.SQLException: Error while executing SQL \"select case when p2 then p1 else p0 end and true from (values (true, unknown, false)) as t(p0, p1, p2)\": Error while compiling generated Java code:\norg.apache.calcite.DataContext root;\n\npublic org.apache.calcite.linq4j.Enumerable bind(final org.apache.calcite.DataContext root0) {\n  root \u003d root0;\n  final org.apache.calcite.linq4j.Enumerable _inputEnumerable \u003d org.apache.calcite.linq4j.Linq4j.asEnumerable(new Object[] {\n    new Object[] {\n      true,\n      null,\n      false}});\n  return new org.apache.calcite.linq4j.AbstractEnumerable(){\n      public org.apache.calcite.linq4j.Enumerator enumerator() {\n        return new org.apache.calcite.linq4j.Enumerator(){\n            public final org.apache.calcite.linq4j.Enumerator inputEnumerator \u003d _inputEnumerable.enumerator();\n            public void reset() {\n              inputEnumerator.reset();\n            }\n\n            public boolean moveNext() {\n              return inputEnumerator.moveNext();\n            }\n\n            public void close() {\n              inputEnumerator.close();\n            }\n\n            public Object current() {\n              final Object[] current \u003d (Object[]) inputEnumerator.current();\n              final boolean inp2_ \u003d org.apache.calcite.runtime.SqlFunctions.toBoolean(current[2]);\n              final Boolean inp1_ \u003d (Boolean) current[1];\n              final boolean inp0_ \u003d org.apache.calcite.runtime.SqlFunctions.toBoolean(current[0]);\n              final boolean v0 \u003d !inp2_;\n              return inp2_ \u0026\u0026 org.apache.calcite.runtime.SqlFunctions.isTrue(inp1_) || inp0_ \u0026\u0026 v0 ? Boolean.TRUE : (inp2_ \u0026\u0026 org.apache.calcite.runtime.SqlFunctions.isNotFalse(inp1_) ? (inp1_ \u003d\u003d null ? (Boolean) null : Boolean.TRUE) : Boolean.FALSE) \u003d\u003d null || (inp0_ \u0026\u0026 v0 || $L4J$C$_null) ? (Boolean) null : Boolean.FALSE;\n            }\n\n            static final Object $L4J$C$_null \u003d !null;\n          };\n      }\n\n    };\n}\n\n\npublic Class getElementType() {\n  return java.lang.Boolean.class;\n}\n\n\n",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "java.sql.SQLException: Error while executing SQL \"values (cast(null as integer) is distinct from 2)\": null",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 3
    },
    {
      "className": "org.apache.calcite.test.RelOptRulesTest",
      "failingMethods": [
        "org.apache.calcite.test.RelOptRulesTest#testReduceConstantsCaseEquals2",
        "org.apache.calcite.test.RelOptRulesTest#testDecorrelateTwoScalar",
        "org.apache.calcite.test.RelOptRulesTest#testReduceCase",
        "org.apache.calcite.test.RelOptRulesTest#testExpandJoinInComposite",
        "org.apache.calcite.test.RelOptRulesTest#testTransitiveInferenceUnion3wayOr",
        "org.apache.calcite.test.RelOptRulesTest#testReduceCastsNullable",
        "org.apache.calcite.test.RelOptRulesTest#testHeterogeneousConversion",
        "org.apache.calcite.test.RelOptRulesTest#testReduceValuesNull",
        "org.apache.calcite.test.RelOptRulesTest#testReduceNestedCaseWhen",
        "org.apache.calcite.test.RelOptRulesTest#testMergeFilterWithJoinCondition",
        "org.apache.calcite.test.RelOptRulesTest#testExpandJoinIn"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "[CALCITE-1045]",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "cycles",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "[CALCITE-1045]",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "cycles",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "not working",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "planAfter expected:\u003c...alFilter(condition\u003d[[\u003d($7, 10])])\n      LogicalTab...\u003e but was:\u003c...alFilter(condition\u003d[[OR(AND(\u003c\u003e($7, 20), \u003d($7, 10)), AND(\u003c\u003e($7, 20), \u003c\u003e($7, 10), null)])])\n      LogicalTab...\u003e",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "[CALCITE-1045]",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "planAfter expected:\u003c...alFilter(condition\u003d[[CASE(\u003d($5, 1000), \u003d($5, 1000), \u003d($5, 2000]))])\n    LogicalTabl...\u003e but was:\u003c...alFilter(condition\u003d[[OR(\u003d($5, 1000), AND(\u003c\u003e($5, 1000), \u003d($5, 2000)]))])\n    LogicalTabl...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 11,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.RexProgramTest",
      "failingMethods": [
        "org.apache.calcite.test.RexProgramTest#testSimplify"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: \"CASE(\u003d(?0.b, ?0.c), ?0.d, ?0.e)\"\n     but: was \"OR(AND(\u003d(?0.b, ?0.c), ?0.d), AND(\u003c\u003e(?0.b, ?0.c), ?0.e))\"",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}