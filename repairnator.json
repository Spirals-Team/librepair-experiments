{
  "totalNumberSkippingTests": 0,
  "bugType": "failing_passing",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "failingModule": "/root/workspace/prestodb/presto/269711646/presto-tests",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 103,
  "error-types": [
    "com.facebook.presto.client.FailureInfo$FailureException",
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 6162,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.tests.TestDistributedSpilledQueries",
      "failingMethods": [
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testAggregationPushedBelowOuterJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetDoubleGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByBetween",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetMixedExpressionAndColumn",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCubeNoInput",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedExistsSubqueries",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testMergeHyperLogLogGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsRepeatedSetsDistinct",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetBigintGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByRepeatedField2",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRollupOverUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetVarcharGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetGroupByWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproximateCountDistinctGroupByWithStandardError",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithSingleDistinctAndUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupBySearchedCaseNoElse",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithSingleDistinct",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSingleDistinctOptimizer",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testExistsSubqueryWithGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSingleGroupingSet",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupAggregationOverNestedGroupByAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedInPredicateSubqueries",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCustomRank",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByWithAlias",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsMultipleAggregatesOnGroupedColumn",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testExceptWithAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithMultipleDistinct",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinAggregations",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTry",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsGrandTotalSetFirst",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsAggregateOnGroupedColumn",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testAssignUniqueId",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#test15WayGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRollup",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCustomSum",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByRow",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedExistsSubqueriesWithEqualityPredicatesInWhere",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByWithoutAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingCombinationsDistinct",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinWithGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testAggregationOverRightJoinOverSingleStreamProbe",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testScalarSubqueryWithGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsGrandTotalSet",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedScalarSubqueriesWithScalarAggregationAndEqualityPredicatesInWhere",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSets",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxPercentile",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testIntersectWithAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedScalarSubqueriesWithScalarAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithSingleDistinctAndUnionGroupedArguments",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testMaxMinStringWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByRequireIntegerCoercion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByKeyPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testExcept",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsRepeatedSetsAll",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testExtractDistinctAggregationOptimizer",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsMultipleAggregatesOnUngroupedColumn",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithMultipleDistinctAndUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCoalesce",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCaseNoElse",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCast",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByNullIf",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByRepeatedField",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByWithAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByOrdinal",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCase",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByCount",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingInWindowFunction",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsWithGlobalAggregationNoInput",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctMultipleFields",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testExistsSubquery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithConstantPredicatePushDown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproximateCountDistinctGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsRepeatedSetsAllNoInput",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCube",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedExistsSubqueriesWithPrunedCorrelationSymbols",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testHaving",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingCombinationsAll",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctHaving",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByOnSupersetOfPartitioning",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetMixedExpressionAndOrdinal",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingInTableSubquery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinCoercionOnEqualityComparison",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetGroupByWithOnlyNullsInOneGroup",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testMergeHyperLogLogGroupByWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetSubsetAndPartitioning",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsMultipleAggregatesWithGroupedColumns",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByMap",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinConstantPropagation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctWindow",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByArray",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByIf",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregationAndJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByMultipleFields",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetGroupByWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetsAliasedGroupingColumns",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByNullConstant",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupBySearchedCase"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT     orderkey + 1, orderkey + 2, orderkey + 3, orderkey + 4, orderkey + 5,     orderkey + 6, orderkey + 7, orderkey + 8, orderkey + 9, orderkey + 10,     count(*) FROM orders GROUP BY     orderkey + 1, orderkey + 2, orderkey + 3, orderkey + 4, orderkey + 5,     orderkey + 6, orderkey + 7, orderkey + 8, orderkey + 9, orderkey + 10",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT\n  value\nFROM\n(\n    SELECT\n        key\n    FROM\n        (VALUES \u0027match\u0027) as a(key)\n        LEFT JOIN (SELECT * FROM (VALUES (0)) limit 0) AS x(ignored)\n        ON TRUE\n    GROUP BY 1\n) a\nRIGHT JOIN\n(\n    VALUES\n    (\u0027match\u0027, \u0027value\u0027),\n    (\u0027no-match\u0027, \u0027value\u0027)\n) AS b(key, value)\nON a.key \u003d b.key\nGROUP BY 1\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT max(name), min(name), count(nationkey) + 1, count(nationkey) FROM (SELECT DISTINCT regionkey FROM region) as r1 LEFT JOIN nation ON r1.regionkey \u003d nation.regionkey GROUP BY r1.regionkey HAVING sum(nationkey) \u003c 20",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM (SELECT * FROM (   SELECT (SELECT count(*) WHERE c \u003d 1)    FROM (SELECT CASE orderkey WHEN 1 THEN orderkey ELSE 1 END        FROM (SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem UNION ALL SELECT * FROM lineitem)) o(c)) result(a) WHERE a \u003d 1)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM orders o WHERE EXISTS(SELECT 1 FROM orders i WHERE o.orderkey \u003c i.orderkey AND i.orderkey % 1000 \u003d 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT EXISTS(SELECT 1 WHERE o.orderkey \u003d 1) FROM orders o",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT max(o.totalprice), o.orderkey FROM orders o GROUP BY o.orderkey, EXISTS (SELECT o.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, clerk IN (SELECT clerk FROM orders s WHERE s.custkey \u003d o.custkey AND s.orderkey \u003c o.orderkey) FROM orders o",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM orders o WHERE (SELECT avg(i.orderkey) FROM orders i WHERE o.orderkey \u003c i.orderkey AND i.orderkey % 10000 \u003d 0) \u003e 100",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT (SELECT count(*) WHERE o.orderkey \u003d 1) FROM orders o",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY CUBE (linenumber, suppkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity \u003c 0 GROUP BY CUBE (linenumber, suppkey)",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, custom_sum(orderkey) FROM orders GROUP BY orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(DISTINCT clerk) as count, orderdate FROM orders GROUP BY orderdate ORDER BY count, orderdate",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(DISTINCT clerk) AS count FROM orders GROUP BY orderdate HAVING COUNT(DISTINCT clerk) \u003e 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(DISTINCT CAST(b.quantity AS BIGINT)), a.orderstatus FROM orders a JOIN lineitem b ON a.orderkey \u003d b.orderkey GROUP BY a.orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT DISTINCT custkey, orderstatus FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT num FROM (SELECT 1 as num FROM nation WHERE nationkey\u003d10 EXCEPT SELECT 2 FROM nation WHERE nationkey\u003d20) T",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUM(nationkey), COUNT(name) FROM (SELECT nationkey, name FROM nation where nationkey \u003c 6 EXCEPT SELECT regionkey, name FROM nation) n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT o1.orderkey, COUNT(*) FROM orders o1 LEFT JOIN (SELECT * FROM orders LIMIT 10) o2 ON EXISTS(SELECT avg(orderkey) FROM ORDERS) GROUP BY o1.orderkey ORDER BY o1.orderkey LIMIT 5",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey), EXISTS(SELECT orderkey FROM orders WHERE orderkey \u003c 7)FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT max(orderstatus), COUNT(orderkey), sum(DISTINCT orderkey) FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT sum(custkey), max(orderstatus), min(c) FROM (SELECT orderstatus, custkey, COUNT(*) c FROM ORDERS GROUP BY orderstatus, custkey) T",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT col[1], count FROM (SELECT ARRAY[custkey] col, COUNT(*) count FROM ORDERS GROUP BY 1 ORDER BY 1)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey BETWEEN 1 AND 100 FROM orders GROUP BY orderkey BETWEEN 1 AND 100 ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT CASE orderstatus WHEN \u0027O\u0027 THEN \u0027a\u0027 ELSE \u0027b\u0027 END, count(*)\nFROM orders\nGROUP BY CASE orderstatus WHEN \u0027O\u0027 THEN \u0027a\u0027 ELSE \u0027b\u0027 END",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT CASE orderstatus WHEN \u0027O\u0027 THEN \u0027a\u0027 END, count(*)\nFROM orders\nGROUP BY CASE orderstatus WHEN \u0027O\u0027 THEN \u0027a\u0027 END",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT CAST(orderkey AS VARCHAR), count(*) FROM orders GROUP BY CAST(orderkey AS VARCHAR)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COALESCE(orderkey, custkey), count(*) FROM orders GROUP BY COALESCE(orderkey, custkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, COUNT(*) FROM ORDERS GROUP BY orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT IF(orderkey between 1 and 5, \u0027orders\u0027, \u0027others\u0027), sum(totalprice) FROM orders GROUP BY 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT custkey1, orderstatus1, SUM(totalprice1) totalprice, MAX(custkey2) maxcustkey\n  FROM (\n    SELECT *\n    FROM (\n      SELECT custkey custkey1, orderstatus orderstatus1, CAST(totalprice AS BIGINT) totalprice1, orderkey orderkey1\n      FROM orders\n    ) orders1 \n    JOIN (\n      SELECT custkey custkey2, orderstatus orderstatus2, CAST(totalprice AS BIGINT) totalprice2, orderkey orderkey2\n      FROM orders\n    ) orders2 ON orders1.orderkey1 \u003d orders2.orderkey2\n  ) \n  GROUP BY custkey1, orderstatus1\n)\nWHERE custkey1 \u003d maxcustkey\nAND maxcustkey % 2 \u003d 0 \nAND orderstatus1 \u003d \u0027F\u0027\nAND totalprice \u003e 10000\nORDER BY custkey1, orderstatus1, totalprice, maxcustkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT col[1], count FROM (SELECT MAP(ARRAY[1], ARRAY[custkey]) col, COUNT(*) count FROM ORDERS GROUP BY 1)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus, COUNT(*) FROM ORDERS GROUP BY custkey, orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*)\nFROM (\n  SELECT cast(null as VARCHAR) constant, orderdate\n  FROM orders\n) a\ngroup by constant, orderdate\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULLIF(orderkey, custkey), count(*) FROM orders GROUP BY NULLIF(orderkey, custkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderdate, c, count(*) FROM (SELECT orderdate, count(*) c FROM orders GROUP BY orderdate) GROUP BY orderdate, c",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, sum(totalprice) FROM orders GROUP BY 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT sum(custkey) FROM orders GROUP BY orderstatus, orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM (select orderstatus a, orderstatus b FROM orders) GROUP BY a, b",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT partkey, COUNT(DISTINCT shipdate), SUM(linenumber) FROM lineitem GROUP BY partkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT col.col1, count FROM (SELECT cast(row(custkey, custkey) as row(col0 bigint, col1 bigint)) col, COUNT(*) count FROM ORDERS GROUP BY 1)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT CASE WHEN orderstatus \u003d \u0027O\u0027 THEN \u0027a\u0027 ELSE \u0027b\u0027 END, count(*)\nFROM orders\nGROUP BY CASE WHEN orderstatus \u003d \u0027O\u0027 THEN \u0027a\u0027 ELSE \u0027b\u0027 END",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT CASE WHEN orderstatus \u003d \u0027O\u0027 THEN \u0027a\u0027 END, count(*)\nFROM orders\nGROUP BY CASE WHEN orderstatus \u003d \u0027O\u0027 THEN \u0027a\u0027 END",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderdate x, COUNT(*) FROM orders GROUP BY orderdate",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT key, COUNT(*) FROM (SELECT CASE   WHEN orderkey % 3 \u003d 0 THEN NULL   WHEN orderkey % 5 \u003d 0 THEN 0   ELSE orderkey   END as key FROM lineitem) GROUP BY key",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus FROM orders GROUP BY orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, partkey, suppkey, linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY orderkey, partkey, ROLLUP (suppkey, linenumber), CUBE (linenumber)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, partkey, suppkey, linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY DISTINCT orderkey, partkey, ROLLUP (suppkey, linenumber), CUBE (linenumber)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, custkey, g, sum(agg_price) as outer_sum, grouping(orderkey, custkey) FROM     (SELECT orderkey, custkey, sum(totalprice) as agg_price, grouping(custkey, orderkey) as g      FROM orders      GROUP BY GROUPING SETS ((custkey), (orderkey))      ORDER BY agg_price ASC      LIMIT 5) as t GROUP BY orderkey, custkey, g",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, custkey, sum(totalprice), grouping(orderkey)+grouping(custkey) as g,        rank() OVER (PARTITION BY grouping(orderkey)+grouping(custkey),        CASE WHEN grouping(orderkey) \u003d 0 THEN custkey END ORDER BY orderkey ASC) as r FROM orders GROUP BY ROLLUP (orderkey, custkey) ORDER BY orderkey, custkey LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT suppkey, month(shipdate), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY month(shipdate), ROLLUP(suppkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT suppkey, month(shipdate), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY 2, ROLLUP(suppkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT COALESCE(orderpriority, \u0027ALL\u0027), COALESCE(shippriority, -1) sp FROM (SELECT orderpriority, shippriority, COUNT(1) FROM orders GROUP BY GROUPING SETS ((orderpriority), (shippriority)))) WHERE sp\u003d-1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT_IF(x IS NULL) FROM (SELECT x, y, COUNT(z) FROM (SELECT CAST(lineitem.orderkey AS BIGINT) x, lineitem.linestatus y, SUM(lineitem.quantity) z FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey GROUP BY 1, 2) GROUP BY GROUPING SETS ((x, y), ()))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderpriority, COUNT(orderpriority) FROM orders GROUP BY ROLLUP (orderpriority)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT lna, lnb, SUM(quantity) FROM (SELECT linenumber lna, linenumber lnb, CAST(quantity AS BIGINT) quantity FROM lineitem) GROUP BY GROUPING SETS ((lna, lnb), (lna), (lnb), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((), (linenumber), (linenumber, suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(suppkey), COUNT(linenumber), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, COUNT(CAST(quantity AS BIGINT)), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, COUNT(linenumber), SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((), (linenumber, suppkey), (), (linenumber, suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity \u003c 0 GROUP BY GROUPING SETS ((), (linenumber, suppkey), (), (linenumber, suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY DISTINCT GROUPING SETS ((), (linenumber, suppkey), (), (linenumber, suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity \u003c 0 GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(DISTINCT CAST(quantity AS BIGINT)), COUNT(DISTINCT linestatus) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, COUNT(DISTINCT linenumber), SUM(DISTINCT suppkey) FROM (SELECT * FROM lineitem WHERE linenumber%2 \u003d 0 UNION ALL SELECT * FROM lineitem WHERE linenumber%2 \u003d 1) GROUP BY GROUPING SETS ((linenumber), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(DISTINCT CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT suppkey, COUNT(DISTINCT linenumber) FROM (SELECT * FROM lineitem WHERE linenumber%2 \u003d 0 UNION ALL SELECT * FROM lineitem WHERE linenumber%2 \u003d 1) GROUP BY GROUPING SETS ((suppkey), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, COUNT(DISTINCT linenumber) FROM (SELECT * FROM lineitem WHERE linenumber%2 \u003d 0 UNION ALL SELECT * FROM lineitem WHERE linenumber%2 \u003d 1) GROUP BY GROUPING SETS ((linenumber), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, sum(totalprice) FROM orders GROUP BY orderstatus HAVING orderstatus \u003d \u0027O\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUM(nationkey), COUNT(name) FROM (SELECT nationkey,name FROM nation INTERSECT SELECT regionkey, name FROM nation) n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x + y FROM (   SELECT orderdate, COUNT(*) x FROM orders GROUP BY orderdate) a JOIN (   SELECT orderdate, COUNT(*) y FROM orders GROUP BY orderdate) b ON a.orderdate \u003d b.orderdate",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT o.clerk, avg(o.shippriority), COUNT(l.linenumber) FROM orders o LEFT OUTER JOIN lineitem l ON o.orderkey\u003dl.orderkey AND o.shippriority\u003d1 GROUP BY o.clerk",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x, y, COUNT(*)\nFROM (SELECT orderkey, 0 AS x FROM orders) a \nJOIN (SELECT orderkey, 1 AS y FROM orders) b \nON a.orderkey \u003d b.orderkey\nGROUP BY 1, 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT\n  a.orderstatus\n  , a.clerk\nFROM (\n  SELECT DISTINCT orderstatus, clerk FROM orders\n) a\nINNER JOIN (\n  SELECT DISTINCT orderstatus, clerk FROM orders\n) b\nON\n  a.orderstatus \u003d b.orderstatus\n  and a.clerk \u003d b.clerk\nwhere a.orderstatus \u003d \u0027F\u0027\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, MAX(NULLIF(orderstatus, \u0027O\u0027)), MIN(NULLIF(orderstatus, \u0027O\u0027)) FROM orders GROUP BY custkey",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: select count(*) , letter from (select substr(name,1,1) letter from nation) x group by letter order by x.letter",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "No free space available for spill",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY ROLLUP (linenumber, suppkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, sum(orderkey)\nFROM (SELECT orderkey, orderstatus\n      FROM orders\n      UNION ALL\n      SELECT orderkey, orderstatus\n      FROM orders) x\nGROUP BY ROLLUP (orderstatus)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey), (SELECT max(orderkey) FROM orders WHERE orderkey \u003c 7)FROM lineitem GROUP BY linenumber, (SELECT max(orderkey) FROM orders WHERE orderkey \u003c 7)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT orderkey\n    FROM lineitem\n    WHERE partkey % 4 \u003d 0),\n  SUM(\n    CASE\n      WHEN orderkey\n        IN (\n          SELECT orderkey\n          FROM lineitem\n          WHERE suppkey % 4 \u003d 0)\n      THEN 1\n      ELSE 0\n      END)\nFROM orders\nGROUP BY orderkey\n  IN (\n    SELECT orderkey\n    FROM lineitem\n    WHERE partkey % 4 \u003d 0)\nHAVING SUM(\n  CASE\n    WHEN orderkey\n      IN (\n        SELECT orderkey\n        FROM lineitem\n        WHERE suppkey % 4 \u003d 0)\n      THEN 1\n      ELSE 0\n      END) \u003e 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey) FROM lineitem GROUP BY linenumber HAVING 6 IN (SELECT orderkey FROM orders WHERE orderkey \u003c 7)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus, COUNT(DISTINCT orderkey), SUM(DISTINCT orderkey) FROM orders GROUP BY custkey, orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS (linenumber)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, sum(TRY(100/(CAST (tax*10 AS BIGINT)))) FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT ds, count(*) FROM (   SELECT orderdate ds, orderkey FROM orders    UNION    SELECT shipdate ds, orderkey FROM lineitem) a GROUP BY ds",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM ( SELECT orderkey, count(*) FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a GROUP BY orderkey) t JOIN orders o ON (o.orderkey \u003d t.orderkey)",
          "isError": false
        }
      ],
      "nbFailures": 103,
      "nbErrors": 0
    }
  ]
}