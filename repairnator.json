{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "AndreasBoehm/fragmentargs",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 2,
      "ComputeClasspath": 15,
      "ComputeTestDir": 0,
      "BuildProject": 103,
      "InitRepoToPush": 0,
      "ComputeSourceDir": 0,
      "AstorJMut": 8,
      "CloneRepository": 2,
      "CheckoutPatchedBuild": 0,
      "Nopol": 78,
      "NPEFix": 0,
      "TestProject": 21,
      "GatherTestInformation": 0,
      "CommitPatch": 0
    },
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "NbFailingTests": 2,
    "NbErroringTests": 0,
    "NbSkippingTests": 0,
    "NbRunningTests": 18,
    "BugCommitUrl": "http://github.com/AndreasBoehm/fragmentargs/commit/d21d0f08d00c449a44d2d9819f6dddcbb8c60fd0",
    "ReproductionDate": "Jul 4, 2018 11:21:28 AM",
    "BuggyBuildId": 400058731,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/AndreasBoehm/fragmentargs/builds/400058731",
    "BuggyBuildDate": "Jul 4, 2018 11:21:22 AM",
    "BugCommit": "d21d0f08d00c449a44d2d9819f6dddcbb8c60fd0",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 17,
    "NbFileApp": 0,
    "NbFileTests": 6,
    "NbCPU": 32,
    "FreeMemory": 2550681128,
    "TotalMemory": 3764912128,
    "AngelicValuesByTest": {
      "com/hannesdorfmann/fragmentargs/processor/GenericsTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 705093776,
      "ComputeClasspath": 670596088,
      "ComputeTestDir": 666772752,
      "BuildProject": 690395992,
      "InitRepoToPush": 672857192,
      "ComputeSourceDir": 670596088,
      "AstorJMut": 2550681128,
      "CloneRepository": 740493880,
      "CheckoutPatchedBuild": 2550681128,
      "Nopol": 2745209392,
      "NPEFix": 2745209392,
      "TestProject": 688134696,
      "GatherTestInformation": 684315472,
      "CommitPatch": 2550681128
    },
    "NbSucceedingTests": 16
  },
  "failingModule": "/root/workspace/AndreasBoehm/fragmentargs/400058731/processor",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 2,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 18,
  "failing-test-cases": [
    {
      "className": "com.hannesdorfmann.fragmentargs.processor.GenericsTest",
      "failingMethods": [
        "classWithGenericsAndInnerClass",
        "classWithGenericsInnerClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Compilation produced the following errors:  /SOURCE_OUTPUT/com/hannesdorfmann/fragmentargstest/test/ClassWithGenericsAndInnerClass$$InnerClassBuilder.java:36: error: an enclosing instance that contains com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsAndInnerClass.InnerClass is required     InnerClass fragment \u003d new InnerClass();                           ^   Generated Files \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  /SOURCE_OUTPUT/com/hannesdorfmann/fragmentargs/AutoFragmentArgInjector.java: package com.hannesdorfmann.fragmentargs;  public final class AutoFragmentArgInjector     implements FragmentArgsInjector {    @Override   public void inject(Object target) {      Class\u003c?\u003e targetClass \u003d target.getClass();     String targetName \u003d targetClass.getCanonicalName();      if ( com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsAndInnerClass.InnerClass.class.getName().equals(targetName) ) {       com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsAndInnerClass$$InnerClassBuilder.injectArguments( ( com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsAndInnerClass.InnerClass ) target);       return;     }   } }   /SOURCE_OUTPUT/com/hannesdorfmann/fragmentargstest/test/ClassWithGenericsAndInnerClass$$InnerClassBuilder.java: package com.hannesdorfmann.fragmentargstest.test;  import android.os.Bundle; import com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsAndInnerClass.InnerClass;  public final class ClassWithGenericsAndInnerClass$$InnerClassBuilder {    private final Bundle mArguments \u003d new Bundle();    public ClassWithGenericsAndInnerClass$$InnerClassBuilder(String generic) {      mArguments.putString(\"generic\", generic);   }    public static InnerClass newInnerClass(String generic) {     return new ClassWithGenericsAndInnerClass$$InnerClassBuilder(generic).build();   }    public Bundle buildBundle() {     return new Bundle(mArguments);   }    public static final void injectArguments(InnerClass fragment) {     Bundle args \u003d fragment.getArguments();     if (args \u003d\u003d null) {       throw new IllegalStateException(\"No arguments set. Have you set up this Fragment with the corresponding FragmentArgs Builder? \");     }      if (!args.containsKey(\"generic\")) {       throw new IllegalStateException(\"required argument generic is not set\");     }     fragment.generic \u003d args.getString(\"generic\");   }    public InnerClass build() {     InnerClass fragment \u003d new InnerClass();     fragment.setArguments(mArguments);     return fragment;   } }  ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Compilation produced the following errors:  /SOURCE_OUTPUT/com/hannesdorfmann/fragmentargstest/test/ClassWithGenericsInnerClass$$InnerClassBuilder.java:36: error: an enclosing instance that contains com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsInnerClass.InnerClass is required     InnerClass fragment \u003d new InnerClass();                           ^   Generated Files \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d  /SOURCE_OUTPUT/com/hannesdorfmann/fragmentargs/AutoFragmentArgInjector.java: package com.hannesdorfmann.fragmentargs;  public final class AutoFragmentArgInjector     implements FragmentArgsInjector {    @Override   public void inject(Object target) {      Class\u003c?\u003e targetClass \u003d target.getClass();     String targetName \u003d targetClass.getCanonicalName();      if ( com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsInnerClass.InnerClass.class.getName().equals(targetName) ) {       com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsInnerClass$$InnerClassBuilder.injectArguments( ( com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsInnerClass.InnerClass ) target);       return;     }   } }   /SOURCE_OUTPUT/com/hannesdorfmann/fragmentargstest/test/ClassWithGenericsInnerClass$$InnerClassBuilder.java: package com.hannesdorfmann.fragmentargstest.test;  import android.os.Bundle; import com.hannesdorfmann.fragmentargstest.test.ClassWithGenericsInnerClass.InnerClass;  public final class ClassWithGenericsInnerClass$$InnerClassBuilder\u003cS extends java.io.Serializable\u003e {    private final Bundle mArguments \u003d new Bundle();    public ClassWithGenericsInnerClass$$InnerClassBuilder(S generic) {      mArguments.putSerializable(\"generic\", generic);   }    public static \u003cS extends java.io.Serializable\u003eInnerClass newInnerClass(S generic) {     return new ClassWithGenericsInnerClass$$InnerClassBuilder(generic).build();   }    public Bundle buildBundle() {     return new Bundle(mArguments);   }    public static final \u003cS extends java.io.Serializable\u003evoid injectArguments(InnerClass fragment) {     Bundle args \u003d fragment.getArguments();     if (args \u003d\u003d null) {       throw new IllegalStateException(\"No arguments set. Have you set up this Fragment with the corresponding FragmentArgs Builder? \");     }      if (!args.containsKey(\"generic\")) {       throw new IllegalStateException(\"required argument generic is not set\");     }     fragment.generic \u003d (S) args.getSerializable(\"generic\");   }    public InnerClass build() {     InnerClass fragment \u003d new InnerClass();     fragment.setArguments(mArguments);     return fragment;   } }  ",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    }
  ]
}