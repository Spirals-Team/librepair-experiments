{
  "totalNumberSkippingTests": 2,
  "bugType": "only_fail",
  "totalNumberErroringTests": 31,
  "repo": "everit-org/json-schema",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 2,
      "ComputeTestDir": 0,
      "ResolveDependency": 12,
      "BuildProject": 13,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 1,
      "CloneRepository": 2,
      "NopolRepair": 10,
      "CheckoutPatchedBuild": 0,
      "TestProject": 18,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 3,
      "CommitPatch": 3
    },
    "FailureNames": [
      "java.io.UncheckedIOException",
      "java.lang.AssertionError",
      "java.lang.ClassCastException"
    ],
    "NbFailingTests": 80,
    "BugCommitUrl": "http://github.com/everit-org/json-schema/commit/99e137e312ba530099722a1fbc2cbae3789a29b7",
    "ReproductionDate": "Jun 1, 2017 5:32:57 AM",
    "BuggyBuildId": 238123824,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/everit-org/json-schema/builds/238123824",
    "BuggyBuildDate": "Jun 1, 2017 12:17:16 AM",
    "BugCommit": "99e137e312ba530099722a1fbc2cbae3789a29b7",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 1037,
    "NbLibraries": 19,
    "NbFileApp": 96,
    "NbFileTests": 90,
    "NbCPU": 4,
    "FreeMemory": 349472584,
    "TotalMemory": 441974784,
    "AngelicValuesByTest": {
      "org/everit/json/schema/V6TestSuiteTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 124376208,
      "ComputeClasspath": 169057112,
      "ComputeTestDir": 177924744,
      "ResolveDependency": 164551648,
      "BuildProject": 157940576,
      "ComputeSourceDir": 167730240,
      "InitRepoToPush": 134995200,
      "CloneRepository": 130521784,
      "NopolRepair": 129206632,
      "CheckoutPatchedBuild": 349472584,
      "TestProject": 118723624,
      "GatherTestInformation": 189766032,
      "PushIncriminatedBuild": 170490304,
      "CommitPatch": 349472584
    }
  },
  "bugCommit": "https://github.com/everit-org/json-schema/compare/301eaf123e2b...99e137e312ba",
  "failingModule": "/root/workspace/everit-org/json-schema/238123824/tests",
  "hostname": "repairnator",
  "totalNumberFailingTests": 49,
  "error-types": [
    "java.io.UncheckedIOException",
    "java.lang.AssertionError",
    "java.lang.ClassCastException"
  ],
  "totalNumberRunningTests": 1037,
  "failing-test-cases": [
    {
      "className": "org.everit.json.schema.V6TestSuiteTest",
      "failingMethods": [
        "org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, all true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[patternProperties.json]/patternProperties with boolean schemas]",
        "org.everit.json.schema.V6TestSuiteTest#test[[properties.json]/properties with boolean schema]",
        "org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const with object]",
        "org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const with null]",
        "org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, all true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, all true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, some true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[not.json]/not with boolean schema false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with boolean schema true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[exclusiveMaximum.json]/exclusiveMaximum validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, one true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schema (false)]",
        "org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with boolean schema false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, all false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schema (true)]",
        "org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, some false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[const.json]/const validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[propertyNames.json]/propertyNames validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[exclusiveMinimum.json]/exclusiveMinimum validation]",
        "org.everit.json.schema.V6TestSuiteTest#test[[contains.json]/contains keyword with const keyword]",
        "org.everit.json.schema.V6TestSuiteTest#test[[allOf.json]/allOf with boolean schemas, all false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[items.json]/items with boolean schemas]",
        "org.everit.json.schema.V6TestSuiteTest#test[[dependencies.json]/dependencies with boolean subschemas]",
        "org.everit.json.schema.V6TestSuiteTest#test[[propertyNames.json]/propertyNames with boolean schema false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[not.json]/not with boolean schema true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/ref overrides any sibling keywords]",
        "org.everit.json.schema.V6TestSuiteTest#test[[oneOf.json]/oneOf with boolean schemas, more than one true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[anyOf.json]/anyOf with boolean schemas, all false]"
      ],
      "erroringMethods": [
        "org.everit.json.schema.V6TestSuiteTest#test[[boolean_schema.json]/boolean schema \u0027true\u0027]",
        "org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change - change folder in subschema]",
        "org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/root ref in remote ref]",
        "org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/$ref to boolean schema true]",
        "org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/Recursive references between schemas]",
        "org.everit.json.schema.V6TestSuiteTest#test[[ref.json]/$ref to boolean schema false]",
        "org.everit.json.schema.V6TestSuiteTest#test[[boolean_schema.json]/boolean schema \u0027false\u0027]",
        "org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change]",
        "org.everit.json.schema.V6TestSuiteTest#test[[refRemote.json]/base URI change - change folder]"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [contains.json]/array without items matching schema is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [contains.json]/empty array is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [contains.json]/array without item 5 is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [contains.json]/empty array is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [contains.json]/any non-empty array is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [contains.json]/empty array is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [allOf.json]/allOf with boolean schemas, all true",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [allOf.json]/allOf with boolean schemas, some false",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [allOf.json]/allOf with boolean schemas, all false",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [patternProperties.json]/patternProperties with boolean schemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [patternProperties.json]/patternProperties with boolean schemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [patternProperties.json]/patternProperties with boolean schemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [patternProperties.json]/patternProperties with boolean schemas",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: folderInteger.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: folderInteger.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: folderInteger.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: folderInteger.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: folderInteger.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: folderInteger.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: name.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: name.json",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: name.json",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [not.json]/not with boolean schema true",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [not.json]/not with boolean schema false",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [properties.json]/properties with boolean schema",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [properties.json]/properties with boolean schema",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [properties.json]/properties with boolean schema",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [properties.json]/properties with boolean schema",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [exclusiveMaximum.json]/boundary point is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [exclusiveMaximum.json]/above the exclusiveMaximum is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [items.json]/items with boolean schema (true)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [items.json]/items with boolean schema (true)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [items.json]/items with boolean schema (false)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [items.json]/items with boolean schema (false)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [items.json]/items with boolean schemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [items.json]/items with boolean schemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [items.json]/items with boolean schemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [exclusiveMinimum.json]/boundary point is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [exclusiveMinimum.json]/below the exclusiveMinimum is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false failure for [ref.json]/ref valid, maxItems ignored",
          "isError": false
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: node",
          "isError": true
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.MalformedURLException: no protocol: node",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "java.lang.Boolean cannot be cast to org.json.JSONObject",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/another value is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/another type is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/another object is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/another type is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [const.json]/not null is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [oneOf.json]/oneOf with boolean schemas, all true",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [oneOf.json]/oneOf with boolean schemas, one true",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [oneOf.json]/oneOf with boolean schemas, more than one true",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [oneOf.json]/oneOf with boolean schemas, all false",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [propertyNames.json]/some property names invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "false success for [propertyNames.json]/object with any properties is invalid",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [dependencies.json]/dependencies with boolean subschemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [dependencies.json]/dependencies with boolean subschemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [dependencies.json]/dependencies with boolean subschemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [dependencies.json]/dependencies with boolean subschemas",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [anyOf.json]/anyOf with boolean schemas, all true",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [anyOf.json]/anyOf with boolean schemas, some true",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "schema loading failure for [anyOf.json]/anyOf with boolean schemas, all false",
          "isError": false
        }
      ],
      "nbFailures": 49,
      "nbErrors": 31
    }
  ]
}