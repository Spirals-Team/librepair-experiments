{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 31,
  "repo": "spring-projects/spring-security-oauth",
  "failingModule": "/root/workspace/spring-projects/spring-security-oauth/372722228/spring-security-oauth2",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 0,
  "error-types": [
    "org.springframework.data.redis.RedisConnectionFailureException"
  ],
  "totalNumberRunningTests": 736,
  "failing-test-cases": [
    {
      "className": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testExpiringRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingAuthenticationForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRefreshTokenIsNotStoredDuringAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingRefreshTokenForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testFindAccessTokensByClientIdAndUserName",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingAccessTokenForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testFindAccessTokensByClientId",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testGetAccessTokenForDeletedUser",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRetrieveAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRemovedTokenCannotBeFoundByUsername",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreAccessTokenTwice",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testExpiringAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRemoveRefreshToken"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRefreshTokenIsNotStoredDuringAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRemoveRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#storeAccessTokenWithoutRefreshTokenRemoveAccessTokenVerifyTokenRemoved",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testFindAccessTokensByClientIdAndUserName",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreAccessTokenTwice",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testFindAccessTokensByClientId",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingAccessTokenForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRemovedTokenCannotBeFoundByUsername",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingAuthenticationForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testExpiringAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRetrieveAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testGetAccessTokenForDeletedUser",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testExpiringRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingRefreshTokenForTokenThatDoesNotExist"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    }
  ]
}