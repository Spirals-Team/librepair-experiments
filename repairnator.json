{
  "bugType": "only_fail",
  "hostname": "spirals-repairnator",
  "repo": "spring-projects/spring-data-redis",
  "metrics": {
    "FailureNames": [
      "org.springframework.data.redis.connection.PoolException",
      "org.junit.AssumptionViolatedException",
      "org.springframework.data.redis.RedisConnectionFailureException",
      "org.springframework.beans.factory.BeanCreationException",
      "java.lang.AssertionError",
      "java.lang.NoClassDefFoundError",
      "java.lang.ExceptionInInitializerError",
      "java.lang.Exception",
      "org.jredis.ClientRuntimeException"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 48,
      "ComputeTestDir": 0,
      "BuildProject": 194,
      "InitRepoToPush": 3,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "AstorJMut": 9,
      "CloneRepository": 12,
      "CheckoutPatchedBuild": 0,
      "NopolAllTests": 13,
      "NPEFix": 0,
      "TestProject": 918,
      "GatherTestInformation": 1,
      "CommitPatch": 2
    },
    "BugCommitUrl": "http://github.com/spring-projects/spring-data-redis/commit/5d1d2745cf970448196de871cbe24a8e98a0683d",
    "NbFailingTests": 1,
    "NbErroringTests": 10237,
    "NbSkippingTests": 212,
    "NbRunningTests": 12019,
    "ReproductionDate": "Jul 27, 2018 12:04:53 PM",
    "BuggyBuildId": 408858929,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/spring-projects/spring-data-redis/builds/408858929",
    "BuggyBuildDate": "Jul 27, 2018 12:03:40 PM",
    "BugCommit": "5d1d2745cf970448196de871cbe24a8e98a0683d",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 66,
    "NbFileApp": 314,
    "NbFileTests": 211,
    "NbCPU": 4,
    "FreeMemory": 714811384,
    "TotalMemory": 1239941120,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 260392040,
      "ComputeClasspath": 150018680,
      "ComputeTestDir": 142140776,
      "BuildProject": 246302264,
      "InitRepoToPush": 153982488,
      "ComputeSourceDir": 705520984,
      "ComputeModules": 705520984,
      "AstorJMut": 788007016,
      "CloneRepository": 286008600,
      "CheckoutPatchedBuild": 714811384,
      "NopolAllTests": 1031283064,
      "NPEFix": 1031283064,
      "TestProject": 342450824,
      "GatherTestInformation": 253577408,
      "CommitPatch": 714811384
    },
    "NbSucceedingTests": 1781
  },
  "failing-test-cases": [
    {
      "className": "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
      "failingMethods": [],
      "erroringMethods": [
        "testStopMessageListenerContainers[3]",
        "testStopMessageListenerContainers[2]",
        "testStopMessageListenerContainers[1]",
        "testStopListening[2]",
        "testStopMessageListenerContainers[0]",
        "testStopListening[3]",
        "testRemoveLastListener[0]",
        "testRemoveLastListener[1]",
        "testRemoveLastListener[2]",
        "testRemoveLastListener[3]",
        "testStopListening[0]",
        "testStopListening[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "org.springframework.data.redis.core.MultithreadedRedisTemplateTests",
      "failingMethods": [
        "assertResouresAreReleasedProperlyWhenSharingRedisTemplate[0]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
      "failingMethods": [],
      "erroringMethods": [
        "listenerShouldNotReactToDeleteEvents",
        "listenerShouldPublishEventCorrectly"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldApplyTopKeywordCorrectly",
        "shouldReturnEmptyListWhenPageableOutOfBoundsUsingFindAll",
        "shouldApplyTopKeywordCorrectlyWhenCriteriaPresent",
        "shouldReturnEmptyListWhenPageableOutOfBoundsUsingQueryMethod",
        "nearQueryShouldFindNothingIfOutOfRange",
        "shouldApplyPageableCorrectlyWhenUsingFindAll",
        "findReturnsPageCorrectly",
        "nearQueryShouldReturnResultsCorrectlyOnNestedProperty",
        "findUsingOrReturnsResultCorrectly",
        "simpleFindByMultipleProperties",
        "pageableQueryWithTwoKeywordsShouldReturnCorrectly",
        "findReturnsReferenceDataCorrectly",
        "simpleFindShouldReturnEntitiesCorrectly",
        "nearQueryShouldReturnResultsCorrectly",
        "shouldApplyFirstKeywordCorrectly",
        "shouldApplyPageableCorrectlyWhenUsingFindByWithoutCriteria"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    },
    {
      "className": "org.springframework.data.redis.core.DefaultListOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "testRightPopAndLeftPush[1]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "testLeftPushWithPivot[2]",
        "testLeftPushAll[1]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "testRightPopAndLeftPushTimeout[2]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "testLeftPushIfPresent[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "testRightPushAll[3]",
        "testLeftPushAll[9]",
        "testRightPushAllCollection[6]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[0]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[9]",
        "testRightPushWithPivot[6]",
        "testRightPushIfPresent[1]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[8]",
        "testRightPopAndLeftPush[9]",
        "testLeftPushAllCollection[7]",
        "testRightPushIfPresent[9]",
        "testRightPopAndLeftPush[2]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "testLeftPushIfPresent[6]",
        "testLeftPushAll[0]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "testLeftPushWithPivot[1]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[8]",
        "testRightPopAndLeftPushTimeout[3]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[7]",
        "testRightPushAll[2]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "testLeftPushAll[8]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[9]",
        "testLeftPushWithPivot[9]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "testRightPushAllCollection[7]",
        "testRightPushIfPresent[2]",
        "testRightPushWithPivot[5]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[7]",
        "testLeftPushAllCollection[6]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "testRightPopAndLeftPushTimeout[0]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "testRightPopAndLeftPush[7]",
        "testLeftPushWithPivot[0]",
        "testRightPushAll[9]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "testLeftPushIfPresent[3]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[9]",
        "testRightPopAndLeftPushTimeout[8]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "testLeftPushWithPivot[8]",
        "testRightPushAll[1]",
        "testLeftPushAll[7]",
        "testLeftPushAllCollection[1]",
        "testRightPushWithPivot[4]",
        "testRightPushAllCollection[8]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[6]",
        "testRightPushAllCollection[0]",
        "testLeftPushAllCollection[9]",
        "testRightPushIfPresent[7]",
        "testLeftPushWithPivot[7]",
        "testRightPopAndLeftPush[0]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "testRightPushAll[8]",
        "testLeftPushAll[6]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "testLeftPushIfPresent[4]",
        "testRightPopAndLeftPushTimeout[1]",
        "testRightPushAll[0]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "testRightPushWithPivot[3]",
        "testRightPushAllCollection[9]",
        "testRightPopAndLeftPushTimeout[9]",
        "testLeftPushAllCollection[0]",
        "testRightPushIfPresent[0]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[5]",
        "testRightPopAndLeftPush[8]",
        "testRightPushAllCollection[1]",
        "testLeftPushAllCollection[8]",
        "testRightPushIfPresent[8]",
        "testLeftPushWithPivot[6]",
        "testRightPushAll[7]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[8]",
        "testRightPopAndLeftPush[5]",
        "testLeftPushIfPresent[9]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "testLeftPushAll[5]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[6]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "testRightPopAndLeftPushTimeout[6]",
        "testLeftPushIfPresent[1]",
        "testRightPushWithPivot[2]",
        "testLeftPushAllCollection[3]",
        "testRightPushIfPresent[5]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[4]",
        "testRightPushAllCollection[2]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[0]",
        "testRightPushAll[6]",
        "testLeftPushWithPivot[5]",
        "testRightPopAndLeftPush[6]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[7]",
        "testLeftPushIfPresent[2]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "testLeftPushAll[4]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[5]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[3]",
        "testRightPopAndLeftPushTimeout[7]",
        "testRightPushIfPresent[6]",
        "testRightPushWithPivot[1]",
        "testLeftPushAllCollection[2]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[4]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[3]",
        "testRightPushWithPivot[9]",
        "testRightPushAllCollection[3]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[2]",
        "testRightPopAndLeftPush[3]",
        "testLeftPushWithPivot[4]",
        "testRightPushAll[5]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[4]",
        "testLeftPushIfPresent[7]",
        "testRightPopAndLeftPushTimeout[4]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "testLeftPushAll[3]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[2]",
        "testRightPushWithPivot[0]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[1]",
        "testRightPushIfPresent[3]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[2]",
        "testRightPushWithPivot[8]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[5]",
        "testRightPushAllCollection[4]",
        "testLeftPushAllCollection[5]",
        "testRightPushAll[4]",
        "testLeftPushAll[2]",
        "rightPushAllShouldThrowExceptionWhenCollectionContainsNullValue[3]",
        "testLeftPushWithPivot[3]",
        "testRightPopAndLeftPush[4]",
        "testLeftPushIfPresent[8]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[9]",
        "leftPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[9]",
        "testLeftPushIfPresent[0]",
        "testRightPopAndLeftPushTimeout[5]",
        "testLeftPushAllCollection[4]",
        "rightPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[0]",
        "testRightPushIfPresent[4]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[1]",
        "leftPushAllShouldThrowExceptionWhenCalledWithEmptyCollection[6]",
        "testRightPushWithPivot[7]",
        "rightPushAllShouldThrowExceptionWhenCalledWithNull[9]",
        "leftPushAllShouldThrowExceptionWhenCollectionContainsNullValue[1]",
        "testRightPushAllCollection[5]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 260
    },
    {
      "className": "org.springframework.data.redis.support.BoundKeyOperationsTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubResubscribeTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubResubscribeTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.DefaultSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDistinctRandomMembers[0]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[7]",
        "testRemove[0]",
        "testAdd[5]",
        "testRandomMembersNegative[3]",
        "testDistinctRandomMembersNegative[6]",
        "testPop[4]",
        "testRemove[8]",
        "testSSCanReadsValuesFully[7]",
        "testRandomMembersWithDuplicates[6]",
        "testDistinctRandomMembers[9]",
        "testRandomMember[5]",
        "testMove[2]",
        "testDistinctRandomMembers[1]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[8]",
        "testDistinctRandomMembersNegative[7]",
        "testRandomMembersWithDuplicates[7]",
        "testRemove[1]",
        "testRandomMembersNegative[4]",
        "testAdd[6]",
        "testPop[5]",
        "testRemove[9]",
        "testSSCanReadsValuesFully[6]",
        "testMove[1]",
        "testRandomMember[6]",
        "testDistinctRandomMembers[2]",
        "testRandomMembersNegative[9]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[9]",
        "testDistinctRandomMembersNegative[4]",
        "testAdd[3]",
        "testRandomMembersNegative[1]",
        "testRandomMembersWithDuplicates[8]",
        "testRandomMembersWithDuplicates[0]",
        "testSSCanReadsValuesFully[5]",
        "testPop[6]",
        "testRemove[6]",
        "testMove[4]",
        "testDistinctRandomMembers[3]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[0]",
        "testRandomMember[7]",
        "testRandomMembersNegative[2]",
        "testDistinctRandomMembersNegative[5]",
        "testRandomMembersWithDuplicates[9]",
        "testAdd[4]",
        "testRandomMembersWithDuplicates[1]",
        "testRemove[7]",
        "testRandomMember[0]",
        "testSSCanReadsValuesFully[4]",
        "testPop[7]",
        "testMove[3]",
        "testRandomMember[8]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[1]",
        "testDistinctRandomMembers[4]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[3]",
        "testAdd[1]",
        "testMove[7]",
        "testDistinctRandomMembersNegative[2]",
        "testAdd[9]",
        "testRandomMembersNegative[7]",
        "testSSCanReadsValuesFully[3]",
        "testRandomMembersWithDuplicates[2]",
        "testRemove[4]",
        "testPop[8]",
        "testRandomMember[1]",
        "testDistinctRandomMembers[5]",
        "testPop[0]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[2]",
        "testRandomMember[9]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[4]",
        "testRandomMembersNegative[8]",
        "testDistinctRandomMembersNegative[3]",
        "testMove[6]",
        "testRandomMembersNegative[0]",
        "testAdd[2]",
        "testSSCanReadsValuesFully[2]",
        "testPop[9]",
        "testRandomMembersWithDuplicates[3]",
        "testRemove[5]",
        "testMove[5]",
        "testRandomMember[2]",
        "testDistinctRandomMembers[6]",
        "testPop[1]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[5]",
        "testMove[9]",
        "testDistinctRandomMembersNegative[0]",
        "testRemove[2]",
        "testDistinctRandomMembersNegative[8]",
        "testAdd[7]",
        "testRandomMembersNegative[5]",
        "testSSCanReadsValuesFully[1]",
        "testPop[2]",
        "testRandomMembersWithDuplicates[4]",
        "testDistinctRandomMembers[7]",
        "testSSCanReadsValuesFully[9]",
        "testRandomMember[3]",
        "testMove[0]",
        "intersectAndStoreShouldReturnNumberOfElementsInDestination[6]",
        "testDistinctRandomMembersNegative[1]",
        "testAdd[0]",
        "testMove[8]",
        "testRandomMembersNegative[6]",
        "testDistinctRandomMembersNegative[9]",
        "testAdd[8]",
        "testSSCanReadsValuesFully[0]",
        "testPop[3]",
        "testRandomMembersWithDuplicates[5]",
        "testRemove[3]",
        "testRandomMember[4]",
        "testDistinctRandomMembers[8]",
        "testSSCanReadsValuesFully[8]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 110
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
      "failingMethods": [],
      "erroringMethods": [
        "testResetConnection",
        "testGetNewConnectionOnError",
        "testGetConnectionException",
        "testResetAndInitConnection",
        "dbIndexShouldBePropagatedCorrectly",
        "testConnectionErrorNoValidate",
        "testCreateFactoryWithPool",
        "testInitConnection",
        "testGetSharedConnectionNotShared",
        "testDisableSharedConnection",
        "testSelectDb",
        "testGetConnectionNotSharedBadHostname",
        "testValidateNoError",
        "factoryWorksWithoutClientResources"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 14
    },
    {
      "className": "org.springframework.data.redis.connection.jredis.JredisPoolTests",
      "failingMethods": [],
      "erroringMethods": [
        "testReturnResource",
        "testGetResourceValidate",
        "testGetResource",
        "testCreateWithHostPortAndDbIndex",
        "testReturnBrokenResource",
        "testGetResourcePoolExhausted",
        "testCreateWithHostAndPort"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "testScanWorksCorrectly[6]",
        "testContainsObject[3]",
        "testClear[5]",
        "testContainsObject[16]",
        "testContainsObject[28]",
        "testAdd[5]",
        "testDiffAndStore[8]",
        "testUnionAndStore[7]",
        "testContainsAll[20]",
        "testAdd[19]",
        "testToString[11]",
        "testIsEmpty[8]",
        "testToString[24]",
        "testToString[12]",
        "removeAll[19]",
        "testDiffAndStore[7]",
        "testToArray[19]",
        "testDiff[16]",
        "testClear[18]",
        "testHashCode[18]",
        "testIntersect[28]",
        "testIntersect[16]",
        "testDiff[28]",
        "testContainsObject[2]",
        "testContainsObject[29]",
        "testScanWorksCorrectly[30]",
        "testScanWorksCorrectly[7]",
        "testIterator[0]",
        "testClear[4]",
        "testContainsObject[17]",
        "testUnionAndStore[6]",
        "testIsEmpty[9]",
        "testToString[22]",
        "testAdd[6]",
        "testToString[10]",
        "testAdd[18]",
        "testToString[23]",
        "testDiffAndStore[6]",
        "testToArray[18]",
        "testHashCode[17]",
        "testClear[29]",
        "testClear[17]",
        "testHashCode[29]",
        "testIntersect[29]",
        "testIntersect[17]",
        "removeAll[18]",
        "testDiff[17]",
        "testDiff[29]",
        "testContainsObject[18]",
        "testContainsObject[5]",
        "testClear[7]",
        "testAdd[3]",
        "testIterator[1]",
        "testContainsAll[10]",
        "testUnionAndStore[5]",
        "testContainsAll[22]",
        "testScanWorksCorrectly[21]",
        "testIsEmpty[6]",
        "testToString[26]",
        "testToString[14]",
        "testDiffAndStore[5]",
        "testIntersect[14]",
        "testDiff[26]",
        "testDiff[14]",
        "removeAll[17]",
        "testScanWorksCorrectly[3]",
        "removeAll[29]",
        "testIntersect[26]",
        "testContainsObject[19]",
        "testScanWorksCorrectly[20]",
        "testContainsObject[4]",
        "testScanWorksCorrectly[5]",
        "testRemoveObject[30]",
        "testIntersect[0]",
        "testAdd[4]",
        "testClear[6]",
        "testUnionAndStore[4]",
        "testContainsAll[21]",
        "testIterator[2]",
        "testIsEmpty[7]",
        "testToString[13]",
        "testToString[25]",
        "testHashCode[19]",
        "testDiffAndStore[4]",
        "testDiff[15]",
        "testClear[19]",
        "testDiff[27]",
        "testScanWorksCorrectly[4]",
        "removeAll[28]",
        "testIntersect[27]",
        "testIntersect[15]",
        "removeAll[16]",
        "testClear[1]",
        "testSize[30]",
        "testAdd[9]",
        "testDiffAndStore[3]",
        "testIsEmpty[4]",
        "testToString[28]",
        "testDiff[12]",
        "testToString[16]",
        "testIntersect[24]",
        "testToArray[27]",
        "testIntersect[12]",
        "testToArray[15]",
        "testDiff[24]",
        "removeAll[15]",
        "testScanWorksCorrectly[1]",
        "testAddAll[18]",
        "removeAll[27]",
        "testClear[0]",
        "testRemoveObject[20]",
        "testDiffAndStore[2]",
        "testIsEmpty[5]",
        "testToString[15]",
        "removeAll[9]",
        "testToString[27]",
        "testIntersect[25]",
        "testIntersect[13]",
        "removeAll[14]",
        "testDiff[13]",
        "testToArray[26]",
        "testToArray[14]",
        "testDiff[25]",
        "testContainsAll[0]",
        "testScanWorksCorrectly[2]",
        "testAddAll[19]",
        "removeAll[26]",
        "testToArrayWithGenerics[1]",
        "testContainsObject[1]",
        "testClear[3]",
        "testRemoveObject[8]",
        "testIntersect[10]",
        "testSize[20]",
        "testRemoveObject[21]",
        "testUnionAndStore[9]",
        "testContainsAll[30]",
        "testAdd[7]",
        "testContainsAll[1]",
        "testDiffAndStore[1]",
        "testDiff[22]",
        "testIsEmpty[2]",
        "removeAll[8]",
        "testDiff[10]",
        "testToString[18]",
        "testToArray[29]",
        "removeAll[13]",
        "testToArray[17]",
        "removeAll[25]",
        "testIntersect[22]",
        "testAddAll[28]",
        "testAddAll[16]",
        "testToArrayWithGenerics[19]",
        "testToArrayWithGenerics[0]",
        "testSize[21]",
        "testClear[2]",
        "testRemoveObject[9]",
        "testRemoveObject[10]",
        "testUnionAndStore[8]",
        "testRemoveObject[22]",
        "testAdd[8]",
        "testContainsObject[0]",
        "testContainsAll[2]",
        "testDiffAndStore[0]",
        "removeAll[7]",
        "testIsEmpty[3]",
        "testDiff[11]",
        "testToString[17]",
        "testDiff[23]",
        "testToString[29]",
        "testScanWorksCorrectly[0]",
        "removeAll[24]",
        "testToArray[28]",
        "testToArray[16]",
        "testIntersect[23]",
        "testIntersect[11]",
        "removeAll[12]",
        "testAddAll[17]",
        "testToArrayWithGenerics[18]",
        "testIterator[19]",
        "testAddAll[29]",
        "testEquals[0]",
        "testUnion[5]",
        "testHashCode[10]",
        "testGetKey[7]",
        "testIterator[7]",
        "testToArrayWithGenerics[3]",
        "testContainsAll[16]",
        "testContainsAll[3]",
        "removeAll[6]",
        "testContainsAll[28]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "testUnionAndStore[30]",
        "testHashCode[22]",
        "testUnion[4]",
        "testToArrayWithGenerics[2]",
        "testHashCode[21]",
        "testDiffAndStore[19]",
        "testGetKey[6]",
        "testIterator[8]",
        "testSize[0]",
        "removeAll[5]",
        "testContainsAll[15]",
        "testContainsAll[4]",
        "testContainsAll[27]",
        "testIterator[9]",
        "testIsEmpty[1]",
        "testToString[19]",
        "testHashCode[3]",
        "testEquals[2]",
        "testGetKey[5]",
        "testToArrayWithGenerics[5]",
        "testSize[1]",
        "testUnion[3]",
        "removeAll[4]",
        "testContainsAll[18]",
        "testContainsAll[5]",
        "testHashCode[4]",
        "testEquals[30]",
        "testHashCode[12]",
        "testHashCode[24]",
        "testUnionAndStore[20]",
        "testEquals[1]",
        "testGetKey[4]",
        "testSize[2]",
        "testUnion[2]",
        "testToArrayWithGenerics[4]",
        "testContainsAll[17]",
        "testContainsAll[6]",
        "testContainsAll[29]",
        "testHashCode[5]",
        "testHashCode[11]",
        "testHashCode[23]",
        "removeAll[3]",
        "testDiffAndStore[28]",
        "testDiffAndStore[16]",
        "testAdd[1]",
        "testEquals[4]",
        "testContainsObject[7]",
        "testToArrayWithGenerics[7]",
        "testSize[3]",
        "testUnion[1]",
        "testIterator[3]",
        "testContainsAll[12]",
        "testUnionAndStore[3]",
        "testContainsAll[24]",
        "testHashCode[6]",
        "testContainsAll[7]",
        "testHashCode[26]",
        "removeAll[2]",
        "testHashCode[14]",
        "testEquals[3]",
        "testDiffAndStore[15]",
        "testDiffAndStore[27]",
        "testContainsObject[6]",
        "testSize[4]",
        "testAdd[2]",
        "testUnion[0]",
        "testToArrayWithGenerics[6]",
        "testContainsAll[11]",
        "testUnionAndStore[2]",
        "testContainsAll[23]",
        "testIterator[4]",
        "testUnionAndStore[1]",
        "testHashCode[7]",
        "testContainsAll[8]",
        "removeAll[1]",
        "testDiffAndStore[14]",
        "testToString[0]",
        "testHashCode[13]",
        "testHashCode[25]",
        "testDiffAndStore[18]",
        "testGetKey[9]",
        "testEquals[6]",
        "testIterator[5]",
        "testToArrayWithGenerics[9]",
        "testSize[5]",
        "testContainsAll[9]",
        "testUnionAndStore[0]",
        "testContainsAll[14]",
        "testContainsAll[26]",
        "testHashCode[8]",
        "testContainsObject[9]",
        "testHashCode[16]",
        "testHashCode[28]",
        "testIntersect[18]",
        "removeAll[0]",
        "testDiff[18]",
        "testDiffAndStore[17]",
        "testDiffAndStore[29]",
        "testEquals[5]",
        "testAdd[0]",
        "testGetKey[8]",
        "testContainsObject[8]",
        "testIterator[6]",
        "testToArrayWithGenerics[8]",
        "testDiffAndStore[9]",
        "testContainsAll[13]",
        "testContainsAll[25]",
        "testHashCode[9]",
        "testIntersect[19]",
        "testSize[6]",
        "testHashCode[15]",
        "testHashCode[27]",
        "testDiff[19]",
        "testAddAll[30]",
        "testIterator[21]",
        "testToArrayWithGenerics[21]",
        "testDiff[7]",
        "testRemoveObject[19]",
        "testUnionAndStore[26]",
        "testUnionAndStore[14]",
        "testToString[3]",
        "testSize[7]",
        "testGetKey[22]",
        "testToArray[5]",
        "testEquals[8]",
        "testGetKey[10]",
        "testAddAll[6]",
        "testSize[18]",
        "testEquals[12]",
        "testDiffAndStore[11]",
        "testEquals[24]",
        "testDiffAndStore[23]",
        "testIterator[20]",
        "testAddAll[7]",
        "testToArrayWithGenerics[20]",
        "testEquals[7]",
        "testDiff[8]",
        "testToString[4]",
        "testUnionAndStore[25]",
        "testUnionAndStore[13]",
        "testSize[8]",
        "testToArray[4]",
        "testIsEmpty[20]",
        "testDiffAndStore[10]",
        "testGetKey[21]",
        "testEquals[13]",
        "testDiffAndStore[22]",
        "testSize[19]",
        "testEquals[25]",
        "testEquals[26]",
        "testUnion[30]",
        "testDiffAndStore[26]",
        "testDiff[9]",
        "testUnionAndStore[16]",
        "testSize[9]",
        "testUnionAndStore[28]",
        "testGetKey[12]",
        "testToArray[7]",
        "testDiffAndStore[13]",
        "testToString[1]",
        "testDiffAndStore[25]",
        "testAddAll[4]",
        "testGetKey[24]",
        "testEquals[14]",
        "testEquals[15]",
        "testIterator[30]",
        "testEquals[27]",
        "testToArrayWithGenerics[30]",
        "testUnionAndStore[27]",
        "testUnionAndStore[15]",
        "testToArray[6]",
        "testEquals[9]",
        "testGetKey[11]",
        "testGetKey[23]",
        "testIsEmpty[30]",
        "testToString[2]",
        "testDiffAndStore[24]",
        "testAddAll[5]",
        "testDiffAndStore[12]",
        "testIntersect[9]",
        "testHashCode[30]",
        "testUnion[20]",
        "testUnion[9]",
        "testGetKey[3]",
        "testDiff[3]",
        "testToString[7]",
        "testAddAll[2]",
        "testEquals[20]",
        "testToArray[9]",
        "testUnionAndStore[22]",
        "testUnionAndStore[10]",
        "testIsEmpty[11]",
        "testIsEmpty[23]",
        "testUnion[21]",
        "testUnion[8]",
        "testGetKey[2]",
        "testDiff[4]",
        "testAdd[30]",
        "testContainsAll[19]",
        "testToString[8]",
        "testScanWorksCorrectly[19]",
        "testToArray[8]",
        "testEquals[21]",
        "testDiffAndStore[30]",
        "testUnion[22]",
        "testIsEmpty[24]",
        "testUnionAndStore[21]",
        "testAddAll[3]",
        "testIsEmpty[12]",
        "testHashCode[20]",
        "testUnion[7]",
        "testUnion[10]",
        "testGetKey[1]",
        "testDiff[5]",
        "testToString[5]",
        "testClear[20]",
        "testUnionAndStore[24]",
        "testAdd[21]",
        "testDiffAndStore[21]",
        "testIsEmpty[21]",
        "testHashCode[0]",
        "testAddAll[0]",
        "testGetKey[20]",
        "testEquals[10]",
        "testUnion[11]",
        "testUnionAndStore[12]",
        "testEquals[22]",
        "testUnion[23]",
        "testContainsObject[30]",
        "testUnion[6]",
        "testGetKey[30]",
        "testDiff[6]",
        "testClear[30]",
        "testGetKey[0]",
        "testToString[6]",
        "testAdd[20]",
        "testDiffAndStore[20]",
        "testAddAll[1]",
        "testIsEmpty[10]",
        "testHashCode[1]",
        "testEquals[11]",
        "testUnionAndStore[23]",
        "testUnionAndStore[11]",
        "testUnion[12]",
        "testEquals[23]",
        "testIsEmpty[22]",
        "testUnion[24]",
        "testRemoveObject[6]",
        "testIsEmpty[15]",
        "testAddAll[26]",
        "testAddAll[14]",
        "testIsEmpty[27]",
        "testSize[10]",
        "testIntersect[5]",
        "removeAll[10]",
        "testIntersect[20]",
        "testSize[22]",
        "testRemoveObject[11]",
        "testScanWorksCorrectly[27]",
        "testRemoveObject[23]",
        "testScanWorksCorrectly[15]",
        "testClear[22]",
        "testClear[10]",
        "testGetKey[18]",
        "testAdd[11]",
        "testAdd[23]",
        "testDiff[20]",
        "removeAll[11]",
        "removeAll[23]",
        "testToArrayWithGenerics[17]",
        "testToArray[23]",
        "testToArray[11]",
        "testUnion[13]",
        "testIterator[18]",
        "testContainsObject[20]",
        "testUnion[25]",
        "testToArrayWithGenerics[29]",
        "testIsEmpty[28]",
        "testAddAll[15]",
        "testRemoveObject[7]",
        "testIsEmpty[16]",
        "testIntersect[21]",
        "removeAll[21]",
        "testIntersect[6]",
        "testSize[23]",
        "testSize[11]",
        "testRemoveObject[12]",
        "testScanWorksCorrectly[14]",
        "testRemoveObject[24]",
        "testScanWorksCorrectly[26]",
        "testGetKey[17]",
        "testClear[21]",
        "testDiff[0]",
        "testGetKey[29]",
        "testAdd[22]",
        "testAdd[10]",
        "testDiff[21]",
        "testContainsObject[21]",
        "testUnion[26]",
        "testIterator[17]",
        "removeAll[22]",
        "testToArrayWithGenerics[28]",
        "testToArrayWithGenerics[16]",
        "testAddAll[27]",
        "testToArray[22]",
        "testIterator[29]",
        "testToArray[10]",
        "testUnion[14]",
        "testRemoveObject[4]",
        "testAddAll[24]",
        "testAddAll[12]",
        "testSize[24]",
        "removeAll[20]",
        "testSize[12]",
        "testIntersect[30]",
        "testIntersect[7]",
        "testScanWorksCorrectly[17]",
        "testAdd[13]",
        "testRemoveObject[13]",
        "testAdd[25]",
        "testRemoveObject[25]",
        "testClear[12]",
        "testDiff[30]",
        "testDiff[1]",
        "testToString[9]",
        "testScanWorksCorrectly[18]",
        "testClear[24]",
        "testContainsObject[10]",
        "testUnion[15]",
        "testIterator[16]",
        "testContainsObject[22]",
        "testUnion[27]",
        "testIterator[28]",
        "testToArrayWithGenerics[15]",
        "testToArray[25]",
        "testToArray[13]",
        "testIsEmpty[13]",
        "testIsEmpty[25]",
        "testToArrayWithGenerics[27]",
        "testIntersect[8]",
        "testAddAll[13]",
        "testSize[25]",
        "testRemoveObject[5]",
        "testSize[13]",
        "testIsEmpty[26]",
        "testAddAll[25]",
        "testScanWorksCorrectly[16]",
        "testScanWorksCorrectly[28]",
        "testAdd[24]",
        "testRemoveObject[14]",
        "testRemoveObject[26]",
        "testDiff[2]",
        "testGetKey[19]",
        "testClear[23]",
        "testClear[11]",
        "testAdd[12]",
        "testScanWorksCorrectly[29]",
        "testIterator[27]",
        "testContainsObject[11]",
        "testUnion[16]",
        "testContainsObject[23]",
        "testToArrayWithGenerics[26]",
        "testUnion[28]",
        "testToArrayWithGenerics[14]",
        "testIterator[15]",
        "testToArray[24]",
        "testToArray[12]",
        "testIsEmpty[14]",
        "testSize[14]",
        "testEquals[16]",
        "testEquals[28]",
        "testSize[26]",
        "testIterator[13]",
        "testIsEmpty[19]",
        "testAddAll[22]",
        "testAddAll[10]",
        "removeAll[30]",
        "testAdd[15]",
        "testIntersect[1]",
        "testAdd[27]",
        "testClear[9]",
        "testRemoveObject[15]",
        "testScanWorksCorrectly[23]",
        "testRemoveObject[27]",
        "testScanWorksCorrectly[11]",
        "testToArray[1]",
        "testClear[26]",
        "testClear[14]",
        "testUnionAndStore[18]",
        "testToArrayWithGenerics[13]",
        "testContainsObject[12]",
        "testIterator[14]",
        "testUnion[17]",
        "testContainsObject[24]",
        "testToArrayWithGenerics[25]",
        "testIterator[26]",
        "testUnion[29]",
        "testGetKey[26]",
        "testRemoveObject[2]",
        "testGetKey[14]",
        "testAddAll[23]",
        "testToArray[30]",
        "testEquals[17]",
        "testSize[27]",
        "testSize[15]",
        "testEquals[29]",
        "testIterator[12]",
        "testContainsObject[25]",
        "testIterator[24]",
        "testAddAll[11]",
        "testAdd[26]",
        "testIntersect[2]",
        "testClear[8]",
        "testAdd[14]",
        "testRemoveObject[16]",
        "testToString[30]",
        "testScanWorksCorrectly[10]",
        "testRemoveObject[28]",
        "testScanWorksCorrectly[22]",
        "testToArray[0]",
        "testClear[25]",
        "testUnionAndStore[29]",
        "testClear[13]",
        "testUnionAndStore[17]",
        "testToArrayWithGenerics[24]",
        "testToArrayWithGenerics[12]",
        "testIterator[25]",
        "testContainsObject[13]",
        "testUnion[18]",
        "testGetKey[13]",
        "testRemoveObject[3]",
        "testGetKey[25]",
        "testScanWorksCorrectly[8]",
        "testIsEmpty[17]",
        "testIsEmpty[29]",
        "testAddAll[8]",
        "testSize[16]",
        "testEquals[18]",
        "testContainsObject[14]",
        "testAddAll[20]",
        "testIterator[23]",
        "testContainsObject[26]",
        "testToArrayWithGenerics[11]",
        "testIterator[11]",
        "testScanWorksCorrectly[25]",
        "testIntersect[3]",
        "testScanWorksCorrectly[13]",
        "testAdd[17]",
        "testRemoveObject[17]",
        "testToString[21]",
        "testAdd[29]",
        "testRemoveObject[29]",
        "testGetKey[28]",
        "testClear[16]",
        "testUnion[19]",
        "testToArray[3]",
        "testToArrayWithGenerics[23]",
        "testClear[28]",
        "testRemoveObject[0]",
        "testGetKey[16]",
        "testSize[28]",
        "testToArray[21]",
        "testToArray[20]",
        "testAddAll[9]",
        "testIsEmpty[18]",
        "testIntersect[4]",
        "testEquals[19]",
        "testContainsObject[15]",
        "testIterator[10]",
        "testToArrayWithGenerics[22]",
        "testContainsObject[27]",
        "testScanWorksCorrectly[9]",
        "testToArrayWithGenerics[10]",
        "testAddAll[21]",
        "testIterator[22]",
        "testAdd[16]",
        "testScanWorksCorrectly[12]",
        "testToString[20]",
        "testScanWorksCorrectly[24]",
        "testAdd[28]",
        "testRemoveObject[18]",
        "testToArray[2]",
        "testClear[27]",
        "testClear[15]",
        "testUnionAndStore[19]",
        "testGetKey[15]",
        "testSize[29]",
        "testRemoveObject[1]",
        "testSize[17]",
        "testGetKey[27]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 682
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldReadBackExplicitTimeToLive[1]",
        "partialUpdate[0]",
        "partialUpdateSimpleTypedList[1]",
        "shouldReadBackExplicitTimeToLiveToPrimitiveField[0]",
        "partialUpdateObjectType[0]",
        "partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[0]",
        "shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[0]",
        "updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[1]",
        "partialUpdateComplexTypedMap[1]",
        "partialUpdateSimpleType[1]",
        "findProcessesCallbackReturningSingleIdCorrectly[0]",
        "partialUpdateSimpleTypedMap[1]",
        "findProcessesCallbackReturningNullCorrectly[1]",
        "savesObjectCorrectly[0]",
        "partialUpdateComplexType[0]",
        "partialUpdateObjectTypedList[1]",
        "partialUpdateObjectTypedMap[0]",
        "shouldReadBackExplicitTimeToLiveWhenFetchingList[1]",
        "findProcessesCallbackReturningMultipleIdsCorrectly[0]",
        "partialUpdateComplexTypedList[0]",
        "partialUpdateSimpleTypedList[0]",
        "findProcessesCallbackReturningMultipleIdsCorrectly[1]",
        "shouldReadBackExplicitTimeToLiveWhenFetchingList[0]",
        "partialUpdate[1]",
        "partialUpdateObjectType[1]",
        "partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[1]",
        "shouldReadBackExplicitTimeToLiveToPrimitiveField[1]",
        "updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[0]",
        "shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[1]",
        "partialUpdateComplexTypedMap[0]",
        "findProcessesCallbackReturningSingleIdCorrectly[1]",
        "partialUpdateSimpleTypedMap[0]",
        "partialUpdateSimpleType[0]",
        "findProcessesCallbackReturningNullCorrectly[0]",
        "savesObjectCorrectly[1]",
        "partialUpdateComplexType[1]",
        "partialUpdateObjectTypedList[0]",
        "partialUpdateObjectTypedMap[1]",
        "shouldReadBackExplicitTimeToLive[0]",
        "partialUpdateComplexTypedList[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 80
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDecrementAndGet[3]",
        "testGetAndDecrement[1]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "testGetAndIncrement[0]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "testGetAndAdd[3]",
        "testCheckAndSet[1]",
        "testGetAndSet[1]",
        "testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[2]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "testIncrementAndGet[0]",
        "testGetExistingValue[2]",
        "testAddAndGet[3]",
        "testDecrementAndGet[2]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "testGetAndAdd[0]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "testGetAndDecrement[0]",
        "testGetAndIncrement[3]",
        "testCheckAndSet[2]",
        "testGetAndSet[0]",
        "testIncrementAndGet[3]",
        "testAddAndGet[0]",
        "testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[3]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "testGetExistingValue[1]",
        "testDecrementAndGet[1]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "testGetAndAdd[1]",
        "testGetAndDecrement[3]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "testCheckAndSet[3]",
        "testGetAndIncrement[2]",
        "testAddAndGet[1]",
        "testIncrementAndGet[2]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[0]",
        "testGetExistingValue[0]",
        "testGetAndSet[3]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "testGetAndAdd[2]",
        "testGetAndDecrement[2]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "testCheckAndSet[0]",
        "testDecrementAndGet[0]",
        "testGetAndIncrement[1]",
        "testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[1]",
        "testAddAndGet[2]",
        "testIncrementAndGet[1]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "testGetExistingValue[3]",
        "testGetAndSet[2]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 56
    },
    {
      "className": "org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests",
      "failingMethods": [],
      "erroringMethods": [
        "testConnect"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
      "failingMethods": [],
      "erroringMethods": [
        "testGet[17]",
        "testKeySet[10]",
        "testReplaceNullOldValue[15]",
        "testPropertiesList[12]",
        "testRemove[0]",
        "testConcurrentReplaceOneArg[2]",
        "testConcurrentReplaceOneArg[14]",
        "testPut[19]",
        "testContainsKey[21]",
        "testGetPropertyDefault[27]",
        "testClear[18]",
        "testSetProperty[31]",
        "testHashCode[18]",
        "testReplaceNullValue[16]",
        "testGetProperty[26]",
        "testGet[18]",
        "testIncrementNotNumber[26]",
        "testGet[16]",
        "testPropertiesList[13]",
        "testSetProperty[9]",
        "testReplaceNullOldValue[16]",
        "testConcurrentReplaceOneArg[1]",
        "testRemove[1]",
        "testKeySet[11]",
        "testConcurrentReplaceOneArg[15]",
        "testContainsKey[22]",
        "testGetProperty[25]",
        "testGetPropertyDefault[26]",
        "testSetProperty[30]",
        "testHashCode[17]",
        "testClear[17]",
        "testReplaceNullValue[15]",
        "testIncrementNotNumber[27]",
        "testIncrementNotNumber[23]",
        "testSetProperty[8]",
        "testPropertiesList[10]",
        "testReplaceNullNewValue[20]",
        "testConcurrentReplaceOneArg[12]",
        "testKeySet[12]",
        "testContainsKey[23]",
        "testConcurrentReplaceOneArg[4]",
        "testScanWorksCorrectly[21]",
        "testGetPropertyDefault[29]",
        "testReplaceNullOldValue[17]",
        "testReplaceNullValue[18]",
        "testIncrementNotNumber[24]",
        "testGetProperty[28]",
        "testScanWorksCorrectly[20]",
        "testSetProperty[7]",
        "testPropertiesList[11]",
        "testKeySet[13]",
        "testReplaceNullNewValue[21]",
        "testEntrySet[20]",
        "testContainsKey[24]",
        "testConcurrentReplaceOneArg[3]",
        "testConcurrentReplaceOneArg[13]",
        "testHashCode[19]",
        "testGetPropertyDefault[28]",
        "testClear[19]",
        "testReplaceNullOldValue[18]",
        "testReplaceNullValue[17]",
        "testIncrementNotNumber[25]",
        "testGetProperty[27]",
        "testGet[19]",
        "testConcurrentReplaceOneArg[18]",
        "testPropertiesList[16]",
        "testKeySet[14]",
        "testConcurrentRemove[31]",
        "testRemove[4]",
        "testPropertiesList[9]",
        "testSetProperty[11]",
        "testConcurrentReplaceTwoArgs[18]",
        "testReplaceNullOldValue[19]",
        "testPut[15]",
        "testPropertiesList[17]",
        "testValues[0]",
        "testConcurrentReplaceOneArg[19]",
        "testKeySet[15]",
        "testRemove[5]",
        "testConcurrentReplaceTwoArgs[19]",
        "testReplaceNullValue[19]",
        "testSetProperty[10]",
        "testPut[16]",
        "testGetProperty[29]",
        "testPropertiesList[18]",
        "testPropertiesList[14]",
        "testSize[20]",
        "testConcurrentReplaceOneArg[0]",
        "testRemove[2]",
        "testDefaultInit[28]",
        "testConcurrentReplaceTwoArgs[0]",
        "testConcurrentReplaceOneArg[16]",
        "testKeySet[16]",
        "testPropertiesList[7]",
        "testIncrementNotNumber[28]",
        "testPut[17]",
        "testPropertiesList[15]",
        "testConcurrentReplaceOneArg[17]",
        "testSize[21]",
        "testConcurrentReplaceTwoArgs[1]",
        "testKeySet[17]",
        "testDefaultInit[29]",
        "testConcurrentRemove[30]",
        "testContainsKey[20]",
        "testRemove[3]",
        "testPropertiesList[8]",
        "testIncrementNotNumber[29]",
        "testPut[18]",
        "testPutIfAbsent[22]",
        "testPropertiesSave[23]",
        "testHashCode[10]",
        "testValues[3]",
        "testGetKey[7]",
        "testPut[10]",
        "testGetOperations[3]",
        "testContainsKey[29]",
        "testConcurrentReplaceTwoArgs[2]",
        "testKeySet[18]",
        "testStringPropertyNames[30]",
        "testRemoveNullValue[19]",
        "testRemove[8]",
        "testReplaceNullOldValue[6]",
        "testConcurrentRemove[11]",
        "testGet[7]",
        "testPut[11]",
        "testGetOperations[30]",
        "testStringPropertyNames[4]",
        "testIncrement[2]",
        "testNotEquals[11]",
        "testPropertiesSave[24]",
        "testPutIfAbsent[23]",
        "testConcurrentReplaceTwoArgs[3]",
        "testValues[4]",
        "testGetKey[6]",
        "testConcurrentReplaceOneArg[31]",
        "testGetOperations[2]",
        "testStringPropertyNames[31]",
        "testGet[6]",
        "testReplaceNullOldValue[7]",
        "testRemove[9]",
        "testConcurrentRemove[12]",
        "testKeySet[19]",
        "testReplaceNullValue[31]",
        "testConcurrentReplaceOneArg[30]",
        "testIncrement[1]",
        "testNotEquals[12]",
        "testPut[12]",
        "testGetOperations[31]",
        "testStringPropertyNames[5]",
        "testConcurrentReplaceTwoArgs[4]",
        "testPutIfAbsent[20]",
        "testPropertiesSave[25]",
        "testNotEquals[14]",
        "testValues[1]",
        "testGetKey[5]",
        "testGetOperations[5]",
        "testReplaceNullOldValue[8]",
        "testReplaceNullValue[10]",
        "testGet[9]",
        "testRemove[6]",
        "testGetProperty[20]",
        "testIncrement[0]",
        "testNotEquals[13]",
        "testGetPropertyDefault[21]",
        "testEquals[30]",
        "testPut[13]",
        "testStringPropertyNames[2]",
        "testPropertiesList[19]",
        "testHashCode[12]",
        "testConcurrentReplaceTwoArgs[5]",
        "testPropertiesSave[26]",
        "testPutIfAbsent[21]",
        "testValues[2]",
        "testNotEquals[15]",
        "testGetOperations[4]",
        "testGetKey[4]",
        "testConcurrentRemove[10]",
        "testRemove[7]",
        "testReplaceNullOldValue[9]",
        "testGet[8]",
        "testStringPropertyNames[3]",
        "testEquals[31]",
        "testPut[14]",
        "testHashCode[11]",
        "testPropertiesSave[27]",
        "testGetPropertyDefault[20]",
        "testConcurrentReplaceTwoArgs[6]",
        "testPutAll[19]",
        "testNotEquals[16]",
        "testPutIfAbsent[26]",
        "testPut[30]",
        "testConcurrentReplaceOneArg[10]",
        "testStringPropertyNames[10]",
        "testIncrementDouble[30]",
        "testGet[2]",
        "testReplaceNullOldValue[2]",
        "testContainsKey[25]",
        "testReplaceNullValue[12]",
        "testGetProperty[22]",
        "testValues[31]",
        "testConcurrentRemove[15]",
        "testValues[7]",
        "testGetPropertyDefault[23]",
        "testStringPropertyNames[8]",
        "testHashCode[14]",
        "testPutAll[18]",
        "testStringPropertyNames[9]",
        "testPropertiesSave[20]",
        "testNotEquals[17]",
        "testPutIfAbsent[27]",
        "testPut[31]",
        "testConcurrentReplaceTwoArgs[7]",
        "testIncrementDouble[31]",
        "testStringPropertyNames[11]",
        "testConcurrentReplaceOneArg[11]",
        "testGet[1]",
        "testContainsKey[26]",
        "testReplaceNullOldValue[3]",
        "testReplaceNullValue[11]",
        "testGetProperty[21]",
        "testConcurrentRemove[16]",
        "testValues[8]",
        "testGetPropertyDefault[22]",
        "testHashCode[13]",
        "testPutAll[17]",
        "testNotEquals[18]",
        "testGetKey[9]",
        "testContainsValue[19]",
        "testConcurrentReplaceTwoArgs[8]",
        "testPutIfAbsent[24]",
        "testPropertiesSave[21]",
        "testContainsKey[27]",
        "testGetOperations[1]",
        "testReplaceNullOldValue[4]",
        "testGet[4]",
        "testConcurrentRemove[13]",
        "testGet[5]",
        "testGetProperty[24]",
        "testGetProperty[0]",
        "testGetPropertyDefault[25]",
        "testHashCode[16]",
        "testValues[5]",
        "testPropertiesLoad[30]",
        "testStringPropertyNames[6]",
        "testReplaceNullValue[14]",
        "testPropertiesLoad[31]",
        "testNotEquals[19]",
        "testGetOperations[0]",
        "testGetKey[8]",
        "testConcurrentReplaceTwoArgs[9]",
        "testPropertiesSave[22]",
        "testPutIfAbsent[25]",
        "testContainsKey[28]",
        "testReplaceNullOldValue[5]",
        "testGet[3]",
        "testReplaceNullValue[13]",
        "testGetProperty[23]",
        "testValues[30]",
        "testConcurrentRemove[14]",
        "testGetProperty[1]",
        "testHashCode[15]",
        "testValues[6]",
        "testGetPropertyDefault[24]",
        "testStringPropertyNames[7]",
        "testPropertiesLoad[20]",
        "testGetOperations[26]",
        "testContainsValue[29]",
        "testIncrementDouble[10]",
        "testIncrement[19]",
        "testRemoveNullValue[23]",
        "testGetProperty[2]",
        "testSize[7]",
        "testPutIfAbsent[7]",
        "testPropertyNames[20]",
        "testStringPropertyNames[26]",
        "testRemove[13]",
        "testIsEmpty[31]",
        "testEquals[8]",
        "testGetKey[10]",
        "testEquals[12]",
        "testPutAll[14]",
        "testNotEquals[1]",
        "testValues[11]",
        "testGetOperations[27]",
        "testPropertiesLoad[21]",
        "testEquals[7]",
        "testIncrementDouble[11]",
        "testConcurrentReplaceTwoArgs[30]",
        "testNotEquals[0]",
        "testDefaultInit[30]",
        "testSize[8]",
        "testPutIfAbsent[8]",
        "testStringPropertyNames[27]",
        "testGetProperty[3]",
        "testRemoveNullValue[24]",
        "testRemove[12]",
        "testPutAll[13]",
        "testIncrement[18]",
        "testValues[12]",
        "testEquals[13]",
        "testPropertiesLoad[22]",
        "testContainsValue[27]",
        "testReplaceNullOldValue[0]",
        "testPutIfAbsent[5]",
        "testStringPropertyNames[24]",
        "testConcurrentReplaceTwoArgs[31]",
        "testRemoveNullValue[25]",
        "testGetProperty[4]",
        "testPropertyNames[22]",
        "testReplaceNullValue[2]",
        "testSize[9]",
        "testConcurrentRemove[29]",
        "testRemove[11]",
        "testIncrementDouble[12]",
        "testGetKey[12]",
        "testIncrement[17]",
        "testPutIfAbsent[28]",
        "testGetOperations[24]",
        "testEquals[14]",
        "testPutAll[16]",
        "testEquals[15]",
        "testPropertiesLoad[23]",
        "testGetOperations[25]",
        "testContainsValue[28]",
        "testKeySet[0]",
        "testReplaceNullOldValue[1]",
        "testReplaceNullValue[0]",
        "testGetProperty[5]",
        "testRemoveNullValue[26]",
        "testReplaceNullValue[1]",
        "testPutIfAbsent[6]",
        "testIncrementDouble[13]",
        "testPropertyNames[21]",
        "testStringPropertyNames[25]",
        "testRemove[10]",
        "testEquals[9]",
        "testGetKey[11]",
        "testIncrement[16]",
        "testPutIfAbsent[29]",
        "testIsEmpty[30]",
        "testPutAll[15]",
        "testValues[10]",
        "testContainsValue[25]",
        "testReplaceNullNewValue[18]",
        "testPropertiesLoad[24]",
        "testContainsValue[1]",
        "testPutIfAbsent[3]",
        "testGetOperations[7]",
        "testPropertiesSave[9]",
        "testRemoveNullValue[27]",
        "testGetProperty[6]",
        "testPropertyNames[24]",
        "testStringPropertyNames[0]",
        "testIncrementDouble[14]",
        "testReplaceNullValue[4]",
        "testEntrySet[18]",
        "testPutAll[10]",
        "testValues[15]",
        "testPropertiesSave[28]",
        "testIsEmpty[11]",
        "testContainsValue[24]",
        "testGetOperations[22]",
        "testContainsValue[26]",
        "testReplaceNullNewValue[19]",
        "testContainsValue[2]",
        "testPropertiesLoad[25]",
        "testPutIfAbsent[4]",
        "testGetOperations[6]",
        "testPropertyNames[23]",
        "testGetProperty[7]",
        "testRemoveNullValue[28]",
        "testIncrementDouble[15]",
        "testReplaceNullValue[3]",
        "testEntrySet[19]",
        "testScanWorksCorrectly[19]",
        "testValues[16]",
        "testStringPropertyNames[1]",
        "testGetOperations[23]",
        "testNotEquals[20]",
        "testIsEmpty[12]",
        "testPropertiesSave[29]",
        "testHashCode[20]",
        "testPropertiesLoad[26]",
        "testPropertyNames[27]",
        "testRemoveNullValue[29]",
        "testPutIfAbsent[1]",
        "testReplaceNullValue[6]",
        "testGetOperations[9]",
        "testIncrementDouble[16]",
        "testClear[20]",
        "testRemove[31]",
        "testStringPropertyNames[28]",
        "testGetOperations[20]",
        "testNotEquals[21]",
        "testEquals[10]",
        "testPutAll[12]",
        "testContainsValue[22]",
        "testGetProperty[8]",
        "testValues[13]",
        "testPropertiesLoad[27]",
        "testGetKey[30]",
        "testContainsValue[0]",
        "testPutIfAbsent[2]",
        "testGetOperations[8]",
        "testPropertyNames[26]",
        "testReplaceNullValue[5]",
        "testIncrementDouble[17]",
        "testPropertyNames[25]",
        "testStringPropertyNames[29]",
        "testRemove[30]",
        "testPutAll[11]",
        "testIsEmpty[10]",
        "testValues[14]",
        "testGetKey[31]",
        "testNotEquals[22]",
        "testGetProperty[9]",
        "testEquals[11]",
        "testGetOperations[21]",
        "testContainsValue[23]",
        "testIsEmpty[15]",
        "testContainsValue[5]",
        "testIncrement[10]",
        "testGet[21]",
        "testValues[19]",
        "testSize[22]",
        "testEntrySet[13]",
        "testDefaultInit[14]",
        "testPropertiesLoad[28]",
        "testScanWorksCorrectly[15]",
        "testIncrementDouble[8]",
        "testPropertyNames[29]",
        "testReplaceNullNewValue[14]",
        "testSetProperty[15]",
        "testIncrementDouble[18]",
        "testClear[22]",
        "testPropertiesSave[4]",
        "testConcurrentReplaceTwoArgs[14]",
        "testReplaceNullValue[8]",
        "testGetKey[18]",
        "testPutAll[30]",
        "testContainsValue[20]",
        "testKeySet[5]",
        "testIncrement[11]",
        "testSetProperty[1]",
        "testContainsValue[6]",
        "testReplaceNullOldValue[20]",
        "testConcurrentReplaceOneArg[9]",
        "testIsEmpty[16]",
        "testSize[23]",
        "testGet[20]",
        "testScanWorksCorrectly[14]",
        "testDefaultInit[15]",
        "testEntrySet[14]",
        "testPropertiesLoad[29]",
        "testIncrementDouble[9]",
        "testReplaceNullNewValue[15]",
        "testPropertyNames[28]",
        "testIncrementDouble[19]",
        "testPropertiesSave[5]",
        "testReplaceNullValue[7]",
        "testGetKey[17]",
        "testClear[21]",
        "testConcurrentReplaceTwoArgs[15]",
        "testSetProperty[14]",
        "testKeySet[6]",
        "testSetProperty[0]",
        "testContainsValue[21]",
        "testReplaceNullNewValue[16]",
        "testSize[24]",
        "testReplaceNullOldValue[21]",
        "testGet[23]",
        "testContainsValue[3]",
        "testScanWorksCorrectly[17]",
        "testEntrySet[15]",
        "testIncrementDouble[6]",
        "testPropertiesSave[7]",
        "testPropertiesSave[6]",
        "testConcurrentReplaceTwoArgs[16]",
        "testEntrySet[16]",
        "testDefaultInit[11]",
        "testSetProperty[13]",
        "testScanWorksCorrectly[18]",
        "testClear[24]",
        "testKeySet[7]",
        "testValues[17]",
        "testIsEmpty[13]",
        "testRemove[19]",
        "testReplaceNullNewValue[17]",
        "testReplaceNullOldValue[22]",
        "testSize[25]",
        "testIncrement[31]",
        "testContainsValue[4]",
        "testValues[18]",
        "testGet[22]",
        "testDefaultInit[13]",
        "testScanWorksCorrectly[16]",
        "testIncrementDouble[7]",
        "testPropertiesSave[8]",
        "testGetKey[19]",
        "testClear[23]",
        "testEntrySet[17]",
        "testSetProperty[12]",
        "testConcurrentReplaceTwoArgs[17]",
        "testPutAll[31]",
        "testDefaultInit[12]",
        "testReplaceNullValue[9]",
        "testIsEmpty[14]",
        "testKeySet[8]",
        "testRemove[18]",
        "testConcurrentReplaceOneArg[6]",
        "testIncrementNotNumber[21]",
        "testEquals[16]",
        "testReplaceNullOldValue[23]",
        "testSetProperty[6]",
        "testGet[25]",
        "testSize[26]",
        "testIsEmpty[19]",
        "testPropertiesList[20]",
        "testKeySet[30]",
        "testKeySet[1]",
        "testIncrementDouble[4]",
        "testReplaceNullNewValue[10]",
        "testScanWorksCorrectly[11]",
        "testClear[26]",
        "testPropertiesSave[0]",
        "testIncrement[15]",
        "testRemove[17]",
        "testGetKey[14]",
        "testSetProperty[5]",
        "testEntrySet[9]",
        "testEquals[17]",
        "testSize[27]",
        "testIncrementNotNumber[22]",
        "testKeySet[2]",
        "testGet[24]",
        "testKeySet[31]",
        "testReplaceNullOldValue[24]",
        "testPropertiesList[21]",
        "testIncrementDouble[5]",
        "testReplaceNullNewValue[11]",
        "testSetProperty[19]",
        "testScanWorksCorrectly[10]",
        "testConcurrentReplaceTwoArgs[10]",
        "testConcurrentReplaceOneArg[5]",
        "testEntrySet[10]",
        "testSetProperty[18]",
        "testPropertiesSave[1]",
        "testDefaultInit[10]",
        "testClear[25]",
        "testRemoveNullValue[20]",
        "testRemove[16]",
        "testGetKey[13]",
        "testIncrement[14]",
        "testSetProperty[4]",
        "testScanWorksCorrectly[8]",
        "testIsEmpty[17]",
        "testGet[27]",
        "testContainsValue[7]",
        "testGetOperations[28]",
        "testEntrySet[8]",
        "testConcurrentReplaceOneArg[8]",
        "testEquals[18]",
        "testKeySet[3]",
        "testIncrementDouble[2]",
        "testReplaceNullOldValue[25]",
        "testReplaceNullNewValue[12]",
        "testScanWorksCorrectly[13]",
        "testEntrySet[11]",
        "testConcurrentReplaceTwoArgs[11]",
        "testConcurrentReplaceTwoArgs[12]",
        "testSetProperty[17]",
        "testPropertiesSave[2]",
        "testRemoveNullValue[21]",
        "testDefaultInit[31]",
        "testPutIfAbsent[9]",
        "testRemove[15]",
        "testClear[28]",
        "testGetKey[16]",
        "testSize[28]",
        "testIncrement[13]",
        "testSetProperty[3]",
        "testContainsValue[8]",
        "testConcurrentReplaceOneArg[7]",
        "testIsEmpty[18]",
        "testIncrementNotNumber[20]",
        "testEntrySet[7]",
        "testGet[26]",
        "testEquals[19]",
        "testReplaceNullOldValue[26]",
        "testGetOperations[29]",
        "testScanWorksCorrectly[9]",
        "testIncrementDouble[3]",
        "testEntrySet[12]",
        "testScanWorksCorrectly[12]",
        "testReplaceNullNewValue[13]",
        "testConcurrentReplaceTwoArgs[13]",
        "testSetProperty[16]",
        "testPropertiesSave[3]",
        "testClear[27]",
        "testRemoveNullValue[22]",
        "testKeySet[4]",
        "testRemove[14]",
        "testEntrySet[6]",
        "testGetKey[15]",
        "testSize[29]",
        "testIncrement[12]",
        "testSetProperty[2]",
        "testContainsValue[9]",
        "testScanWorksCorrectly[31]",
        "testScanWorksCorrectly[6]",
        "testPropertiesList[24]",
        "testPut[3]",
        "testIncrementDouble[0]",
        "testReplaceNullOldValue[27]",
        "testClear[5]",
        "testReplaceNullNewValue[30]",
        "testDefaultInit[4]",
        "testKeySet[22]",
        "testIsEmpty[8]",
        "testConcurrentReplaceOneArg[26]",
        "testGetProperty[14]",
        "testGetPropertyDefault[15]",
        "testConcurrentRemove[5]",
        "testPropertiesLoad[1]",
        "testIncrementNotNumber[14]",
        "testReplaceNullValue[28]",
        "testEntrySet[5]",
        "testScanWorksCorrectly[30]",
        "testScanWorksCorrectly[7]",
        "testGet[28]",
        "testPut[2]",
        "testPropertiesList[25]",
        "testIncrementDouble[1]",
        "testClear[4]",
        "testDefaultInit[3]",
        "testReplaceNullNewValue[31]",
        "testKeySet[23]",
        "testEntrySet[30]",
        "testIsEmpty[9]",
        "testConcurrentReplaceOneArg[27]",
        "testContainsKey[10]",
        "testGetProperty[13]",
        "testGetPropertyDefault[14]",
        "testConcurrentRemove[4]",
        "testReplaceNullOldValue[28]",
        "testClear[29]",
        "testPropertiesLoad[2]",
        "testHashCode[29]",
        "testReplaceNullValue[27]",
        "testEntrySet[4]",
        "testGet[29]",
        "testIncrementNotNumber[15]",
        "testPut[1]",
        "testIncrementNotNumber[11]",
        "testPropertiesList[22]",
        "testClear[7]",
        "testDefaultInit[2]",
        "testKeySet[24]",
        "testEntrySet[31]",
        "testConcurrentReplaceOneArg[24]",
        "testIsEmpty[6]",
        "testContainsKey[11]",
        "testConcurrentRemove[3]",
        "testGetPropertyDefault[17]",
        "testPropertiesLoad[3]",
        "testReplaceNullOldValue[29]",
        "testGetProperty[16]",
        "testScanWorksCorrectly[3]",
        "testEntrySet[3]",
        "testPut[0]",
        "testIncrementNotNumber[12]",
        "testScanWorksCorrectly[5]",
        "testPropertiesList[23]",
        "testPropertiesSave[30]",
        "testDefaultInit[1]",
        "testKeySet[25]",
        "testClear[6]",
        "testConcurrentReplaceOneArg[25]",
        "testContainsKey[12]",
        "testIsEmpty[7]",
        "testConcurrentRemove[2]",
        "testGetPropertyDefault[16]",
        "testEntrySet[2]",
        "testPropertiesLoad[4]",
        "testReplaceNullValue[29]",
        "testScanWorksCorrectly[4]",
        "testIncrementNotNumber[13]",
        "testGetProperty[15]",
        "testIncrement[30]",
        "testClear[1]",
        "testDefaultInit[0]",
        "testSize[30]",
        "testContainsKey[8]",
        "testReplaceNullNewValue[8]",
        "testDefaultInit[18]",
        "testPutIfAbsent[30]",
        "testKeySet[26]",
        "testGetPropertyDefault[19]",
        "testIsEmpty[4]",
        "testSetProperty[23]",
        "testPropertiesLoad[5]",
        "testIncrementNotNumber[18]",
        "testEntrySet[1]",
        "testConcurrentRemove[9]",
        "testPut[27]",
        "testGetProperty[18]",
        "testScanWorksCorrectly[1]",
        "testKeySet[9]",
        "testPropertiesList[29]",
        "testPutIfAbsent[31]",
        "testClear[0]",
        "testSize[31]",
        "testContainsKey[7]",
        "testConcurrentRemove[20]",
        "testReplaceNullNewValue[9]",
        "testDefaultInit[19]",
        "testKeySet[27]",
        "testGetPropertyDefault[18]",
        "testContainsKey[30]",
        "testIsEmpty[5]",
        "testSetProperty[22]",
        "testPropertiesLoad[6]",
        "testEntrySet[0]",
        "testIncrementNotNumber[19]",
        "testConcurrentRemove[8]",
        "testScanWorksCorrectly[2]",
        "testPut[28]",
        "testGetProperty[17]",
        "testPropertiesList[26]",
        "testConcurrentReplaceOneArg[28]",
        "testReplaceNullNewValue[6]",
        "testClear[3]",
        "testDefaultInit[16]",
        "testKeySet[28]",
        "testContainsKey[31]",
        "testIsEmpty[2]",
        "testPropertiesLoad[7]",
        "testConcurrentRemove[7]",
        "testSetProperty[21]",
        "testIncrementNotNumber[16]",
        "testPut[29]",
        "testConcurrentReplaceOneArg[29]",
        "testPropertiesList[27]",
        "testClear[2]",
        "testContainsKey[9]",
        "testReplaceNullNewValue[7]",
        "testDefaultInit[17]",
        "testKeySet[29]",
        "testIncrementNotNumber[0]",
        "testIsEmpty[3]",
        "testPropertiesLoad[8]",
        "testScanWorksCorrectly[0]",
        "testIncrementNotNumber[17]",
        "testGetProperty[19]",
        "testSetProperty[20]",
        "testConcurrentRemove[6]",
        "testPropertiesList[28]",
        "testEquals[0]",
        "testReplaceNullNewValue[4]",
        "testPutIfAbsent[10]",
        "testPropertiesSave[11]",
        "testContainsKey[17]",
        "testConcurrentRemove[23]",
        "testPropertiesLoad[9]",
        "testReplaceNullValue[20]",
        "testGetProperty[30]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "testNotEquals[23]",
        "testPut[23]",
        "testHashCode[22]",
        "testGetPropertyDefault[31]",
        "testPutIfAbsent[11]",
        "testPropertiesSave[12]",
        "testReplaceNullNewValue[5]",
        "testHashCode[21]",
        "testPropertyNames[0]",
        "testNotEquals[25]",
        "testNotEquals[9]",
        "testContainsKey[18]",
        "testSize[0]",
        "testPutIfAbsent[0]",
        "testConcurrentRemove[24]",
        "testIsEmpty[1]",
        "testNotEquals[8]",
        "testHashCode[3]",
        "testNotEquals[24]",
        "testPut[24]",
        "testGetPropertyDefault[30]",
        "testPropertiesSave[13]",
        "testEquals[2]",
        "testPropertyNames[1]",
        "testReplaceNullNewValue[2]",
        "testNotEquals[26]",
        "testContainsKey[19]",
        "testSize[1]",
        "testConcurrentRemove[21]",
        "testReplaceNullValue[22]",
        "testHashCode[4]",
        "testNotEquals[7]",
        "testPut[25]",
        "testHashCode[24]",
        "testEquals[1]",
        "testReplaceNullNewValue[3]",
        "testPropertiesSave[14]",
        "testPropertyNames[2]",
        "testNotEquals[27]",
        "testSize[2]",
        "testDefaultInit[9]",
        "testConcurrentRemove[22]",
        "testReplaceNullValue[21]",
        "testHashCode[5]",
        "testGetProperty[31]",
        "testNotEquals[6]",
        "testPut[26]",
        "testHashCode[23]",
        "testPropertiesSave[31]",
        "testReplaceNullNewValue[0]",
        "testPropertyNames[3]",
        "testEquals[4]",
        "testNotEquals[28]",
        "testPutIfAbsent[14]",
        "testSize[3]",
        "testStringPropertyNames[22]",
        "testConcurrentReplaceOneArg[22]",
        "testContainsKey[13]",
        "testDefaultInit[8]",
        "testReplaceNullValue[24]",
        "testConcurrentRemove[1]",
        "testHashCode[6]",
        "testGetProperty[10]",
        "testConcurrentRemove[27]",
        "testGetPropertyDefault[11]",
        "testHashCode[26]",
        "testNotEquals[5]",
        "testEquals[3]",
        "testPropertyNames[4]",
        "testNotEquals[29]",
        "testPutIfAbsent[15]",
        "testReplaceNullNewValue[1]",
        "testSize[4]",
        "testStringPropertyNames[23]",
        "testConcurrentReplaceOneArg[23]",
        "testDefaultInit[7]",
        "testContainsKey[14]",
        "testValues[20]",
        "testReplaceNullValue[23]",
        "testConcurrentRemove[28]",
        "testConcurrentRemove[0]",
        "testHashCode[7]",
        "testGetPropertyDefault[10]",
        "testNotEquals[4]",
        "testHashCode[25]",
        "testPutIfAbsent[12]",
        "testPropertyNames[5]",
        "testPut[20]",
        "testEquals[6]",
        "testSize[5]",
        "testConcurrentReplaceOneArg[20]",
        "testIncrementDouble[20]",
        "testDefaultInit[6]",
        "testStringPropertyNames[20]",
        "testContainsKey[15]",
        "testGetProperty[12]",
        "testConcurrentRemove[25]",
        "testHashCode[8]",
        "testPropertyNames[30]",
        "testGetPropertyDefault[13]",
        "testHashCode[28]",
        "testNotEquals[3]",
        "testReplaceNullValue[26]",
        "testPropertyNames[6]",
        "testEquals[5]",
        "testPutIfAbsent[13]",
        "testPropertiesSave[10]",
        "testPut[21]",
        "testConcurrentReplaceOneArg[21]",
        "testContainsKey[16]",
        "testIncrementDouble[21]",
        "testDefaultInit[5]",
        "testStringPropertyNames[21]",
        "testGetProperty[11]",
        "testHashCode[9]",
        "testSize[6]",
        "testConcurrentRemove[26]",
        "testPut[22]",
        "testHashCode[27]",
        "testGetPropertyDefault[12]",
        "testNotEquals[2]",
        "testReplaceNullValue[25]",
        "testPropertyNames[7]",
        "testGetOperations[14]",
        "testContainsValue[17]",
        "testIncrementDouble[22]",
        "testRemoveNullValue[11]",
        "testStringPropertyNames[14]",
        "testGetKey[22]",
        "testIncrementNotNumber[9]",
        "testConcurrentRemove[19]",
        "testPutIfAbsent[18]",
        "testRemove[25]",
        "testSize[18]",
        "testValues[23]",
        "testPutAll[26]",
        "testRemoveNullValue[7]",
        "testPropertyNames[8]",
        "testEquals[24]",
        "testGetOperations[15]",
        "testContainsValue[18]",
        "testGetPropertyDefault[0]",
        "testIncrement[9]",
        "testGetPropertyDefault[1]",
        "testRemoveNullValue[12]",
        "testStringPropertyNames[15]",
        "testIncrementDouble[23]",
        "testPropertyNames[31]",
        "testPutIfAbsent[19]",
        "testIsEmpty[20]",
        "testRemove[24]",
        "testGetKey[21]",
        "testRemoveNullValue[8]",
        "testPutAll[9]",
        "testValues[24]",
        "testPutAll[25]",
        "testPropertyNames[9]",
        "testSize[19]",
        "testEquals[25]",
        "testContainsValue[15]",
        "testEquals[26]",
        "testPutAll[29]",
        "testPropertiesLoad[10]",
        "testPutIfAbsent[16]",
        "testStringPropertyNames[12]",
        "testGet[0]",
        "testIncrement[8]",
        "testConcurrentRemove[17]",
        "testPropertyNames[10]",
        "testIncrementDouble[24]",
        "testGetPropertyDefault[2]",
        "testRemoveNullValue[13]",
        "testRemove[23]",
        "testRemoveNullValue[9]",
        "testIncrement[29]",
        "testGetOperations[12]",
        "testValues[21]",
        "testGetKey[24]",
        "testPutAll[28]",
        "testValues[9]",
        "testPropertiesLoad[11]",
        "testEquals[27]",
        "testContainsValue[16]",
        "testStringPropertyNames[13]",
        "testConcurrentReplaceTwoArgs[20]",
        "testRemoveNullValue[14]",
        "testGetPropertyDefault[3]",
        "testConcurrentRemove[18]",
        "testIncrementDouble[25]",
        "testIncrement[7]",
        "testRemove[22]",
        "testGetKey[23]",
        "testPutIfAbsent[17]",
        "testIncrement[28]",
        "testNotEquals[30]",
        "testGetOperations[13]",
        "testValues[22]",
        "testPutAll[27]",
        "testPropertiesLoad[12]",
        "testHashCode[30]",
        "testPropertiesSave[15]",
        "testGetKey[3]",
        "testPropertyNames[12]",
        "testRemoveNullValue[15]",
        "testStringPropertyNames[18]",
        "testIncrementDouble[26]",
        "testGetPropertyDefault[4]",
        "testIncrement[6]",
        "testRemove[21]",
        "testPutAll[22]",
        "testValues[27]",
        "testEquals[20]",
        "testPropertiesSave[16]",
        "testNotEquals[31]",
        "testGetOperations[10]",
        "testContainsValue[12]",
        "testIsEmpty[23]",
        "testContainsValue[14]",
        "testPropertiesLoad[13]",
        "testGetKey[2]",
        "testPropertyNames[11]",
        "testGetPropertyDefault[5]",
        "testRemoveNullValue[16]",
        "testStringPropertyNames[19]",
        "testIncrementDouble[27]",
        "testIncrement[5]",
        "testRemove[20]",
        "testPutAll[21]",
        "testValues[28]",
        "testEquals[21]",
        "testPropertiesSave[17]",
        "testIsEmpty[24]",
        "testContainsValue[13]",
        "testGetOperations[11]",
        "testPropertiesLoad[14]",
        "testGet[31]",
        "testGetKey[1]",
        "testPropertyNames[15]",
        "testPropertyNames[14]",
        "testIncrementDouble[28]",
        "testGetPropertyDefault[6]",
        "testRemoveNullValue[17]",
        "testStringPropertyNames[16]",
        "testIncrement[4]",
        "testReplaceNullValue[30]",
        "testIsEmpty[21]",
        "testHashCode[0]",
        "testGetKey[20]",
        "testPutAll[24]",
        "testValues[25]",
        "testEquals[22]",
        "testContainsValue[10]",
        "testPropertiesSave[18]",
        "testHashCode[31]",
        "testPropertiesLoad[15]",
        "testGet[30]",
        "testRemoveNullValue[18]",
        "testClear[30]",
        "testGetKey[0]",
        "testReplaceNullOldValue[30]",
        "testGetPropertyDefault[7]",
        "testIncrementDouble[29]",
        "testPropertyNames[13]",
        "testClear[31]",
        "testStringPropertyNames[17]",
        "testIncrement[3]",
        "testNotEquals[10]",
        "testHashCode[1]",
        "testPutAll[23]",
        "testValues[26]",
        "testContainsValue[11]",
        "testEquals[23]",
        "testPropertiesSave[19]",
        "testIsEmpty[22]",
        "testReplaceNullOldValue[31]",
        "testIsEmpty[27]",
        "testPutAll[1]",
        "testSize[10]",
        "testPropertiesLoad[16]",
        "testScanWorksCorrectly[27]",
        "testPropertiesList[4]",
        "testDefaultInit[26]",
        "testEntrySet[25]",
        "testReplaceNullNewValue[26]",
        "testContainsKey[4]",
        "testPropertyNames[17]",
        "testGetPropertyDefault[8]",
        "testSetProperty[27]",
        "testIncrementNotNumber[1]",
        "testClear[10]",
        "testConcurrentReplaceTwoArgs[26]",
        "testIncrement[23]",
        "testIsEmpty[28]",
        "testReplaceNullNewValue[27]",
        "testPutAll[0]",
        "testIncrement[21]",
        "testRemoveNullValue[0]",
        "testIncrementNotNumber[30]",
        "testSize[11]",
        "testPropertiesList[5]",
        "testPropertiesLoad[17]",
        "testEntrySet[26]",
        "testScanWorksCorrectly[26]",
        "testDefaultInit[27]",
        "testPropertyNames[16]",
        "testContainsKey[3]",
        "testSetProperty[26]",
        "testGetKey[29]",
        "testConcurrentReplaceTwoArgs[27]",
        "testEntrySet[27]",
        "testPropertiesList[6]",
        "testIncrement[22]",
        "testIncrementNotNumber[2]",
        "testGetPropertyDefault[9]",
        "testReplaceNullNewValue[28]",
        "testIncrement[20]",
        "testRemoveNullValue[1]",
        "testPutAll[3]",
        "testSize[12]",
        "testValues[29]",
        "testGet[11]",
        "testDefaultInit[24]",
        "testPut[9]",
        "testPropertyNames[19]",
        "testPropertiesList[2]",
        "testPropertiesLoad[18]",
        "testContainsKey[6]",
        "testClear[12]",
        "testEntrySet[28]",
        "testConcurrentReplaceTwoArgs[28]",
        "testPutAll[20]",
        "testDefaultInit[23]",
        "testSetProperty[25]",
        "testContainsValue[30]",
        "testIncrementNotNumber[3]",
        "testIsEmpty[25]",
        "testSize[13]",
        "testRemoveNullValue[2]",
        "testIsEmpty[26]",
        "testReplaceNullOldValue[10]",
        "testReplaceNullNewValue[29]",
        "testPutAll[2]",
        "testGet[10]",
        "testPut[8]",
        "testPropertiesLoad[19]",
        "testDefaultInit[25]",
        "testScanWorksCorrectly[28]",
        "testPropertiesList[3]",
        "testContainsKey[5]",
        "testPropertyNames[18]",
        "testClear[11]",
        "testSetProperty[24]",
        "testScanWorksCorrectly[29]",
        "testConcurrentReplaceTwoArgs[29]",
        "testEntrySet[29]",
        "testRemoveNullValue[30]",
        "testContainsValue[31]",
        "testIncrementNotNumber[4]",
        "testReplaceNullOldValue[11]",
        "testSize[14]",
        "testRemoveNullValue[3]",
        "testEquals[28]",
        "testContainsKey[0]",
        "testGet[13]",
        "testGetOperations[18]",
        "testClear[9]",
        "testReplaceNullNewValue[22]",
        "testScanWorksCorrectly[23]",
        "testPropertiesList[0]",
        "testConcurrentReplaceTwoArgs[21]",
        "testPut[7]",
        "testEntrySet[21]",
        "testDefaultInit[21]",
        "testClear[14]",
        "testPutAll[6]",
        "testIncrement[27]",
        "testRemoveNullValue[31]",
        "testGetKey[26]",
        "testIncrementNotNumber[5]",
        "testRemove[29]",
        "testRemoveNullValue[4]",
        "testIncrementNotNumber[10]",
        "testReplaceNullOldValue[12]",
        "testSize[15]",
        "testEquals[29]",
        "testGet[12]",
        "testPutAll[4]",
        "testGetOperations[19]",
        "testClear[8]",
        "testPropertiesList[1]",
        "testReplaceNullNewValue[23]",
        "testPut[6]",
        "testEntrySet[22]",
        "testScanWorksCorrectly[22]",
        "testConcurrentReplaceTwoArgs[22]",
        "testConcurrentReplaceTwoArgs[23]",
        "testDefaultInit[22]",
        "testClear[13]",
        "testPutAll[5]",
        "testIncrement[26]",
        "testIncrementNotNumber[6]",
        "testRemove[28]",
        "testGetKey[25]",
        "testGetOperations[16]",
        "testContainsKey[2]",
        "testIsEmpty[29]",
        "testIncrementNotNumber[31]",
        "testSize[16]",
        "testGet[15]",
        "testKeySet[20]",
        "testReplaceNullOldValue[13]",
        "testEntrySet[23]",
        "testPropertiesList[30]",
        "testScanWorksCorrectly[25]",
        "testReplaceNullNewValue[24]",
        "testPut[5]",
        "testConcurrentReplaceTwoArgs[24]",
        "testGetKey[28]",
        "testSetProperty[29]",
        "testClear[16]",
        "testIncrementNotNumber[7]",
        "testPutAll[8]",
        "testRemove[27]",
        "testRemoveNullValue[5]",
        "testIncrement[25]",
        "testContainsKey[1]",
        "testGetOperations[17]",
        "testGet[14]",
        "testKeySet[21]",
        "testPropertiesList[31]",
        "testReplaceNullOldValue[14]",
        "testEntrySet[24]",
        "testPut[4]",
        "testScanWorksCorrectly[24]",
        "testReplaceNullNewValue[25]",
        "testConcurrentReplaceTwoArgs[25]",
        "testSetProperty[28]",
        "testRemoveNullValue[10]",
        "testDefaultInit[20]",
        "testClear[15]",
        "testPutAll[7]",
        "testRemove[26]",
        "testIncrementNotNumber[8]",
        "testPropertiesLoad[0]",
        "testSize[17]",
        "testGetKey[27]",
        "testRemoveNullValue[6]",
        "testIncrement[24]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1216
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "listOperationLPushShouldBeCommittedCorrectly",
        "valueOperationSetShouldBeCommittedCorrectly",
        "listOperationLPushShoudBeRolledBackCorrectly",
        "valueOperationSetShouldBeRolledBackCorrectly",
        "valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.DefaultHashOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDelete[0]",
        "testDelete[1]",
        "testEntries[0]",
        "testHScanReadsValuesFully[0]",
        "testEntries[1]",
        "testHScanReadsValuesFully[1]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
      "failingMethods": [],
      "erroringMethods": [
        "readonlyTransactionSyncShouldNotExcceedMaxConnections",
        "testNumberOfOperationsIsOne",
        "testNumberOfOperationsEqualToNumberOfConnections",
        "listOperationLPushShouldBeCommittedCorrectly",
        "valueOperationSetShouldBeCommittedCorrectly",
        "testNumberOfOperationsGreaterThanNumberOfConnections",
        "listOperationLPushShoudBeRolledBackCorrectly",
        "valueOperationSetShouldBeRolledBackCorrectly",
        "valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 18
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
      "failingMethods": [],
      "erroringMethods": [
        "testDecrementAndGet[3]",
        "testGetAndDecrement[1]",
        "testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[2]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "testGetAndIncrement[0]",
        "testGetAndAdd[3]",
        "testCheckAndSet[1]",
        "testGetAndSet[1]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "testIncrementAndGet[0]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "testAddAndGet[3]",
        "testDecrementAndGet[2]",
        "testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[3]",
        "testGetAndAdd[0]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "testGetAndDecrement[0]",
        "testGetAndIncrement[3]",
        "testCheckAndSet[2]",
        "testGetAndSet[0]",
        "testIncrementAndGet[3]",
        "testAddAndGet[0]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "testDecrementAndGet[1]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "testGetAndAdd[1]",
        "testGetAndDecrement[3]",
        "testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[0]",
        "testCheckAndSet[3]",
        "testGetAndIncrement[2]",
        "testAddAndGet[1]",
        "testIncrementAndGet[2]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "testGetAndSet[3]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[1]",
        "testGetAndAdd[2]",
        "testGetAndDecrement[2]",
        "testCheckAndSet[0]",
        "testDecrementAndGet[0]",
        "testGetAndIncrement[1]",
        "testAddAndGet[2]",
        "testIncrementAndGet[1]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "testGetAndSet[2]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 52
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "listOperationLPushShouldBeCommittedCorrectly",
        "valueOperationSetShouldBeCommittedCorrectly",
        "listOperationLPushShoudBeRolledBackCorrectly",
        "valueOperationSetShouldBeRolledBackCorrectly",
        "valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisMapTests",
      "failingMethods": [],
      "erroringMethods": [
        "testGet[17]",
        "testKeySet[10]",
        "testReplaceNullOldValue[15]",
        "testRemove[0]",
        "testKeySet[34]",
        "testConcurrentReplaceOneArg[2]",
        "testConcurrentReplaceOneArg[14]",
        "testPut[19]",
        "testContainsKey[21]",
        "testClear[18]",
        "testHashCode[18]",
        "testReplaceNullValue[16]",
        "testGet[18]",
        "testIncrementNotNumber[26]",
        "testGet[16]",
        "testReplaceNullOldValue[16]",
        "testKeySet[35]",
        "testConcurrentReplaceOneArg[1]",
        "testRemove[1]",
        "testKeySet[11]",
        "testConcurrentReplaceOneArg[15]",
        "testContainsKey[22]",
        "testHashCode[17]",
        "testClear[17]",
        "testReplaceNullValue[15]",
        "testIncrementNotNumber[27]",
        "testIncrementNotNumber[23]",
        "testReplaceNullNewValue[20]",
        "testConcurrentReplaceOneArg[12]",
        "testKeySet[12]",
        "testContainsKey[23]",
        "testConcurrentReplaceOneArg[4]",
        "testScanWorksCorrectly[21]",
        "testReplaceNullOldValue[17]",
        "testReplaceNullValue[18]",
        "testIncrementNotNumber[24]",
        "testScanWorksCorrectly[20]",
        "testKeySet[13]",
        "testReplaceNullNewValue[21]",
        "testEntrySet[20]",
        "testContainsKey[24]",
        "testConcurrentReplaceOneArg[3]",
        "testConcurrentReplaceOneArg[13]",
        "testHashCode[19]",
        "testClear[19]",
        "testReplaceNullOldValue[18]",
        "testReplaceNullValue[17]",
        "testIncrementNotNumber[25]",
        "testGet[19]",
        "testConcurrentReplaceOneArg[18]",
        "testKeySet[14]",
        "testConcurrentRemove[31]",
        "testRemove[4]",
        "testConcurrentReplaceTwoArgs[18]",
        "testReplaceNullOldValue[19]",
        "testPut[15]",
        "testValues[0]",
        "testConcurrentReplaceOneArg[19]",
        "testConcurrentRemove[32]",
        "testKeySet[15]",
        "testRemove[5]",
        "testConcurrentReplaceTwoArgs[19]",
        "testReplaceNullValue[19]",
        "testPut[16]",
        "testSize[20]",
        "testConcurrentReplaceOneArg[0]",
        "testRemove[2]",
        "testConcurrentReplaceTwoArgs[0]",
        "testConcurrentReplaceOneArg[16]",
        "testKeySet[16]",
        "testIncrementNotNumber[28]",
        "testPut[17]",
        "testConcurrentReplaceOneArg[17]",
        "testSize[21]",
        "testConcurrentReplaceTwoArgs[1]",
        "testKeySet[17]",
        "testConcurrentRemove[30]",
        "testContainsKey[20]",
        "testRemove[3]",
        "testIncrementNotNumber[29]",
        "testPut[18]",
        "testPutIfAbsent[22]",
        "testHashCode[10]",
        "testValues[3]",
        "testGetKey[7]",
        "testPut[10]",
        "testGetOperations[3]",
        "testContainsKey[29]",
        "testConcurrentReplaceTwoArgs[2]",
        "testKeySet[18]",
        "testRemoveNullValue[19]",
        "testRemove[8]",
        "testConcurrentRemove[35]",
        "testReplaceNullOldValue[6]",
        "testConcurrentRemove[11]",
        "testGet[7]",
        "testReplaceNullValue[32]",
        "testPut[11]",
        "testGetOperations[30]",
        "testNotEquals[35]",
        "testPut[35]",
        "testIncrement[2]",
        "testNotEquals[11]",
        "testHashCode[34]",
        "testPutIfAbsent[23]",
        "testConcurrentReplaceTwoArgs[3]",
        "testValues[4]",
        "testGetKey[6]",
        "testConcurrentReplaceOneArg[31]",
        "testGetOperations[2]",
        "testGet[6]",
        "testReplaceNullOldValue[7]",
        "testRemove[9]",
        "testConcurrentRemove[12]",
        "testKeySet[19]",
        "testReplaceNullValue[31]",
        "testConcurrentReplaceOneArg[30]",
        "testIncrement[1]",
        "testNotEquals[12]",
        "testPut[12]",
        "testGetOperations[31]",
        "testHashCode[33]",
        "testConcurrentReplaceTwoArgs[4]",
        "testPutIfAbsent[20]",
        "testNotEquals[14]",
        "testValues[1]",
        "testGetKey[5]",
        "testGetOperations[5]",
        "testReplaceNullOldValue[8]",
        "testReplaceNullValue[34]",
        "testConcurrentRemove[33]",
        "testReplaceNullValue[10]",
        "testGet[9]",
        "testRemove[6]",
        "testIncrement[0]",
        "testNotEquals[13]",
        "testEquals[30]",
        "testPut[13]",
        "testHashCode[12]",
        "testConcurrentReplaceTwoArgs[5]",
        "testPutIfAbsent[21]",
        "testValues[2]",
        "testNotEquals[15]",
        "testGetOperations[4]",
        "testGetKey[4]",
        "testConcurrentRemove[10]",
        "testRemove[7]",
        "testReplaceNullOldValue[9]",
        "testGet[8]",
        "testReplaceNullValue[33]",
        "testConcurrentRemove[34]",
        "testEquals[31]",
        "testPut[14]",
        "testHashCode[11]",
        "testHashCode[35]",
        "testConcurrentReplaceTwoArgs[6]",
        "testPutAll[19]",
        "testNotEquals[16]",
        "testPutIfAbsent[26]",
        "testPut[30]",
        "testConcurrentReplaceOneArg[10]",
        "testConcurrentReplaceOneArg[34]",
        "testIncrementDouble[30]",
        "testGet[2]",
        "testReplaceNullOldValue[2]",
        "testContainsKey[25]",
        "testReplaceNullValue[12]",
        "testValues[31]",
        "testConcurrentRemove[15]",
        "testValues[7]",
        "testHashCode[14]",
        "testPutAll[18]",
        "testNotEquals[17]",
        "testPutIfAbsent[27]",
        "testPut[31]",
        "testConcurrentReplaceTwoArgs[7]",
        "testIncrementDouble[31]",
        "testConcurrentReplaceOneArg[11]",
        "testGet[1]",
        "testConcurrentReplaceOneArg[35]",
        "testContainsKey[26]",
        "testReplaceNullOldValue[3]",
        "testReplaceNullValue[35]",
        "testReplaceNullValue[11]",
        "testConcurrentRemove[16]",
        "testValues[8]",
        "testHashCode[13]",
        "testPutAll[17]",
        "testValues[32]",
        "testNotEquals[18]",
        "testGetKey[9]",
        "testContainsValue[19]",
        "testConcurrentReplaceTwoArgs[8]",
        "testPutIfAbsent[24]",
        "testPut[32]",
        "testConcurrentReplaceOneArg[32]",
        "testContainsKey[27]",
        "testIncrementDouble[32]",
        "testGetOperations[1]",
        "testReplaceNullOldValue[4]",
        "testGet[4]",
        "testConcurrentRemove[13]",
        "testGet[5]",
        "testPut[33]",
        "testHashCode[16]",
        "testValues[5]",
        "testReplaceNullValue[14]",
        "testNotEquals[19]",
        "testGetOperations[0]",
        "testGetKey[8]",
        "testConcurrentReplaceTwoArgs[9]",
        "testPutIfAbsent[25]",
        "testContainsKey[28]",
        "testIncrementDouble[33]",
        "testConcurrentReplaceOneArg[33]",
        "testReplaceNullOldValue[5]",
        "testGet[3]",
        "testReplaceNullValue[13]",
        "testValues[30]",
        "testConcurrentRemove[14]",
        "testHashCode[15]",
        "testPut[34]",
        "testValues[6]",
        "testGetOperations[26]",
        "testContainsValue[29]",
        "testIncrementDouble[10]",
        "testIncrement[19]",
        "testRemoveNullValue[23]",
        "testSize[7]",
        "testPutIfAbsent[7]",
        "testIncrementDouble[34]",
        "testRemove[13]",
        "testIsEmpty[31]",
        "testEquals[8]",
        "testGetKey[34]",
        "testGetKey[10]",
        "testEquals[12]",
        "testPutAll[14]",
        "testValues[35]",
        "testNotEquals[1]",
        "testValues[11]",
        "testGetOperations[27]",
        "testEquals[7]",
        "testIncrementDouble[11]",
        "testConcurrentReplaceTwoArgs[30]",
        "testNotEquals[0]",
        "testSize[8]",
        "testPutIfAbsent[8]",
        "testIncrementDouble[35]",
        "testRemoveNullValue[24]",
        "testGetKey[33]",
        "testRemove[12]",
        "testIsEmpty[32]",
        "testPutAll[13]",
        "testIncrement[18]",
        "testValues[12]",
        "testEquals[13]",
        "testContainsValue[27]",
        "testReplaceNullOldValue[0]",
        "testPutIfAbsent[5]",
        "testConcurrentReplaceTwoArgs[31]",
        "testRemoveNullValue[25]",
        "testReplaceNullValue[2]",
        "testSize[9]",
        "testConcurrentRemove[29]",
        "testRemove[11]",
        "testIncrementDouble[12]",
        "testRemove[35]",
        "testGetKey[12]",
        "testIncrement[17]",
        "testPutIfAbsent[28]",
        "testGetOperations[24]",
        "testEquals[14]",
        "testPutAll[16]",
        "testValues[33]",
        "testEquals[15]",
        "testGetOperations[25]",
        "testContainsValue[28]",
        "testKeySet[0]",
        "testReplaceNullOldValue[1]",
        "testReplaceNullValue[0]",
        "testConcurrentReplaceTwoArgs[32]",
        "testRemoveNullValue[26]",
        "testReplaceNullValue[1]",
        "testPutIfAbsent[6]",
        "testIncrementDouble[13]",
        "testRemove[10]",
        "testEquals[9]",
        "testGetKey[11]",
        "testIncrement[16]",
        "testRemove[34]",
        "testPutIfAbsent[29]",
        "testIsEmpty[30]",
        "testPutAll[15]",
        "testValues[34]",
        "testValues[10]",
        "testGetKey[35]",
        "testContainsValue[25]",
        "testReplaceNullNewValue[18]",
        "testContainsValue[1]",
        "testPutIfAbsent[3]",
        "testGetOperations[7]",
        "testRemoveNullValue[27]",
        "testIncrementDouble[14]",
        "testRemove[33]",
        "testReplaceNullValue[4]",
        "testEntrySet[18]",
        "testPutAll[10]",
        "testValues[15]",
        "testEquals[32]",
        "testPutAll[34]",
        "testIsEmpty[35]",
        "testIsEmpty[11]",
        "testContainsValue[24]",
        "testGetOperations[22]",
        "testContainsValue[26]",
        "testReplaceNullNewValue[19]",
        "testContainsValue[2]",
        "testPutIfAbsent[4]",
        "testGetOperations[6]",
        "testRemoveNullValue[28]",
        "testIncrementDouble[15]",
        "testReplaceNullValue[3]",
        "testEntrySet[19]",
        "testScanWorksCorrectly[19]",
        "testRemove[32]",
        "testValues[16]",
        "testPutAll[33]",
        "testGetOperations[23]",
        "testEquals[33]",
        "testNotEquals[20]",
        "testIsEmpty[12]",
        "testHashCode[20]",
        "testRemoveNullValue[29]",
        "testPutIfAbsent[1]",
        "testReplaceNullValue[6]",
        "testGetOperations[9]",
        "testIncrementDouble[16]",
        "testClear[20]",
        "testRemove[31]",
        "testGetOperations[20]",
        "testNotEquals[21]",
        "testEquals[10]",
        "testPutAll[12]",
        "testGetKey[32]",
        "testContainsValue[22]",
        "testValues[13]",
        "testEquals[34]",
        "testIsEmpty[33]",
        "testGetKey[30]",
        "testContainsValue[0]",
        "testPutIfAbsent[2]",
        "testGetOperations[8]",
        "testReplaceNullValue[5]",
        "testIncrementDouble[17]",
        "testRemove[30]",
        "testPutAll[11]",
        "testIsEmpty[10]",
        "testValues[14]",
        "testGetKey[31]",
        "testPutAll[35]",
        "testNotEquals[22]",
        "testEquals[11]",
        "testGetOperations[21]",
        "testEquals[35]",
        "testContainsValue[23]",
        "testIsEmpty[34]",
        "testIsEmpty[15]",
        "testContainsValue[5]",
        "testIncrement[10]",
        "testGet[21]",
        "testValues[19]",
        "testSize[22]",
        "testEntrySet[13]",
        "testScanWorksCorrectly[15]",
        "testIncrementDouble[8]",
        "testReplaceNullNewValue[14]",
        "testIncrementDouble[18]",
        "testClear[22]",
        "testConcurrentReplaceTwoArgs[14]",
        "testReplaceNullValue[8]",
        "testGetKey[18]",
        "testPutAll[30]",
        "testContainsValue[20]",
        "testKeySet[5]",
        "testIncrement[11]",
        "testIncrement[35]",
        "testContainsValue[6]",
        "testReplaceNullOldValue[20]",
        "testConcurrentReplaceOneArg[9]",
        "testIsEmpty[16]",
        "testSize[23]",
        "testGet[20]",
        "testScanWorksCorrectly[14]",
        "testEntrySet[14]",
        "testIncrementDouble[9]",
        "testReplaceNullNewValue[15]",
        "testIncrementDouble[19]",
        "testReplaceNullValue[7]",
        "testGetKey[17]",
        "testClear[21]",
        "testConcurrentReplaceTwoArgs[15]",
        "testKeySet[6]",
        "testContainsValue[21]",
        "testIncrement[34]",
        "testReplaceNullNewValue[16]",
        "testSize[24]",
        "testReplaceNullOldValue[21]",
        "testIncrement[32]",
        "testGet[23]",
        "testContainsValue[3]",
        "testScanWorksCorrectly[17]",
        "testEntrySet[15]",
        "testIncrementDouble[6]",
        "testConcurrentReplaceTwoArgs[16]",
        "testEntrySet[16]",
        "testScanWorksCorrectly[18]",
        "testClear[24]",
        "testKeySet[7]",
        "testValues[17]",
        "testPutAll[32]",
        "testIsEmpty[13]",
        "testIncrement[33]",
        "testRemove[19]",
        "testReplaceNullNewValue[17]",
        "testReplaceNullOldValue[22]",
        "testSize[25]",
        "testIncrement[31]",
        "testContainsValue[4]",
        "testValues[18]",
        "testGet[22]",
        "testScanWorksCorrectly[16]",
        "testIncrementDouble[7]",
        "testGetKey[19]",
        "testClear[23]",
        "testEntrySet[17]",
        "testConcurrentReplaceTwoArgs[17]",
        "testPutAll[31]",
        "testReplaceNullValue[9]",
        "testIsEmpty[14]",
        "testKeySet[8]",
        "testRemove[18]",
        "testConcurrentReplaceOneArg[6]",
        "testIncrementNotNumber[21]",
        "testEquals[16]",
        "testReplaceNullOldValue[23]",
        "testGet[25]",
        "testSize[26]",
        "testIsEmpty[19]",
        "testKeySet[30]",
        "testKeySet[1]",
        "testIncrementDouble[4]",
        "testReplaceNullNewValue[10]",
        "testReplaceNullNewValue[34]",
        "testScanWorksCorrectly[35]",
        "testEntrySet[33]",
        "testScanWorksCorrectly[11]",
        "testConcurrentReplaceTwoArgs[33]",
        "testConcurrentReplaceTwoArgs[34]",
        "testClear[26]",
        "testIncrement[15]",
        "testRemove[17]",
        "testGetKey[14]",
        "testEntrySet[9]",
        "testEquals[17]",
        "testSize[27]",
        "testIncrementNotNumber[22]",
        "testKeySet[2]",
        "testGet[24]",
        "testKeySet[31]",
        "testReplaceNullOldValue[24]",
        "testEntrySet[34]",
        "testIncrementDouble[5]",
        "testReplaceNullNewValue[11]",
        "testScanWorksCorrectly[34]",
        "testReplaceNullNewValue[35]",
        "testScanWorksCorrectly[10]",
        "testConcurrentReplaceTwoArgs[10]",
        "testConcurrentReplaceOneArg[5]",
        "testEntrySet[10]",
        "testConcurrentReplaceTwoArgs[35]",
        "testClear[25]",
        "testRemoveNullValue[20]",
        "testRemove[16]",
        "testGetKey[13]",
        "testIncrement[14]",
        "testScanWorksCorrectly[8]",
        "testIsEmpty[17]",
        "testGet[27]",
        "testContainsValue[7]",
        "testGetOperations[28]",
        "testEntrySet[8]",
        "testConcurrentReplaceOneArg[8]",
        "testEquals[18]",
        "testKeySet[32]",
        "testKeySet[3]",
        "testIncrementDouble[2]",
        "testReplaceNullOldValue[25]",
        "testEntrySet[35]",
        "testReplaceNullNewValue[12]",
        "testScanWorksCorrectly[13]",
        "testEntrySet[11]",
        "testConcurrentReplaceTwoArgs[11]",
        "testConcurrentReplaceTwoArgs[12]",
        "testRemoveNullValue[21]",
        "testPutIfAbsent[9]",
        "testRemove[15]",
        "testClear[28]",
        "testGetKey[16]",
        "testSize[28]",
        "testIncrement[13]",
        "testContainsValue[8]",
        "testConcurrentReplaceOneArg[7]",
        "testIsEmpty[18]",
        "testIncrementNotNumber[20]",
        "testEntrySet[7]",
        "testGet[26]",
        "testEquals[19]",
        "testReplaceNullOldValue[26]",
        "testGetOperations[29]",
        "testScanWorksCorrectly[9]",
        "testIncrementDouble[3]",
        "testEntrySet[12]",
        "testKeySet[33]",
        "testScanWorksCorrectly[12]",
        "testReplaceNullNewValue[13]",
        "testConcurrentReplaceTwoArgs[13]",
        "testClear[27]",
        "testRemoveNullValue[22]",
        "testKeySet[4]",
        "testRemove[14]",
        "testEntrySet[6]",
        "testGetKey[15]",
        "testSize[29]",
        "testIncrement[12]",
        "testContainsValue[9]",
        "testScanWorksCorrectly[31]",
        "testScanWorksCorrectly[6]",
        "testPut[3]",
        "testIncrementDouble[0]",
        "testReplaceNullOldValue[27]",
        "testClear[5]",
        "testReplaceNullNewValue[30]",
        "testKeySet[22]",
        "testIsEmpty[8]",
        "testConcurrentReplaceOneArg[26]",
        "testContainsKey[33]",
        "testConcurrentRemove[5]",
        "testIncrementNotNumber[14]",
        "testReplaceNullValue[28]",
        "testEntrySet[5]",
        "testScanWorksCorrectly[30]",
        "testScanWorksCorrectly[7]",
        "testGet[28]",
        "testPut[2]",
        "testIncrementDouble[1]",
        "testClear[4]",
        "testReplaceNullNewValue[31]",
        "testKeySet[23]",
        "testEntrySet[30]",
        "testContainsKey[34]",
        "testIsEmpty[9]",
        "testConcurrentReplaceOneArg[27]",
        "testContainsKey[10]",
        "testConcurrentRemove[4]",
        "testReplaceNullOldValue[28]",
        "testClear[29]",
        "testHashCode[29]",
        "testReplaceNullValue[27]",
        "testEntrySet[4]",
        "testGet[29]",
        "testIncrementNotNumber[15]",
        "testPut[1]",
        "testIncrementNotNumber[11]",
        "testClear[7]",
        "testKeySet[24]",
        "testReplaceNullNewValue[32]",
        "testEntrySet[31]",
        "testContainsKey[35]",
        "testConcurrentReplaceOneArg[24]",
        "testScanWorksCorrectly[33]",
        "testIsEmpty[6]",
        "testContainsKey[11]",
        "testConcurrentRemove[3]",
        "testReplaceNullOldValue[29]",
        "testScanWorksCorrectly[3]",
        "testEntrySet[3]",
        "testPut[0]",
        "testIncrementNotNumber[12]",
        "testScanWorksCorrectly[5]",
        "testKeySet[25]",
        "testClear[6]",
        "testReplaceNullNewValue[33]",
        "testConcurrentReplaceOneArg[25]",
        "testContainsKey[12]",
        "testScanWorksCorrectly[32]",
        "testEntrySet[32]",
        "testIsEmpty[7]",
        "testConcurrentRemove[2]",
        "testEntrySet[2]",
        "testReplaceNullValue[29]",
        "testScanWorksCorrectly[4]",
        "testIncrementNotNumber[13]",
        "testIncrement[30]",
        "testClear[1]",
        "testSize[30]",
        "testContainsKey[8]",
        "testReplaceNullNewValue[8]",
        "testPutIfAbsent[30]",
        "testKeySet[26]",
        "testIsEmpty[4]",
        "testIncrementNotNumber[18]",
        "testEntrySet[1]",
        "testConcurrentRemove[9]",
        "testPut[27]",
        "testScanWorksCorrectly[1]",
        "testKeySet[9]",
        "testPutIfAbsent[31]",
        "testClear[0]",
        "testSize[31]",
        "testContainsKey[7]",
        "testConcurrentRemove[20]",
        "testReplaceNullNewValue[9]",
        "testKeySet[27]",
        "testContainsKey[30]",
        "testIsEmpty[5]",
        "testEntrySet[0]",
        "testIncrementNotNumber[19]",
        "testConcurrentRemove[8]",
        "testScanWorksCorrectly[2]",
        "testPut[28]",
        "testConcurrentReplaceOneArg[28]",
        "testReplaceNullNewValue[6]",
        "testClear[3]",
        "testSize[32]",
        "testKeySet[28]",
        "testContainsKey[31]",
        "testIsEmpty[2]",
        "testConcurrentRemove[7]",
        "testIncrementNotNumber[16]",
        "testPut[29]",
        "testConcurrentReplaceOneArg[29]",
        "testClear[2]",
        "testSize[33]",
        "testContainsKey[9]",
        "testReplaceNullNewValue[7]",
        "testKeySet[29]",
        "testIncrementNotNumber[0]",
        "testContainsKey[32]",
        "testIsEmpty[3]",
        "testScanWorksCorrectly[0]",
        "testIncrementNotNumber[17]",
        "testConcurrentRemove[6]",
        "testEquals[0]",
        "testReplaceNullNewValue[4]",
        "testPutIfAbsent[34]",
        "testPutIfAbsent[10]",
        "testContainsKey[17]",
        "testConcurrentRemove[23]",
        "testReplaceNullValue[20]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "testNotEquals[23]",
        "testPut[23]",
        "testHashCode[22]",
        "testPutIfAbsent[11]",
        "testReplaceNullNewValue[5]",
        "testHashCode[21]",
        "testNotEquals[25]",
        "testPutIfAbsent[35]",
        "testNotEquals[9]",
        "testContainsKey[18]",
        "testSize[0]",
        "testPutIfAbsent[0]",
        "testConcurrentRemove[24]",
        "testIsEmpty[1]",
        "testNotEquals[8]",
        "testHashCode[3]",
        "testNotEquals[24]",
        "testPut[24]",
        "testEquals[2]",
        "testPutIfAbsent[32]",
        "testReplaceNullNewValue[2]",
        "testNotEquals[26]",
        "testContainsKey[19]",
        "testSize[1]",
        "testConcurrentRemove[21]",
        "testReplaceNullValue[22]",
        "testHashCode[4]",
        "testNotEquals[7]",
        "testPut[25]",
        "testHashCode[24]",
        "testEquals[1]",
        "testReplaceNullNewValue[3]",
        "testPutIfAbsent[33]",
        "testNotEquals[27]",
        "testSize[2]",
        "testConcurrentRemove[22]",
        "testReplaceNullValue[21]",
        "testHashCode[5]",
        "testNotEquals[6]",
        "testPut[26]",
        "testHashCode[23]",
        "testReplaceNullNewValue[0]",
        "testEquals[4]",
        "testNotEquals[28]",
        "testPutIfAbsent[14]",
        "testSize[3]",
        "testConcurrentReplaceOneArg[22]",
        "testContainsKey[13]",
        "testReplaceNullValue[24]",
        "testConcurrentRemove[1]",
        "testHashCode[6]",
        "testConcurrentRemove[27]",
        "testHashCode[26]",
        "testNotEquals[5]",
        "testEquals[3]",
        "testNotEquals[29]",
        "testPutIfAbsent[15]",
        "testReplaceNullNewValue[1]",
        "testSize[4]",
        "testConcurrentReplaceOneArg[23]",
        "testContainsKey[14]",
        "testValues[20]",
        "testReplaceNullValue[23]",
        "testConcurrentRemove[28]",
        "testConcurrentRemove[0]",
        "testHashCode[7]",
        "testNotEquals[4]",
        "testHashCode[25]",
        "testPutIfAbsent[12]",
        "testPut[20]",
        "testEquals[6]",
        "testSize[5]",
        "testConcurrentReplaceOneArg[20]",
        "testIncrementDouble[20]",
        "testContainsKey[15]",
        "testConcurrentRemove[25]",
        "testHashCode[8]",
        "testHashCode[28]",
        "testNotEquals[3]",
        "testReplaceNullValue[26]",
        "testEquals[5]",
        "testPutIfAbsent[13]",
        "testPut[21]",
        "testConcurrentReplaceOneArg[21]",
        "testContainsKey[16]",
        "testIncrementDouble[21]",
        "testHashCode[9]",
        "testSize[6]",
        "testConcurrentRemove[26]",
        "testPut[22]",
        "testHashCode[27]",
        "testNotEquals[2]",
        "testReplaceNullValue[25]",
        "testGetOperations[14]",
        "testContainsValue[17]",
        "testIncrementDouble[22]",
        "testRemoveNullValue[11]",
        "testRemoveNullValue[35]",
        "testGetKey[22]",
        "testIncrementNotNumber[9]",
        "testConcurrentRemove[19]",
        "testPutIfAbsent[18]",
        "testRemove[25]",
        "testSize[18]",
        "testValues[23]",
        "testPutAll[26]",
        "testRemoveNullValue[7]",
        "testEquals[24]",
        "testGetOperations[15]",
        "testContainsValue[18]",
        "testIncrement[9]",
        "testRemoveNullValue[12]",
        "testIncrementDouble[23]",
        "testPutIfAbsent[19]",
        "testIsEmpty[20]",
        "testRemove[24]",
        "testGetKey[21]",
        "testRemoveNullValue[8]",
        "testPutAll[9]",
        "testValues[24]",
        "testPutAll[25]",
        "testSize[19]",
        "testEquals[25]",
        "testContainsValue[15]",
        "testEquals[26]",
        "testPutAll[29]",
        "testPutIfAbsent[16]",
        "testGet[0]",
        "testIncrement[8]",
        "testConcurrentRemove[17]",
        "testIncrementDouble[24]",
        "testRemoveNullValue[13]",
        "testRemove[23]",
        "testRemoveNullValue[9]",
        "testIncrement[29]",
        "testGetOperations[12]",
        "testValues[21]",
        "testGetKey[24]",
        "testPutAll[28]",
        "testValues[9]",
        "testEquals[27]",
        "testContainsValue[16]",
        "testConcurrentReplaceTwoArgs[20]",
        "testRemoveNullValue[14]",
        "testConcurrentRemove[18]",
        "testIncrementDouble[25]",
        "testIncrement[7]",
        "testRemove[22]",
        "testGetKey[23]",
        "testPutIfAbsent[17]",
        "testIncrement[28]",
        "testNotEquals[30]",
        "testGetOperations[13]",
        "testValues[22]",
        "testPutAll[27]",
        "testHashCode[30]",
        "testGetKey[3]",
        "testRemoveNullValue[15]",
        "testIncrementDouble[26]",
        "testIncrement[6]",
        "testRemove[21]",
        "testPutAll[22]",
        "testValues[27]",
        "testEquals[20]",
        "testGetOperations[34]",
        "testNotEquals[31]",
        "testGetOperations[10]",
        "testContainsValue[12]",
        "testIsEmpty[23]",
        "testContainsValue[14]",
        "testGetKey[2]",
        "testRemoveNullValue[16]",
        "testIncrementDouble[27]",
        "testIncrement[5]",
        "testRemove[20]",
        "testPutAll[21]",
        "testValues[28]",
        "testNotEquals[32]",
        "testEquals[21]",
        "testIsEmpty[24]",
        "testGetOperations[35]",
        "testContainsValue[13]",
        "testGetOperations[11]",
        "testHashCode[32]",
        "testGet[31]",
        "testGetKey[1]",
        "testIncrementDouble[28]",
        "testClear[32]",
        "testRemoveNullValue[17]",
        "testIncrement[4]",
        "testReplaceNullValue[30]",
        "testIsEmpty[21]",
        "testHashCode[0]",
        "testGetKey[20]",
        "testPutAll[24]",
        "testValues[25]",
        "testNotEquals[33]",
        "testEquals[22]",
        "testContainsValue[10]",
        "testGetOperations[32]",
        "testContainsValue[34]",
        "testHashCode[31]",
        "testGet[30]",
        "testRemoveNullValue[18]",
        "testClear[30]",
        "testGetKey[0]",
        "testReplaceNullOldValue[30]",
        "testIncrementDouble[29]",
        "testClear[31]",
        "testNotEquals[34]",
        "testIncrement[3]",
        "testNotEquals[10]",
        "testHashCode[1]",
        "testPutAll[23]",
        "testValues[26]",
        "testContainsValue[11]",
        "testEquals[23]",
        "testIsEmpty[22]",
        "testContainsValue[35]",
        "testGetOperations[33]",
        "testReplaceNullOldValue[31]",
        "testIsEmpty[27]",
        "testPutAll[1]",
        "testSize[10]",
        "testSize[34]",
        "testGet[33]",
        "testScanWorksCorrectly[27]",
        "testEntrySet[25]",
        "testReplaceNullNewValue[26]",
        "testContainsKey[4]",
        "testClear[34]",
        "testIncrementNotNumber[1]",
        "testClear[10]",
        "testConcurrentReplaceTwoArgs[26]",
        "testIncrement[23]",
        "testContainsValue[32]",
        "testIsEmpty[28]",
        "testReplaceNullNewValue[27]",
        "testSize[35]",
        "testPutAll[0]",
        "testIncrement[21]",
        "testReplaceNullOldValue[32]",
        "testRemoveNullValue[0]",
        "testIncrementNotNumber[30]",
        "testGet[32]",
        "testSize[11]",
        "testEntrySet[26]",
        "testScanWorksCorrectly[26]",
        "testContainsKey[3]",
        "testClear[33]",
        "testGetKey[29]",
        "testConcurrentReplaceTwoArgs[27]",
        "testEntrySet[27]",
        "testIncrement[22]",
        "testContainsValue[33]",
        "testIncrementNotNumber[2]",
        "testReplaceNullNewValue[28]",
        "testReplaceNullOldValue[33]",
        "testIncrement[20]",
        "testRemoveNullValue[1]",
        "testGet[35]",
        "testPutAll[3]",
        "testSize[12]",
        "testValues[29]",
        "testGet[11]",
        "testPut[9]",
        "testContainsKey[6]",
        "testClear[12]",
        "testEntrySet[28]",
        "testConcurrentReplaceTwoArgs[28]",
        "testPutAll[20]",
        "testContainsValue[30]",
        "testIncrementNotNumber[3]",
        "testIsEmpty[25]",
        "testSize[13]",
        "testReplaceNullOldValue[34]",
        "testRemoveNullValue[2]",
        "testIsEmpty[26]",
        "testReplaceNullOldValue[10]",
        "testReplaceNullNewValue[29]",
        "testGet[34]",
        "testPutAll[2]",
        "testGet[10]",
        "testPut[8]",
        "testScanWorksCorrectly[28]",
        "testContainsKey[5]",
        "testClear[11]",
        "testScanWorksCorrectly[29]",
        "testConcurrentReplaceTwoArgs[29]",
        "testEntrySet[29]",
        "testClear[35]",
        "testRemoveNullValue[30]",
        "testContainsValue[31]",
        "testIncrementNotNumber[4]",
        "testReplaceNullOldValue[11]",
        "testSize[14]",
        "testRemoveNullValue[3]",
        "testEquals[28]",
        "testContainsKey[0]",
        "testIncrementNotNumber[33]",
        "testGet[13]",
        "testGetOperations[18]",
        "testReplaceNullOldValue[35]",
        "testClear[9]",
        "testReplaceNullNewValue[22]",
        "testScanWorksCorrectly[23]",
        "testConcurrentReplaceTwoArgs[21]",
        "testPut[7]",
        "testEntrySet[21]",
        "testClear[14]",
        "testPutAll[6]",
        "testIncrement[27]",
        "testRemoveNullValue[31]",
        "testGetKey[26]",
        "testIncrementNotNumber[5]",
        "testRemove[29]",
        "testRemoveNullValue[4]",
        "testIncrementNotNumber[10]",
        "testReplaceNullOldValue[12]",
        "testIncrementNotNumber[34]",
        "testSize[15]",
        "testEquals[29]",
        "testGet[12]",
        "testPutAll[4]",
        "testGetOperations[19]",
        "testClear[8]",
        "testReplaceNullNewValue[23]",
        "testPut[6]",
        "testEntrySet[22]",
        "testScanWorksCorrectly[22]",
        "testConcurrentReplaceTwoArgs[22]",
        "testConcurrentReplaceTwoArgs[23]",
        "testRemoveNullValue[32]",
        "testClear[13]",
        "testPutAll[5]",
        "testIncrement[26]",
        "testIncrementNotNumber[6]",
        "testRemove[28]",
        "testIncrementNotNumber[35]",
        "testGetKey[25]",
        "testGetOperations[16]",
        "testContainsKey[2]",
        "testIsEmpty[29]",
        "testIncrementNotNumber[31]",
        "testSize[16]",
        "testGet[15]",
        "testKeySet[20]",
        "testReplaceNullOldValue[13]",
        "testEntrySet[23]",
        "testScanWorksCorrectly[25]",
        "testReplaceNullNewValue[24]",
        "testPut[5]",
        "testConcurrentReplaceTwoArgs[24]",
        "testGetKey[28]",
        "testClear[16]",
        "testRemoveNullValue[33]",
        "testIncrementNotNumber[7]",
        "testPutAll[8]",
        "testRemove[27]",
        "testRemoveNullValue[5]",
        "testIncrement[25]",
        "testContainsKey[1]",
        "testIncrementNotNumber[32]",
        "testGetOperations[17]",
        "testGet[14]",
        "testKeySet[21]",
        "testReplaceNullOldValue[14]",
        "testEntrySet[24]",
        "testPut[4]",
        "testScanWorksCorrectly[24]",
        "testReplaceNullNewValue[25]",
        "testConcurrentReplaceTwoArgs[25]",
        "testRemoveNullValue[10]",
        "testClear[15]",
        "testRemoveNullValue[34]",
        "testPutAll[7]",
        "testRemove[26]",
        "testIncrementNotNumber[8]",
        "testSize[17]",
        "testGetKey[27]",
        "testRemoveNullValue[6]",
        "testIncrement[24]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1044
    },
    {
      "className": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "testAddMultiple[3]",
        "testZScanShouldReadEntireValueRange[7]",
        "testRemove[0]",
        "testReverseRangeByScoreWithScoresOffsetCount[0]",
        "testRangeByLexBoundedWithLimit[9]",
        "testRangeByLexUnbounded[8]",
        "testRangeByLexBounded[7]",
        "testCount[3]",
        "testRemove[8]",
        "testReverseRangeByScoreWithScoresOffsetCount[9]",
        "testRangeByLexBoundedWithLimit[1]",
        "testReverseRangeByScoreOffsetCount[4]",
        "zCardRetrievesDataCorrectly[2]",
        "testRangeByScoreOffsetCount[8]",
        "testRangeByScoreOffsetCount[0]",
        "testIncrementScore[4]",
        "testRangeByLexUnboundedWithLimit[6]",
        "testRangeByScoreWithScoresOffsetCount[2]",
        "sizeRetrievesDataCorrectly[3]",
        "testRangeByScoreWithScoresOffsetCount[4]",
        "testAddMultiple[2]",
        "testRangeByLexBounded[0]",
        "testZScanShouldReadEntireValueRange[6]",
        "testRangeByLexBoundedWithLimit[8]",
        "testRemove[1]",
        "testRangeByLexBounded[8]",
        "testCount[2]",
        "testRangeByLexUnbounded[7]",
        "testRangeByLexBoundedWithLimit[0]",
        "zCardRetrievesDataCorrectly[3]",
        "testReverseRangeByScoreOffsetCount[3]",
        "testReverseRangeByScoreWithScoresOffsetCount[8]",
        "testRangeByLexBounded[9]",
        "testRemove[9]",
        "testRangeByScoreOffsetCount[9]",
        "testRangeByLexUnboundedWithLimit[7]",
        "testRangeByScoreOffsetCount[1]",
        "testIncrementScore[5]",
        "sizeRetrievesDataCorrectly[2]",
        "testRangeByScoreWithScoresOffsetCount[3]",
        "sizeRetrievesDataCorrectly[1]",
        "testRangeByScoreWithScoresOffsetCount[5]",
        "testCount[9]",
        "testAddMultiple[9]",
        "testRangeByLexUnbounded[2]",
        "testZScanShouldReadEntireValueRange[5]",
        "zCardRetrievesDataCorrectly[9]",
        "testRangeByLexBounded[1]",
        "testCount[1]",
        "testAddMultiple[1]",
        "testRangeByLexBoundedWithLimit[7]",
        "testRangeByScoreOffsetCount[6]",
        "testRangeByLexUnboundedWithLimit[0]",
        "testReverseRangeByScoreOffsetCount[6]",
        "testRangeByLexUnbounded[1]",
        "zCardRetrievesDataCorrectly[8]",
        "testReverseRangeByScoreWithScoresOffsetCount[3]",
        "testRemove[6]",
        "sizeRetrievesDataCorrectly[9]",
        "testRangeByLexUnboundedWithLimit[8]",
        "zCardRetrievesDataCorrectly[0]",
        "testIncrementScore[6]",
        "sizeRetrievesDataCorrectly[0]",
        "testRangeByScoreWithScoresOffsetCount[6]",
        "testCount[8]",
        "testAddMultiple[8]",
        "testReverseRangeByScoreWithScoresOffsetCount[1]",
        "testRangeByLexBounded[2]",
        "testZScanShouldReadEntireValueRange[4]",
        "testCount[0]",
        "testAddMultiple[0]",
        "testRangeByLexUnbounded[9]",
        "testRangeByLexBoundedWithLimit[6]",
        "testRangeByLexUnboundedWithLimit[1]",
        "testRemove[7]",
        "zCardRetrievesDataCorrectly[1]",
        "testReverseRangeByScoreOffsetCount[5]",
        "testRangeByScoreOffsetCount[7]",
        "testRangeByLexUnbounded[0]",
        "testReverseRangeByScoreWithScoresOffsetCount[2]",
        "sizeRetrievesDataCorrectly[8]",
        "testRangeByLexUnboundedWithLimit[9]",
        "testIncrementScore[7]",
        "testIncrementScore[0]",
        "testCount[7]",
        "testRangeByScoreWithScoresOffsetCount[7]",
        "testAddMultiple[7]",
        "testZScanShouldReadEntireValueRange[3]",
        "testRangeByLexUnbounded[4]",
        "testRangeByLexBounded[3]",
        "testRangeByLexBoundedWithLimit[5]",
        "testRangeByLexUnboundedWithLimit[2]",
        "testRemove[4]",
        "testReverseRangeByScoreWithScoresOffsetCount[5]",
        "testReverseRangeByScoreOffsetCount[8]",
        "zCardRetrievesDataCorrectly[6]",
        "testIncrementScore[8]",
        "sizeRetrievesDataCorrectly[7]",
        "testReverseRangeByScoreOffsetCount[0]",
        "testRangeByScoreOffsetCount[4]",
        "testIncrementScore[1]",
        "testCount[6]",
        "testRangeByScoreWithScoresOffsetCount[8]",
        "testAddMultiple[6]",
        "testRangeByLexBounded[4]",
        "testZScanShouldReadEntireValueRange[2]",
        "testRangeByLexUnbounded[3]",
        "testRangeByLexBoundedWithLimit[4]",
        "testRangeByScoreOffsetCount[5]",
        "zCardRetrievesDataCorrectly[7]",
        "testReverseRangeByScoreOffsetCount[7]",
        "testReverseRangeByScoreWithScoresOffsetCount[4]",
        "testRemove[5]",
        "testIncrementScore[9]",
        "sizeRetrievesDataCorrectly[6]",
        "testRangeByLexUnboundedWithLimit[3]",
        "testCount[5]",
        "testAddMultiple[5]",
        "testIncrementScore[2]",
        "testRangeByScoreWithScoresOffsetCount[9]",
        "testZScanShouldReadEntireValueRange[9]",
        "testRemove[2]",
        "testZScanShouldReadEntireValueRange[1]",
        "testRangeByLexUnbounded[6]",
        "testRangeByLexBounded[5]",
        "zCardRetrievesDataCorrectly[4]",
        "testReverseRangeByScoreWithScoresOffsetCount[7]",
        "testRangeByLexBoundedWithLimit[3]",
        "testRangeByScoreWithScoresOffsetCount[0]",
        "sizeRetrievesDataCorrectly[5]",
        "testRangeByScoreOffsetCount[2]",
        "testRangeByLexUnboundedWithLimit[4]",
        "testReverseRangeByScoreOffsetCount[2]",
        "testCount[4]",
        "testAddMultiple[4]",
        "testIncrementScore[3]",
        "testZScanShouldReadEntireValueRange[8]",
        "testRangeByLexUnbounded[5]",
        "testRangeByLexBounded[6]",
        "testZScanShouldReadEntireValueRange[0]",
        "testRangeByLexBoundedWithLimit[2]",
        "testReverseRangeByScoreWithScoresOffsetCount[6]",
        "testRemove[3]",
        "zCardRetrievesDataCorrectly[5]",
        "testReverseRangeByScoreOffsetCount[9]",
        "testRangeByScoreWithScoresOffsetCount[1]",
        "sizeRetrievesDataCorrectly[4]",
        "testRangeByLexUnboundedWithLimit[5]",
        "testReverseRangeByScoreOffsetCount[1]",
        "testRangeByScoreOffsetCount[3]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 150
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
      "failingMethods": [],
      "erroringMethods": [
        "keyExpiredEventShouldRemoveHelperStructures[1]",
        "keyExpiredEventWithoutKeyspaceShouldBeIgnored[0]",
        "getShouldReadSimpleObjectWithColonInIdCorrectly[0]",
        "updateShouldAlterGeoIndexCorrectlyOnDelete[0]",
        "updateShouldRemoveSimpleMapValuesCorrectly[1]",
        "updateShouldAlterIndexDataOnNestedObjectCorrectly[0]",
        "getShouldReadSimpleObjectCorrectly[1]",
        "updateShouldAlterIndexDataForObjectsWithColonInIdCorrectly[0]",
        "putWritesDataCorrectly[0]",
        "putWritesSimpleNestedIndexValuesCorrectly[1]",
        "couldReadsKeyspaceSizeCorrectly[0]",
        "updateShouldAlterGeoIndexCorrectlyOnUpdate[0]",
        "putWritesSimpleIndexDataWithColonCorrectly[0]",
        "keyExpiredEventShouldRemoveHelperStructuresForObjectsWithColonInId[1]",
        "putWritesSimpleIndexDataCorrectly[0]",
        "updateShouldAlterIndexDataOnNestedObjectPathCorrectly[0]",
        "updateShouldRemoveSimpleListValuesCorrectly[1]",
        "updateShouldAlterIndexDataCorrectly[0]",
        "deleteRemovesEntriesCorrectly[1]",
        "getShouldReadSimpleObjectWithColonInIdCorrectly[1]",
        "updateShouldAlterGeoIndexCorrectlyOnDelete[1]",
        "getShouldReadNestedObjectCorrectly[1]",
        "updateShouldRemoveComplexObjectCorrectly[0]",
        "updateShouldRemoveComplexObjectCorrectly[1]",
        "updateShouldRemoveComplexMapValuesCorrectly[1]",
        "updateShouldRemoveComplexListValuesCorrectly[0]",
        "deleteCleansIndexedDataCorrectly[0]",
        "putShouldCreateGeoIndexCorrectly[1]",
        "deleteRemovesEntriesCorrectly[0]",
        "updateShouldAlterIndexDataCorrectly[1]",
        "putShouldCreateGeoIndexCorrectly[0]",
        "getShouldReadNestedObjectCorrectly[0]",
        "deleteShouldRemoveGeoIndexCorrectly[0]",
        "putWritesNestedDataCorrectly[0]",
        "updateShouldRemoveComplexMapValuesCorrectly[0]",
        "putWritesIndexDataCorrectly[1]",
        "deleteCleansIndexedDataCorrectly[1]",
        "updateShouldRemoveComplexListValuesCorrectly[1]",
        "putWritesDataWithColonCorrectly[1]",
        "keyExpiredEventShouldRemoveHelperStructures[0]",
        "updateShouldAlterIndexDataOnNestedObjectCorrectly[1]",
        "keyExpiredEventWithoutKeyspaceShouldBeIgnored[1]",
        "updateShouldRemoveSimpleMapValuesCorrectly[0]",
        "deleteShouldRemoveGeoIndexCorrectly[1]",
        "updateShouldAlterIndexDataForObjectsWithColonInIdCorrectly[1]",
        "getShouldReadSimpleObjectCorrectly[0]",
        "putWritesNestedDataCorrectly[1]",
        "putWritesDataCorrectly[1]",
        "putWritesSimpleIndexDataCorrectly[1]",
        "putWritesIndexDataCorrectly[0]",
        "couldReadsKeyspaceSizeCorrectly[1]",
        "putWritesSimpleNestedIndexValuesCorrectly[0]",
        "keyExpiredEventShouldRemoveHelperStructuresForObjectsWithColonInId[0]",
        "putWritesDataWithColonCorrectly[0]",
        "putWritesSimpleIndexDataWithColonCorrectly[1]",
        "updateShouldRemoveSimpleListValuesCorrectly[0]",
        "updateShouldAlterIndexDataOnNestedObjectPathCorrectly[1]",
        "updateShouldAlterGeoIndexCorrectlyOnUpdate[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 58
    },
    {
      "className": "org.springframework.data.redis.support.collections.SupportXmlTests",
      "failingMethods": [],
      "erroringMethods": [
        "testContainerSetup"
      ],
      "failures": [
        {
          "failureName": "org.springframework.beans.factory.BeanCreationException",
          "failureDetail": "Error creating bean with name \u0027non-existing\u0027: Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "listOperationLPushShouldBeCommittedCorrectly",
        "valueOperationSetShouldBeCommittedCorrectly",
        "listOperationLPushShoudBeRolledBackCorrectly",
        "valueOperationSetShouldBeRolledBackCorrectly",
        "valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.DefaultValueOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "testGetSet[3]",
        "testMultiSetIfAbsentFailure[7]",
        "testIncrementDouble[0]",
        "testSetWithExpirationWithTimeUnitMilliseconds[3]",
        "testIncrementLong[7]",
        "testRawKeysCollection[8]",
        "testMultiSetIfAbsent[8]",
        "testIncrementDouble[8]",
        "testSetRange[3]",
        "testDeserializeKey[3]",
        "testGetAndSet[1]",
        "testMultiSetIfAbsent[0]",
        "testRawKeys[2]",
        "testMultiSet[4]",
        "testGetRange[5]",
        "testSize[7]",
        "testGetAndSet[9]",
        "testAppend[6]",
        "testSetAndGetBit[7]",
        "testSetWithExpiration[8]",
        "testSetIfAbsent[5]",
        "testSetRange[4]",
        "testGetSet[4]",
        "testMultiSetIfAbsentFailure[6]",
        "testIncrementDouble[1]",
        "testSetWithExpirationWithTimeUnitMilliseconds[4]",
        "testIncrementLong[6]",
        "testRawKeysCollection[7]",
        "testSize[0]",
        "testDeserializeKey[4]",
        "testIncrementDouble[9]",
        "testGetAndSet[0]",
        "testGetRange[6]",
        "testMultiSetIfAbsent[7]",
        "testSize[8]",
        "testRawKeys[1]",
        "testMultiSet[5]",
        "testGetAndSet[8]",
        "testSetAndGetBit[6]",
        "testSetWithExpiration[7]",
        "testAppend[5]",
        "testSetIfAbsent[6]",
        "testRawKeys[9]",
        "testGetSet[5]",
        "testMultiSetIfAbsentFailure[1]",
        "testSetIfAbsent[2]",
        "testSetWithExpirationWithTimeUnitMilliseconds[5]",
        "testIncrementLong[5]",
        "testSetRange[9]",
        "testDeserializeKey[1]",
        "testMultiSetIfAbsentFailure[9]",
        "testIncrementDouble[6]",
        "testSetRange[1]",
        "testSize[1]",
        "testRawKeysCollection[2]",
        "testAppend[0]",
        "testMultiSetIfAbsent[2]",
        "testDeserializeKey[9]",
        "testRawKeys[0]",
        "testMultiSet[2]",
        "testGetRange[7]",
        "testSize[9]",
        "testAppend[8]",
        "testGetAndSet[7]",
        "testSetAndGetBit[5]",
        "testSetWithExpiration[6]",
        "testRawKeys[8]",
        "testSetIfAbsent[3]",
        "testGetSet[6]",
        "testMultiSetIfAbsentFailure[0]",
        "testIncrementLong[4]",
        "testSetWithExpirationWithTimeUnitMilliseconds[6]",
        "testRawKeysCollection[9]",
        "testDeserializeKey[2]",
        "testSize[2]",
        "testMultiSetIfAbsent[9]",
        "testMultiSetIfAbsentFailure[8]",
        "testIncrementDouble[7]",
        "testRawKeysCollection[1]",
        "testSetRange[2]",
        "testRawKeysCollection[0]",
        "testGetRange[0]",
        "testMultiSetIfAbsent[1]",
        "testMultiSet[3]",
        "testSetAndGetBit[4]",
        "testSetWithExpiration[5]",
        "testAppend[7]",
        "testGetRange[8]",
        "testGetAndSet[6]",
        "testSetIfAbsent[4]",
        "testRawKeys[7]",
        "testSetIfAbsent[0]",
        "testMultiSetIfAbsentFailure[3]",
        "testIncrementLong[3]",
        "testSetWithExpirationWithTimeUnitMilliseconds[7]",
        "testSetRange[7]",
        "testSetWithExpiration[3]",
        "testGetSet[7]",
        "testIncrementDouble[4]",
        "testSize[3]",
        "testRawKeysCollection[4]",
        "testMultiSet[0]",
        "testRawKeys[6]",
        "testGetRange[1]",
        "testDeserializeKey[7]",
        "testAppend[2]",
        "testMultiSetIfAbsent[4]",
        "testSetAndGetBit[3]",
        "testSetWithExpiration[4]",
        "testMultiSet[8]",
        "testGetRange[9]",
        "testSetIfAbsent[9]",
        "testGetAndSet[5]",
        "testMultiSetIfAbsentFailure[2]",
        "testSetIfAbsent[1]",
        "testIncrementLong[2]",
        "testSetWithExpirationWithTimeUnitMilliseconds[8]",
        "testSetRange[8]",
        "testGetSet[8]",
        "testSetWithExpiration[2]",
        "testSize[4]",
        "testDeserializeKey[0]",
        "testIncrementDouble[5]",
        "testSetWithExpirationWithTimeUnitMilliseconds[0]",
        "testRawKeysCollection[3]",
        "testSetRange[0]",
        "testGetSet[0]",
        "testGetRange[2]",
        "testMultiSetIfAbsent[3]",
        "testDeserializeKey[8]",
        "testMultiSet[1]",
        "testRawKeys[5]",
        "testSetAndGetBit[2]",
        "testAppend[1]",
        "testMultiSet[9]",
        "testGetAndSet[4]",
        "testAppend[9]",
        "testIncrementLong[1]",
        "testSetRange[5]",
        "testSetWithExpirationWithTimeUnitMilliseconds[9]",
        "testSetWithExpiration[1]",
        "testGetSet[9]",
        "testMultiSetIfAbsentFailure[5]",
        "testIncrementDouble[2]",
        "testSetWithExpirationWithTimeUnitMilliseconds[1]",
        "testIncrementLong[9]",
        "testSize[5]",
        "testRawKeysCollection[6]",
        "testGetSet[1]",
        "testDeserializeKey[5]",
        "testRawKeys[4]",
        "testGetRange[3]",
        "testAppend[4]",
        "testMultiSetIfAbsent[6]",
        "testSetAndGetBit[1]",
        "testMultiSet[6]",
        "testSetIfAbsent[7]",
        "testGetAndSet[3]",
        "testSetAndGetBit[9]",
        "testIncrementLong[0]",
        "testSetRange[6]",
        "testSetWithExpiration[0]",
        "testMultiSetIfAbsentFailure[4]",
        "testIncrementDouble[3]",
        "testSetWithExpirationWithTimeUnitMilliseconds[2]",
        "testIncrementLong[8]",
        "testRawKeysCollection[5]",
        "testGetSet[2]",
        "testDeserializeKey[6]",
        "testRawKeys[3]",
        "testSetAndGetBit[0]",
        "testAppend[3]",
        "testGetRange[4]",
        "testMultiSetIfAbsent[5]",
        "testSize[6]",
        "testSetIfAbsent[8]",
        "testMultiSet[7]",
        "testSetAndGetBit[8]",
        "testSetWithExpiration[9]",
        "testGetAndSet[2]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 339
    },
    {
      "className": "org.springframework.data.redis.core.DefaultGeoOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.RedisTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "testStringTemplateExecutesWithStringConn[8]",
        "testGetExpireMillisUsingPipelining[6]",
        "testExecutePipelinedTxCustomSerializer[9]",
        "testUnwatch[4]",
        "testDiscard[6]",
        "testRenameIfAbsent[2]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[3]",
        "testDelete[6]",
        "testExpireAt[3]",
        "testRenameIfAbsent[3]",
        "testWatchMultipleKeys[5]",
        "testRandomKey[5]",
        "testPersist[2]",
        "testType[4]",
        "testUnwatch[5]",
        "clientListShouldReturnCorrectly[1]",
        "testGetExpireMillisForKeyDoesNotExist[9]",
        "testStringTemplateExecutesWithStringConn[9]",
        "testUnwatch[3]",
        "testExecutePipelinedTxCustomSerializer[8]",
        "testExecCustomSerializer[9]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[2]",
        "testGetExpireMillisUsingPipelining[7]",
        "testDiscard[7]",
        "testDelete[7]",
        "testExpireAt[4]",
        "testExpireAt[5]",
        "testRenameIfAbsent[4]",
        "testRandomKey[4]",
        "testWatchMultipleKeys[4]",
        "testType[5]",
        "testPersist[1]",
        "clientListShouldReturnCorrectly[2]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[9]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[1]",
        "testUnwatch[2]",
        "testGetExpireMillisUsingPipelining[4]",
        "testDiscard[4]",
        "testStringTemplateExecutesWithStringConn[6]",
        "testExecutePipelinedTxCustomSerializer[7]",
        "testWatchMultipleKeys[8]",
        "testDelete[8]",
        "testExecCustomSerializer[8]",
        "testExpireAt[1]",
        "testExec[9]",
        "testExecConversionDisabled[0]",
        "testRandomKey[3]",
        "testRenameIfAbsent[5]",
        "testWatchMultipleKeys[7]",
        "testWatch[0]",
        "testPersist[0]",
        "testType[2]",
        "testGetExpireMillisForKeyDoesNotExist[7]",
        "testDeleteMultiple[9]",
        "clientListShouldReturnCorrectly[3]",
        "testExecutePipelinedTxCustomSerializer[6]",
        "testStringTemplateExecutesWithStringConn[7]",
        "testSortBulkMapper[9]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[0]",
        "testUnwatch[1]",
        "testGetExpireMillisUsingPipelining[5]",
        "testDiscard[5]",
        "testExecCustomSerializer[7]",
        "testDelete[9]",
        "testExpireAt[2]",
        "testExec[8]",
        "testKeys[0]",
        "testExecConversionDisabled[1]",
        "testGetExpireSecondsForKeyDoesNotExist[9]",
        "testRandomKey[2]",
        "testRenameIfAbsent[6]",
        "testWatchMultipleKeys[6]",
        "testWatch[1]",
        "testType[3]",
        "testGetExpireMillisForKeyDoesNotExist[8]",
        "clientListShouldReturnCorrectly[4]",
        "testDeleteMultiple[8]",
        "testGetExpireMillisUsingPipelining[2]",
        "testDelete[2]",
        "testUnwatch[0]",
        "testSortBulkMapper[8]",
        "testKeys[1]",
        "testExecCustomSerializer[6]",
        "testRename[8]",
        "testExec[7]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[7]",
        "testWatchMultipleKeys[1]",
        "testRenameIfAbsent[7]",
        "testGetExpireSecondsForKeyDoesNotExist[8]",
        "testRandomKey[1]",
        "testExpireAt[8]",
        "testExecConversionDisabled[2]",
        "testGetExpireMillis[9]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[6]",
        "testWatch[2]",
        "testDeleteMultiple[7]",
        "testType[0]",
        "testSortBulkMapper[7]",
        "testDelete[3]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[4]",
        "testGetExpireMillisUsingPipelining[3]",
        "testKeys[2]",
        "testExecCustomSerializer[5]",
        "testExec[6]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[6]",
        "testRandomKey[0]",
        "testWatchMultipleKeys[0]",
        "testExec[5]",
        "testRenameIfAbsent[8]",
        "testExecConversionDisabled[3]",
        "testRename[9]",
        "testKeys[3]",
        "testGetExpireSecondsForKeyDoesNotExist[7]",
        "testExpireAt[9]",
        "testGetExpireMillis[8]",
        "testWatch[3]",
        "testDeleteMultiple[6]",
        "testType[1]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[5]",
        "testSortBulkMapper[6]",
        "testGetExpireMillisUsingPipelining[0]",
        "testExecuteScriptCustomSerializers[8]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[5]",
        "testDiscard[8]",
        "testExecConversionDisabled[4]",
        "testDelete[4]",
        "testExecCustomSerializer[4]",
        "testRename[6]",
        "testExec[4]",
        "testExpireAt[6]",
        "testWatchMultipleKeys[3]",
        "testKeys[4]",
        "testGetExpireSecondsForKeyDoesNotExist[6]",
        "testRenameIfAbsent[9]",
        "testWatch[4]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[8]",
        "testDeleteMultiple[5]",
        "testGetExpireMillis[7]",
        "testExecutePipelinedCustomSerializer[0]",
        "testSortBulkMapper[5]",
        "testGetExpireMillisUsingPipelining[1]",
        "testExecuteScriptCustomSerializers[9]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[4]",
        "testExecConversionDisabled[5]",
        "testRename[7]",
        "testDiscard[9]",
        "testExecCustomSerializer[3]",
        "testDelete[5]",
        "testExecCustomSerializer[2]",
        "testKeys[5]",
        "testWatchMultipleKeys[2]",
        "testExec[3]",
        "testExpireAt[7]",
        "testWatch[5]",
        "testGetExpireSecondsForKeyDoesNotExist[5]",
        "clientListShouldReturnCorrectly[0]",
        "testExecutePipelinedCustomSerializer[1]",
        "testDeleteMultiple[4]",
        "testGetExpireMillis[6]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[7]",
        "testSortBulkMapper[4]",
        "testDumpAndRestoreNoTtl[3]",
        "testExpireAtMillisNotSupported[7]",
        "testStringTemplateExecutesWithStringConn[0]",
        "testExpireMillisNotSupported[1]",
        "testExecConversionDisabled[6]",
        "testExpireAndGetExpireMillis[0]",
        "testKeys[6]",
        "testExec[2]",
        "testConvertAndSend[5]",
        "testDeleteMultiple[3]",
        "testExecutePipelinedTxCustomSerializer[0]",
        "testExpireAtMillisNotSupported[6]",
        "testStringTemplateExecutesWithStringConn[1]",
        "testDumpAndRestoreNoTtl[2]",
        "testExpireMillisNotSupported[0]",
        "testExecConversionDisabled[7]",
        "testExpireAndGetExpireMillis[1]",
        "testExec[1]",
        "testDeleteMultiple[2]",
        "testConvertAndSend[4]",
        "testKeys[7]",
        "testExpireAtMillisNotSupported[5]",
        "testExecConversionDisabled[8]",
        "testRestoreTtl[8]",
        "testGetExpireMillisNotSupported[0]",
        "testDumpAndRestoreNoTtl[1]",
        "testExpireAndGetExpireMillis[2]",
        "testConvertAndSend[7]",
        "testExec[0]",
        "testDeleteMultiple[1]",
        "testKeys[8]",
        "testExpireAtMillisNotSupported[4]",
        "testExecConversionDisabled[9]",
        "testGetExpireMillisNotSupported[1]",
        "testDumpAndRestoreNoTtl[0]",
        "testExpireAndGetExpireMillis[3]",
        "testDeleteMultiple[0]",
        "testConvertAndSend[6]",
        "testRestoreTtl[9]",
        "testKeys[9]",
        "testExpireAtMillisNotSupported[3]",
        "testGetExpireSeconds[9]",
        "testExecutePipelinedTxCustomSerializer[5]",
        "testDiscard[2]",
        "testStringTemplateExecutesWithStringConn[4]",
        "testConvertAndSend[1]",
        "testExecutePipelinedTx[7]",
        "testUnwatch[9]",
        "testExecutePipelinedTxCustomSerializer[4]",
        "testStringTemplateExecutesWithStringConn[5]",
        "testDiscard[3]",
        "testWatchMultipleKeys[9]",
        "testExpireAt[0]",
        "testExecutePipelinedTx[8]",
        "testConvertAndSend[0]",
        "testUnwatch[8]",
        "testExecutePipelinedNonNullRedisCallback[9]",
        "testDiscard[0]",
        "testExpireAtMillisNotSupported[9]",
        "testExecutePipelinedTxCustomSerializer[3]",
        "testRenameIfAbsent[0]",
        "testGetExpireMillisUsingPipelining[8]",
        "testStringTemplateExecutesWithStringConn[2]",
        "testConvertAndSend[3]",
        "testExecutePipelinedTx[9]",
        "testUnwatch[7]",
        "testExecutePipelinedNonNullRedisCallback[8]",
        "testExecutePipelinedTxCustomSerializer[2]",
        "testExpireAtMillisNotSupported[8]",
        "testStringTemplateExecutesWithStringConn[3]",
        "testDiscard[1]",
        "testGetExpireMillisUsingPipelining[9]",
        "testRenameIfAbsent[1]",
        "testConvertAndSend[2]",
        "testUnwatch[6]",
        "testExecutePipelinedNonNullRedisCallback[7]",
        "testExecutePipelinedTxCustomSerializer[1]",
        "testSortStore[5]",
        "testExecutePipelinedTx[2]",
        "testExpireAndGetExpireMillis[8]",
        "testRestoreTtl[2]",
        "testExecutePipelined[9]",
        "testExecutePipelinedNonNullSessionCallback[3]",
        "testExecutePipelinedNonNullSessionCallback[2]",
        "testGetExpireSeconds[4]",
        "testGetExpireMillisNotSupported[7]",
        "testTemplateNotInitialized[7]",
        "testExpireMillisNotSupported[9]",
        "testExecutePipelinedNonNullRedisCallback[6]",
        "testExecutePipelinedTx[3]",
        "testSortStore[6]",
        "testExpireAndGetExpireMillis[9]",
        "testExecutePipelinedNonNullSessionCallback[4]",
        "testRestoreTtl[3]",
        "testGetExpireSeconds[3]",
        "testGetExpireMillisNotSupported[8]",
        "testTemplateNotInitialized[6]",
        "testExpireMillisNotSupported[8]",
        "testExecutePipelinedNonNullRedisCallback[5]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[0]",
        "testRestoreTtl[0]",
        "testSortStore[3]",
        "testExecutePipelinedTx[4]",
        "testDumpAndRestoreNoTtl[9]",
        "testExecutePipelined[7]",
        "testExecutePipelinedNonNullSessionCallback[0]",
        "testTemplateNotInitialized[9]",
        "testGetExpireSeconds[2]",
        "testGetExpireMillisUsingTransactions[9]",
        "testExpireMillisNotSupported[7]",
        "testGetExpireMillisNotSupported[9]",
        "testExecutePipelinedNonNullRedisCallback[4]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[1]",
        "testSort[9]",
        "testSortStore[4]",
        "testExecutePipelinedTx[5]",
        "testDumpAndRestoreNoTtl[8]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[2]",
        "testExpireMillisNotSupported[6]",
        "testGetExpireMillisUsingTransactions[8]",
        "testRestoreTtl[1]",
        "testExecutePipelined[8]",
        "testExecutePipelinedNonNullSessionCallback[1]",
        "testGetExpireSeconds[1]",
        "testTemplateNotInitialized[8]",
        "testExecutePipelinedNonNullRedisCallback[3]",
        "testExecutePipelinedTx[6]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[3]",
        "testDumpAndRestoreNoTtl[7]",
        "testRestoreTtl[6]",
        "testExpireMillisNotSupported[5]",
        "testExecutePipelined[5]",
        "testExecutePipelinedNonNullSessionCallback[7]",
        "testExpireAndGetExpireMillis[4]",
        "testGetExpireMillisNotSupported[2]",
        "testGetExpireMillisUsingTransactions[7]",
        "testGetExpireNoTimeUnit[0]",
        "testConvertAndSend[9]",
        "testExecutePipelinedNonNullRedisCallback[2]",
        "testSortStore[9]",
        "testExpireAtMillisNotSupported[2]",
        "testSort[8]",
        "testGetExpireSeconds[8]",
        "testDumpAndRestoreNoTtl[6]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[4]",
        "testExpireMillisNotSupported[4]",
        "testExecutePipelinedNonNullSessionCallback[8]",
        "testRestoreTtl[7]",
        "testExpireAndGetExpireMillis[5]",
        "testExecutePipelined[6]",
        "testGetExpireMillisNotSupported[3]",
        "testGetExpireMillisUsingTransactions[6]",
        "testGetExpireNoTimeUnit[1]",
        "testConvertAndSend[8]",
        "testExecutePipelinedNonNullRedisCallback[1]",
        "testExpireAtMillisNotSupported[1]",
        "testGetExpireSeconds[7]",
        "testSort[7]",
        "testExecutePipelinedTx[0]",
        "testDumpAndRestoreNoTtl[5]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[5]",
        "testSortStore[7]",
        "testExpireMillisNotSupported[3]",
        "testExecutePipelined[3]",
        "testExecutePipelinedNonNullSessionCallback[5]",
        "testRestoreTtl[4]",
        "testExpireAndGetExpireMillis[6]",
        "testGetExpireMillisNotSupported[4]",
        "testGetExpireMillisUsingTransactions[5]",
        "testGetExpireMillisNotSupported[5]",
        "testExecutePipelinedNonNullRedisCallback[0]",
        "testExpireAtMillisNotSupported[0]",
        "testSort[6]",
        "testGetExpireSeconds[6]",
        "testExecutePipelinedTx[1]",
        "testDumpAndRestoreNoTtl[4]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[6]",
        "testGetExpireMillisUsingTransactions[4]",
        "testRestoreTtl[5]",
        "testExecutePipelined[4]",
        "testExecutePipelinedNonNullSessionCallback[6]",
        "testExpireMillisNotSupported[2]",
        "testExpireAndGetExpireMillis[7]",
        "testGetExpireMillisNotSupported[6]",
        "testSortStore[8]",
        "testGetExpireSeconds[5]",
        "testSort[5]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[7]",
        "testExecutePipelined[1]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[1]",
        "testGetExpireMillisUsingTransactions[3]",
        "testRename[4]",
        "testExecCustomSerializer[1]",
        "clientListShouldReturnCorrectly[9]",
        "testGetExpireNoTimeUnit[4]",
        "testGetExpireSecondsForKeyDoesNotExist[4]",
        "testGetExpireMillisForKeyDoesNotExist[1]",
        "testWatch[6]",
        "testSort[4]",
        "testExecutePipelinedCustomSerializer[2]",
        "testGetExpireMillis[5]",
        "testExecuteScriptCustomSerializers[5]",
        "testSortBulkMapper[3]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[0]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[8]",
        "testExecuteScriptCustomSerializers[7]",
        "testExecutePipelined[2]",
        "testGetExpireMillisUsingTransactions[2]",
        "testRename[5]",
        "testExecCustomSerializer[0]",
        "testGetExpireNoTimeUnit[5]",
        "testGetExpireMillisForKeyDoesNotExist[2]",
        "testWatch[7]",
        "testGetExpireSecondsForKeyDoesNotExist[3]",
        "testSort[3]",
        "testGetExpireMillis[4]",
        "testExecuteScriptCustomSerializers[6]",
        "testSortBulkMapper[2]",
        "testExecutePipelinedCustomSerializer[3]",
        "testGetExpireMillisForKeyExistButHasNoAssociatedExpire[9]",
        "testPersist[9]",
        "testDelete[0]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[3]",
        "testExecutePipelinedNonNullSessionCallback[9]",
        "testGetExpireMillisUsingTransactions[1]",
        "testRename[2]",
        "testGetExpireNoTimeUnit[2]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[9]",
        "testWatch[8]",
        "testGetExpireSecondsForKeyDoesNotExist[2]",
        "testExecuteScriptCustomSerializers[3]",
        "testSortBulkMapper[1]",
        "testTemplateNotInitialized[1]",
        "testSort[2]",
        "testGetExpireMillis[3]",
        "testExecutePipelinedCustomSerializer[4]",
        "testPersist[8]",
        "testDelete[1]",
        "testGetExpireMillisUsingTransactions[0]",
        "testGetExpireSecondsForKeyExistButHasNoAssociatedExpire[2]",
        "testExecutePipelined[0]",
        "testRename[3]",
        "testExecutePipelinedWidthDifferentHashKeySerializerAndHashValueSerializer[8]",
        "testGetExpireNoTimeUnit[3]",
        "testWatch[9]",
        "testGetExpireMillisForKeyDoesNotExist[0]",
        "testExecuteScriptCustomSerializers[4]",
        "testGetExpireSecondsForKeyDoesNotExist[1]",
        "testSortBulkMapper[0]",
        "testTemplateNotInitialized[0]",
        "testSort[1]",
        "testGetExpireMillis[2]",
        "testExecutePipelinedCustomSerializer[5]",
        "testSortStore[1]",
        "testExecutePipelinedCustomSerializer[7]",
        "testPersist[7]",
        "testRename[0]",
        "testSort[0]",
        "testType[8]",
        "testGetExpireSeconds[0]",
        "testGetExpireNoTimeUnit[8]",
        "testGetExpireSecondsForKeyDoesNotExist[0]",
        "testTemplateNotInitialized[3]",
        "testGetExpireMillisForKeyDoesNotExist[5]",
        "testRandomKey[9]",
        "testPersist[6]",
        "clientListShouldReturnCorrectly[5]",
        "testExecutePipelinedCustomSerializer[6]",
        "testGetExpireMillis[1]",
        "testExecuteScriptCustomSerializers[1]",
        "testSortStore[2]",
        "testExecutePipelinedCustomSerializer[8]",
        "testRename[1]",
        "clientListShouldReturnCorrectly[6]",
        "testType[9]",
        "testGetExpireNoTimeUnit[9]",
        "testGetExpireMillisForKeyDoesNotExist[6]",
        "testTemplateNotInitialized[2]",
        "testRandomKey[8]",
        "testPersist[5]",
        "testGetExpireMillis[0]",
        "testExecuteScriptCustomSerializers[2]",
        "testExecutePipelinedCustomSerializer[9]",
        "testGetExpireNoTimeUnit[6]",
        "clientListShouldReturnCorrectly[7]",
        "testTemplateNotInitialized[5]",
        "testType[6]",
        "testGetExpireMillisForKeyDoesNotExist[3]",
        "testRandomKey[7]",
        "testPersist[4]",
        "testSortStore[0]",
        "clientListShouldReturnCorrectly[8]",
        "testGetExpireNoTimeUnit[7]",
        "testType[7]",
        "testGetExpireMillisForKeyDoesNotExist[4]",
        "testTemplateNotInitialized[4]",
        "testRandomKey[6]",
        "testExecuteScriptCustomSerializers[0]",
        "testPersist[3]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.springframework.dao.InvalidDataAccessApiUsageException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.RedisTestProfileValueSource",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 910
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisZSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "testRank[19]",
        "testRangeByLexUnboundedWithLimit[26]",
        "testContainsObject[3]",
        "testFirst[0]",
        "testContainsObject[28]",
        "testRemove[0]",
        "testAdd[5]",
        "testDefaultScore[20]",
        "testRangeByLexBoundedWithLimit[9]",
        "testContainsAll[20]",
        "testToString[24]",
        "removeAll[19]",
        "testReverseRangeByScoreWithScores[15]",
        "testRangeByScore[1]",
        "testClear[18]",
        "testHashCode[18]",
        "testReverseRank[13]",
        "testRangeByScore[22]",
        "testRemoveByScore[14]",
        "testContainsObject[2]",
        "testContainsObject[29]",
        "testFirst[1]",
        "testRangeByLexUnboundedWithLimit[27]",
        "testRange[29]",
        "testRangeByLexBoundedWithLimit[8]",
        "testRemove[1]",
        "testToString[22]",
        "testAdd[6]",
        "testToString[23]",
        "testReverseRangeByScoreWithScores[14]",
        "testRangeByScore[0]",
        "testRemoveByScore[15]",
        "testHashCode[17]",
        "testClear[17]",
        "removeAll[18]",
        "testRangeByScore[23]",
        "testReverseRank[12]",
        "testRank[17]",
        "testRangeByLexUnboundedWithLimit[28]",
        "testContainsObject[5]",
        "testAddWithScore[10]",
        "testAdd[3]",
        "testDefaultScore[22]",
        "testContainsAll[22]",
        "testScanWorksCorrectly[21]",
        "testRangeByLexBoundedWithLimit[7]",
        "testReverseRangeByScoreWithScores[17]",
        "testToString[26]",
        "testRangeByScoreWithScores[29]",
        "testLastException[30]",
        "testRangeByScore[3]",
        "testAddWithScore[11]",
        "testLast[9]",
        "testReverseRank[11]",
        "removeAll[17]",
        "testRangeByScore[24]",
        "testRemoveByScore[12]",
        "testRank[18]",
        "testScanWorksCorrectly[20]",
        "testContainsObject[4]",
        "testRangeByScore[25]",
        "testRangeByLexUnboundedWithLimit[29]",
        "testAdd[4]",
        "testDefaultScore[21]",
        "testContainsAll[21]",
        "testRangeByLexBoundedWithLimit[6]",
        "testReverseRangeByScoreWithScores[16]",
        "testToString[25]",
        "testHashCode[19]",
        "testIntersectAndStore[30]",
        "testClear[19]",
        "testRangeByScore[2]",
        "testReverseRank[10]",
        "testRemoveByScore[13]",
        "removeAll[16]",
        "testRangeByScore[26]",
        "testRank[15]",
        "testAdd[9]",
        "testRangeByLexBoundedWithLimit[5]",
        "testLast[7]",
        "testRemoveByScore[10]",
        "testRemove[4]",
        "testToString[28]",
        "testReverseRangeByScoreWithScores[11]",
        "testToArray[27]",
        "testReverseRank[17]",
        "testLast[17]",
        "removeAll[15]",
        "testRangeByLexUnboundedWithLimit[22]",
        "testAddAll[18]",
        "testRangeByLexUnboundedWithLimit[23]",
        "testRangeByScore[27]",
        "testRank[16]",
        "testRemoveObject[20]",
        "testRangeByLexBoundedWithLimit[4]",
        "testLast[8]",
        "removeAll[9]",
        "testToString[27]",
        "testRemove[5]",
        "testReverseRangeByScoreWithScores[10]",
        "testReverseRangeByScore[30]",
        "removeAll[14]",
        "testLast[18]",
        "testToArray[26]",
        "testReverseRank[16]",
        "testRemoveByScore[11]",
        "testContainsAll[0]",
        "testAddAll[19]",
        "testToArrayWithGenerics[1]",
        "testRangeByLexUnboundedWithLimit[24]",
        "testRangeByScore[28]",
        "testContainsObject[1]",
        "testFirst[18]",
        "testSize[20]",
        "testRank[13]",
        "testRemoveObject[21]",
        "testAddWithScore[30]",
        "testRemove[2]",
        "testAdd[7]",
        "testLast[5]",
        "testContainsAll[1]",
        "testRangeByLexBoundedWithLimit[3]",
        "removeAll[8]",
        "testReverseRangeByScoreWithScores[13]",
        "testToArray[29]",
        "removeAll[13]",
        "testReverseRank[15]",
        "testLast[19]",
        "testAddAll[16]",
        "testFirst[19]",
        "testToArrayWithGenerics[0]",
        "testRangeByLexUnboundedWithLimit[25]",
        "testRank[14]",
        "testSize[21]",
        "testRangeByScore[29]",
        "testRemoveObject[22]",
        "testAdd[8]",
        "testContainsObject[0]",
        "testContainsAll[2]",
        "testLast[6]",
        "testRangeByLexBoundedWithLimit[2]",
        "removeAll[7]",
        "testRemove[3]",
        "testReverseRangeByScoreWithScores[12]",
        "testToString[29]",
        "testToArray[28]",
        "testReverseRank[14]",
        "removeAll[12]",
        "testAddAll[17]",
        "testIterator[19]",
        "testRank[6]",
        "testFirst[16]",
        "testHashCode[10]",
        "testRangeWithScores[27]",
        "testGetKey[7]",
        "testReverseRangeWithScores[17]",
        "testRange[22]",
        "testToArrayWithGenerics[3]",
        "testRemove[8]",
        "testIntersectAndStore[11]",
        "testLast[13]",
        "testDefaultScore[29]",
        "testRemoveByScore[30]",
        "testLastException[12]",
        "testContainsAll[3]",
        "removeAll[6]",
        "testContainsAll[28]",
        "testLast[3]",
        "testRank[10]",
        "testUnionAndStore[30]",
        "testAddWithScore[5]",
        "testRangeByLexUnbounded[21]",
        "testAddWithScore[17]",
        "testRank[5]",
        "testFirst[17]",
        "testToArrayWithGenerics[2]",
        "testRank[12]",
        "testGetKey[6]",
        "testRange[21]",
        "testDefaultScore[27]",
        "removeAll[5]",
        "testDefaultScore[28]",
        "testIntersectAndStore[12]",
        "testContainsAll[4]",
        "testContainsAll[27]",
        "testRemove[9]",
        "testReverseRangeWithScores[18]",
        "testLast[4]",
        "testAddWithScore[6]",
        "testRank[11]",
        "testReverseRangeByScore[10]",
        "testReverseRangeByScoreWithScores[30]",
        "testRangeByLexUnbounded[20]",
        "testRangeWithScores[26]",
        "testLastException[13]",
        "testLast[14]",
        "testAddWithScore[16]",
        "testRangeWithScores[29]",
        "testRank[4]",
        "testFirst[14]",
        "testGetKey[5]",
        "testReverseRangeWithScores[15]",
        "testLast[0]",
        "testRange[24]",
        "testToArrayWithGenerics[5]",
        "removeAll[4]",
        "testAddWithScore[19]",
        "testLast[1]",
        "testAddWithScore[3]",
        "testReverseRank[19]",
        "testContainsAll[5]",
        "testRemove[6]",
        "testEquals[30]",
        "testLastException[14]",
        "testHashCode[12]",
        "testIntersectAndStore[13]",
        "testLast[15]",
        "testRank[3]",
        "testRangeWithScores[28]",
        "testFirst[15]",
        "testGetKey[4]",
        "testReverseRangeWithScores[16]",
        "testRange[23]",
        "testToArrayWithGenerics[4]",
        "testRemove[7]",
        "testContainsAll[6]",
        "testContainsAll[29]",
        "testLast[2]",
        "testReverseRank[18]",
        "testAddWithScore[4]",
        "testHashCode[11]",
        "testLast[16]",
        "testAddWithScore[18]",
        "removeAll[3]",
        "testIntersectAndStore[14]",
        "testLastException[15]",
        "testAdd[1]",
        "testFirst[12]",
        "testReverseRangeByScore[13]",
        "testContainsObject[7]",
        "testRange[26]",
        "testToArrayWithGenerics[7]",
        "testFirstException[21]",
        "testDefaultScore[24]",
        "testRank[2]",
        "testContainsAll[24]",
        "testRangeByLexBoundedWithLimit[17]",
        "testAddWithScore[1]",
        "testRangeByLexUnbounded[25]",
        "testContainsAll[7]",
        "testAddWithScore[13]",
        "testFirst[11]",
        "testRank[30]",
        "removeAll[2]",
        "testHashCode[14]",
        "testContainsObject[6]",
        "testFirst[13]",
        "testReverseRangeByScore[14]",
        "testRange[25]",
        "testAdd[2]",
        "testDefaultScore[23]",
        "testRank[1]",
        "testToArrayWithGenerics[6]",
        "testFirstException[20]",
        "testContainsAll[23]",
        "testLast[10]",
        "testRangeByLexBoundedWithLimit[18]",
        "testAddWithScore[2]",
        "testContainsAll[8]",
        "testRangeByLexUnbounded[24]",
        "testAddWithScore[12]",
        "removeAll[1]",
        "testHashCode[13]",
        "testGetKey[9]",
        "testRange[28]",
        "testToArrayWithGenerics[9]",
        "testContainsAll[9]",
        "testRangeByLexBoundedWithLimit[19]",
        "testDefaultScore[26]",
        "testRank[0]",
        "testLastException[10]",
        "testContainsAll[26]",
        "testLast[11]",
        "testReverseRangeWithScores[19]",
        "testRangeByLexUnbounded[23]",
        "testContainsObject[9]",
        "testHashCode[16]",
        "testReverseRangeByScore[11]",
        "removeAll[0]",
        "testAddWithScore[15]",
        "testReverseRangeByScore[12]",
        "testAdd[0]",
        "testGetKey[8]",
        "testContainsObject[8]",
        "testRange[27]",
        "testToArrayWithGenerics[8]",
        "testDefaultScore[25]",
        "testLast[12]",
        "testContainsAll[25]",
        "testIntersectAndStore[10]",
        "testLastException[11]",
        "testAddWithScore[0]",
        "testHashCode[15]",
        "testAddWithScore[14]",
        "testRangeByLexUnbounded[22]",
        "testFirst[10]",
        "testReverseRangeByScore[29]",
        "testIterator[21]",
        "testFirstException[13]",
        "testReverseRangeWithScores[21]",
        "testRemoveObject[19]",
        "testRangeByLexBoundedWithLimit[13]",
        "testUnionAndStore[14]",
        "testRangeByLexUnbounded[29]",
        "testScore[20]",
        "testSize[7]",
        "testRemove[13]",
        "testIntersectAndStore[19]",
        "testEquals[8]",
        "testGetKey[10]",
        "testRangeByLexUnboundedWithLimit[6]",
        "testAddAll[6]",
        "testEquals[12]",
        "testIterator[20]",
        "testAddAll[7]",
        "testEquals[7]",
        "testFirstException[12]",
        "testReverseRangeWithScores[22]",
        "testRangeByLexBoundedWithLimit[14]",
        "testScore[21]",
        "testUnionAndStore[13]",
        "testRangeByLexUnbounded[28]",
        "testSize[8]",
        "testLast[30]",
        "testRemove[12]",
        "testRangeByLexUnboundedWithLimit[7]",
        "testEquals[13]",
        "testReverseRangeByScore[27]",
        "testFirstException[11]",
        "testUnionAndStore[16]",
        "testRangeWithScores[1]",
        "testRangeByLexUnbounded[27]",
        "testSize[9]",
        "testRemove[11]",
        "testRangeByLexBoundedWithLimit[15]",
        "testGetKey[12]",
        "testRangeWithScores[21]",
        "testRangeByLexUnboundedWithLimit[8]",
        "testAddAll[4]",
        "testEquals[14]",
        "testEquals[15]",
        "testReverseRangeByScore[28]",
        "testReverseRangeWithScores[20]",
        "testToArrayWithGenerics[30]",
        "testFirstException[10]",
        "testRangeWithScores[0]",
        "testUnionAndStore[15]",
        "testRangeByLexUnbounded[26]",
        "testRangeByLexBoundedWithLimit[16]",
        "testRemove[10]",
        "testEquals[9]",
        "testGetKey[11]",
        "testRangeByLexUnboundedWithLimit[9]",
        "testFirst[30]",
        "testRangeWithScores[20]",
        "testIsEmpty[30]",
        "testAddAll[5]",
        "testReverseRangeWithScores[25]",
        "testRangeByLexUnboundedWithLimit[2]",
        "testReverseRange[27]",
        "testFirstException[17]",
        "testAddAll[2]",
        "testLastException[28]",
        "testRangeByLexBounded[27]",
        "testIntersectAndStore[15]",
        "testUnionAndStore[10]",
        "testIsEmpty[11]",
        "testRangeWithScores[23]",
        "testReverseRangeWithScores[26]",
        "testAdd[30]",
        "testContainsAll[19]",
        "testReverseRange[26]",
        "testFirstException[16]",
        "testScanWorksCorrectly[19]",
        "testRangeWithScores[22]",
        "testLastException[29]",
        "testRangeByLexBounded[28]",
        "testRangeByLexBoundedWithLimit[10]",
        "testIntersectAndStore[16]",
        "testRangeByLexUnboundedWithLimit[3]",
        "testAddAll[3]",
        "testIsEmpty[12]",
        "testHashCode[20]",
        "testReverseRangeWithScores[23]",
        "testRange[20]",
        "testRangeByLexBoundedWithLimit[11]",
        "testClear[20]",
        "testReverseRange[29]",
        "testFirstException[15]",
        "testAddAll[0]",
        "testIntersectAndStore[17]",
        "testEquals[10]",
        "testUnionAndStore[12]",
        "testRangeByLexBounded[29]",
        "testRangeWithScores[25]",
        "testRangeByLexUnboundedWithLimit[4]",
        "testContainsObject[30]",
        "testGetKey[30]",
        "testFirstException[14]",
        "testReverseRangeWithScores[24]",
        "testRangeByLexBoundedWithLimit[12]",
        "testRemove[30]",
        "testReverseRange[28]",
        "testAddAll[1]",
        "testIsEmpty[10]",
        "testIntersectAndStore[18]",
        "testEquals[11]",
        "testRangeByScoreWithScores[30]",
        "testRangeByLexUnboundedWithLimit[5]",
        "testUnionAndStore[11]",
        "testRangeWithScores[24]",
        "testIsEmpty[15]",
        "testAddAll[26]",
        "testRangeByLexBounded[22]",
        "testSize[22]",
        "testRemoveObject[11]",
        "testScore[29]",
        "testScanWorksCorrectly[15]",
        "testFirst[8]",
        "testReverseRange[23]",
        "testClear[22]",
        "testGetKey[18]",
        "testAdd[11]",
        "testLastException[7]",
        "testRangeByScoreWithScores[11]",
        "removeAll[23]",
        "testToArrayWithGenerics[17]",
        "testToArray[23]",
        "testIsEmpty[16]",
        "removeAll[21]",
        "testRangeByLexBounded[23]",
        "testSize[23]",
        "testRemoveObject[12]",
        "testScanWorksCorrectly[14]",
        "testFirst[9]",
        "testReverseRange[22]",
        "testGetKey[17]",
        "testClear[21]",
        "testLastException[8]",
        "testAdd[10]",
        "testRangeByScoreWithScores[12]",
        "removeAll[22]",
        "testToArrayWithGenerics[16]",
        "testAddAll[27]",
        "testToArray[22]",
        "testIterator[29]",
        "testRangeByLexBoundedWithLimit[30]",
        "testAddAll[24]",
        "testSize[24]",
        "removeAll[20]",
        "testRangeByLexBounded[24]",
        "testFirst[6]",
        "testScanWorksCorrectly[17]",
        "testAdd[13]",
        "testRemoveObject[13]",
        "testScore[27]",
        "testReverseRange[25]",
        "testLastException[5]",
        "testFirstException[19]",
        "testReverseRange[0]",
        "testScanWorksCorrectly[18]",
        "testClear[24]",
        "testContainsObject[10]",
        "testRangeByLexBounded[25]",
        "testIterator[28]",
        "testToArrayWithGenerics[15]",
        "testToArray[25]",
        "testIsEmpty[13]",
        "testRangeByLexUnboundedWithLimit[20]",
        "testRemove[19]",
        "testSize[25]",
        "testAddAll[25]",
        "testScanWorksCorrectly[16]",
        "testRemoveObject[14]",
        "testFirst[7]",
        "testScore[28]",
        "testGetKey[19]",
        "testClear[23]",
        "testReverseRange[24]",
        "testLastException[6]",
        "testFirstException[18]",
        "testAdd[12]",
        "testIterator[27]",
        "testContainsObject[11]",
        "testRangeByLexBounded[26]",
        "testRangeByScoreWithScores[10]",
        "testToArrayWithGenerics[14]",
        "testToArray[24]",
        "testIsEmpty[14]",
        "testRemove[18]",
        "testRangeByLexUnboundedWithLimit[21]",
        "testEquals[16]",
        "testReverseRank[20]",
        "testSize[26]",
        "testRemoveByScore[19]",
        "testIsEmpty[19]",
        "testAddAll[22]",
        "testAdd[15]",
        "testFirst[4]",
        "testIntersectAndStore[9]",
        "testRemoveObject[15]",
        "testScore[25]",
        "testScanWorksCorrectly[11]",
        "testScore[24]",
        "testRangeByScoreWithScores[15]",
        "testClear[26]",
        "testReverseRange[2]",
        "testUnionAndStore[18]",
        "testToArrayWithGenerics[13]",
        "testContainsObject[12]",
        "testRemoveByScore[18]",
        "testIterator[26]",
        "testRemove[17]",
        "testReverseRank[21]",
        "testGetKey[14]",
        "testAddAll[23]",
        "testEquals[17]",
        "testSize[27]",
        "testIterator[24]",
        "testFirst[5]",
        "testIntersectAndStore[8]",
        "testAdd[14]",
        "testScore[26]",
        "testRemoveObject[16]",
        "testScanWorksCorrectly[10]",
        "testRangeByScoreWithScores[16]",
        "testReverseRange[1]",
        "testClear[25]",
        "testUnionAndStore[17]",
        "testToArrayWithGenerics[12]",
        "testIterator[25]",
        "testContainsObject[13]",
        "testRemove[16]",
        "testGetKey[13]",
        "testScanWorksCorrectly[8]",
        "testIsEmpty[17]",
        "testAddAll[8]",
        "testEquals[18]",
        "testRangeByLexBounded[20]",
        "testContainsObject[14]",
        "testAddAll[20]",
        "testIterator[23]",
        "testFirst[2]",
        "testToArrayWithGenerics[11]",
        "testIntersectAndStore[7]",
        "testScanWorksCorrectly[13]",
        "testAdd[17]",
        "testRemoveObject[17]",
        "testReverseRange[21]",
        "testToString[21]",
        "testScore[22]",
        "testLastException[9]",
        "testRangeByScoreWithScores[13]",
        "testReverseRange[4]",
        "testRangeByScore[20]",
        "testRemoveByScore[16]",
        "testRemove[15]",
        "testClear[28]",
        "testGetKey[16]",
        "testSize[28]",
        "testToArray[21]",
        "testToArray[20]",
        "testAddAll[9]",
        "testIsEmpty[18]",
        "testEquals[19]",
        "testRangeByLexBounded[21]",
        "testContainsObject[15]",
        "testScanWorksCorrectly[9]",
        "testToArrayWithGenerics[10]",
        "testAddAll[21]",
        "testIterator[22]",
        "testIntersectAndStore[6]",
        "testAdd[16]",
        "testFirst[3]",
        "testScanWorksCorrectly[12]",
        "testToString[20]",
        "testRemoveObject[18]",
        "testReverseRange[20]",
        "testScore[23]",
        "testClear[27]",
        "testUnionAndStore[19]",
        "testRangeByScoreWithScores[14]",
        "testReverseRange[3]",
        "testRemoveByScore[17]",
        "testRemove[14]",
        "testGetKey[15]",
        "testSize[29]",
        "testRangeByScore[21]",
        "testScanWorksCorrectly[6]",
        "testRangeByLexUnboundedWithLimit[14]",
        "testAddWithScore[20]",
        "testClear[5]",
        "testContainsObject[16]",
        "testRange[18]",
        "testReverseRangeWithScores[3]",
        "testUnionAndStore[7]",
        "testRangeByLexUnbounded[8]",
        "testAdd[19]",
        "testToString[11]",
        "testIntersectAndStore[5]",
        "testIsEmpty[8]",
        "testToString[12]",
        "testRangeByScoreWithScores[19]",
        "testReverseRangeByScoreWithScores[27]",
        "testToArray[19]",
        "testRemoveByScore[26]",
        "testReverseRank[25]",
        "testReverseRange[6]",
        "testReverseRangeByScoreWithScores[3]",
        "testReverseRangeByScore[5]",
        "testRangeByScore[10]",
        "testReverseRangeByScoreWithScores[4]",
        "testScanWorksCorrectly[30]",
        "testScanWorksCorrectly[7]",
        "testRangeByLexUnboundedWithLimit[15]",
        "testIterator[0]",
        "testClear[4]",
        "testRange[17]",
        "testContainsObject[17]",
        "testUnionAndStore[6]",
        "testReverseRangeWithScores[4]",
        "testIntersectAndStore[4]",
        "testIsEmpty[9]",
        "testRangeByLexUnbounded[7]",
        "testToString[10]",
        "testAdd[18]",
        "testReverseRangeByScoreWithScores[26]",
        "testToArray[18]",
        "testReverseRange[5]",
        "testRemoveByScore[27]",
        "testClear[29]",
        "testHashCode[29]",
        "testRemoveByScore[9]",
        "testReverseRangeByScore[6]",
        "testRangeByScore[11]",
        "testReverseRank[24]",
        "testContainsObject[18]",
        "testRank[29]",
        "testRangeByLexUnboundedWithLimit[16]",
        "testClear[7]",
        "testDefaultScore[10]",
        "testIterator[1]",
        "testContainsAll[10]",
        "testIntersectAndStore[3]",
        "testUnionAndStore[5]",
        "testReverseRangeByScoreWithScores[29]",
        "testIsEmpty[6]",
        "testToString[14]",
        "testRangeByScoreWithScores[17]",
        "testReverseRangeWithScores[5]",
        "testReverseRangeByScore[7]",
        "testAddWithScore[23]",
        "testReverseRange[8]",
        "testReverseRangeByScoreWithScores[1]",
        "testScanWorksCorrectly[3]",
        "testRemoveByScore[8]",
        "testRangeByScore[12]",
        "removeAll[29]",
        "testRemoveByScore[24]",
        "testReverseRank[23]",
        "testContainsObject[19]",
        "testScanWorksCorrectly[5]",
        "testRangeByLexUnboundedWithLimit[17]",
        "testRange[19]",
        "testAddWithScore[21]",
        "testRemoveObject[30]",
        "testClear[6]",
        "testIntersectAndStore[2]",
        "testUnionAndStore[4]",
        "testIterator[2]",
        "testRangeByLexUnbounded[9]",
        "testIsEmpty[7]",
        "testToString[13]",
        "testReverseRangeByScoreWithScores[28]",
        "testRangeByScoreWithScores[18]",
        "testReverseRangeWithScores[6]",
        "testReverseRangeByScore[8]",
        "testRemoveByScore[7]",
        "testAddWithScore[22]",
        "testReverseRange[7]",
        "testScanWorksCorrectly[4]",
        "testRangeByScore[13]",
        "testReverseRank[22]",
        "removeAll[28]",
        "testReverseRangeByScoreWithScores[2]",
        "testRemoveByScore[25]",
        "testClear[1]",
        "testRank[27]",
        "testReverseRangeByScoreWithScores[7]",
        "testRangeByScore[14]",
        "testSize[30]",
        "testLastException[3]",
        "testRange[9]",
        "testIntersectAndStore[1]",
        "testIsEmpty[4]",
        "testToString[16]",
        "testReverseRank[29]",
        "testReverseRangeWithScores[7]",
        "testReverseRangeByScoreWithScores[23]",
        "testDefaultScore[9]",
        "testToArray[15]",
        "testLast[29]",
        "testRangeByScoreWithScores[0]",
        "testRemoveByScore[6]",
        "testReverseRangeByScore[9]",
        "testRemoveByScore[22]",
        "testScanWorksCorrectly[1]",
        "testRangeByLexUnboundedWithLimit[10]",
        "removeAll[27]",
        "testRangeByScore[15]",
        "testClear[0]",
        "testRank[28]",
        "testReverseRangeByScoreWithScores[8]",
        "testIntersectAndStore[0]",
        "testLastException[4]",
        "testIsEmpty[5]",
        "testToString[15]",
        "testRange[8]",
        "testReverseRangeWithScores[8]",
        "testReverseRangeByScoreWithScores[22]",
        "testRemoveByScore[5]",
        "testDefaultScore[8]",
        "testRangeByScoreWithScores[1]",
        "testReverseRank[28]",
        "testToArray[14]",
        "testReverseRange[9]",
        "testRemoveByScore[23]",
        "testScanWorksCorrectly[2]",
        "testRangeByLexUnboundedWithLimit[11]",
        "removeAll[26]",
        "testReverseRangeByScoreWithScores[5]",
        "testRangeByLexUnboundedWithLimit[12]",
        "testRangeByScore[16]",
        "testClear[3]",
        "testRemoveObject[8]",
        "testRank[25]",
        "testRangeByScoreWithScores[2]",
        "testRemoveByScore[3]",
        "testDefaultScore[30]",
        "testScore[19]",
        "testUnionAndStore[9]",
        "testContainsAll[30]",
        "testLastException[0]",
        "testReverseRangeWithScores[9]",
        "testRemoveByScore[20]",
        "testReverseRangeByScoreWithScores[25]",
        "testIsEmpty[2]",
        "testToString[18]",
        "testToArray[17]",
        "testRemoveByScore[4]",
        "removeAll[25]",
        "testDefaultScore[7]",
        "testReverseRank[27]",
        "testAddAll[28]",
        "testToArrayWithGenerics[19]",
        "testRangeByLexUnboundedWithLimit[13]",
        "testRangeByScore[17]",
        "testReverseRangeByScoreWithScores[6]",
        "testRangeByScoreWithScores[3]",
        "testDefaultScore[5]",
        "testClear[2]",
        "testRemoveObject[9]",
        "testRank[26]",
        "testRemoveByScore[2]",
        "testRemoveObject[10]",
        "testUnionAndStore[8]",
        "testLastException[1]",
        "testLastException[2]",
        "testRemoveByScore[21]",
        "testIsEmpty[3]",
        "testToString[17]",
        "testReverseRangeByScoreWithScores[24]",
        "testScanWorksCorrectly[0]",
        "removeAll[24]",
        "testReverseRank[26]",
        "testToArray[16]",
        "testDefaultScore[6]",
        "testToArrayWithGenerics[18]",
        "testAddAll[29]",
        "testFirst[28]",
        "testEquals[0]",
        "testDefaultScore[4]",
        "testRank[23]",
        "testRangeByScore[18]",
        "testRangeWithScores[7]",
        "testIterator[7]",
        "testFirstException[1]",
        "testRange[10]",
        "testDefaultScore[16]",
        "testDefaultScore[17]",
        "testIntersectAndStore[23]",
        "testContainsAll[16]",
        "testReverseRangeWithScores[29]",
        "testIsEmpty[0]",
        "testHashCode[2]",
        "testRank[22]",
        "testReverseRangeByScore[21]",
        "testRangeWithScores[15]",
        "testHashCode[22]",
        "testLastException[24]",
        "testAddWithScore[29]",
        "testRange[5]",
        "testLast[25]",
        "testHashCode[21]",
        "testFirst[29]",
        "testRangeByLexBounded[0]",
        "testDefaultScore[3]",
        "testRangeByScore[19]",
        "testRank[24]",
        "testIterator[8]",
        "testSize[0]",
        "testFirstException[2]",
        "testDefaultScore[15]",
        "testContainsAll[15]",
        "testIterator[9]",
        "testIsEmpty[1]",
        "testRangeWithScores[6]",
        "testToString[19]",
        "testHashCode[3]",
        "testReverseRangeByScore[22]",
        "testLastException[25]",
        "testAddWithScore[28]",
        "testRangeWithScores[14]",
        "testIntersectAndStore[24]",
        "testRange[4]",
        "testLast[26]",
        "testRangeWithScores[17]",
        "testEquals[2]",
        "testReverseRangeByScoreWithScores[9]",
        "testFirst[26]",
        "testDefaultScore[2]",
        "testReverseRangeWithScores[27]",
        "testRangeByLexBounded[1]",
        "testRangeWithScores[9]",
        "testFirstException[3]",
        "testRange[12]",
        "testSize[1]",
        "testRange[7]",
        "testRangeByLexUnboundedWithLimit[0]",
        "testDefaultScore[19]",
        "testContainsAll[18]",
        "testHashCode[4]",
        "testReverseRangeByScoreWithScores[21]",
        "testRank[20]",
        "testLast[27]",
        "testHashCode[24]",
        "testUnionAndStore[20]",
        "testIntersectAndStore[25]",
        "testLastException[26]",
        "testDefaultScore[1]",
        "testEquals[1]",
        "testFirst[27]",
        "testRangeWithScores[16]",
        "testRangeWithScores[8]",
        "testRangeByLexBounded[2]",
        "testSize[2]",
        "testFirstException[4]",
        "testReverseRangeWithScores[28]",
        "testRange[11]",
        "testReverseRangeByScore[0]",
        "testRangeByLexUnboundedWithLimit[1]",
        "testRange[6]",
        "testDefaultScore[18]",
        "testContainsAll[17]",
        "testHashCode[5]",
        "testRank[21]",
        "testReverseRangeByScoreWithScores[20]",
        "testReverseRangeByScore[20]",
        "testIntersectAndStore[26]",
        "testRangeByLexUnbounded[30]",
        "testHashCode[23]",
        "testLast[28]",
        "testLastException[27]",
        "testRangeWithScores[19]",
        "testDefaultScore[0]",
        "testFirst[24]",
        "testEquals[4]",
        "testReverseRangeByScore[25]",
        "testRangeByLexUnboundedWithLimit[18]",
        "testRangeByLexBounded[3]",
        "testRange[14]",
        "testSize[3]",
        "testDefaultScore[12]",
        "testIterator[3]",
        "testContainsAll[12]",
        "testUnionAndStore[3]",
        "testLastException[20]",
        "testLast[21]",
        "testReverseRangeByScore[1]",
        "testHashCode[6]",
        "testRangeByLexBoundedWithLimit[29]",
        "testRangeWithScores[3]",
        "testRangeByLexUnbounded[13]",
        "testHashCode[26]",
        "testAddWithScore[25]",
        "testRange[1]",
        "testRangeWithScores[18]",
        "testEquals[3]",
        "testRangeByLexUnboundedWithLimit[19]",
        "testFirst[25]",
        "testReverseRangeByScore[26]",
        "testRangeByLexBounded[4]",
        "testSize[4]",
        "testDefaultScore[11]",
        "testRange[13]",
        "testContainsAll[11]",
        "testUnionAndStore[2]",
        "testIterator[4]",
        "testLastException[21]",
        "testUnionAndStore[1]",
        "testRangeWithScores[2]",
        "testReverseRangeByScore[2]",
        "testIntersectAndStore[20]",
        "testLast[22]",
        "testHashCode[7]",
        "testRangeByLexUnbounded[12]",
        "testAddWithScore[24]",
        "testRange[0]",
        "testToString[0]",
        "testHashCode[25]",
        "testReverseRangeByScore[23]",
        "testEquals[6]",
        "testIterator[5]",
        "testRange[16]",
        "testSize[5]",
        "testDefaultScore[14]",
        "testRangeByLexBounded[5]",
        "testUnionAndStore[0]",
        "testContainsAll[14]",
        "testLast[23]",
        "testHashCode[8]",
        "testIntersectAndStore[21]",
        "testLastException[22]",
        "testRangeWithScores[5]",
        "testRangeByLexUnbounded[11]",
        "testHashCode[28]",
        "testFirst[21]",
        "testRange[3]",
        "testReverseRangeByScore[3]",
        "testAddWithScore[27]",
        "testEquals[5]",
        "testFirst[23]",
        "testReverseRangeByScore[24]",
        "testIterator[6]",
        "testRange[15]",
        "testDefaultScore[13]",
        "testRangeByLexBounded[6]",
        "testFirstException[30]",
        "testFirstException[0]",
        "testContainsAll[13]",
        "testIntersectAndStore[22]",
        "testLast[24]",
        "testLastException[23]",
        "testHashCode[9]",
        "testRangeWithScores[4]",
        "testSize[6]",
        "testHashCode[27]",
        "testRangeByLexUnbounded[10]",
        "testFirst[22]",
        "testReverseRangeByScore[4]",
        "testRange[2]",
        "testAddWithScore[26]",
        "testReverseRangeByScore[17]",
        "testScore[8]",
        "testAddAll[30]",
        "testToArrayWithGenerics[21]",
        "testFirstException[25]",
        "testRangeByLexBounded[7]",
        "testRangeByLexBoundedWithLimit[25]",
        "testUnionAndStore[26]",
        "testToString[3]",
        "testRangeByLexUnbounded[17]",
        "testFirstException[9]",
        "testGetKey[22]",
        "testToArray[5]",
        "testReverseRange[19]",
        "testRemove[25]",
        "testScore[9]",
        "testSize[18]",
        "testRangeByLexBounded[19]",
        "testEquals[24]",
        "testReverseRank[5]",
        "testScore[7]",
        "testReverseRangeByScore[18]",
        "testToArrayWithGenerics[20]",
        "testFirstException[24]",
        "testRangeByLexBounded[8]",
        "testReverseRangeWithScores[10]",
        "testReverseRank[4]",
        "testToString[4]",
        "testUnionAndStore[25]",
        "testRangeByLexBounded[9]",
        "testRangeByLexUnbounded[16]",
        "testToArray[4]",
        "testReverseRange[18]",
        "testRangeByLexBoundedWithLimit[26]",
        "testFirst[20]",
        "testIsEmpty[20]",
        "testRemove[24]",
        "testGetKey[21]",
        "testRangeWithScores[30]",
        "testSize[19]",
        "testEquals[25]",
        "testEquals[26]",
        "testReverseRangeByScore[15]",
        "testFirstException[23]",
        "testRangeByLexUnbounded[15]",
        "testRangeByLexBoundedWithLimit[27]",
        "testUnionAndStore[28]",
        "testScore[30]",
        "testRemove[23]",
        "testToArray[7]",
        "testToString[1]",
        "testReverseRank[7]",
        "testGetKey[24]",
        "testReverseRangeByScore[16]",
        "testIterator[30]",
        "testEquals[27]",
        "testFirstException[22]",
        "testUnionAndStore[27]",
        "testLast[20]",
        "testRangeByLexBoundedWithLimit[28]",
        "testRangeByLexUnbounded[14]",
        "testRemove[22]",
        "testToArray[6]",
        "testGetKey[23]",
        "testToString[2]",
        "testReverseRank[6]",
        "testHashCode[30]",
        "testScore[4]",
        "testGetKey[3]",
        "testFirstException[5]",
        "testReverseRangeWithScores[13]",
        "testRange[30]",
        "testReverseRank[1]",
        "testFirstException[29]",
        "testReverseRange[15]",
        "testToString[7]",
        "testRemove[21]",
        "testRangeWithScores[11]",
        "testRangeByLexBounded[15]",
        "testEquals[20]",
        "testRangeByLexBoundedWithLimit[21]",
        "testToArray[9]",
        "testUnionAndStore[22]",
        "testIntersectAndStore[27]",
        "testAddWithScore[9]",
        "testLastException[16]",
        "testIsEmpty[23]",
        "testRank[9]",
        "testScore[3]",
        "testFirstException[6]",
        "testReverseRangeWithScores[14]",
        "testGetKey[2]",
        "testReverseRange[14]",
        "testRangeByLexBoundedWithLimit[22]",
        "testReverseRank[0]",
        "testRemove[20]",
        "testFirstException[28]",
        "testToString[8]",
        "testRangeWithScores[10]",
        "testLastException[17]",
        "testToArray[8]",
        "testRangeByLexBounded[16]",
        "testIntersectAndStore[28]",
        "testRangeByScoreWithScores[20]",
        "testEquals[21]",
        "testIsEmpty[24]",
        "testUnionAndStore[21]",
        "testScore[6]",
        "testReverseRangeByScore[19]",
        "testRank[8]",
        "testFirstException[7]",
        "testGetKey[1]",
        "testReverseRangeWithScores[11]",
        "testReverseRank[3]",
        "testToString[5]",
        "testRangeByLexUnbounded[19]",
        "testRangeByLexBoundedWithLimit[23]",
        "testUnionAndStore[24]",
        "testFirstException[27]",
        "testReverseRange[17]",
        "testAdd[21]",
        "testAddWithScore[7]",
        "testLastException[18]",
        "testIsEmpty[21]",
        "testHashCode[0]",
        "testGetKey[20]",
        "testRangeByLexBounded[17]",
        "testIntersectAndStore[29]",
        "testEquals[22]",
        "testRangeWithScores[13]",
        "testScore[5]",
        "testRank[7]",
        "testClear[30]",
        "testGetKey[0]",
        "testReverseRangeWithScores[12]",
        "testToString[6]",
        "testRangeByLexBoundedWithLimit[24]",
        "testReverseRank[2]",
        "testRangeByLexUnbounded[18]",
        "testReverseRange[16]",
        "testAdd[20]",
        "testFirstException[8]",
        "testFirstException[26]",
        "testHashCode[1]",
        "testLastException[19]",
        "testRangeByLexBounded[18]",
        "testUnionAndStore[23]",
        "testEquals[23]",
        "testIsEmpty[22]",
        "testAddWithScore[8]",
        "testRangeWithScores[12]",
        "testRemoveObject[6]",
        "testRangeByScore[9]",
        "testAddAll[14]",
        "testIsEmpty[27]",
        "testRemoveByScore[1]",
        "testRangeByLexBounded[10]",
        "testSize[10]",
        "removeAll[10]",
        "testRangeByScoreWithScores[4]",
        "testScanWorksCorrectly[27]",
        "testRemoveObject[23]",
        "testScore[0]",
        "testScore[17]",
        "testRangeByLexBoundedWithLimit[1]",
        "testReverseRange[11]",
        "testClear[10]",
        "testAdd[23]",
        "testRangeByScoreWithScores[23]",
        "removeAll[11]",
        "testRangeByLexUnboundedWithLimit[30]",
        "testToArray[11]",
        "testIterator[18]",
        "testContainsObject[20]",
        "testToArrayWithGenerics[29]",
        "testIsEmpty[28]",
        "testAddAll[15]",
        "testRemoveObject[7]",
        "testRemoveByScore[0]",
        "testRangeByLexBounded[11]",
        "testRangeByScoreWithScores[5]",
        "testSize[11]",
        "testScore[18]",
        "testRemoveObject[24]",
        "testScanWorksCorrectly[26]",
        "testReverseRange[10]",
        "testRangeByLexBoundedWithLimit[0]",
        "testGetKey[29]",
        "testAdd[22]",
        "testRangeByScoreWithScores[24]",
        "testContainsObject[21]",
        "testIterator[17]",
        "testToArrayWithGenerics[28]",
        "testRangeByScore[8]",
        "testToArray[10]",
        "testRemoveObject[4]",
        "testRangeByScoreWithScores[6]",
        "testAddAll[12]",
        "testScore[2]",
        "testRangeByLexBounded[12]",
        "testSize[12]",
        "testRangeByLexUnbounded[2]",
        "testAdd[25]",
        "testRemoveObject[25]",
        "testScore[15]",
        "testClear[12]",
        "testReverseRange[13]",
        "testRangeByLexUnbounded[1]",
        "testToString[9]",
        "testIterator[16]",
        "testContainsObject[22]",
        "testRangeByScoreWithScores[21]",
        "testToArray[13]",
        "testIsEmpty[25]",
        "testToArrayWithGenerics[27]",
        "testRangeByScoreWithScores[7]",
        "testAddAll[13]",
        "testRemoveObject[5]",
        "testSize[13]",
        "testIsEmpty[26]",
        "testScore[1]",
        "testRangeByLexBounded[13]",
        "testScanWorksCorrectly[28]",
        "testAdd[24]",
        "testRemoveObject[26]",
        "testScore[16]",
        "testReverseRange[12]",
        "testClear[11]",
        "testRangeByLexUnbounded[0]",
        "testScanWorksCorrectly[29]",
        "testRangeByLexBounded[14]",
        "testRangeByScoreWithScores[22]",
        "testContainsObject[23]",
        "testToArrayWithGenerics[26]",
        "testIterator[15]",
        "testToArray[12]",
        "testRangeByLexBoundedWithLimit[20]",
        "testSize[14]",
        "testEquals[28]",
        "testRangeByLexBounded[30]",
        "testRangeByScoreWithScores[8]",
        "testIterator[13]",
        "testAddAll[10]",
        "removeAll[30]",
        "testRangeByLexUnbounded[4]",
        "testAdd[27]",
        "testClear[9]",
        "testScanWorksCorrectly[23]",
        "testRemoveObject[27]",
        "testReverseRangeByScoreWithScores[19]",
        "testScore[12]",
        "testRangeByScoreWithScores[27]",
        "testToArray[1]",
        "testClear[14]",
        "testRangeByScore[30]",
        "testIterator[14]",
        "testReverseRank[9]",
        "testContainsObject[24]",
        "testToArrayWithGenerics[25]",
        "testGetKey[26]",
        "testRemoveObject[2]",
        "testRangeByScore[5]",
        "testRemove[29]",
        "testToArray[30]",
        "testRangeByScoreWithScores[9]",
        "testReverseRangeWithScores[30]",
        "testSize[15]",
        "testEquals[29]",
        "testIterator[12]",
        "testContainsObject[25]",
        "testAddAll[11]",
        "testAdd[26]",
        "testRangeByLexUnbounded[3]",
        "testClear[8]",
        "testReverseRange[30]",
        "testScore[14]",
        "testToString[30]",
        "testRemoveObject[28]",
        "testReverseRangeWithScores[0]",
        "testScanWorksCorrectly[22]",
        "testReverseRangeByScoreWithScores[18]",
        "testToArray[0]",
        "testScore[13]",
        "testRangeByScoreWithScores[28]",
        "testUnionAndStore[29]",
        "testClear[13]",
        "testToArrayWithGenerics[24]",
        "testRangeByScore[4]",
        "testReverseRangeByScoreWithScores[0]",
        "testReverseRank[8]",
        "testRemove[28]",
        "testRemoveObject[3]",
        "testGetKey[25]",
        "testIsEmpty[29]",
        "testSize[16]",
        "testReverseRank[30]",
        "testContainsObject[26]",
        "testIterator[11]",
        "testReverseRangeWithScores[1]",
        "testScanWorksCorrectly[25]",
        "testRangeByLexUnbounded[6]",
        "testAdd[29]",
        "testRemoveObject[29]",
        "testScore[10]",
        "testGetKey[28]",
        "testClear[16]",
        "testRangeByScoreWithScores[25]",
        "testToArray[3]",
        "testToArrayWithGenerics[23]",
        "testRemoveByScore[28]",
        "testRemoveObject[0]",
        "testRangeByScore[7]",
        "testRemove[27]",
        "testIterator[10]",
        "testToArrayWithGenerics[22]",
        "testContainsObject[27]",
        "testReverseRangeWithScores[2]",
        "testRangeByLexUnbounded[5]",
        "testScanWorksCorrectly[24]",
        "testAdd[28]",
        "testScore[11]",
        "testToArray[2]",
        "testClear[15]",
        "testRangeByScoreWithScores[26]",
        "testRemove[26]",
        "testRemoveByScore[29]",
        "testRemoveObject[1]",
        "testSize[17]",
        "testGetKey[27]",
        "testRangeByScore[6]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1302
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisListTests",
      "failingMethods": [],
      "erroringMethods": [
        "testPeekLast[5]",
        "testAddLast[25]",
        "testContainsObject[3]",
        "testRemove[0]",
        "testAddIndexObjectTail[1]",
        "addAllIndexCollectionHead[25]",
        "testPut[19]",
        "testPollLastTimeout[11]",
        "testRemoveLast[7]",
        "removeAll[19]",
        "testOffer[22]",
        "testPeekLast[23]",
        "testHashCode[18]",
        "testAddLast[6]",
        "testPollLast[0]",
        "testPeekLast[6]",
        "testPollLast[2]",
        "testContainsObject[2]",
        "testRemoveFirstOccurrence[20]",
        "testAddLast[24]",
        "testPeek[10]",
        "testAddIndexObjectTail[0]",
        "testRemove[1]",
        "testPollLastTimeout[10]",
        "testRemoveLast[6]",
        "testElement[10]",
        "addAllIndexCollectionHead[24]",
        "testHashCode[17]",
        "removeAll[18]",
        "testAddLast[5]",
        "testPeekLast[7]",
        "testPollLast[1]",
        "testOffer[23]",
        "testPeekLast[24]",
        "testAddLast[3]",
        "testRemoveFirstOccurrence[21]",
        "testPeekLast[3]",
        "testContainsObject[5]",
        "testAddLast[27]",
        "testAddIndexObjectTail[3]",
        "addAllIndexCollectionHead[23]",
        "testRemoveLast[9]",
        "testPollLastTimeout[13]",
        "testOffer[20]",
        "testPeekLast[21]",
        "testLast[9]",
        "removeAll[17]",
        "testPollFirst[19]",
        "testAddLast[4]",
        "testAddLast[2]",
        "testPeekLast[4]",
        "testContainsObject[4]",
        "testRemoveFirstOccurrence[22]",
        "testPeekFirst[30]",
        "testAddLast[26]",
        "testAddIndexObjectTail[2]",
        "addAllIndexCollectionHead[22]",
        "testRemoveLast[8]",
        "testHashCode[19]",
        "testPollLastTimeout[12]",
        "testOffer[21]",
        "testPeekLast[22]",
        "testPollFirst[18]",
        "removeAll[16]",
        "testRemoveFirstOccurrence[23]",
        "testAddLast[21]",
        "addAllIndexCollectionHead[21]",
        "testLast[7]",
        "testRemove[4]",
        "testPeek[13]",
        "testToArray[27]",
        "testDrainToCollection[9]",
        "testPut[15]",
        "testRemoveLast[3]",
        "removeAll[15]",
        "testRemoveFirstOccurrence[24]",
        "testRemoveObject[20]",
        "testAddLast[20]",
        "testLast[8]",
        "testRemove[5]",
        "addAllIndexCollectionHead[20]",
        "testPeek[14]",
        "removeAll[14]",
        "testAddLast[9]",
        "testToArray[26]",
        "testDrainToCollection[8]",
        "testPeekLast[20]",
        "testRemoveLast[2]",
        "testPut[16]",
        "testContainsAll[0]",
        "testToArrayWithGenerics[1]",
        "testContainsObject[1]",
        "testAddLast[23]",
        "testSize[20]",
        "testRemoveFirstOccurrence[25]",
        "testRemoveObject[21]",
        "testRemove[2]",
        "testLast[5]",
        "testRemoveLast[5]",
        "testContainsAll[1]",
        "testToArray[29]",
        "testDrainToCollection[7]",
        "removeAll[13]",
        "testAddLast[8]",
        "testPeek[11]",
        "testPeekLast[8]",
        "testPut[17]",
        "testToArrayWithGenerics[0]",
        "testAddLast[22]",
        "testSize[21]",
        "testRemoveFirstOccurrence[26]",
        "testRemoveObject[22]",
        "testContainsObject[0]",
        "testContainsAll[2]",
        "testLast[6]",
        "testRemove[3]",
        "testToArray[28]",
        "testDrainToCollection[6]",
        "testPeek[12]",
        "removeAll[12]",
        "testAddLast[7]",
        "testPeekLast[9]",
        "testRemoveLast[4]",
        "testPut[18]",
        "testIterator[19]",
        "testTrim[8]",
        "testHashCode[10]",
        "testPoll[30]",
        "testPollLast[9]",
        "testPut[10]",
        "testPollFirst[12]",
        "testRemoveFirstOccurrence[27]",
        "testRemoveIndex[4]",
        "testToArrayWithGenerics[3]",
        "testRemove[8]",
        "testAddIndexObjectTail[9]",
        "testContainsAll[3]",
        "testAddIndexObjectHead[2]",
        "testDescendingIterator[1]",
        "testLast[3]",
        "testPut[11]",
        "testPollFirst[13]",
        "testElement[17]",
        "testPollLast[22]",
        "testPollLastTimeout[19]",
        "testPeek[17]",
        "testDrainToCollection[29]",
        "testDrainToCollection[5]",
        "testGetFirst[12]",
        "testToArrayWithGenerics[2]",
        "testTrim[7]",
        "testRemoveIndex[5]",
        "testPutFirst[30]",
        "testPollFirst[11]",
        "testRemoveFirstOccurrence[28]",
        "testDescendingIterator[0]",
        "testContainsAll[4]",
        "testAddIndexObjectTail[8]",
        "testAddIndexObjectHead[3]",
        "testRemove[9]",
        "testLast[4]",
        "testPollLastTimeout[18]",
        "testPut[12]",
        "testPollLast[23]",
        "testElement[18]",
        "testPeek[18]",
        "testGetFirst[13]",
        "testDrainToCollection[4]",
        "testTrim[6]",
        "testRemoveIndex[6]",
        "testPollLast[7]",
        "testPollFirst[10]",
        "testRemoveFirstOccurrence[29]",
        "testLast[0]",
        "testToArrayWithGenerics[5]",
        "testLast[1]",
        "testDescendingIterator[3]",
        "testContainsAll[5]",
        "testPop[30]",
        "testAddIndexObjectHead[0]",
        "testRemove[6]",
        "testElement[15]",
        "testPollLast[24]",
        "testEquals[30]",
        "testPut[13]",
        "testDrainToCollection[27]",
        "testRemoveLast[1]",
        "testDrainToCollection[3]",
        "testGetFirst[10]",
        "testHashCode[12]",
        "testSet[1]",
        "testPeek[15]",
        "testTrim[5]",
        "testRemoveIndex[7]",
        "testPollLast[8]",
        "testToArrayWithGenerics[4]",
        "testSet[0]",
        "testRemove[7]",
        "testContainsAll[6]",
        "testAddIndexObjectHead[1]",
        "testLast[2]",
        "testDescendingIterator[2]",
        "testPollLast[25]",
        "testElement[16]",
        "testTakeLast[30]",
        "testRemoveLast[0]",
        "testPut[14]",
        "testGetFirst[11]",
        "testHashCode[11]",
        "testDrainToCollection[28]",
        "testDrainToCollection[2]",
        "testPeek[16]",
        "testPollLast[5]",
        "testPutLast[10]",
        "testContainsObject[7]",
        "testRemoveIndex[8]",
        "testToArrayWithGenerics[7]",
        "testTrim[12]",
        "testAddIndexObjectTail[5]",
        "testAddIndexObjectHead[7]",
        "testAddIndexObjectHead[6]",
        "testDrainToCollection[1]",
        "testDescendingIterator[5]",
        "testElement[13]",
        "testPollLast[26]",
        "testPollLastTimeout[15]",
        "testContainsAll[7]",
        "testPollFirst[17]",
        "testSet[3]",
        "testHashCode[14]",
        "testRemoveIndex[9]",
        "testPollLast[6]",
        "testContainsObject[6]",
        "testToArrayWithGenerics[6]",
        "testAddIndexObjectTail[4]",
        "testAddIndexObjectHead[8]",
        "testTrim[11]",
        "testDrainToCollection[0]",
        "testPollLastTimeout[14]",
        "testDescendingIterator[4]",
        "testPollLast[27]",
        "testContainsAll[8]",
        "testElement[14]",
        "testPollFirst[16]",
        "testSet[2]",
        "testHashCode[13]",
        "testPollLast[3]",
        "testPutLast[12]",
        "testToArrayWithGenerics[9]",
        "testContainsAll[9]",
        "testTrim[10]",
        "testDescendingIterator[7]",
        "testAddIndexObjectHead[4]",
        "testElement[11]",
        "testPollLast[28]",
        "testAddIndexObjectTail[7]",
        "testPeek[19]",
        "testContainsObject[9]",
        "testHashCode[16]",
        "testPollFirst[15]",
        "testSet[5]",
        "testPollLastTimeout[17]",
        "testPollLast[4]",
        "testTrim[9]",
        "testContainsObject[8]",
        "testPutLast[11]",
        "testToArrayWithGenerics[8]",
        "testAddIndexObjectTail[6]",
        "testAddIndexObjectHead[5]",
        "testDescendingIterator[6]",
        "testPollLast[29]",
        "testDescendingIterator[30]",
        "testElement[12]",
        "testHashCode[15]",
        "testPollFirst[14]",
        "testPollLastTimeout[16]",
        "testSet[4]",
        "addAllIndexCollectionMiddle[20]",
        "testIterator[21]",
        "testTrim[16]",
        "testRmoveLastOccurrence[2]",
        "testRemoveObject[19]",
        "testPeekFirst[7]",
        "testPoll[2]",
        "testRemove[13]",
        "testGetKey[10]",
        "testAddAll[6]",
        "testDescendingIterator[9]",
        "testIterator[20]",
        "addAllIndexCollectionMiddle[21]",
        "testAddAll[7]",
        "testTrim[15]",
        "testRmoveLastOccurrence[3]",
        "testDescendingIterator[8]",
        "testPeekFirst[8]",
        "testLast[30]",
        "testPoll[1]",
        "testRemove[12]",
        "testOfferLast[30]",
        "testCappedCollection[18]",
        "testDrainToCollection[30]",
        "testTrim[14]",
        "addAllIndexCollectionMiddle[22]",
        "testRmoveLastOccurrence[0]",
        "testOfferFirst[28]",
        "testPeekFirst[9]",
        "testGetFirst[18]",
        "testPoll[0]",
        "testRemove[11]",
        "testGetKey[12]",
        "testAddAll[4]",
        "testTrim[13]",
        "testCappedCollection[19]",
        "testRmoveLastOccurrence[1]",
        "addAllIndexCollectionMiddle[23]",
        "testOfferFirst[29]",
        "testGetFirst[19]",
        "testRemove[10]",
        "testGetKey[11]",
        "testAddAll[5]",
        "testCappedCollection[16]",
        "testAddIndexObjectTail[30]",
        "testOfferFirst[26]",
        "testAddAll[2]",
        "testIndexOfObject[19]",
        "testDrainToCollectionWithMaxElements[8]",
        "testGetFirst[16]",
        "testDescendingIterator[29]",
        "testIsEmpty[11]",
        "testCappedCollection[17]",
        "testOfferFirst[27]",
        "testTrim[19]",
        "testDrainToCollectionWithMaxElements[9]",
        "testIndexOfObject[18]",
        "testGetFirst[17]",
        "testDescendingIterator[28]",
        "testAddAll[3]",
        "testIsEmpty[12]",
        "testHashCode[20]",
        "testCappedCollection[14]",
        "testAddIndexObjectMiddle[20]",
        "testTrim[18]",
        "testOfferFirst[24]",
        "testGetFirst[14]",
        "testAddAll[0]",
        "testIndexOfObject[17]",
        "testElement[19]",
        "testPollLast[20]",
        "testDescendingIterator[27]",
        "testDrainToCollectionWithMaxElements[6]",
        "testCappedCollection[15]",
        "testTrim[17]",
        "testAddIndexObjectMiddle[21]",
        "testOfferFirst[25]",
        "testGetFirst[15]",
        "testDescendingIterator[26]",
        "testAddAll[1]",
        "testIsEmpty[10]",
        "testRmoveLastOccurrence[30]",
        "testDrainToCollectionWithMaxElements[7]",
        "testIndexOfObject[16]",
        "testPollLast[21]",
        "testIsEmpty[15]",
        "testCappedCollection[12]",
        "testSize[22]",
        "testRemoveObject[11]",
        "addAllIndexCollectionMiddle[28]",
        "testTakeFirst[30]",
        "testOffer[18]",
        "testPutFirst[1]",
        "testAddIndexObjectMiddle[22]",
        "testGetKey[18]",
        "testAdd[11]",
        "testOfferFirst[22]",
        "removeAll[23]",
        "testIndexOfObject[15]",
        "testToArrayWithGenerics[17]",
        "testToArray[23]",
        "testRemainingCapacity[16]",
        "testIsEmpty[16]",
        "removeAll[21]",
        "testSize[23]",
        "testCappedCollection[13]",
        "testRemoveObject[12]",
        "addAllIndexCollectionMiddle[29]",
        "testPoll[9]",
        "testOffer[19]",
        "testGetKey[17]",
        "testPeekFirst[29]",
        "testPutFirst[0]",
        "testAddIndexObjectMiddle[23]",
        "testAdd[10]",
        "testOfferFirst[23]",
        "testRemainingCapacity[15]",
        "removeAll[22]",
        "testIndexOfObject[14]",
        "testToArrayWithGenerics[16]",
        "testToArray[22]",
        "testIterator[29]",
        "testSize[24]",
        "testPeekLast[18]",
        "removeAll[20]",
        "testAdd[13]",
        "testRemoveObject[13]",
        "testPeekFirst[27]",
        "testPoll[8]",
        "testOffer[16]",
        "testPeekFirst[28]",
        "testContainsObject[10]",
        "testRemainingCapacity[14]",
        "testIterator[28]",
        "testCappedCollection[10]",
        "testToArrayWithGenerics[15]",
        "testOfferFirst[20]",
        "testToArray[25]",
        "testIsEmpty[13]",
        "testAddIndexObjectMiddle[24]",
        "testPollTimeout[30]",
        "testIndexOfObject[13]",
        "testRemove[19]",
        "testSize[25]",
        "testPeekLast[19]",
        "testCappedCollection[11]",
        "testRemoveObject[14]",
        "testPeekFirst[26]",
        "testGetKey[19]",
        "testPoll[7]",
        "testOffer[17]",
        "testAdd[12]",
        "testIterator[27]",
        "testContainsObject[11]",
        "testOfferFirst[21]",
        "testRemainingCapacity[13]",
        "testToArrayWithGenerics[14]",
        "testToArray[24]",
        "testIsEmpty[14]",
        "testAddIndexObjectMiddle[25]",
        "testIndexOfObject[12]",
        "testRemove[18]",
        "testSize[26]",
        "testRemainingCapacity[11]",
        "testAddLast[17]",
        "testRemoveLast[30]",
        "testIsEmpty[19]",
        "testAdd[15]",
        "addAllIndexCollectionHead[29]",
        "testRemoveObject[15]",
        "addAllIndexCollectionMiddle[24]",
        "testPeekFirst[25]",
        "testPoll[6]",
        "testIndexOfObject[11]",
        "testPutFirst[5]",
        "testToArrayWithGenerics[13]",
        "testContainsObject[12]",
        "testRemainingCapacity[12]",
        "testIterator[26]",
        "testRemove[17]",
        "testOffer[14]",
        "testPeekLast[15]",
        "testAddIndexObjectMiddle[26]",
        "testGetKey[14]",
        "testSize[27]",
        "testPeekLast[17]",
        "testRemainingCapacity[10]",
        "testIterator[24]",
        "testAddLast[16]",
        "testAdd[14]",
        "testRemoveObject[16]",
        "addAllIndexCollectionMiddle[25]",
        "testPeekFirst[24]",
        "addAllIndexCollectionHead[28]",
        "testIndexOfObject[10]",
        "testPoll[5]",
        "testPutFirst[4]",
        "testToArrayWithGenerics[12]",
        "testIterator[25]",
        "testContainsObject[13]",
        "testOffer[15]",
        "testPeekLast[16]",
        "testRemove[16]",
        "testGetKey[13]",
        "testAddIndexObjectMiddle[27]",
        "testIsEmpty[17]",
        "testAddAll[8]",
        "testContainsObject[14]",
        "testIterator[23]",
        "testToArrayWithGenerics[11]",
        "testPeekFirst[23]",
        "addAllIndexCollectionMiddle[26]",
        "testAdd[17]",
        "testRemoveObject[17]",
        "addAllIndexCollectionHead[27]",
        "testPoll[4]",
        "testPutFirst[3]",
        "testAddIndexObjectMiddle[28]",
        "testRemove[15]",
        "testGetKey[16]",
        "testSize[28]",
        "testOffer[12]",
        "testPeekLast[13]",
        "testToArray[21]",
        "testToArray[20]",
        "testAddAll[9]",
        "testIsEmpty[18]",
        "testAddLast[18]",
        "testContainsObject[15]",
        "testToArrayWithGenerics[10]",
        "testIterator[22]",
        "testAdd[16]",
        "testPeekFirst[22]",
        "addAllIndexCollectionMiddle[27]",
        "addAllIndexCollectionHead[26]",
        "testRemoveObject[18]",
        "testPutFirst[2]",
        "testPoll[3]",
        "testAddIndexObjectMiddle[29]",
        "testRemove[14]",
        "testAddLast[19]",
        "testGetKey[15]",
        "testSize[29]",
        "testOffer[13]",
        "testPeekLast[14]",
        "testRemoveFirstOccurrence[30]",
        "testAddLast[13]",
        "testPut[3]",
        "testClear[5]",
        "testRange[18]",
        "addAllIndexCollectionHead[2]",
        "testIndexOfObject[4]",
        "testToString[11]",
        "testToString[12]",
        "addAllIndexCollectionHead[13]",
        "testElement[21]",
        "testRemoveFirst[11]",
        "testToArray[19]",
        "testPeekLast[11]",
        "testAddIndexObjectMiddle[18]",
        "testTake[27]",
        "testPut[2]",
        "testAddLast[12]",
        "addAllIndexCollectionHead[3]",
        "testClear[4]",
        "testRange[17]",
        "testIndexOfObject[5]",
        "testToString[10]",
        "testRemoveFirst[12]",
        "addAllIndexCollectionHead[12]",
        "testElement[22]",
        "testToArray[18]",
        "testPeekLast[12]",
        "testAddIndexObjectMiddle[19]",
        "testClear[29]",
        "testHashCode[29]",
        "testTake[26]",
        "testPut[1]",
        "testAddLast[15]",
        "testClear[7]",
        "addAllIndexCollectionHead[0]",
        "testIndexOfObject[6]",
        "addAllIndexCollectionHead[11]",
        "testRemoveFirst[13]",
        "testToString[14]",
        "testCappedCollection[0]",
        "testTake[29]",
        "removeAll[29]",
        "testPut[0]",
        "testAddLast[14]",
        "testRange[19]",
        "addAllIndexCollectionHead[1]",
        "testClear[6]",
        "testIndexOfObject[7]",
        "addAllIndexCollectionHead[10]",
        "testToString[13]",
        "testRemoveFirst[14]",
        "testElement[20]",
        "testPeekLast[10]",
        "removeAll[28]",
        "testTake[28]",
        "testClear[1]",
        "addAllIndexCollectionHead[6]",
        "testIndexOfObject[8]",
        "testToString[16]",
        "testToArray[15]",
        "testOffer[30]",
        "testPut[27]",
        "testCappedCollection[2]",
        "testPollTimeout[8]",
        "removeAll[27]",
        "addAllIndexCollectionHead[7]",
        "testPollTimeout[9]",
        "testClear[0]",
        "testIndexOfObject[9]",
        "testToString[15]",
        "testToArray[14]",
        "testCappedCollection[1]",
        "removeAll[26]",
        "testPut[28]",
        "testAddLast[11]",
        "testClear[3]",
        "addAllIndexCollectionHead[4]",
        "testContainsAll[30]",
        "testCappedCollection[4]",
        "testToString[18]",
        "testToArray[17]",
        "removeAll[25]",
        "testToArrayWithGenerics[19]",
        "testPut[29]",
        "addAllIndexCollectionHead[5]",
        "testClear[2]",
        "testRemoveObject[10]",
        "testAddLast[10]",
        "testRemoveFirst[10]",
        "testToString[17]",
        "removeAll[24]",
        "testToArray[16]",
        "testCappedCollection[3]",
        "testToArrayWithGenerics[18]",
        "testEquals[0]",
        "testAddFirst[30]",
        "testRange[10]",
        "testHashCode[2]",
        "testDrainToCollectionWithMaxElements[16]",
        "testPut[23]",
        "testDescendingIterator[25]",
        "testElement[29]",
        "testHashCode[22]",
        "testDrainToCollectionWithMaxElements[4]",
        "testHashCode[21]",
        "testToString[19]",
        "testDescendingIterator[24]",
        "testHashCode[3]",
        "testDrainToCollectionWithMaxElements[17]",
        "testPut[24]",
        "testDrainToCollectionWithMaxElements[5]",
        "testDrainToCollectionWithMaxElements[2]",
        "addAllIndexCollectionHead[8]",
        "testEquals[2]",
        "testPeekFirst[0]",
        "testRange[12]",
        "testHashCode[4]",
        "testDescendingIterator[23]",
        "testElement[27]",
        "testPut[25]",
        "testRemoveLast[28]",
        "testDrainToCollectionWithMaxElements[14]",
        "testHashCode[24]",
        "testEquals[1]",
        "testPeekFirst[1]",
        "testRange[11]",
        "testRemoveLast[29]",
        "testDescendingIterator[22]",
        "testHashCode[5]",
        "testElement[28]",
        "testPut[26]",
        "testHashCode[23]",
        "addAllIndexCollectionHead[9]",
        "testDrainToCollectionWithMaxElements[3]",
        "testDrainToCollectionWithMaxElements[15]",
        "testDrainToCollectionWithMaxElements[0]",
        "testEquals[4]",
        "testRange[14]",
        "testPeekFirst[2]",
        "testHashCode[6]",
        "testIndexOfObject[0]",
        "testDescendingIterator[21]",
        "testElement[25]",
        "testHashCode[26]",
        "testDrainToCollectionWithMaxElements[1]",
        "testEquals[3]",
        "testRange[13]",
        "testPeekFirst[3]",
        "testDescendingIterator[20]",
        "testHashCode[7]",
        "testIndexOfObject[1]",
        "testElement[26]",
        "testHashCode[25]",
        "testPut[20]",
        "testEquals[6]",
        "testRange[16]",
        "testPeekFirst[4]",
        "testHashCode[8]",
        "testElement[23]",
        "testIndexOfObject[2]",
        "testDrainToCollectionWithMaxElements[18]",
        "testHashCode[28]",
        "testEquals[5]",
        "testPut[21]",
        "testIndexOfObject[3]",
        "testRange[15]",
        "testPeekFirst[5]",
        "testPeekFirst[6]",
        "testHashCode[9]",
        "testElement[24]",
        "testPut[22]",
        "testHashCode[27]",
        "testDrainToCollectionWithMaxElements[19]",
        "testRemoveIndex[17]",
        "testAddFirst[8]",
        "testToArrayWithGenerics[21]",
        "testAddIndexObjectTail[22]",
        "testPop[4]",
        "testOffer[2]",
        "testAddFirst[7]",
        "testGetKey[22]",
        "testRemoveLast[22]",
        "testSize[18]",
        "testEquals[24]",
        "testRemoveIndex[16]",
        "testToArrayWithGenerics[20]",
        "testAddFirst[9]",
        "testAddIndexObjectTail[23]",
        "testPop[5]",
        "testIsEmpty[20]",
        "testRemoveLast[23]",
        "testGetKey[21]",
        "testOffer[3]",
        "testSize[19]",
        "testEquals[25]",
        "testEquals[26]",
        "testRemoveIndex[15]",
        "testRemoveLast[20]",
        "testAddIndexObjectTail[20]",
        "testPop[6]",
        "testOffer[0]",
        "testAddFirst[5]",
        "testDescendingIterator[19]",
        "testOfferLast[21]",
        "testGetKey[24]",
        "testEquals[27]",
        "testRemoveIndex[14]",
        "testAddIndexObjectTail[21]",
        "testPop[7]",
        "testOffer[1]",
        "testAddFirst[6]",
        "testGetKey[23]",
        "testOfferLast[20]",
        "testRemoveLast[21]",
        "testDescendingIterator[18]",
        "testHashCode[30]",
        "testGetKey[3]",
        "testRemoveIndex[0]",
        "testDescendingIterator[17]",
        "testEquals[20]",
        "testPop[0]",
        "testAddFirst[3]",
        "testDrainToCollectionWithMaxElements[12]",
        "testPollLast[30]",
        "testRemoveLast[26]",
        "testOfferLast[23]",
        "testIsEmpty[23]",
        "testRemoveIndex[1]",
        "testGetKey[2]",
        "testAddFirst[4]",
        "testDescendingIterator[16]",
        "testEquals[21]",
        "testOfferLast[22]",
        "testIsEmpty[24]",
        "testPop[1]",
        "testDrainToCollectionWithMaxElements[13]",
        "testRemoveLast[27]",
        "testOfferLast[26]",
        "addAllIndexCollectionMiddle[30]",
        "testRemoveIndex[2]",
        "testGetKey[1]",
        "testRemoveIndex[19]",
        "testPop[2]",
        "testDrainToCollectionWithMaxElements[10]",
        "testDescendingIterator[15]",
        "testRemoveLast[24]",
        "testIsEmpty[21]",
        "testHashCode[0]",
        "testGetKey[20]",
        "testEquals[22]",
        "testAddFirst[1]",
        "testOfferLast[25]",
        "testRemoveIndex[3]",
        "testClear[30]",
        "testGetKey[0]",
        "testRemoveIndex[18]",
        "testPop[3]",
        "testDrainToCollectionWithMaxElements[11]",
        "testDescendingIterator[14]",
        "testHashCode[1]",
        "testAddFirst[2]",
        "testEquals[23]",
        "testIsEmpty[22]",
        "testOfferLast[24]",
        "testRemoveLast[25]",
        "testOfferLast[28]",
        "testAddAll[14]",
        "testIsEmpty[27]",
        "testSize[10]",
        "testAddIndexObjectMiddle[10]",
        "testCappedCollection[6]",
        "testPollTimeout[4]",
        "testToArray[11]",
        "testIterator[18]",
        "testToArrayWithGenerics[29]",
        "testIsEmpty[28]",
        "testAddAll[15]",
        "testOfferLast[27]",
        "testSize[11]",
        "testCappedCollection[5]",
        "testAddIndexObjectMiddle[11]",
        "testGetKey[29]",
        "testTake[30]",
        "testIterator[17]",
        "testSet[30]",
        "testToArrayWithGenerics[28]",
        "testPollTimeout[5]",
        "testAddFirst[0]",
        "testToArray[10]",
        "testAddAll[12]",
        "testSize[12]",
        "testPut[9]",
        "addAllIndexCollectionHead[19]",
        "testOffer[8]",
        "testOffer[28]",
        "testAddIndexObjectMiddle[12]",
        "testCappedCollection[8]",
        "testAddIndexObjectTail[28]",
        "testIterator[16]",
        "testPollTimeout[6]",
        "testToArray[13]",
        "testIsEmpty[25]",
        "testToArrayWithGenerics[27]",
        "testAddAll[13]",
        "testSize[13]",
        "testIsEmpty[26]",
        "testOfferLast[29]",
        "testPut[8]",
        "addAllIndexCollectionHead[18]",
        "testOffer[9]",
        "testOffer[29]",
        "testCappedCollection[7]",
        "testAddIndexObjectTail[29]",
        "testToArrayWithGenerics[26]",
        "testIterator[15]",
        "testAddIndexObjectMiddle[13]",
        "testToArray[12]",
        "testPollTimeout[7]",
        "testSize[14]",
        "testAddLast[1]",
        "testEquals[28]",
        "testRemoveIndex[13]",
        "testIterator[13]",
        "testAddAll[10]",
        "removeAll[30]",
        "testClear[9]",
        "testAddIndexObjectTail[26]",
        "testPut[7]",
        "addAllIndexCollectionHead[17]",
        "testPollTimeout[0]",
        "testIterator[14]",
        "testToArrayWithGenerics[25]",
        "testOfferFirst[30]",
        "testOffer[6]",
        "testOffer[26]",
        "testGetKey[26]",
        "testAddIndexObjectMiddle[14]",
        "testAddLast[0]",
        "testSize[15]",
        "testEquals[29]",
        "testRemoveIndex[12]",
        "testIterator[12]",
        "testAddAll[11]",
        "testClear[8]",
        "testPut[6]",
        "addAllIndexCollectionHead[16]",
        "testOffer[7]",
        "testOffer[27]",
        "testCappedCollection[9]",
        "testAddIndexObjectTail[27]",
        "testToArrayWithGenerics[24]",
        "testPollTimeout[1]",
        "testAddIndexObjectMiddle[15]",
        "testGetKey[25]",
        "testIsEmpty[29]",
        "testSize[16]",
        "testRemoveIndex[11]",
        "testIterator[11]",
        "testAddIndexObjectTail[24]",
        "testPut[5]",
        "addAllIndexCollectionHead[15]",
        "testGetKey[28]",
        "testPollTimeout[2]",
        "testToArrayWithGenerics[23]",
        "testOffer[4]",
        "testOffer[24]",
        "testAddIndexObjectMiddle[16]",
        "testRemoveIndex[10]",
        "testIterator[10]",
        "testToArrayWithGenerics[22]",
        "testAddIndexObjectTail[25]",
        "testPut[4]",
        "addAllIndexCollectionHead[14]",
        "testAddIndexObjectMiddle[17]",
        "testPollTimeout[3]",
        "testOffer[5]",
        "testSize[17]",
        "testOffer[25]",
        "testGetKey[27]",
        "testRemoveFirst[5]",
        "testSet[27]",
        "testTakeLast[13]",
        "testPoll[14]",
        "testTakeFirst[14]",
        "testRemainingCapacity[1]",
        "testContainsObject[28]",
        "testAdd[5]",
        "testOfferLast[3]",
        "testContainsAll[20]",
        "testPop[13]",
        "testToString[24]",
        "testPop[12]",
        "testRemoveFirst[23]",
        "testAddFirst[27]",
        "testClear[18]",
        "testTake[15]",
        "testRemoveFirst[6]",
        "testTakeFirst[15]",
        "testContainsObject[29]",
        "testSet[26]",
        "testRemainingCapacity[2]",
        "testRange[29]",
        "testOfferLast[4]",
        "testAddFirst[25]",
        "testToString[22]",
        "testAdd[6]",
        "testPop[14]",
        "testTake[14]",
        "testToString[23]",
        "testAddFirst[26]",
        "testRemoveFirst[24]",
        "testClear[17]",
        "testTakeLast[12]",
        "testPoll[15]",
        "testPoll[12]",
        "testTakeLast[15]",
        "testSet[25]",
        "testAdd[3]",
        "testPop[15]",
        "testOfferLast[5]",
        "testTakeFirst[12]",
        "testContainsAll[22]",
        "testRemoveFirst[7]",
        "testRemoveFirst[25]",
        "testAddFirst[29]",
        "testToString[26]",
        "testRmoveLastOccurrence[19]",
        "testTake[17]",
        "testTakeFirst[13]",
        "testPoll[13]",
        "testTakeLast[14]",
        "testRemainingCapacity[0]",
        "testAdd[4]",
        "testOfferLast[6]",
        "testContainsAll[21]",
        "testPop[16]",
        "testRemoveFirst[8]",
        "testAddFirst[28]",
        "testRemoveFirst[26]",
        "testToString[25]",
        "testRmoveLastOccurrence[18]",
        "testClear[19]",
        "testSet[24]",
        "testTake[16]",
        "testRemoveFirst[1]",
        "testTakeLast[17]",
        "testPop[17]",
        "testAdd[9]",
        "testTakeFirst[10]",
        "testToString[28]",
        "testTake[19]",
        "testLast[17]",
        "testSet[23]",
        "testPoll[18]",
        "testAddAll[18]",
        "testTakeLast[16]",
        "testRemoveFirst[2]",
        "testOfferLast[0]",
        "testPop[18]",
        "testTakeFirst[11]",
        "testElement[30]",
        "testPollLastTimeout[30]",
        "removeAll[9]",
        "testToString[27]",
        "testRemoveFirst[20]",
        "testPoll[19]",
        "testLast[18]",
        "testTake[18]",
        "testAddAll[19]",
        "testSet[22]",
        "testRemoveFirst[3]",
        "testTakeLast[19]",
        "testPop[19]",
        "testOfferLast[1]",
        "testAdd[7]",
        "testRemoveFirst[21]",
        "removeAll[8]",
        "testLast[19]",
        "testPoll[16]",
        "testAddAll[16]",
        "testSet[21]",
        "testRemoveFirst[4]",
        "testTakeLast[18]",
        "testOfferLast[2]",
        "testAdd[8]",
        "removeAll[7]",
        "testRemoveFirst[22]",
        "testToString[29]",
        "testSet[20]",
        "testAddAll[17]",
        "testRemainingCapacity[29]",
        "testPoll[17]",
        "testPollLastTimeout[2]",
        "testPutLast[6]",
        "testGetKey[7]",
        "testPutLast[30]",
        "testRemainingCapacity[9]",
        "testRange[22]",
        "testTakeLast[9]",
        "testLast[13]",
        "removeAll[6]",
        "testRemoveLast[18]",
        "testContainsAll[28]",
        "testDescendingIterator[13]",
        "testDrainToCollectionWithMaxElements[28]",
        "testPutLast[7]",
        "testPollLastTimeout[3]",
        "testGetKey[6]",
        "testRange[21]",
        "removeAll[5]",
        "testRemoveLast[19]",
        "testContainsAll[27]",
        "testAddIndexObjectMiddle[0]",
        "testDescendingIterator[12]",
        "testDrainToCollectionWithMaxElements[29]",
        "testLast[14]",
        "testTrim[30]",
        "testPollLastTimeout[4]",
        "testGetKey[5]",
        "testAddFirst[20]",
        "testRange[24]",
        "testRemainingCapacity[7]",
        "testElement[9]",
        "removeAll[4]",
        "testAddIndexObjectMiddle[1]",
        "testDescendingIterator[11]",
        "testPutLast[4]",
        "testRemoveLast[16]",
        "testLast[15]",
        "testDrainToCollectionWithMaxElements[26]",
        "testPollLastTimeout[5]",
        "testRemoveFirst[0]",
        "testGetKey[4]",
        "testAddIndexObjectMiddle[2]",
        "testRange[23]",
        "testRemainingCapacity[8]",
        "testContainsAll[29]",
        "testDescendingIterator[10]",
        "addAllIndexCollectionTail[30]",
        "testDrainToCollectionWithMaxElements[27]",
        "testPutLast[5]",
        "testLast[16]",
        "testRemoveLast[17]",
        "removeAll[3]",
        "testAdd[1]",
        "testPollLastTimeout[6]",
        "testPut[30]",
        "testPoll[10]",
        "testTakeFirst[18]",
        "testRemainingCapacity[5]",
        "testRange[26]",
        "testAddFirst[22]",
        "testContainsAll[24]",
        "testElement[7]",
        "testPop[8]",
        "removeAll[2]",
        "testPoll[11]",
        "testTakeFirst[19]",
        "testRemainingCapacity[6]",
        "testAddFirst[21]",
        "testPollLastTimeout[7]",
        "testPutFirst[10]",
        "testRange[25]",
        "testAdd[2]",
        "testContainsAll[23]",
        "testLast[10]",
        "testElement[8]",
        "testPop[9]",
        "removeAll[1]",
        "testTakeFirst[16]",
        "testGetFirst[30]",
        "testGetKey[9]",
        "testPutLast[8]",
        "testRange[28]",
        "testSet[29]",
        "testRemainingCapacity[3]",
        "testPollLastTimeout[8]",
        "testAddFirst[24]",
        "testContainsAll[26]",
        "testPop[10]",
        "testLast[11]",
        "testElement[5]",
        "testTakeLast[11]",
        "removeAll[0]",
        "testSet[28]",
        "testAdd[0]",
        "testGetKey[8]",
        "testTakeFirst[17]",
        "testPutLast[9]",
        "testPollLastTimeout[9]",
        "testRange[27]",
        "testRemainingCapacity[4]",
        "testAddFirst[23]",
        "testPop[11]",
        "testLast[12]",
        "testContainsAll[25]",
        "testElement[6]",
        "testTakeLast[10]",
        "addAllIndexCollectionMiddle[7]",
        "testPutLast[26]",
        "testPollTimeout[16]",
        "testTakeFirst[8]",
        "testRemoveIndex[29]",
        "testAddIndexObjectTail[10]",
        "testPutFirst[13]",
        "testDrainToCollectionWithMaxElements[20]",
        "testSize[7]",
        "testEquals[8]",
        "testRemoveLast[10]",
        "testEquals[12]",
        "testElement[3]",
        "testPutLast[25]",
        "testRemoveIndex[28]",
        "testPollTimeout[17]",
        "testEquals[7]",
        "addAllIndexCollectionMiddle[8]",
        "testRemainingCapacity[30]",
        "testTakeFirst[7]",
        "addAllIndexCollectionTail[29]",
        "testAddIndexObjectTail[11]",
        "testPutFirst[14]",
        "testDrainToCollectionWithMaxElements[21]",
        "testSize[8]",
        "testRemoveLast[11]",
        "testEquals[13]",
        "testElement[4]",
        "testRemoveIndex[27]",
        "testPollTimeout[14]",
        "addAllIndexCollectionMiddle[9]",
        "testPutFirst[11]",
        "testTakeFirst[6]",
        "addAllIndexCollectionTail[28]",
        "testSize[9]",
        "testElement[1]",
        "testPutLast[28]",
        "testEquals[14]",
        "testEquals[15]",
        "testPutLast[27]",
        "testRemoveIndex[26]",
        "testToArrayWithGenerics[30]",
        "testPollTimeout[15]",
        "testPutFirst[12]",
        "testTakeFirst[5]",
        "addAllIndexCollectionTail[27]",
        "testEquals[9]",
        "testElement[2]",
        "testIsEmpty[30]",
        "testDrainToCollection[12]",
        "addAllIndexCollectionTail[26]",
        "testAddIndexObjectHead[18]",
        "testPutFirst[17]",
        "testPutLast[2]",
        "testDrainToCollection[13]",
        "testOfferLast[11]",
        "testDrainToCollectionWithMaxElements[24]",
        "testRemoveLast[14]",
        "addAllIndexCollectionTail[25]",
        "addAllIndexCollectionTail[24]",
        "testAddIndexObjectHead[19]",
        "testAdd[30]",
        "testPutFirst[18]",
        "testContainsAll[19]",
        "testPutLast[3]",
        "testDrainToCollection[14]",
        "testElement[0]",
        "testPutLast[29]",
        "testOfferLast[10]",
        "testRemoveLast[15]",
        "testDrainToCollectionWithMaxElements[25]",
        "testOfferLast[14]",
        "testPollTimeout[18]",
        "testPollFirst[30]",
        "testDrainToCollection[10]",
        "testPutFirst[15]",
        "testAddIndexObjectHead[15]",
        "testRange[20]",
        "addAllIndexCollectionTail[23]",
        "testAddIndexObjectHead[16]",
        "testClear[20]",
        "testDrainToCollectionWithMaxElements[22]",
        "testRemoveLast[12]",
        "testEquals[10]",
        "testPutLast[0]",
        "testOfferLast[13]",
        "testContainsObject[30]",
        "testPollTimeout[19]",
        "testGetKey[30]",
        "testDrainToCollection[11]",
        "testTakeFirst[9]",
        "testPutFirst[16]",
        "addAllIndexCollectionTail[22]",
        "testAddIndexObjectHead[17]",
        "testRemove[30]",
        "testRemoveLast[13]",
        "testEquals[11]",
        "testDrainToCollectionWithMaxElements[23]",
        "testPutLast[1]",
        "testOfferLast[12]",
        "testAddAll[26]",
        "testOfferLast[16]",
        "testRemoveIndex[21]",
        "testAddIndexObjectHead[13]",
        "testTakeFirst[0]",
        "testClear[22]",
        "addAllIndexCollectionTail[0]",
        "testAddIndexObjectTail[18]",
        "testRemoveIndex[20]",
        "testPeek[7]",
        "testRemoveFirst[19]",
        "testRmoveLastOccurrence[13]",
        "testOfferLast[15]",
        "testAddIndexObjectHead[14]",
        "testClear[21]",
        "testAddIndexObjectTail[19]",
        "testPeek[6]",
        "testAddAll[27]",
        "testRmoveLastOccurrence[12]",
        "testAddAll[24]",
        "testOfferLast[18]",
        "testAddIndexObjectHead[11]",
        "testPutFirst[19]",
        "testTake[21]",
        "testAddIndexObjectTail[16]",
        "testClear[24]",
        "testPeek[5]",
        "addAllIndexCollectionTail[2]",
        "testRmoveLastOccurrence[11]",
        "addAllIndexCollectionMiddle[0]",
        "testOfferLast[17]",
        "testAddAll[25]",
        "testAddIndexObjectHead[12]",
        "testClear[23]",
        "testAddIndexObjectTail[17]",
        "testTake[20]",
        "testPeek[4]",
        "addAllIndexCollectionTail[1]",
        "testRmoveLastOccurrence[10]",
        "addAllIndexCollectionMiddle[1]",
        "testEquals[16]",
        "testRemoveIndex[25]",
        "testAddAll[22]",
        "testAddIndexObjectTail[14]",
        "testTakeFirst[4]",
        "testRemoveFirst[9]",
        "testOfferLast[7]",
        "testRemoveFirst[15]",
        "testTake[23]",
        "testRmoveLastOccurrence[17]",
        "testClear[26]",
        "testPollTimeout[12]",
        "addAllIndexCollectionMiddle[2]",
        "testAddAll[23]",
        "addAllIndexCollectionMiddle[4]",
        "testEquals[17]",
        "testOfferLast[19]",
        "testRemoveIndex[24]",
        "testPeek[30]",
        "testAddIndexObjectHead[10]",
        "testAddIndexObjectTail[15]",
        "testOfferLast[8]",
        "testTakeFirst[3]",
        "testOfferLast[9]",
        "testRmoveLastOccurrence[16]",
        "testTake[22]",
        "testClear[25]",
        "testPollTimeout[13]",
        "addAllIndexCollectionMiddle[3]",
        "testRemoveFirst[16]",
        "addAllIndexCollectionMiddle[5]",
        "testEquals[18]",
        "testAddAll[20]",
        "testRemoveIndex[23]",
        "testAddIndexObjectTail[12]",
        "testTakeFirst[2]",
        "testToString[21]",
        "testTake[25]",
        "testRmoveLastOccurrence[15]",
        "testCappedCollection[30]",
        "testPollTimeout[10]",
        "testClear[28]",
        "testPeek[9]",
        "testRemoveFirst[17]",
        "addAllIndexCollectionMiddle[6]",
        "testEquals[19]",
        "testAddAll[21]",
        "testRemoveIndex[22]",
        "testAddIndexObjectTail[13]",
        "testToString[20]",
        "testRmoveLastOccurrence[14]",
        "testTakeFirst[1]",
        "testTake[24]",
        "testClear[27]",
        "testPollTimeout[11]",
        "testRemoveFirst[18]",
        "testPeek[8]",
        "testTakeFirst[26]",
        "addAllIndexCollectionTail[9]",
        "testSet[15]",
        "testTakeLast[25]",
        "testPeek[21]",
        "testContainsObject[16]",
        "testPutFirst[9]",
        "testPeekFirst[21]",
        "testAdd[19]",
        "testOfferFirst[3]",
        "testAddFirst[14]",
        "testIsEmpty[8]",
        "testPop[25]",
        "testOfferFirst[2]",
        "testAddFirst[15]",
        "testPollLast[18]",
        "testPollLastTimeout[23]",
        "testOffer[10]",
        "addAllIndexCollectionTail[8]",
        "testPoll[26]",
        "testTakeFirst[27]",
        "testTakeLast[24]",
        "testIterator[0]",
        "testSet[14]",
        "testContainsObject[17]",
        "testAddIndexObjectHead[30]",
        "testPutFirst[8]",
        "testPeekFirst[20]",
        "testAddFirst[13]",
        "testPop[26]",
        "testIsEmpty[9]",
        "testAdd[18]",
        "testPollLast[19]",
        "testPollLastTimeout[22]",
        "testOfferFirst[1]",
        "testIndexOfObject[30]",
        "testOffer[11]",
        "testPeek[22]",
        "addAllIndexCollectionTail[7]",
        "testPoll[27]",
        "testContainsObject[18]",
        "testTakeLast[27]",
        "testTakeFirst[24]",
        "testPoll[24]",
        "testPutFirst[7]",
        "testIterator[1]",
        "testContainsAll[10]",
        "testPop[27]",
        "testOfferFirst[0]",
        "testAddFirst[17]",
        "testIsEmpty[6]",
        "testPollLastTimeout[25]",
        "testSet[13]",
        "testTakeLast[26]",
        "testRemoveFirstOccurrence[10]",
        "testContainsObject[19]",
        "testPoll[25]",
        "testTakeFirst[25]",
        "testPeek[20]",
        "testRemoveObject[30]",
        "testPutFirst[6]",
        "testTake[0]",
        "testPop[28]",
        "testIterator[2]",
        "testIsEmpty[7]",
        "testAddFirst[16]",
        "testPollLastTimeout[24]",
        "testSet[12]",
        "testRemoveFirstOccurrence[11]",
        "testTakeLast[29]",
        "testOfferFirst[7]",
        "testSize[30]",
        "testPop[29]",
        "testTakeFirst[22]",
        "testPollFirst[1]",
        "testRange[9]",
        "testIsEmpty[4]",
        "testPeek[3]",
        "testAddFirst[19]",
        "testPeek[25]",
        "addAllIndexCollectionTail[4]",
        "testLast[29]",
        "testSet[11]",
        "testPollFirst[2]",
        "testRemoveFirstOccurrence[12]",
        "testTakeLast[28]",
        "testTakeFirst[23]",
        "testOfferFirst[6]",
        "testAddFirst[18]",
        "testIsEmpty[5]",
        "testRange[8]",
        "testPeek[2]",
        "addAllIndexCollectionTail[3]",
        "testRemainingCapacity[19]",
        "testSet[10]",
        "testPeek[26]",
        "testRemoveObject[8]",
        "testRemoveFirstOccurrence[13]",
        "testTakeFirst[20]",
        "testOfferFirst[5]",
        "testPollLastTimeout[21]",
        "testPeek[1]",
        "testIsEmpty[2]",
        "testPeek[23]",
        "testRemainingCapacity[18]",
        "testAddAll[28]",
        "addAllIndexCollectionTail[6]",
        "testPoll[28]",
        "testRemoveObject[9]",
        "testRemoveFirstOccurrence[14]",
        "testPollFirst[0]",
        "testOfferFirst[4]",
        "testTakeFirst[21]",
        "testPollLastTimeout[20]",
        "testIsEmpty[3]",
        "testPeekLast[30]",
        "testPeek[0]",
        "addAllIndexCollectionHead[30]",
        "testPeek[24]",
        "addAllIndexCollectionTail[5]",
        "testPoll[29]",
        "testRemainingCapacity[17]",
        "testAddAll[29]",
        "testTrim[20]",
        "testRemoveFirstOccurrence[15]",
        "testIterator[7]",
        "testTake[5]",
        "testContainsAll[16]",
        "addAllIndexCollectionTail[21]",
        "testIsEmpty[0]",
        "testPollFirst[25]",
        "testPollLast[10]",
        "testDrainToCollection[17]",
        "testPeek[29]",
        "testRange[5]",
        "testGetFirst[24]",
        "testLast[25]",
        "testRemoveFirstOccurrence[16]",
        "testPollFirst[23]",
        "testIterator[8]",
        "testSize[0]",
        "testTake[6]",
        "testContainsAll[15]",
        "testIterator[9]",
        "addAllIndexCollectionTail[20]",
        "testIsEmpty[1]",
        "testPollLast[11]",
        "testPollFirst[24]",
        "testGetFirst[25]",
        "testDrainToCollection[18]",
        "testRange[4]",
        "testLast[26]",
        "testPutLast[20]",
        "testPollFirst[22]",
        "testRemoveFirstOccurrence[17]",
        "testRmoveLastOccurrence[8]",
        "testOfferFirst[9]",
        "testSize[1]",
        "testTake[7]",
        "testRange[7]",
        "testContainsAll[18]",
        "testPollLast[12]",
        "testDrainToCollection[15]",
        "testGetFirst[22]",
        "testLast[27]",
        "testPeek[27]",
        "testTake[8]",
        "testPollFirst[21]",
        "testRmoveLastOccurrence[9]",
        "testOfferFirst[8]",
        "testRemoveFirstOccurrence[18]",
        "testSize[2]",
        "testAddLast[30]",
        "testRange[6]",
        "testContainsAll[17]",
        "testPollLast[13]",
        "testRemoveFirst[30]",
        "testDrainToCollection[16]",
        "testLast[28]",
        "testPeek[28]",
        "testGetFirst[23]",
        "testPoll[22]",
        "testGetFirst[20]",
        "testSet[19]",
        "testPutLast[22]",
        "testAddFirst[10]",
        "testRemoveFirstOccurrence[19]",
        "testPutFirst[21]",
        "testTake[1]",
        "testSize[3]",
        "testRmoveLastOccurrence[6]",
        "testTrim[24]",
        "testIterator[3]",
        "testContainsAll[12]",
        "testPop[20]",
        "testLast[21]",
        "testPollLast[14]",
        "testRange[1]",
        "testPollLastTimeout[27]",
        "testPollFirst[29]",
        "testTakeLast[21]",
        "testPoll[23]",
        "testPutLast[21]",
        "testSet[18]",
        "testTake[2]",
        "testSize[4]",
        "testRmoveLastOccurrence[7]",
        "testPutFirst[22]",
        "testTrim[23]",
        "testContainsAll[11]",
        "testIterator[4]",
        "testPop[21]",
        "testLast[22]",
        "testPollLast[15]",
        "testPollLastTimeout[26]",
        "testRange[0]",
        "testPollFirst[28]",
        "testGetFirst[21]",
        "testToString[0]",
        "testTakeLast[20]",
        "testSet[17]",
        "testPutLast[24]",
        "testTakeFirst[28]",
        "testPoll[20]",
        "testIterator[5]",
        "testTake[3]",
        "testSize[5]",
        "testRmoveLastOccurrence[4]",
        "testAddFirst[12]",
        "testTrim[22]",
        "testContainsAll[14]",
        "testPop[22]",
        "testLast[23]",
        "testPollLast[16]",
        "testPollLastTimeout[29]",
        "testPollFirst[27]",
        "testRange[3]",
        "testRemoveFirstOccurrence[0]",
        "testTakeLast[23]",
        "testDrainToCollection[19]",
        "testSet[16]",
        "testPoll[21]",
        "testPutLast[23]",
        "testTakeFirst[29]",
        "testIterator[6]",
        "testRmoveLastOccurrence[5]",
        "testPutFirst[20]",
        "testTake[4]",
        "testAddFirst[11]",
        "testTrim[21]",
        "testPop[24]",
        "testContainsAll[13]",
        "testPop[23]",
        "testLast[24]",
        "testPollLast[17]",
        "testSize[6]",
        "testPollFirst[26]",
        "testPollLastTimeout[28]",
        "testRemoveFirstOccurrence[1]",
        "testTakeLast[22]",
        "testRange[2]",
        "testPutLast[14]",
        "testDrainToCollection[20]",
        "testPollTimeout[28]",
        "testAddAll[30]",
        "testTrim[28]",
        "addAllIndexCollectionTail[18]",
        "testAddIndexObjectMiddle[7]",
        "testPutFirst[25]",
        "testOfferFirst[18]",
        "testToString[3]",
        "testTakeLast[1]",
        "testToArray[5]",
        "testSet[7]",
        "testTrim[0]",
        "testRemoveFirstOccurrence[2]",
        "testRemove[25]",
        "testPutLast[13]",
        "testPollTimeout[29]",
        "testDrainToCollection[21]",
        "testTrim[27]",
        "addAllIndexCollectionTail[17]",
        "testAddIndexObjectMiddle[8]",
        "testPutFirst[26]",
        "testOfferFirst[19]",
        "testToString[4]",
        "testTakeLast[2]",
        "testToArray[4]",
        "testRemove[24]",
        "testRemoveFirstOccurrence[3]",
        "testSet[6]",
        "addAllIndexCollectionMiddle[10]",
        "testPutLast[16]",
        "testSet[9]",
        "testPollTimeout[26]",
        "testPutFirst[23]",
        "testTrim[26]",
        "testAddIndexObjectMiddle[9]",
        "testAddIndexObjectHead[9]",
        "addAllIndexCollectionTail[16]",
        "testGetFirst[8]",
        "testDrainToCollectionWithMaxElements[30]",
        "testOfferFirst[16]",
        "testTakeLast[3]",
        "testRemoveFirstOccurrence[4]",
        "testRemove[23]",
        "testToArray[7]",
        "testToString[1]",
        "testIterator[30]",
        "testPutLast[15]",
        "testPollTimeout[27]",
        "testTrim[25]",
        "addAllIndexCollectionMiddle[11]",
        "addAllIndexCollectionTail[15]",
        "testPutFirst[24]",
        "testOfferFirst[17]",
        "testTakeLast[4]",
        "testLast[20]",
        "testRemove[22]",
        "testGetFirst[9]",
        "testRemoveFirstOccurrence[5]",
        "testToArray[6]",
        "testSet[8]",
        "testToString[2]",
        "testTake[9]",
        "testCappedCollection[28]",
        "testPollFirst[20]",
        "testAddIndexObjectMiddle[3]",
        "addAllIndexCollectionTail[14]",
        "addAllIndexCollectionTail[13]",
        "testRange[30]",
        "testGetFirst[6]",
        "testPutFirst[29]",
        "testTakeLast[5]",
        "testOfferFirst[14]",
        "testRemoveFirstOccurrence[6]",
        "testToString[7]",
        "testRemove[21]",
        "testAddIndexObjectMiddle[30]",
        "testDrainToCollection[25]",
        "testGetFirst[28]",
        "testPutLast[18]",
        "testRmoveLastOccurrence[21]",
        "testToArray[9]",
        "testTrim[4]",
        "testCappedCollection[29]",
        "testAddIndexObjectMiddle[4]",
        "testGetFirst[7]",
        "addAllIndexCollectionTail[12]",
        "testTakeLast[6]",
        "testOfferFirst[15]",
        "testRemove[20]",
        "testGetFirst[29]",
        "testRemoveFirstOccurrence[7]",
        "testToString[8]",
        "testToArray[8]",
        "testDrainToCollection[26]",
        "testRmoveLastOccurrence[20]",
        "testPutLast[17]",
        "testTrim[3]",
        "testCappedCollection[26]",
        "testPollLastTimeout[0]",
        "testDrainToCollection[22]",
        "testAddIndexObjectMiddle[5]",
        "testPutFirst[27]",
        "testToString[5]",
        "addAllIndexCollectionTail[11]",
        "testTakeLast[7]",
        "testAddIndexObjectHead[28]",
        "testRemoveFirstOccurrence[8]",
        "testOfferFirst[12]",
        "testAdd[21]",
        "testGetFirst[26]",
        "testIndexOfObject[29]",
        "testGetFirst[4]",
        "testTrim[2]",
        "testPollLastTimeout[1]",
        "testCappedCollection[27]",
        "testDrainToCollection[23]",
        "testAddIndexObjectMiddle[6]",
        "testToString[6]",
        "testTakeLast[8]",
        "testAddIndexObjectHead[29]",
        "testPeekFirst[19]",
        "testGetFirst[5]",
        "addAllIndexCollectionTail[10]",
        "testPutFirst[28]",
        "testRemoveFirstOccurrence[9]",
        "testOfferFirst[13]",
        "testAdd[20]",
        "testTrim[29]",
        "testDrainToCollection[24]",
        "testIndexOfObject[28]",
        "testGetFirst[27]",
        "testTrim[1]",
        "testPutLast[19]",
        "testPollFirst[5]",
        "testRemoveObject[6]",
        "removeAll[10]",
        "testCappedCollection[24]",
        "testRemoveObject[23]",
        "addAllIndexCollectionMiddle[16]",
        "testAddIndexObjectHead[25]",
        "testRmoveLastOccurrence[25]",
        "testClear[10]",
        "testPeekFirst[18]",
        "testAdd[23]",
        "testOfferFirst[10]",
        "removeAll[11]",
        "testIndexOfObject[27]",
        "testPollTimeout[20]",
        "testGetFirst[2]",
        "testContainsObject[20]",
        "testRemainingCapacity[28]",
        "testRemoveObject[7]",
        "testPollFirst[6]",
        "testCappedCollection[25]",
        "addAllIndexCollectionMiddle[17]",
        "testRemoveObject[24]",
        "testPeekFirst[16]",
        "testAddIndexObjectHead[26]",
        "testAddIndexObjectHead[27]",
        "testPeekFirst[17]",
        "testAdd[22]",
        "testOfferFirst[11]",
        "testContainsObject[21]",
        "testPollTimeout[21]",
        "testIndexOfObject[26]",
        "testGetFirst[3]",
        "testRemainingCapacity[27]",
        "testRmoveLastOccurrence[24]",
        "testRemoveObject[4]",
        "testPollFirst[3]",
        "testCappedCollection[22]",
        "addAllIndexCollectionMiddle[18]",
        "testAdd[25]",
        "testRemoveObject[25]",
        "testPeekFirst[15]",
        "testAddIndexObjectHead[23]",
        "testClear[12]",
        "testToString[9]",
        "addAllIndexCollectionMiddle[19]",
        "testGetFirst[0]",
        "testRemoveIndex[30]",
        "testContainsObject[22]",
        "testRemainingCapacity[26]",
        "testIndexOfObject[25]",
        "testRmoveLastOccurrence[23]",
        "testPollFirst[4]",
        "testRemoveObject[5]",
        "testCappedCollection[23]",
        "testAdd[24]",
        "testRemoveObject[26]",
        "testPeekFirst[14]",
        "testAddIndexObjectHead[24]",
        "testClear[11]",
        "testRemainingCapacity[25]",
        "testContainsObject[23]",
        "testRmoveLastOccurrence[22]",
        "testIndexOfObject[24]",
        "testGetFirst[1]",
        "testPeekLast[28]",
        "testPeekLast[1]",
        "testAddLast[29]",
        "testPollFirst[9]",
        "testAddIndexObjectHead[21]",
        "testAdd[27]",
        "testRemoveObject[27]",
        "addAllIndexCollectionMiddle[12]",
        "testPeekFirst[13]",
        "testTake[11]",
        "testRmoveLastOccurrence[29]",
        "testToArray[1]",
        "testClear[14]",
        "testPollTimeout[24]",
        "testCappedCollection[20]",
        "testRemainingCapacity[24]",
        "testContainsObject[24]",
        "testPeekLast[27]",
        "testRemoveObject[2]",
        "testRemoveFirst[27]",
        "testIndexOfObject[23]",
        "testRemove[29]",
        "testToArray[30]",
        "testPeekLast[29]",
        "testPeekLast[2]",
        "testContainsObject[25]",
        "testRemainingCapacity[22]",
        "testAddLast[28]",
        "testPollTimeout[25]",
        "testPeekFirst[12]",
        "testAdd[26]",
        "testAddIndexObjectHead[22]",
        "addAllIndexCollectionMiddle[13]",
        "testToString[30]",
        "testRemoveObject[28]",
        "testIndexOfObject[22]",
        "testToArray[0]",
        "testRmoveLastOccurrence[28]",
        "testTake[10]",
        "testClear[13]",
        "testCappedCollection[21]",
        "testRemainingCapacity[23]",
        "testRemove[28]",
        "testRemoveObject[3]",
        "testRemoveFirst[28]",
        "testRemainingCapacity[21]",
        "testContainsObject[26]",
        "testPollFirst[7]",
        "testPeekFirst[11]",
        "addAllIndexCollectionMiddle[14]",
        "testAdd[29]",
        "testRemoveObject[29]",
        "testTake[13]",
        "testIndexOfObject[21]",
        "testRmoveLastOccurrence[27]",
        "testClear[16]",
        "testToArray[3]",
        "testPollTimeout[22]",
        "testRemoveObject[0]",
        "testRemoveFirst[29]",
        "testRemove[27]",
        "testPeekLast[25]",
        "testPollFirst[8]",
        "testPeekLast[0]",
        "testContainsObject[27]",
        "testRemainingCapacity[20]",
        "testPeekFirst[10]",
        "addAllIndexCollectionMiddle[15]",
        "addAllIndexCollectionTail[19]",
        "testAddIndexObjectHead[20]",
        "testAdd[28]",
        "testRmoveLastOccurrence[26]",
        "testTake[12]",
        "testIndexOfObject[20]",
        "testToArray[2]",
        "testClear[15]",
        "testTakeLast[0]",
        "testPollTimeout[23]",
        "testRemove[26]",
        "testRemoveObject[1]",
        "testPeekLast[26]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.connection.PoolException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.junit.AssumptionViolatedException",
          "failureDetail": "got: \u003cfalse\u003e, expected: is \u003ctrue\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003corg.springframework.data.redis.RedisConnectionFailureException\u003e",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3534
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
      "failingMethods": [],
      "erroringMethods": [
        "testReturnResource",
        "testGetResourceValidate",
        "testGetResource",
        "testCreateWithDbIndex",
        "testReturnBrokenResource",
        "poolWorksWithoutClientResources",
        "testGetResourcePoolExhausted"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "org.springframework.data.redis.mapping.Jackson2HashMapperTests",
      "failingMethods": [],
      "erroringMethods": [
        "shouldWriteReadHashCorrectly[1]",
        "shouldWriteReadHashCorrectly[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
      "failingMethods": [],
      "erroringMethods": [
        "testNone",
        "testExistingCol"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.apache.maven.surefire.junit4.JUnit4Provider",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.srp.SrpConnectionPipelineTxIntegrationTests",
        "org.springframework.data.redis.connection.jedis.JedisConnectionTransactionIntegrationTests",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionTransactionIntegrationTests",
        "org.springframework.data.redis.connection.jedis.JedisConnectionIntegrationTests",
        "org.springframework.data.redis.connection.srp.SrpConnectionPipelineIntegrationTests",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineTxIntegrationTests",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineIntegrationTests",
        "org.springframework.data.redis.connection.srp.SrpConnectionTransactionIntegrationTests",
        "org.springframework.data.redis.connection.jedis.JedisConnectionPipelineIntegrationTests",
        "org.springframework.data.redis.connection.jredis.JRedisConnectionIntegrationTests",
        "org.springframework.data.redis.connection.srp.SrpConnectionIntegrationTests",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionIntegrationTests",
        "org.springframework.data.redis.connection.jedis.JedisConnectionPipelineTxIntegrationTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
      "failingMethods": [],
      "erroringMethods": [
        "testExpire[0]",
        "testDecrementAndGet[3]",
        "testGetAndDecrement[1]",
        "testRename[0]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[0]",
        "testGetAndIncrement[0]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "testGetAndAdd[3]",
        "testCheckAndSet[1]",
        "testExpireAt[3]",
        "testGetAndSet[1]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "testIncrementAndGet[0]",
        "testAddAndGet[3]",
        "testDecrementAndGet[2]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "testExpire[1]",
        "testGetAndAdd[0]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "testExpireAt[0]",
        "testRename[1]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "testGetAndDecrement[0]",
        "testGetAndIncrement[3]",
        "testCheckAndSet[2]",
        "testGetAndSet[0]",
        "testIncrementAndGet[3]",
        "testAddAndGet[0]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "testDecrementAndGet[1]",
        "testExpire[2]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "testGetAndAdd[1]",
        "testGetAndDecrement[3]",
        "testRename[2]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "testExpireAt[1]",
        "testCheckAndSet[3]",
        "testGetAndIncrement[2]",
        "testAddAndGet[1]",
        "testIncrementAndGet[2]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[3]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "testGetAndSet[3]",
        "testExpire[3]",
        "getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "testGetAndAdd[2]",
        "testGetAndDecrement[2]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "testRename[3]",
        "testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[1]",
        "testExpireAt[2]",
        "testCheckAndSet[0]",
        "testDecrementAndGet[0]",
        "testGetAndIncrement[1]",
        "testAddAndGet[2]",
        "testIncrementAndGet[1]",
        "getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[2]",
        "testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "testGetAndSet[2]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 64
    },
    {
      "className": "org.springframework.data.redis.cache.RedisCacheTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCacheGetSynchronized[10]",
        "cachePutWithNullShouldNotAddStuffToRedis[2]",
        "testCacheGetSynchronizedNullNotAllowingNull[12]",
        "cachePutWithNullShouldRemoveKeyIfExists[14]",
        "testCacheGetSynchronizedNullWithStoredNull[16]",
        "testCacheGetSynchronizedNullWithStoredNull[4]",
        "testCacheName[10]",
        "testCacheGetSynchronizedNullAllowingNull[0]",
        "testCacheGetShouldThrowExceptionOnInvalidType[4]",
        "testCacheGetShouldRetunInstanceOfCorrectType[8]",
        "cachePutWithNullShouldRemoveKeyIfExists[9]",
        "testNativeCache[0]",
        "testCacheGetSynchronizedNullNotAllowingNull[8]",
        "testCacheName[4]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[2]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[10]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[18]",
        "testCachePut[2]",
        "testConcurrentRead[0]",
        "cachePutWithNullShouldNotAddStuffToRedis[14]",
        "testCacheGetSynchronizedNullAllowingNull[12]",
        "testCacheGetShouldRetunInstanceOfCorrectType[16]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[2]",
        "testCacheGetSynchronizedNullNotAllowingNull[7]",
        "testCachePut[18]",
        "testCacheGetShouldRetunInstanceOfCorrectType[9]",
        "testCacheGetSynchronized[4]",
        "testNativeCache[10]",
        "testCacheGetSynchronized[12]",
        "cachePutWithNullShouldNotAddStuffToRedis[4]",
        "testCacheGetSynchronizedNullNotAllowingNull[10]",
        "testCacheGetSynchronizedNullWithStoredNull[18]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[0]",
        "cachePutWithNullShouldRemoveKeyIfExists[16]",
        "testCacheName[6]",
        "testCacheGetSynchronizedNullWithStoredNull[6]",
        "testCacheName[12]",
        "cachePutWithNullShouldRemoveKeyIfExists[7]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[16]",
        "testCachePut[19]",
        "testCacheGetShouldThrowExceptionOnInvalidType[6]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[0]",
        "testCacheGetSynchronizedNullAllowingNull[10]",
        "testConcurrentRead[19]",
        "testCacheGetShouldRetunInstanceOfCorrectType[14]",
        "cachePutWithNullShouldNotAddStuffToRedis[12]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[0]",
        "testCachePut[0]",
        "testCacheGetSynchronizedNullWithStoredNull[7]",
        "testCacheGetSynchronizedNullNotAllowingNull[9]",
        "testNativeCache[12]",
        "cachePutWithNullShouldRemoveKeyIfExists[8]",
        "testCacheGetSynchronized[6]",
        "testCacheGetShouldThrowExceptionOnInvalidType[7]",
        "testCacheGetSynchronized[14]",
        "testConcurrentRead[18]",
        "cachePutWithNullShouldRemoveKeyIfExists[10]",
        "testCacheGetSynchronizedNullWithStoredNull[8]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[2]",
        "testCacheClear[10]",
        "testCacheGetShouldRetunInstanceOfCorrectType[19]",
        "testCacheGetShouldReturnCachedInstance[19]",
        "testCacheGetSynchronizedNullNotAllowingNull[16]",
        "testCacheGetSynchronizedNullWithStoredNull[12]",
        "testCacheName[14]",
        "testCacheGetShouldThrowExceptionOnInvalidType[0]",
        "testCacheName[0]",
        "testGetWhileClear[19]",
        "testCacheGetSynchronizedNullAllowingNull[16]",
        "testCacheGetSynchronizedNullAllowingNull[4]",
        "testCacheGetShouldThrowExceptionOnInvalidType[12]",
        "testCacheGetShouldReturnCachedInstance[0]",
        "testNativeCache[4]",
        "testCacheClear[2]",
        "cachePutWithNullShouldNotAddStuffToRedis[10]",
        "testCacheGetSynchronizedNullWithStoredNull[9]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[10]",
        "testGetWhileClear[0]",
        "testConcurrentRead[4]",
        "testCacheGetShouldReturnCachedInstance[18]",
        "testCacheClear[12]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[6]",
        "testCacheGetSynchronized[0]",
        "cachePutWithNullShouldRemoveKeyIfExists[6]",
        "testNativeCache[14]",
        "cachePutWithNullShouldRemoveKeyIfExists[12]",
        "testConcurrentRead[16]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[4]",
        "testCacheGetSynchronized[16]",
        "testCacheGetSynchronizedNullNotAllowingNull[14]",
        "testCacheGetShouldReturnCachedInstance[2]",
        "testCacheGetSynchronizedNullWithStoredNull[14]",
        "testCacheName[16]",
        "testCacheGetShouldThrowExceptionOnInvalidType[2]",
        "testNativeCache[2]",
        "testCacheGetSynchronizedNullAllowingNull[2]",
        "testCacheName[2]",
        "testCacheGetShouldThrowExceptionOnInvalidType[10]",
        "testCacheClear[0]",
        "testGetWhileClear[2]",
        "testCacheGetSynchronizedNullAllowingNull[14]",
        "testConcurrentRead[2]",
        "testCacheGetShouldRetunInstanceOfCorrectType[18]",
        "testCacheClear[14]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[4]",
        "testNativeCache[16]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[19]",
        "testCacheGetSynchronized[2]",
        "cachePutWithNullShouldNotAddStuffToRedis[0]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[19]",
        "cachePutWithNullShouldRemoveKeyIfExists[4]",
        "testCacheGetSynchronizedNullAllowingNull[9]",
        "testCacheGetShouldThrowExceptionOnInvalidType[16]",
        "testCacheGetShouldRetunInstanceOfCorrectType[0]",
        "cachePutWithNullShouldRemoveKeyIfExists[0]",
        "testCacheGetSynchronizedNullNotAllowingNull[0]",
        "testConcurrentRead[14]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[6]",
        "testConcurrentRead[9]",
        "testCacheGetSynchronized[18]",
        "testCacheClear[7]",
        "testNativeCache[19]",
        "testCacheGetShouldReturnCachedInstance[4]",
        "testNativeCache[8]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[10]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[18]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[9]",
        "testCacheName[18]",
        "testGetWhileClear[4]",
        "testCacheGetSynchronizedNullAllowingNull[8]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[7]",
        "testConcurrentRead[8]",
        "testCacheClear[6]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[14]",
        "testCacheGetSynchronizedNullNotAllowingNull[19]",
        "testCacheGetShouldReturnCachedInstance[14]",
        "testCacheClear[16]",
        "testNativeCache[18]",
        "testConcurrentRead[12]",
        "testNativeCache[7]",
        "cachePutWithNullShouldRemoveKeyIfExists[2]",
        "testCacheName[19]",
        "testCacheGetSynchronizedNullAllowingNull[7]",
        "testGetWhileClear[16]",
        "testCacheGetSynchronizedNullNotAllowingNull[2]",
        "testCachePut[10]",
        "testCacheGetShouldThrowExceptionOnInvalidType[14]",
        "cachePutWithNullShouldNotAddStuffToRedis[19]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[9]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[8]",
        "testCachePut[9]",
        "testConcurrentRead[7]",
        "testCacheGetSynchronizedNullNotAllowingNull[18]",
        "testCacheGetShouldReturnCachedInstance[6]",
        "testCacheGetSynchronizedNullWithStoredNull[10]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[7]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[16]",
        "testCacheGetSynchronizedNullAllowingNull[18]",
        "testCacheGetShouldRetunInstanceOfCorrectType[2]",
        "testNativeCache[6]",
        "testCacheGetSynchronizedNullAllowingNull[6]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[9]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[8]",
        "testGetWhileClear[6]",
        "testCachePut[8]",
        "testConcurrentRead[6]",
        "testCacheClear[4]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[12]",
        "testCacheGetSynchronized[19]",
        "testCacheClear[18]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[8]",
        "testCacheGetShouldReturnCachedInstance[7]",
        "testCacheGetShouldReturnCachedInstance[16]",
        "testConcurrentRead[10]",
        "testGetWhileClear[18]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[7]",
        "testCacheGetSynchronizedNullAllowingNull[19]",
        "testCachePut[12]",
        "cachePutWithNullShouldNotAddStuffToRedis[6]",
        "testGetWhileClear[10]",
        "testGetWhileClear[7]",
        "testCachePut[7]",
        "testCacheGetSynchronizedNullNotAllowingNull[4]",
        "testCacheGetShouldReturnCachedInstance[9]",
        "testCacheGetShouldReturnCachedInstance[10]",
        "cachePutWithNullShouldRemoveKeyIfExists[18]",
        "testCacheName[8]",
        "testCacheGetSynchronized[7]",
        "testCacheGetSynchronizedNullWithStoredNull[0]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[18]",
        "testCacheGetShouldReturnCachedInstance[8]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[6]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[14]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[14]",
        "testCacheClear[19]",
        "testCacheGetShouldRetunInstanceOfCorrectType[4]",
        "testCacheGetShouldThrowExceptionOnInvalidType[8]",
        "cachePutWithNullShouldNotAddStuffToRedis[7]",
        "cachePutWithNullShouldNotAddStuffToRedis[18]",
        "testCacheGetShouldThrowExceptionOnInvalidType[9]",
        "testCachePut[6]",
        "testGetWhileClear[8]",
        "testCacheGetShouldRetunInstanceOfCorrectType[12]",
        "cachePutWithNullShouldRemoveKeyIfExists[19]",
        "testCacheGetSynchronizedNullWithStoredNull[19]",
        "testCacheGetSynchronized[8]",
        "testCacheName[7]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[19]",
        "testGetWhileClear[9]",
        "testCachePut[14]",
        "cachePutWithNullShouldNotAddStuffToRedis[8]",
        "testGetWhileClear[12]",
        "testCacheGetSynchronizedNullNotAllowingNull[6]",
        "testCacheGetShouldThrowExceptionOnInvalidType[18]",
        "testCacheClear[9]",
        "testCacheGetShouldReturnCachedInstance[12]",
        "testCacheGetSynchronizedNullWithStoredNull[2]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[16]",
        "testCacheGetSynchronized[9]",
        "putIfAbsentShouldSetValueOnlyIfNotPresent[12]",
        "testCacheGetShouldRetunInstanceOfCorrectType[6]",
        "testCacheGetShouldReturnNullIfNoCachedValueFound[4]",
        "cachePutWithNullShouldAddStuffToRedisWhenCachingNullIsEnabled[12]",
        "testCachePut[4]",
        "cachePutWithNullShouldNotAddStuffToRedis[9]",
        "testCacheGetShouldRetunInstanceOfCorrectType[10]",
        "cachePutWithNullShouldNotAddStuffToRedis[16]",
        "testCacheGetShouldThrowExceptionOnInvalidType[19]",
        "testCacheClear[8]",
        "testCacheName[9]",
        "testNativeCache[9]",
        "testCacheGetShouldRetunInstanceOfCorrectType[7]",
        "testCachePut[16]",
        "testGetWhileClear[14]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 234
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.ScanTests",
      "failingMethods": [],
      "erroringMethods": [
        "contextLoads[0]",
        "contextLoads[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    }
  ],
  "failingModule": "/root/workspace/spring-projects/spring-data-redis/408858929",
  "bugCommit": "https://github.com/spring-projects/spring-data-redis/compare/416688a067ee...5d1d2745cf97"
}