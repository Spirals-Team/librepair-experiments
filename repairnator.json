{
  "bugType": "only_fail",
  "hostname": "spirals-repairnator",
  "repo": "evanchooly/kibble",
  "metrics": {
    "FailureNames": [
      "java.util.EmptyStackException",
      "java.lang.AssertionError",
      "kotlin.NotImplementedError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 30,
      "ComputeTestDir": 0,
      "BuildProject": 161,
      "InitRepoToPush": 0,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "AstorJMut": 3,
      "CloneRepository": 4,
      "CheckoutPatchedBuild": 0,
      "Nopol": 1,
      "NPEFix": 0,
      "TestProject": 36,
      "GatherTestInformation": 0,
      "CommitPatch": 0
    },
    "NbFailingTests": 17,
    "NbErroringTests": 0,
    "NbSkippingTests": 0,
    "NbRunningTests": 52,
    "BugCommitUrl": "http://github.com/evanchooly/kibble/commit/8b04e43333265dcb9e91b38188fac00c90b61644",
    "ReproductionDate": "Jul 17, 2018 3:44:48 AM",
    "BuggyBuildId": 404693120,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/evanchooly/kibble/builds/404693120",
    "BuggyBuildDate": "Jul 17, 2018 3:44:39 AM",
    "BugCommit": "8b04e43333265dcb9e91b38188fac00c90b61644",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 15,
    "NbFileApp": 0,
    "NbFileTests": 0,
    "NbCPU": 4,
    "FreeMemory": 188110544,
    "TotalMemory": 271581184,
    "AngelicValuesByTest": {
      "com/antwerkz/kibble/model/KibblePropertyTest": 0,
      "com/antwerkz/kibble/model/ConstructorTest": 0,
      "com/antwerkz/kibble/model/KibbleTypeTest": 0,
      "com/antwerkz/kibble/model/AnnotationHolderTest": 0,
      "com/antwerkz/kibble/KibbleTest": 0,
      "com/antwerkz/kibble/model/KibbleFunctionTest": 0,
      "com/antwerkz/kibble/model/KibbleObjectTest": 0,
      "com/antwerkz/kibble/model/KibbleFileTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 157542880,
      "ComputeClasspath": 135785792,
      "ComputeTestDir": 129970648,
      "BuildProject": 152223984,
      "InitRepoToPush": 137768792,
      "ComputeSourceDir": 188110544,
      "ComputeModules": 186617880,
      "AstorJMut": 194478344,
      "CloneRepository": 161045464,
      "CheckoutPatchedBuild": 188110544,
      "Nopol": 153906240,
      "NPEFix": 153906240,
      "TestProject": 150571024,
      "GatherTestInformation": 148244976,
      "CommitPatch": 188110544
    },
    "NbSucceedingTests": 35
  },
  "failing-test-cases": [
    {
      "className": "com.antwerkz.kibble.model.KibblePropertyTest",
      "failingMethods": [
        "generics"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.util.EmptyStackException",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.KibbleFileTest",
      "failingMethods": [
        "resolveClassesInFile",
        "imports",
        "resolve",
        "normalize",
        "resolveClassesInAnotherFile"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [package com.antwerkz.kibble  import java.lang.String as anotherAlias import java.sql.ResultSet as aliasName] but found [package com.antwerkz.kibble   import java.lang.String as anotherAlias import java.sql.ResultSet as aliasName]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [Map.Entry] but found [Entry]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.antwerkz.testing.Second] but found [Second]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.antwerkz.testing.Second] but found [Second]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.antwerkz.testing.Second] but found [Second]",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.ConstructorTest",
      "failingMethods": [
        "imports"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [import com.foo.Bob import org.box.Bla  class temp(val temp: Bob) {     constructor(foo: Bla): this()  } ] but found [ import com.foo.Bob import org.box.Bla  class temp(val temp: Bob) {     constructor(foo: Bla): this()  } ]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.KibbleFunctionTest",
      "failingMethods": [
        "generics",
        "varargs"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [fun \u003cT\u003e foo(t: T)] but found [fun \u003cT\u003e foo(t: T) ]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [fun temp(vararg bob: String) {     return 4 } ] but found [ fun temp(vararg bob: String) {     return 4 } ]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.AnnotationHolderTest",
      "failingMethods": [
        "functions"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [import kotlin.annotation.Retention  @Bob(name \u003d Feller) @Retention fun foo()] but found [ import kotlin.annotation.Retention  @Bob(name \u003d Feller) @Retention fun foo() ]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.KibbleObjectTest",
      "failingMethods": [
        "functions"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [object temp {     fun something(): Junk {         println(\"something\")     } } ] but found [object temp {     fun something(): Junk {         println(\"something\")     } } ]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.KibbleTest",
      "failingMethods": [
        "writeSource",
        "standalone",
        "create"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [val topLevel: Int \u003d 4  open class KibbleTest {     val property: Double \u003d 0.0     protected fun test(): Double {         println(\"hello\")         return 0.0     } }  fun bareMethod() {     println(\"hi\") } ] but found [ val topLevel: Int \u003d 4  open class KibbleTest {     val property: Double \u003d 0.0     protected fun test(): Double {         println(\"hello\")         return 0.0     } }  fun bareMethod() {     println(\"hi\") } ]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [println(\"hi\") return \"hi\"] but found [    println(\"hi\") return \"hi\"]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [package com.antwerkz.test  import java.util.ArrayList import java.util.HashMap as HMap import javax.annotation.Generated  interface Dummy {     fun what() }  @Generated(\"I\u0027m the value\", date \u003d \"123455\", comments \u003d \"Fingers crossed\") internal abstract class KotlinSampleClass(val cost: Double, ignored: Int): ParentClass(21), Cloneable {     var name: String? \u003d null     protected open val age: Double \u003d -1.0     val list: List\u003cString\u003e \u003d ArrayList()     val map: HMap\u003cString, Int\u003e \u003d java.util.HashMap()     var time: Int? \u003d null     @SuppressWarnings(\"message\")     protected lateinit var random: String     @SuppressWarnings(\"message\")     protected fun output(count: Long) {         println(\"age \u003d $age\")     }     override fun toString(): String {         return \"KotlinSampleClass(name\u003d\u0027$name\u0027, time\u003d$time, age\u003d$age, list\u003d$list, map\u003d$map)\"     } }  open class ParentClass(val blurb: Int) { }  ] but found [package com.antwerkz.test   import java.util.ArrayList import java.util.HashMap as HMap import javax.annotation.Generated  interface Dummy {     fun what() }  @Generated(\"I\u0027m the value\", date \u003d \"123455\", comments \u003d \"Fingers crossed\") internal abstract class KotlinSampleClass(val cost: Double, ignored: Int): ParentClass(21), Cloneable {     var name: String? \u003d null     protected open val age: Double \u003d -1.0     val list: List\u003cString\u003e \u003d ArrayList()     val map: HMap\u003cString, Int\u003e \u003d java.util.HashMap()     var time: Int? \u003d null     @SuppressWarnings(\"message\")     protected lateinit var random: String     @SuppressWarnings(\"message\")     protected fun output(count: Long) {         println(\"age \u003d $age\")     }     override fun toString(): String {         return \"KotlinSampleClass(name\u003d\u0027$name\u0027, time\u003d$time, age\u003d$age, list\u003d$list, map\u003d$map)\"     } }  open class ParentClass(val blurb: Int) { } ]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.antwerkz.kibble.model.KibbleTypeTest",
      "failingMethods": [
        "components",
        "generics",
        "values"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [Map.Entry] but found [Entry]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [com.foo.bar.SomeType\u003cString, Double\u003e?] but found [com.foo.bar.SomeType\u003ckotlin.String, kotlin.Double\u003e?]",
          "isError": false
        },
        {
          "failureName": "kotlin.NotImplementedError",
          "failureDetail": "An operation is not implemented: handle projection tokens",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    }
  ],
  "failingModule": "/root/workspace/evanchooly/kibble/404693120",
  "bugCommit": "https://github.com/evanchooly/kibble/compare/69e75da2f7f0...8b04e4333326"
}