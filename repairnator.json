{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 124,
  "repo": "spring-projects/spring-data-mongodb",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "ResolveDependency": 138,
      "BuildProject": 119,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 3,
      "CloneRepository": 6,
      "NopolRepair": 16,
      "CheckoutPatchedBuild": 0,
      "TestProject": 4439,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 7,
      "AstorRepair": 6000,
      "CommitPatch": 5
    },
    "FailureNames": [
      "com.mongodb.MongoTimeoutException",
      "java.lang.IllegalStateException",
      "org.springframework.dao.DataAccessResourceFailureException"
    ],
    "NbFailingTests": 124,
    "BugCommitUrl": "http://github.com/spring-projects/spring-data-mongodb/commit/05884d10826afbe2e2be92b0dfc65a35a8628640",
    "ReproductionDate": "May 9, 2018 10:44:33 AM",
    "BuggyBuildId": 376731293,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/spring-projects/spring-data-mongodb/builds/376731293",
    "BuggyBuildDate": "May 9, 2018 10:44:28 AM",
    "BugCommit": "05884d10826afbe2e2be92b0dfc65a35a8628640",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 322,
    "NbLibraries": 85,
    "NbFileApp": 818,
    "NbFileTests": 760,
    "NbCPU": 32,
    "FreeMemory": 1654150176,
    "TotalMemory": 2162688000,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 581632032,
      "ComputeClasspath": 435923296,
      "ComputeTestDir": 513496616,
      "ResolveDependency": 573796448,
      "BuildProject": 458298712,
      "NPERepair": 438660560,
      "ComputeSourceDir": 435923296,
      "InitRepoToPush": 391788320,
      "CloneRepository": 596527000,
      "NopolRepair": 1748290728,
      "CheckoutPatchedBuild": 1654150176,
      "TestProject": 530935192,
      "GatherTestInformation": 510602296,
      "PushIncriminatedBuild": 438660560,
      "AstorRepair": 644545216,
      "CommitPatch": 1654150176
    }
  },
  "bugCommit": "https://github.com/spring-projects/spring-data-mongodb/compare/e71ee579699a...05884d10826a",
  "failingModule": "/root/workspace/spring-projects/spring-data-mongodb/376731293/spring-data-mongodb",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 0,
  "error-types": [
    "com.mongodb.MongoTimeoutException",
    "java.lang.IllegalStateException",
    "org.springframework.dao.DataAccessResourceFailureException"
  ],
  "totalNumberRunningTests": 322,
  "failing-test-cases": [
    {
      "className": "org.springframework.data.mongodb.repository.support.QuerydslRepositorySupportTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.mongodb.repository.support.QuerydslRepositorySupportTests#providesMongoQuery",
        "org.springframework.data.mongodb.repository.support.QuerydslRepositorySupportTests#shouldAllowDbRefAgainstIdProperty",
        "org.springframework.data.mongodb.repository.support.QuerydslRepositorySupportTests#shouldAllowAny"
      ],
      "failures": [
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003d127.0.0.1:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003d127.0.0.1:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003d127.0.0.1:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003d127.0.0.1:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataAccessResourceFailureException",
          "failureDetail": "Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003d127.0.0.1:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003d127.0.0.1:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.springframework.data.mongodb.repository.ContactRepositoryIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.mongodb.repository.ContactRepositoryIntegrationTests#readsAndWritesContactCorrectly",
        "org.springframework.data.mongodb.repository.ContactRepositoryIntegrationTests#findsContactByTypedExample"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrarIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.mongodb.repository.config.MongoRepositoriesRegistrarIntegrationTests#testConfiguration"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests#findByWithSortByScoreViaPageRequestTriggersSortingCorrectly",
        "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests#findAllByTextCriteriaShouldReturnMatchingDocuments",
        "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests#derivedSortForTextScorePropertyWorksCorrectly",
        "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests#derivedFinderMethodWithoutFullTextShouldNoCauseTroubleWhenHavingEntityWithTextScoreProperty",
        "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests#derivedFinderWithTextCriteriaReturnsCorrectResult",
        "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests#findAllByTextCriteriaWithSortWorksCorrectly",
        "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests#findByWithPaginationWorksCorrectlyWhenUsingTextCriteria",
        "org.springframework.data.mongodb.repository.MongoRepositoryTextSearchIntegrationTests#findByWithSortViaPageRequestIgnoresTextScoreWhenSortedByOtherProperty"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonByShippingAddressesCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstNameIgnoreCase",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForLessThanPredicateCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#exposesPersistentEntity",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingWithQSort",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinBox",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsOpenProjection",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForPageInBetween",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonsByFirstname",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByUUIDShouldReturnCorrectResult",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameAsArray",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonInAgeRangeCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldNotLimitPagedQueryWhenPageRequestWithinBounds",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#assertDefaultMappingContextIsWired",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByNamedQuery",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameAndCurrentUserWithCustomQuery",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findSingleEntityThrowsErrorWhenNotUnique",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForJustOneElement",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesPagedFinderWithAnnotatedQueryCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedExistsProjectionToBoolean",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#countsPersonsByFirstname",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAnnotatedExistProjection",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedEndsWithQueryCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForManuallyDefinedQueryCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#existsWorksCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsSliceOfPersons",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationNear",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForResultsCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnListOfDeletedElementsWhenRetunTypeIsCollectionLike",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#gettingNonFirstPageWorksWithoutLimitBeingSet",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#rejectsDuplicateEmailAddressOnSave",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinCircle",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsClosedProjection",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationNearUsingGeoJsonType",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#appliesStaticAndDynamicSorting",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByExampleShouldResolveStuffCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByUsingAnnotatedQueryShouldRemoveElementsMatchingDerivedQuery",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#returnsOrderedResultsForQuerydslOrderSpecifier",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForJustOneElementEmptyPage",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#considersSortForAnnotatedQuery",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByCustomQueryLastnameAndStreetInList",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterToBeforePredicateCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldLimitCollectionQueryToMaxResultsWhenPresent",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findFirstEntityReturnsFirstResultEvenForNonUniqueMatches",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesQueryWithDBRefReferenceCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLastnameAndOrdersCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByQueryDslLastnameSpec",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonByAddressCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameNotContains",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameNotLike",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldReturnEmptyWhenPageRequestedPageIsTotallyOutOfScopeForLimit",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnZeroInCaseNoDocumentHasBeenRemovedAndReturnTypeIsNumber",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAnnotatedCountProjection",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findBySkillsContains",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByCustomQueryFirstnamesInListAndLastname",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoPageQueryForWithPageRequestForPageAtTheEnd",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedCountProjectionToInt",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findOptionalSingleEntityThrowsErrorWhenNotUnique",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForGreaterThanPredicateCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedCountProjection",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldExecuteFindOnDbRefCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesSingleEntityQueryWithProjectionCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameForSpELExpressionWithParameterVariableOnly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPagedPersons",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesDerivedStartsWithQueryCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldBindPlaceholdersUsedAsKeysCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingWithQSortByQueryDslOrderSpecifier",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findBySkillsNotContains",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesAndQueryCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByLastname",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonById",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesPagedFinderCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameStartingWithIgnoreCase",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleBySexPaginated",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindPersonsWhenUsingQueryDslPerdicatedOnIdProperty",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldAllowReturningJava8StreamInCustomQuery",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByNestedPropertyInCollectionShouldFindMatchingDocuments",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstNameIgnoreCaseWithNull",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#bindsDateParameterForAfterPredicateCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameEndingWithIgnoreCase",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findAllByExampleShouldResolveStuffCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstname",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldFindByFirstnameForSpELExpressionWithParameterIndexOnly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByZipCode",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameContainingIgnoreCase",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameLikeWithNull",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsAllMusicians",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findByFirstnameNotIgnoreCase",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldSupportSortingByQueryDslOrderSpecifier",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnNumberOfDocumentsRemovedIfReturnTypeIsLong",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleBySexCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoNearQueryForResultsCorrectlyWhenGivenMinAndMaxDistance",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#sliceShouldTraverseElementsWithoutSkippingOnes",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#readsDocumentsWithNestedPolymorphismCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findUsingAnnotatedQueryOnDBRef",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#executesGeoNearQueryForResultsCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPagedPeopleByPredicate",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPersonsByFirstnameLike",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsAllWithGivenIds",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldRemoveElementsMatchingDerivedQuery",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByLocationWithinPolygon",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deletesPersonByIdCorrectly",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleByzipCodePredicate",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#findsPeopleUsingNotPredicate",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#deleteByShouldReturnEmptyListInCaseNoDocumentHasBeenRemovedAndReturnTypeIsCollectionLike",
        "org.springframework.data.mongodb.repository.config.MongoNamespaceIntegrationTests#shouldLimitPagedQueryWhenPageRequestExceedsUpperBoundary"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 109
    },
    {
      "className": "org.springframework.data.mongodb.repository.PersonRepositoryTransactionalTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.mongodb.repository.PersonRepositoryTransactionalTests#org.springframework.data.mongodb.repository.PersonRepositoryTransactionalTests"
      ],
      "failures": [
        {
          "failureName": "com.mongodb.MongoTimeoutException",
          "failureDetail": "Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type\u003dUNKNOWN, servers\u003d[{address\u003d127.0.0.1:27017, type\u003dUNKNOWN, state\u003dCONNECTING, exception\u003d{com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.ConnectException: Connection refused (Connection refused)}}]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}