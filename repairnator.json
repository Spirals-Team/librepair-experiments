{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 8,
  "repo": "json-iterator/java",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 2,
      "ComputeClasspath": 2,
      "ComputeTestDir": 0,
      "ResolveDependency": 15,
      "BuildProject": 12,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 1,
      "CloneRepository": 2,
      "NopolRepair": 7,
      "CheckoutPatchedBuild": 0,
      "TestProject": 7,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 4,
      "AstorRepair": 0,
      "CommitPatch": 3
    },
    "FailureNames": [
      "com.jsoniter.spi.JsonException"
    ],
    "NbFailingTests": 8,
    "BugCommitUrl": "http://github.com/json-iterator/java/commit/2da6e22a5c3c8ca51c655cb02ab80713dddb7586",
    "ReproductionDate": "Mar 5, 2018 6:57:08 AM",
    "BuggyBuildId": 349147900,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/json-iterator/java/builds/349147900",
    "BuggyBuildDate": "Mar 5, 2018 6:56:50 AM",
    "BugCommit": "2da6e22a5c3c8ca51c655cb02ab80713dddb7586",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 1239,
    "NbLibraries": 11,
    "NbFileApp": 238,
    "NbFileTests": 140,
    "NbCPU": 32,
    "FreeMemory": 1354065480,
    "TotalMemory": 1506279424,
    "AngelicValuesByTest": {
      "com/jsoniter/TestAnnotationJsonObject": 0,
      "com/jsoniter/TestAnnotationJsonWrapper": 0,
      "com/jsoniter/output/TestAnnotationJsonUnwrapper": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 653819904,
      "ComputeClasspath": 701598600,
      "ComputeTestDir": 647007680,
      "ResolveDependency": 629423256,
      "BuildProject": 621508408,
      "NPERepair": 705510712,
      "ComputeSourceDir": 701598600,
      "InitRepoToPush": 546569872,
      "CloneRepository": 707896872,
      "NopolRepair": 1412061344,
      "CheckoutPatchedBuild": 1354065480,
      "TestProject": 614472192,
      "GatherTestInformation": 600847720,
      "PushIncriminatedBuild": 705510712,
      "AstorRepair": 671680832,
      "CommitPatch": 1354065480
    }
  },
  "failingModule": "/root/workspace/json-iterator/java/349147900",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 0,
  "error-types": [
    "com.jsoniter.spi.JsonException"
  ],
  "totalNumberRunningTests": 1239,
  "failing-test-cases": [
    {
      "className": "com.jsoniter.TestAnnotationJsonWrapper",
      "failingMethods": [],
      "erroringMethods": [
        "com.jsoniter.TestAnnotationJsonWrapper#test_key_value"
      ],
      "failures": [
        {
          "failureName": "com.jsoniter.spi.JsonException",
          "failureDetail": "failed to generate decoder for: com.jsoniter.spi.ClassInfo@4d41cee with [], exception: javassist.CannotCompileException: [source error] no such class: Slice\npublic static java.lang.Object decode_(com.jsoniter.JsonIterator iter) throws java.io.IOException { java.lang.Object existingObj \u003d com.jsoniter.CodegenAccess.resetExistingObject(iter);\nif (iter.readNull()) { return null; }\ncom.jsoniter.TestAnnotationJsonWrapper.TestObject2 obj \u003d (existingObj \u003d\u003d null ? new com.jsoniter.TestAnnotationJsonWrapper.TestObject2() : (com.jsoniter.TestAnnotationJsonWrapper.TestObject2)existingObj);\nif (!com.jsoniter.CodegenAccess.readObjectStart(iter)) {\nreturn obj;\n}\njava.util.Map extra \u003d null;\ncom.jsoniter.slice.Slice field \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nboolean once \u003d true;\nwhile (once) {\nonce \u003d false;\nif (extra \u003d\u003d null) { extra \u003d new java.util.HashMap(); }\nextra.put(((Slice) field).string(), iter.readAny());\n}\nwhile (com.jsoniter.CodegenAccess.nextToken(iter) \u003d\u003d \u0027,\u0027) {\nfield \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nif (extra \u003d\u003d null) { extra \u003d new java.util.HashMap(); }\nextra.put(((Slice) field).string(), iter.readAny());\n}\njava.util.Iterator extraIter \u003d extra.entrySet().iterator();\nwhile(extraIter.hasNext()) {\njava.util.Map.Entry entry \u003d (java.util.Map.Entry)extraIter.next();\nString key \u003d ((Slice) entry.getKey()).string();\ncom.jsoniter.any.Any value \u003d (com.jsoniter.any.Any)entry.getValue();\nobj.setProperties(key, value.object());\n}\nreturn obj;\n}",
          "isError": true
        },
        {
          "failureName": "com.jsoniter.spi.JsonException",
          "failureDetail": "failed to generate decoder for: com.jsoniter.spi.ClassInfo@4d41cee with [], exception: javassist.CannotCompileException: [source error] no such class: Slice\npublic static java.lang.Object decode_(com.jsoniter.JsonIterator iter) throws java.io.IOException { java.lang.Object existingObj \u003d com.jsoniter.CodegenAccess.resetExistingObject(iter);\nif (iter.readNull()) { return null; }\ncom.jsoniter.TestAnnotationJsonWrapper.TestObject2 obj \u003d (existingObj \u003d\u003d null ? new com.jsoniter.TestAnnotationJsonWrapper.TestObject2() : (com.jsoniter.TestAnnotationJsonWrapper.TestObject2)existingObj);\nif (!com.jsoniter.CodegenAccess.readObjectStart(iter)) {\nreturn obj;\n}\njava.util.Map extra \u003d null;\ncom.jsoniter.slice.Slice field \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nboolean once \u003d true;\nwhile (once) {\nonce \u003d false;\nif (extra \u003d\u003d null) { extra \u003d new java.util.HashMap(); }\nextra.put(((Slice) field).string(), iter.readAny());\n}\nwhile (com.jsoniter.CodegenAccess.nextToken(iter) \u003d\u003d \u0027,\u0027) {\nfield \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nif (extra \u003d\u003d null) { extra \u003d new java.util.HashMap(); }\nextra.put(((Slice) field).string(), iter.readAny());\n}\njava.util.Iterator extraIter \u003d extra.entrySet().iterator();\nwhile(extraIter.hasNext()) {\njava.util.Map.Entry entry \u003d (java.util.Map.Entry)extraIter.next();\nString key \u003d ((Slice) entry.getKey()).string();\ncom.jsoniter.any.Any value \u003d (com.jsoniter.any.Any)entry.getValue();\nobj.setProperties(key, value.object());\n}\nreturn obj;\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "com.jsoniter.output.TestAnnotationJsonUnwrapper",
      "failingMethods": [],
      "erroringMethods": [
        "com.jsoniter.output.TestAnnotationJsonUnwrapper#test_unwrapper_with_map"
      ],
      "failures": [
        {
          "failureName": "com.jsoniter.spi.JsonException",
          "failureDetail": "failed to generate encoder for: class com.jsoniter.output.TestAnnotationJsonUnwrapper$TestObject2 with [], exception: javassist.CannotCompileException: [source error] no such class: Slice\npublic static void encode_(com.jsoniter.output.TestAnnotationJsonUnwrapper.TestObject2 obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {\njava.util.Map map \u003d (java.util.Map)obj.getProperties();\njava.util.Iterator iter \u003d map.entrySet().iterator();\nwhile(iter.hasNext()) {\njava.util.Map.Entry entry \u003d (java.util.Map.Entry)iter.next();\nstream.writeObjectField(((Slice) entry.getKey()).string());\nif (entry.getValue() \u003d\u003d null) { stream.writeNull(); } else {\nstream.writeVal((java.lang.Object)entry.getValue());\n}\n}\n}\n",
          "isError": true
        },
        {
          "failureName": "com.jsoniter.spi.JsonException",
          "failureDetail": "failed to generate encoder for: class com.jsoniter.output.TestAnnotationJsonUnwrapper$TestObject2 with [], exception: javassist.CannotCompileException: [source error] no such class: Slice\npublic static void encode_(com.jsoniter.output.TestAnnotationJsonUnwrapper.TestObject2 obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {\njava.util.Map map \u003d (java.util.Map)obj.getProperties();\njava.util.Iterator iter \u003d map.entrySet().iterator();\nwhile(iter.hasNext()) {\njava.util.Map.Entry entry \u003d (java.util.Map.Entry)iter.next();\nstream.writeObjectField(((Slice) entry.getKey()).string());\nif (entry.getValue() \u003d\u003d null) { stream.writeNull(); } else {\nstream.writeVal((java.lang.Object)entry.getValue());\n}\n}\n}\n",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "com.jsoniter.TestAnnotationJsonObject",
      "failingMethods": [],
      "erroringMethods": [
        "com.jsoniter.TestAnnotationJsonObject#test_no_unknown_properties",
        "com.jsoniter.TestAnnotationJsonObject#test_extra_properties"
      ],
      "failures": [
        {
          "failureName": "com.jsoniter.spi.JsonException",
          "failureDetail": "failed to generate decoder for: com.jsoniter.spi.ClassInfo@42b3b079 with [], exception: javassist.CannotCompileException: [source error] no such class: Slice\npublic static java.lang.Object decode_(com.jsoniter.JsonIterator iter) throws java.io.IOException { java.lang.Object existingObj \u003d com.jsoniter.CodegenAccess.resetExistingObject(iter);\nif (iter.readNull()) { return null; }\ncom.jsoniter.TestAnnotationJsonObject.TestObject9 obj \u003d (existingObj \u003d\u003d null ? new com.jsoniter.TestAnnotationJsonObject.TestObject9() : (com.jsoniter.TestAnnotationJsonObject.TestObject9)existingObj);\nif (!com.jsoniter.CodegenAccess.readObjectStart(iter)) {\nreturn obj;\n}\njava.util.Map extra \u003d null;\ncom.jsoniter.slice.Slice field \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nboolean once \u003d true;\nwhile (once) {\nonce \u003d false;\nif (extra \u003d\u003d null) { extra \u003d new java.util.HashMap(); }\nextra.put(((Slice) field).string(), iter.readAny());\n}\nwhile (com.jsoniter.CodegenAccess.nextToken(iter) \u003d\u003d \u0027,\u0027) {\nfield \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nif (extra \u003d\u003d null) { extra \u003d new java.util.HashMap(); }\nextra.put(((Slice) field).string(), iter.readAny());\n}\nobj.extraProperties \u003d extra;\nreturn obj;\n}",
          "isError": true
        },
        {
          "failureName": "com.jsoniter.spi.JsonException",
          "failureDetail": "failed to generate decoder for: com.jsoniter.spi.ClassInfo@7a3793c7 with [], exception: javassist.CannotCompileException: [source error] no such class: Slice\npublic static java.lang.Object decode_(com.jsoniter.JsonIterator iter) throws java.io.IOException { java.lang.Object existingObj \u003d com.jsoniter.CodegenAccess.resetExistingObject(iter);\nif (iter.readNull()) { return null; }\ncom.jsoniter.TestAnnotationJsonObject.TestObject9 obj \u003d (existingObj \u003d\u003d null ? new com.jsoniter.TestAnnotationJsonObject.TestObject9() : (com.jsoniter.TestAnnotationJsonObject.TestObject9)existingObj);\nif (!com.jsoniter.CodegenAccess.readObjectStart(iter)) {\nreturn obj;\n}\njava.util.Map extra \u003d null;\ncom.jsoniter.slice.Slice field \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nboolean once \u003d true;\nwhile (once) {\nonce \u003d false;\nif (extra \u003d\u003d null) { extra \u003d new java.util.HashMap(); }\nextra.put(((Slice) field).string(), iter.readAny());\n}\nwhile (com.jsoniter.CodegenAccess.nextToken(iter) \u003d\u003d \u0027,\u0027) {\nfield \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nif (extra \u003d\u003d null) { extra \u003d new java.util.HashMap(); }\nextra.put(((Slice) field).string(), iter.readAny());\n}\nobj.extraProperties \u003d extra;\nreturn obj;\n}",
          "isError": true
        },
        {
          "failureName": "com.jsoniter.spi.JsonException",
          "failureDetail": "failed to generate decoder for: com.jsoniter.spi.ClassInfo@1cd629b3 with [], exception: javassist.CannotCompileException: [source error] no such class: Slice\npublic static java.lang.Object decode_(com.jsoniter.JsonIterator iter) throws java.io.IOException { java.lang.Object existingObj \u003d com.jsoniter.CodegenAccess.resetExistingObject(iter);\nif (iter.readNull()) { return null; }\ncom.jsoniter.TestAnnotationJsonObject.TestObject14 obj \u003d (existingObj \u003d\u003d null ? new com.jsoniter.TestAnnotationJsonObject.TestObject14() : (com.jsoniter.TestAnnotationJsonObject.TestObject14)existingObj);\nif (!com.jsoniter.CodegenAccess.readObjectStart(iter)) {\nreturn obj;\n}\ncom.jsoniter.slice.Slice field \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nboolean once \u003d true;\nwhile (once) {\nonce \u003d false;\nswitch (field.size()) {\ncase 2: \nif (\nfield.at(0)\u003d\u003d105 \u0026\u0026 \nfield.at(1)\u003d\u003d100\n) {\nobj.id\u003d (int)iter.readInt();\ncontinue;\n}\nbreak;\n\n}\nthrow new com.jsoniter.spi.JsonException(\"extra property: \" + ((Slice) field).string());\n}\nwhile (com.jsoniter.CodegenAccess.nextToken(iter) \u003d\u003d \u0027,\u0027) {\nfield \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nswitch (field.size()) {\ncase 2: \nif (\nfield.at(0)\u003d\u003d105 \u0026\u0026 \nfield.at(1)\u003d\u003d100\n) {\nobj.id\u003d (int)iter.readInt();\ncontinue;\n}\nbreak;\n\n}\nthrow new com.jsoniter.spi.JsonException(\"extra property: \" + ((Slice) field).string());\n}\nreturn obj;\n}",
          "isError": true
        },
        {
          "failureName": "com.jsoniter.spi.JsonException",
          "failureDetail": "failed to generate decoder for: com.jsoniter.spi.ClassInfo@6692b6c6 with [], exception: javassist.CannotCompileException: [source error] no such class: Slice\npublic static java.lang.Object decode_(com.jsoniter.JsonIterator iter) throws java.io.IOException { java.lang.Object existingObj \u003d com.jsoniter.CodegenAccess.resetExistingObject(iter);\nif (iter.readNull()) { return null; }\ncom.jsoniter.TestAnnotationJsonObject.TestObject14 obj \u003d (existingObj \u003d\u003d null ? new com.jsoniter.TestAnnotationJsonObject.TestObject14() : (com.jsoniter.TestAnnotationJsonObject.TestObject14)existingObj);\nif (!com.jsoniter.CodegenAccess.readObjectStart(iter)) {\nreturn obj;\n}\ncom.jsoniter.slice.Slice field \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nboolean once \u003d true;\nwhile (once) {\nonce \u003d false;\nswitch (field.size()) {\ncase 2: \nif (\nfield.at(0)\u003d\u003d105 \u0026\u0026 \nfield.at(1)\u003d\u003d100\n) {\nobj.id\u003d (int)iter.readInt();\ncontinue;\n}\nbreak;\n\n}\nthrow new com.jsoniter.spi.JsonException(\"extra property: \" + ((Slice) field).string());\n}\nwhile (com.jsoniter.CodegenAccess.nextToken(iter) \u003d\u003d \u0027,\u0027) {\nfield \u003d com.jsoniter.CodegenAccess.readObjectFieldAsSlice(iter);\nswitch (field.size()) {\ncase 2: \nif (\nfield.at(0)\u003d\u003d105 \u0026\u0026 \nfield.at(1)\u003d\u003d100\n) {\nobj.id\u003d (int)iter.readInt();\ncontinue;\n}\nbreak;\n\n}\nthrow new com.jsoniter.spi.JsonException(\"extra property: \" + ((Slice) field).string());\n}\nreturn obj;\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    }
  ]
}