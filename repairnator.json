{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "failingModule": "/root/workspace/prestodb/presto/303312237/presto-tests",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 84,
  "error-types": [
    "com.facebook.presto.client.FailureInfo$FailureException",
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 6378,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.tests.TestDistributedSpilledQueries",
      "failingMethods": [
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testAggregationPushedBelowOuterJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinPredicatePushdownWithSelfEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testScalarSubquery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinOnMultipleFields",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithAlias",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByKeyPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testExchangeWithProjectionPushDown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultipleInSubqueryClauses",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLateralJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinWithEmptyInnerTable",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinUsing",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinAsInnerPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultipleScalarSubqueryClauses",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinUsingMultipleFields",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOuterJoinWithCommonExpression",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testQualifiedWildcardFromJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWildcardFromJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithComplexExpressions3",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithComplexExpressions2",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSingleDistinctOptimizer",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqalityJoinWithScalarRequiringSessionParameter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithComplexExpressions",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinDoubleClauseWithLeftOverlap",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinWithNullValues",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinProjectionPushDown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSelfJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testProbeFilteredLeftJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testColocatedJoinWithLocalUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinEqualityInference",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testExecuteUsingWithSubqueryInJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithNonDeterministicLessThan",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithConstantPredicatePushDown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithConstantExpression",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleLeftJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testDereferenceInSubquery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithGreaterThanInJoinClause",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithNonJoinExpression",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPlainLeftJoinPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithScalarSubqueryToBeExecutedAsPostJoinFilter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedInPredicateSubqueries",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithNullValues",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultipleLessThanPredicatesDifferentOrders",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinDoubleClauseWithLeftOverlap",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinAggregations",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinCoercionOnEqualityComparison",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithDuplicateRelations",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithReversedComparison",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinAsInnerPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testFullJoinNormalizedToLeft",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithLessThanOnDatesInJoinClause",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCoercions",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinCriteriaCoercion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingSetSubsetAndPartitioning",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinUnaliasedSubqueries",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testBuildFilteredLeftJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedExistsSubqueriesWithEqualityPredicatesInWhere",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinConstantPropagation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinDoubleClauseWithRightOverlap",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftFilteredJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinPredicateMoveAround",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowFieldAccessorInJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithLessThanInJoinClause",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithRangePredicatesinJoinClause",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupByAsJoinProbe",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinPredicateMoveAround",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithExpressionsThatMayReturnNull",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinNormalizedToInner",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinPredicateMoveAround",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithJoinOnNonTranslateableSymbols",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithScalarSubqueryInOnClause",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPredicatePushdownJoinEqualityGroups",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultiFieldGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqualityLeftJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregationAndJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinDoubleClauseWithRightOverlap",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqualityJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightFilteredJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testCorrelatedScalarSubqueriesWithScalarAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testLeftJoinNormalizedToInner"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM nation n1 WHERE (n1.nationkey \u003e ( SELECT avg(nationkey) FROM nation n2 WHERE n1.regionkey\u003dn2.regionkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM lineitem LEFT JOIN (SELECT * FROM orders WHERE orderkey % 2 \u003d 0) a ON lineitem.orderkey \u003d a.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (  SELECT greatest (t.x, t.z) cc FROM (    SELECT *    FROM (VALUES (VARCHAR \u0027a\u0027, VARCHAR \u0027c\u0027)) t(x, z)  ) t  JOIN (    SELECT *    FROM (VALUES (VARCHAR \u0027a\u0027, VARCHAR \u0027c\u0027)) u(x, z)    WHERE z\u003d\u0027c\u0027  ) u  ON t.z \u003d u.z)WHERE cc \u003d \u0027c\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: select count(*) from ((select * from orders) union all (select * from orders)) join orders using (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM customer WHERE NOT EXISTS(SELECT * FROM orders WHERE orders.custkey\u003dcustomer.custkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, clerk IN (SELECT clerk FROM orders s WHERE s.custkey \u003d o.custkey AND s.orderkey \u003c o.orderkey) FROM orders o",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT (SELECT avg(regionkey)  FROM nation n2 WHERE n2.nationkey \u003d n1.nationkey),(SELECT avg(regionkey) FROM nation n3 WHERE n3.nationkey \u003d n1.nationkey)FROM nation n1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT t2.*, max(t1.b) as max_b FROM (VALUES (1, \u0027a\u0027),  (2, \u0027b\u0027), (1, \u0027c\u0027), (3, \u0027d\u0027)) t1(a, b) INNER JOIN (VALUES 1, 2, 3, 4) t2(a) ON t1.a \u003d t2.a GROUP BY t2.a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(DISTINCT CAST(b.quantity AS BIGINT)), a.orderstatus FROM orders a JOIN lineitem b ON a.orderkey \u003d b.orderkey GROUP BY a.orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM \n  (SELECT orderkey + 1 orderkey FROM (SELECT * FROM orders ORDER BY orderkey LIMIT 100)) o \nJOIN \n  (SELECT orderkey + 1 orderkey FROM (SELECT * FROM orders ORDER BY orderkey LIMIT 100)) o1 \nON (o.orderkey \u003d o1.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: EXECUTE my_query USING 1, 3, 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem FULL JOIN orders ON lineitem.orderkey \u003d orders.orderkey WHERE lineitem.orderkey IS NOT NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT   b.orderkey,   b.custkey,   a.custkey FROM (   SELECT custkey  FROM orders   GROUP BY custkey) a JOIN orders b   ON a.custkey \u003d b.custkey ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT custkey1, orderstatus1, SUM(totalprice1) totalprice, MAX(custkey2) maxcustkey\n  FROM (\n    SELECT *\n    FROM (\n      SELECT custkey custkey1, orderstatus orderstatus1, CAST(totalprice AS BIGINT) totalprice1, orderkey orderkey1\n      FROM orders\n    ) orders1 \n    JOIN (\n      SELECT custkey custkey2, orderstatus orderstatus2, CAST(totalprice AS BIGINT) totalprice2, orderkey orderkey2\n      FROM orders\n    ) orders2 ON orders1.orderkey1 \u003d orders2.orderkey2\n  ) \n  GROUP BY custkey1, orderstatus1\n)\nWHERE custkey1 \u003d maxcustkey\nAND maxcustkey % 2 \u003d 0 \nAND orderstatus1 \u003d \u0027F\u0027\nAND totalprice \u003e 10000\nORDER BY custkey1, orderstatus1, totalprice, maxcustkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT_IF(x IS NULL) FROM (SELECT x, y, COUNT(z) FROM (SELECT CAST(lineitem.orderkey AS BIGINT) x, lineitem.linestatus y, SUM(lineitem.quantity) z FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey GROUP BY 1, 2) GROUP BY GROUPING SETS ((x, y), ()))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x + y FROM (   SELECT orderdate, COUNT(*) x FROM orders GROUP BY orderdate) a JOIN (   SELECT orderdate, COUNT(*) y FROM orders GROUP BY orderdate) b ON a.orderdate \u003d b.orderdate",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT o.clerk, avg(o.shippriority), COUNT(l.linenumber) FROM orders o LEFT OUTER JOIN lineitem l ON o.orderkey\u003dl.orderkey AND o.shippriority\u003d1 GROUP BY o.clerk",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x, y, COUNT(*)\nFROM (SELECT orderkey, 0 AS x FROM orders) a \nJOIN (SELECT orderkey, 1 AS y FROM orders) b \nON a.orderkey \u003d b.orderkey\nGROUP BY 1, 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (VALUES (1.0, 2.0)) x (a, b) JOIN (VALUES (1, 3)) y (a, b) USING(a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d orders.custkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d lineitem.partkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.shipdate \u003d orders.orderdate",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM lineitem WHERE orderkey % 16 \u003d 0 AND partkey % 2 \u003d 0) lineitem\nJOIN (SELECT * FROM orders WHERE orderkey % 16 \u003d 0 AND custkey % 2 \u003d 0) orders\nON lineitem.orderkey % 8 \u003d orders.orderkey % 8 AND lineitem.linenumber % 2 \u003d 0\nWHERE orders.custkey % 8 \u003c 7 AND orders.custkey % 8 \u003d lineitem.orderkey % 8 AND lineitem.suppkey % 7 \u003e orders.custkey % 7",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM\n  (SELECT orderkey, abs(orderkey) a FROM orders) t\nJOIN\n  (SELECT orderkey, abs(orderkey) a FROM orders) u\nON\n  t.orderkey \u003d u.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT * FROM lineitem) join (SELECT * FROM orders) using (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem join orders using (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN (SELECT orderkey, orderdate shipdate FROM ORDERS) T USING (orderkey, shipdate)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey) x",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUM(custkey) FROM lineitem JOIN orders ON lineitem.orderkey \u003d CAST(orders.orderkey AS BIGINT)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUM(custkey) FROM lineitem JOIN orders ON lineitem.orderkey \u003d CASE WHEN orders.custkey \u003d 1 and orders.orderstatus \u003d \u0027F\u0027 THEN orders.orderkey ELSE NULL END",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUM(custkey) FROM lineitem JOIN orders ON lineitem.orderkey + 1 \u003d orders.orderkey + 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND 123 \u003d 123",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT\n  a.orderstatus\n  , a.clerk\nFROM (\n  SELECT DISTINCT orderstatus, clerk FROM orders\n) a\nINNER JOIN (\n  SELECT DISTINCT orderstatus, clerk FROM orders\n) b\nON\n  a.orderstatus \u003d b.orderstatus\n  and a.clerk \u003d b.clerk\nwhere a.orderstatus \u003d \u0027F\u0027\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM orders JOIN orders USING (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n    SELECT a, nullif(a, 1)\n    FROM (VALUES 1) w(a)\n) t(a,b)\nJOIN (VALUES 1) u(x) ON t.a \u003d u.x",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT l.suppkey, n.nationkey, l.partkey, n.regionkey FROM nation n JOIN lineitem l ON l.suppkey \u003d n.nationkey AND l.partkey \u003e n.regionkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT n.nationkey, r.regionkey FROM region r JOIN nation n ON n.regionkey \u003d r.regionkey AND n.name \u003c r.name",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT o.orderkey, o.orderdate, l.shipdate FROM orders o JOIN lineitem l ON l.orderkey \u003d o.orderkey AND l.shipdate \u003c o.orderdate + INTERVAL \u002710\u0027 DAY",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus FROM lineitem JOIN (SELECT DISTINCT orderkey, orderstatus FROM ORDERS) T on lineitem.orderkey \u003d T.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (VALUES 1,2,3,4) t(x)  JOIN (VALUES 1,2,3,5) t2(y) ON (x in (VALUES 1,2)) \u003d (y in (VALUES 1,2)) AND (x in (VALUES 1)) !\u003d (y in (VALUES 3))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM lineitem l JOIN nation n ON l.suppkey % 5 \u003d n.nationkey % 5 AND l.partkey % 3 \u003c n.regionkey AND l.partkey % 3 + 1 \u003c n.regionkey AND l.partkey % 3 + 2 \u003c n.regionkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (VALUES 1,2,3,4) t(x)  JOIN (VALUES 1,2,3,5) t2(y) ON (x \u003d (VALUES 1)) AND (y \u003d (VALUES 2)) AND (x in (VALUES 2)) \u003d (y in (VALUES 1))",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "Wrong page channel count, expected 0 but got 3",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.custkey \u003d 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT CASE WHEN orderkey % 3 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n  FROM lineitem\n  WHERE partkey % 512 \u003d 0\n) AS lineitem \nJOIN (\n  SELECT CASE WHEN orderkey % 2 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n  FROM orders\n  WHERE custkey % 512 \u003d 0\n) AS orders\nON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT * FROM lineitem WHERE orderkey % 16 \u003d 0 AND partkey % 2 \u003d 0) lineitem JOIN (SELECT * FROM orders WHERE orderkey % 16 \u003d 0 AND custkey % 2 \u003d 0) orders ON lineitem.orderkey % 8 \u003d orders.orderkey % 8 AND lineitem.linenumber % 2 \u003d 0 AND orders.custkey % 8 \u003c 7 AND lineitem.suppkey % 10 \u003c orders.custkey % 7 AND lineitem.suppkey % 7 \u003e orders.custkey % 7",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON orders.orderkey \u003d lineitem.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count() FROM nation a INNER JOIN nation b ON a.name \u003d (SELECT max(name) FROM nation) INNER JOIN nation c ON c.name \u003d split_part(b.name,\u0027\u003c\u0027,2)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (VALUES 1,2,3,4) t(x)  JOIN (VALUES 1,2,3,5) t2(y) ON (x+y \u003d (SELECT 4))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT nationkey, a FROM nation, LATERAL (SELECT region.name || \u0027_\u0027 FROM region WHERE region.regionkey \u003d nation.regionkey) t(a) ORDER BY nationkey LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, linestatus, tax, totalprice, orderstatus FROM (SELECT * FROM lineitem WHERE orderkey % 2 \u003d 0) a JOIN orders ON a.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM lineitem \nLEFT JOIN (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nON lineitem.orderkey \u003d orders.orderkey \nWHERE orders.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.custkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d orders.custkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d lineitem.partkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM lineitem WHERE orderkey % 4 \u003d 0 AND suppkey % 2 \u003d partkey % 2 AND linenumber % 3 \u003d orderkey % 3) lineitem\nLEFT JOIN (SELECT * FROM orders WHERE orderkey % 4 \u003d 0) orders\nON lineitem.linenumber % 3 \u003d orders.orderkey % 4 AND lineitem.orderkey % 3 \u003d orders.custkey % 3\nWHERE lineitem.suppkey % 2 \u003d lineitem.linenumber % 3",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey WHERE orders.orderkey IS NOT NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM lineitem WHERE orderkey % 16 \u003d 0 AND partkey % 2 \u003d 0) lineitem\nLEFT JOIN (SELECT * FROM orders WHERE orderkey % 16 \u003d 0 AND custkey % 2 \u003d 0) orders\nON lineitem.orderkey % 8 \u003d orders.orderkey % 8\nWHERE (orders.custkey % 8 \u003c 7 OR orders.custkey % 8 IS NULL) AND orders.custkey % 8 \u003d lineitem.orderkey % 8",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM lineitem a LEFT JOIN (SELECT * FROM orders WHERE orderkey \u003d rand()) b ON a.orderkey \u003d b.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT CASE WHEN orderkey % 3 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n  FROM lineitem\n  WHERE partkey % 512 \u003d 0\n) AS lineitem \nLEFT JOIN (\n  SELECT CASE WHEN orderkey % 2 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n  FROM orders\n  WHERE custkey % 512 \u003d 0\n) AS orders\nON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (VALUES (1,1), (1,2)) t1(a,b) LEFT OUTER JOIN (VALUES (1,1), (1,2)) t2(c,d) ON a\u003dc AND from_unixtime(b) \u003e current_timestamp",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.quantity + length(orders.comment) \u003e 7",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT OUTER JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.custkey \u003e 1000 WHERE orders.orderkey IS NULL",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "Wrong page channel count, expected 1 but got 3",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM lineitem \nLEFT JOIN (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nON lineitem.orderkey \u003d orders.orderkey \nWHERE lineitem.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.orderkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT custkey custkey1, custkey%4 custkey1a, custkey%8 custkey1b, custkey%16 custkey1c\n  FROM orders\n) orders1 \nJOIN (\n  SELECT custkey custkey2, custkey%4 custkey2a, custkey%8 custkey2b\n  FROM orders\n) orders2 ON orders1.custkey1 \u003d orders2.custkey2\nWHERE custkey2a \u003d custkey2b\n  AND custkey1 \u003d custkey1a\n  AND custkey2 \u003d custkey2a\n  AND custkey1a \u003d custkey1c\n  AND custkey1b \u003d custkey1c\n  AND custkey1b % 2 \u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT * FROM lineitem WHERE orderkey % 2 \u003d 0) a LEFT JOIN orders ON a.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.*, b.* FROM (select orderkey, partkey from lineitem) a join (select orderkey, custkey from orders) b using (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, linestatus, tax, totalprice, orderstatus FROM lineitem JOIN (SELECT *  FROM orders WHERE orderkey % 2 \u003d 0) a ON lineitem.orderkey \u003d a.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders\nRIGHT JOIN lineitem\nON lineitem.orderkey \u003d orders.orderkey \nWHERE orders.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.custkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey WHERE lineitem.orderkey IS NOT NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM orders WHERE orderkey % 16 \u003d 0 AND custkey % 2 \u003d 0) orders\nRIGHT JOIN (SELECT * FROM lineitem WHERE orderkey % 16 \u003d 0 AND partkey % 2 \u003d 0) lineitem\nON lineitem.orderkey % 8 \u003d orders.orderkey % 8\nWHERE (orders.custkey % 8 \u003c 7 OR orders.custkey % 8 IS NULL) AND orders.custkey % 8 \u003d lineitem.orderkey % 8",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nRIGHT JOIN lineitem\nON lineitem.orderkey \u003d orders.orderkey \nWHERE orders.orderkey \u003d orders.orderkey\n  AND lineitem.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.orderkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT t.a.col1, custkey, orderkey FROM (VALUES ROW(CAST(ROW(1, 11) AS ROW(col0 integer, col1 integer))), ROW(CAST(ROW(2, 22) AS ROW(col0 integer, col1 integer))), ROW(CAST(ROW(3, 33) AS ROW(col0 integer, col1 integer)))) t(a) INNER JOIN orders ON t.a.col0 \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "Wrong page channel count, expected 2 but got 3",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM lineitem WHERE orderkey \u003d \n(SELECT max(orderkey) FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM orders a JOIN orders b on a.orderkey \u003d b.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *, o2.custkey\n  IN (\n    SELECT orderkey\n    FROM lineitem\n    WHERE orderkey % 5 \u003d 0)\nFROM (SELECT * FROM orders WHERE custkey % 256 \u003d 0) o1\nJOIN (SELECT * FROM orders WHERE custkey % 256 \u003d 0) o2\n  ON (o1.orderkey IN (SELECT orderkey FROM lineitem WHERE orderkey % 4 \u003d 0)) \u003d (o2.orderkey IN (SELECT orderkey FROM lineitem WHERE orderkey % 4 \u003d 0))\nWHERE o1.orderkey\n  IN (\n    SELECT orderkey\n    FROM lineitem\n    WHERE orderkey % 4 \u003d 0)\nORDER BY o1.orderkey\n  IN (\n    SELECT orderkey\n    FROM lineitem\n    WHERE orderkey % 7 \u003d 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, COUNT(DISTINCT orderstatus) FROM (   SELECT orders.custkey AS custkey, orders.orderstatus AS orderstatus    FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d lineitem.partkey    GROUP BY orders.custkey, orders.orderstatus) GROUP BY custkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM ( SELECT orderkey, count(*) FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a GROUP BY orderkey) t JOIN orders o ON (o.orderkey \u003d t.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a JOIN orders o ON (a.orderkey \u003d o.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (SELECT orderdate ds, orderkey\n      FROM orders\n      UNION ALL\n      SELECT shipdate ds, orderkey\n      FROM lineitem) a\nJOIN orders o\nON (substr(cast(a.ds AS VARCHAR), 6, 2) \u003d substr(cast(o.orderdate AS VARCHAR), 6, 2) AND a.orderkey \u003d o.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (select orderkey, partkey from lineitem) a join (select orderkey, custkey from orders) b using (orderkey)",
          "isError": false
        }
      ],
      "nbFailures": 84,
      "nbErrors": 0
    }
  ]
}