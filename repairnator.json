{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 7,
      "ComputeClasspath": 3,
      "ComputeTestDir": 0,
      "ResolveDependency": 146,
      "BuildProject": 598,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 19,
      "CloneRepository": 27,
      "NopolRepair": 1547,
      "CheckoutPatchedBuild": 0,
      "TestProject": 361,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 9,
      "AstorRepair": 4,
      "CommitPatch": 21
    },
    "FailureNames": [
      "java.lang.AssertionError",
      "java.lang.RuntimeException",
      "com.facebook.presto.spi.PrestoException",
      "java.lang.IllegalArgumentException",
      "com.facebook.presto.sql.analyzer.SemanticException"
    ],
    "NbFailingTests": 232,
    "BugCommitUrl": "http://github.com/prestodb/presto/commit/c8c41b27446e0098dd509e7d3b90a66fead42fcb",
    "ReproductionDate": "Mar 5, 2018 10:28:57 AM",
    "BuggyBuildId": 349189873,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/prestodb/presto/builds/349189873",
    "BuggyBuildDate": "Mar 5, 2018 10:28:46 AM",
    "BugCommit": "c8c41b27446e0098dd509e7d3b90a66fead42fcb",
    "PatchChangedFiles": 2,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 4197,
    "NbLibraries": 152,
    "NbFileApp": 0,
    "NbFileTests": 0,
    "NbCPU": 32,
    "FreeMemory": 4050054144,
    "TotalMemory": 6493831168,
    "AngelicValuesByTest": {
      "com/facebook/presto/operator/scalar/TestLambdaExpression": 0,
      "com/facebook/presto/operator/window/TestMultipleWindowSpecifications": 0,
      "com/facebook/presto/sql/planner/TestInterpretedPageProjectionFunction": 0,
      "com/facebook/presto/type/TestTinyintOperators": 0,
      "com/facebook/presto/operator/scalar/TestArrayExceptFunction": 0,
      "com/facebook/presto/type/TestLegacyMapSubscript": 0,
      "com/facebook/presto/operator/scalar/TestZipWithFunction": 0,
      "com/facebook/presto/sql/query/TestGrouping": 0,
      "com/facebook/presto/sql/planner/optimizations/TestEliminateCrossJoins": 0,
      "com/facebook/presto/type/TestSmallintOperators": 0,
      "com/facebook/presto/sql/query/TestLegacyJoinUsing": 0,
      "com/facebook/presto/operator/scalar/TestTryFunction": 0,
      "com/facebook/presto/operator/scalar/TestZipFunction": 0,
      "com/facebook/presto/type/TestJsonOperators": 0,
      "com/facebook/presto/operator/scalar/TestMapTransformKeyFunction": 0,
      "com/facebook/presto/type/TestArrayOperators": 0,
      "com/facebook/presto/type/TestRowOperators": 0,
      "com/facebook/presto/operator/scalar/TestMathFunctions": 0,
      "com/facebook/presto/operator/scalar/TestMapZipWithFunction": 0,
      "com/facebook/presto/operator/window/TestCumulativeDistributionFunction": 0,
      "com/facebook/presto/sql/analyzer/TestAnalyzer": 0,
      "com/facebook/presto/sql/gen/TestExpressionCompiler": 0,
      "com/facebook/presto/operator/window/TestNTileFunction": 0,
      "com/facebook/presto/operator/window/TestDenseRankFunction": 0,
      "com/facebook/presto/type/TestDecimalParametricType": 0,
      "com/facebook/presto/sql/query/TestJoinUsing": 0,
      "com/facebook/presto/type/TestIntegerOperators": 0,
      "com/facebook/presto/operator/window/TestFirstValueFunction": 0,
      "com/facebook/presto/operator/scalar/TestArrayFunctions": 0,
      "com/facebook/presto/operator/scalar/TestArrayReduceFunction": 0,
      "com/facebook/presto/operator/scalar/TestMapFilterFunction": 0,
      "com/facebook/presto/operator/window/TestNthValueFunction": 0,
      "com/facebook/presto/sql/gen/TestVarArgsToArrayAdapterGenerator": 0,
      "com/facebook/presto/operator/scalar/TestJsonFunctions": 0,
      "com/facebook/presto/operator/scalar/TestArrayFilterFunction": 0,
      "com/facebook/presto/sql/planner/TestPredicatePushdown": 0,
      "com/facebook/presto/operator/window/TestLeadFunction": 0,
      "com/facebook/presto/operator/scalar/TestTypeOfFunction": 0,
      "com/facebook/presto/type/TestDecimalOperators": 0,
      "com/facebook/presto/operator/window/TestMapAggFunction": 0,
      "com/facebook/presto/operator/window/TestRowNumberFunction": 0,
      "com/facebook/presto/sql/TestExpressionInterpreter": 0,
      "com/facebook/presto/sql/planner/TestLogicalPlanner": 0,
      "com/facebook/presto/operator/window/TestLastValueFunction": 0,
      "com/facebook/presto/type/TestDecimalCasts": 0,
      "com/facebook/presto/operator/window/TestPercentRankFunction": 0,
      "com/facebook/presto/operator/window/TestRankFunction": 0,
      "com/facebook/presto/type/TestRealOperators": 0,
      "com/facebook/presto/operator/scalar/TestBitwiseFunctions": 0,
      "com/facebook/presto/operator/scalar/TestIsNullAnnotation": 0,
      "com/facebook/presto/type/TestMapOperators": 0,
      "com/facebook/presto/operator/window/TestAggregateWindowFunction": 0,
      "com/facebook/presto/operator/scalar/TestVarbinaryFunctions": 0,
      "com/facebook/presto/operator/scalar/TestMapTransformValueFunction": 0,
      "com/facebook/presto/operator/scalar/TestStringFunctions": 0,
      "com/facebook/presto/operator/scalar/TestConditions": 0,
      "com/facebook/presto/operator/scalar/TestArrayTransformFunction": 0,
      "com/facebook/presto/operator/window/TestApproxPercentileWindow": 0,
      "com/facebook/presto/operator/window/TestLagFunction": 0,
      "com/facebook/presto/sql/planner/TestDomainTranslator": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 577016576,
      "ComputeClasspath": 275559952,
      "ComputeTestDir": 548616808,
      "ResolveDependency": 474665248,
      "BuildProject": 387701056,
      "NPERepair": 280955744,
      "ComputeSourceDir": 275559952,
      "InitRepoToPush": 405863504,
      "CloneRepository": 433548856,
      "NopolRepair": 4401382840,
      "CheckoutPatchedBuild": 4050054144,
      "TestProject": 349216448,
      "GatherTestInformation": 301796128,
      "PushIncriminatedBuild": 280955744,
      "AstorRepair": 1490257584,
      "CommitPatch": 4050054144
    }
  },
  "failingModule": "/root/workspace/prestodb/presto/349189873/presto-main",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 232,
  "error-types": [
    "java.lang.AssertionError",
    "java.lang.RuntimeException",
    "com.facebook.presto.spi.PrestoException",
    "java.lang.IllegalArgumentException",
    "com.facebook.presto.sql.analyzer.SemanticException"
  ],
  "totalNumberRunningTests": 4197,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.operator.scalar.TestBitwiseFunctions",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestBitwiseFunctions#testBitCount",
        "com.facebook.presto.operator.scalar.TestBitwiseFunctions#testBitwiseNot",
        "com.facebook.presto.operator.scalar.TestBitwiseFunctions#testBitwiseAnd",
        "com.facebook.presto.operator.scalar.TestBitwiseFunctions#testBitwiseXor",
        "com.facebook.presto.operator.scalar.TestBitwiseFunctions#testBitwiseOr"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling bitwise_and($operator$CAST(0), $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling bitwise_not($operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling bitwise_or($operator$CAST(0), $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling bitwise_xor($operator$CAST(0), $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling bit_count($operator$CAST($operator$NEGATION(8)), $operator$CAST(64)): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestNthValueFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestNthValueFunction#testNthValueUnbounded",
        "com.facebook.presto.operator.window.TestNthValueFunction#testNthValueBounded"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 5]\n      [5, F, 5]\n      [6, F, 5]\n      [33, F, 5]\n      [1, O, 2]\n      [2, O, 2]\n      [4, O, 2]\n      [7, O, 2]\n      [32, O, 2]\n      [34, O, 2]\nExpected:\n      [3, F, 5]\n      [5, F, 5]\n      [6, F, 5]\n      [33, F, 5]\n      [1, O, 2]\n      [2, O, 2]\n      [4, O, 2]\n      [7, O, 2]\n      [32, O, 2]\n      [34, O, 2]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestZipFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestZipFunction#testDifferentLength",
        "com.facebook.presto.operator.scalar.TestZipFunction#testSameLength",
        "com.facebook.presto.operator.scalar.TestZipFunction#testWithNull",
        "com.facebook.presto.operator.scalar.TestZipFunction#testAllArities"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(row(field0 integer,field1 integer))] but found [array(row(field0 tinyint,field1 tinyint))]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(row(field0 integer,field1 varchar(1)))] but found [array(row(field0 tinyint,field1 varchar(1)))]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(row(field0 integer,field1 varchar(1)))] but found [array(row(field0 tinyint,field1 varchar(1)))]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(row(field0 unknown,field1 unknown,field2 integer))] but found [array(row(field0 unknown,field1 unknown,field2 tinyint))]",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestIsNullAnnotation",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestIsNullAnnotation#testIsNull"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling test_is_null_simple($operator$CAST($operator$NEGATION(100))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.query.TestGrouping",
      "failingMethods": [
        "com.facebook.presto.sql.query.TestGrouping#testFilter",
        "com.facebook.presto.sql.query.TestGrouping#testImplicitCoercions"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a, b, grouping(a, b) FROM (VALUES (\u0027x0\u0027, \u0027y0\u0027), (\u0027x1\u0027, \u0027y1\u0027) ) AS t (a, b) GROUP BY CUBE (a, b)HAVING grouping(a, b) \u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT GROUPING(k), SUM(v) + 1.0 FROM (VALUES (1, 1)) AS t(k,v) GROUP BY k",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestTypeOfFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestTypeOfFunction#testSimpleType"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected only one result unique result, but got [tinyint, integer] expected [true] but found [false]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestVarbinaryFunctions",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestVarbinaryFunctions#testVarbinarySubstring"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling substr($operator$CAST(Slice{base\u003d[B@1435507, address\u003d16, length\u003d13}), $operator$CAST($operator$NEGATION(5))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestMapAggFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestMapAggFunction#testMapAgg"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [6, F, {6\u003dF}]\n      [33, F, {33\u003dF}]\n      [7, O, {7\u003dO}]\n      [2, O, {2\u003dO}]\n      [1, O, {1\u003dO}]\n      [3, F, {3\u003dF}]\n      [32, O, {32\u003dO}]\n      [5, F, {5\u003dF}]\n      [4, O, {4\u003dO}]\n      [34, O, {34\u003dO}]\nExpected:\n      [1, O, {1\u003dO}]\n      [2, O, {2\u003dO}]\n      [3, F, {3\u003dF}]\n      [4, O, {4\u003dO}]\n      [5, F, {5\u003dF}]\n      [6, F, {6\u003dF}]\n      [7, O, {7\u003dO}]\n      [32, O, {32\u003dO}]\n      [33, F, {33\u003dF}]\n      [34, O, {34\u003dO}]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestApproxPercentileWindow",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestApproxPercentileWindow#testLongArrayApproxPercentile",
        "com.facebook.presto.operator.window.TestApproxPercentileWindow#testDoubleArrayApproxPercentile",
        "com.facebook.presto.operator.window.TestApproxPercentileWindow#testDoubleApproxPercentile"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [1, O, 42.0]\n      [2, O, 42.0]\n      [3, F, 42.0]\n      [4, O, 42.0]\n      [5, F, 42.0]\n      [6, F, 42.0]\n      [7, O, 42.0]\n      [32, O, 42.0]\n      [33, F, 42.0]\n      [34, O, 42.0]\nExpected:\n      [1, O, 42.0]\n      [2, O, 42.0]\n      [3, F, 42.0]\n      [4, O, 42.0]\n      [5, F, 42.0]\n      [6, F, 42.0]\n      [7, O, 42.0]\n      [32, O, 42.0]\n      [33, F, 42.0]\n      [34, O, 42.0]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [1, O, [42.3]]\n      [2, O, [42.3]]\n      [3, F, [42.3]]\n      [4, O, [42.3]]\n      [5, F, [42.3]]\n      [6, F, [42.3]]\n      [7, O, [42.3]]\n      [32, O, [42.3]]\n      [33, F, [42.3]]\n      [34, O, [42.3]]\nExpected:\n      [1, O, [42.3]]\n      [2, O, [42.3]]\n      [3, F, [42.3]]\n      [4, O, [42.3]]\n      [5, F, [42.3]]\n      [6, F, [42.3]]\n      [7, O, [42.3]]\n      [32, O, [42.3]]\n      [33, F, [42.3]]\n      [34, O, [42.3]]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [1, O, [12, 12]]\n      [2, O, [12, 12]]\n      [3, F, [12, 12]]\n      [4, O, [12, 12]]\n      [5, F, [12, 12]]\n      [6, F, [12, 12]]\n      [7, O, [12, 12]]\n      [32, O, [12, 12]]\n      [33, F, [12, 12]]\n      [34, O, [12, 12]]\nExpected:\n      [1, O, [12, 12]]\n      [2, O, [12, 12]]\n      [3, F, [12, 12]]\n      [4, O, [12, 12]]\n      [5, F, [12, 12]]\n      [6, F, [12, 12]]\n      [7, O, [12, 12]]\n      [32, O, [12, 12]]\n      [33, F, [12, 12]]\n      [34, O, [12, 12]]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.optimizations.TestEliminateCrossJoins",
      "failingMethods": [
        "com.facebook.presto.sql.planner.optimizations.TestEliminateCrossJoins#testEliminateCrossJoinPreserveFilters"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(JoinNode)\n        JoinMatcher{equiCriteria\u003d[L_ORDERKEY \u003d O_ORDERKEY]}\n        - anyTree\n            - node(JoinNode)\n                JoinMatcher{equiCriteria\u003d[P_PARTKEY \u003d L_PARTKEY]}\n                - anyTree\n                    - node(TableScanNode)\n                        TableScanMatcher{expectedTableName\u003dpart}\n                        bind P_PARTKEY -\u003e Column part:partkey\n                - anyTree\n                    - node(FilterNode)\n                        FilterMatcher{predicate\u003d(\"L_RETURNFLAG\" \u003d \u0027R\u0027)}\n                        - node(TableScanNode)\n                            TableScanMatcher{expectedTableName\u003dlineitem}\n                            bind L_PARTKEY -\u003e Column lineitem:partkey\n                            bind L_ORDERKEY -\u003e Column lineitem:orderkey\n                            bind L_RETURNFLAG -\u003e Column lineitem:returnflag\n        - anyTree\n            - node(FilterNode)\n                FilterMatcher{predicate\u003d(\"O_SHIPPRIORITY\" \u003e\u003d 10)}\n                - node(TableScanNode)\n                    TableScanMatcher{expectedTableName\u003dorders}\n                    bind O_ORDERKEY -\u003e Column orders:orderkey\n                    bind O_SHIPPRIORITY -\u003e Column orders:shippriority\n\n] but found [\n\n- Output[orderkey] \u003d\u003e [orderkey_2:bigint]\n        Cost: {rows: 120350 (1.15MB), cpu: ?, memory: ?, network: ?}\n        orderkey :\u003d orderkey_2\n    - InnerJoin[(\"orderkey_2\" \u003d \"orderkey\")][$hashvalue_11, $hashvalue_12] \u003d\u003e [orderkey_2:bigint]\n            Cost: {rows: 120350 (1.15MB), cpu: ?, memory: ?, network: ?}\n        - Project[] \u003d\u003e [orderkey_2:bigint, $hashvalue_11:bigint]\n                Cost: {rows: 60175 (1.15MB), cpu: ?, memory: ?, network: ?}\n                $hashvalue_11 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey_2\"), 0))\n            - InnerJoin[(\"partkey\" \u003d \"partkey_3\")][$hashvalue, $hashvalue_9] \u003d\u003e [orderkey_2:bigint]\n                    Cost: {rows: 60175 (587.65kB), cpu: ?, memory: ?, network: ?}\n                - ScanProject[table \u003d local:tpch:part:sf0.01, originalConstraint \u003d true] \u003d\u003e [partkey:bigint, $hashvalue:bigint]\n                        Cost: {rows: 2000 (19.53kB), cpu: ?, memory: ?, network: ?}/{rows: 2000 (39.06kB), cpu: ?, memory: ?, network: ?}\n                        $hashvalue :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"partkey\"), 0))\n                        partkey :\u003d tpch:partkey\n                        tpch:container\n                            :: [[JUMBO BAG, WRAP PKG]]\n                        tpch:type\n                            :: [[ECONOMY ANODIZED BRASS, STANDARD POLISHED TIN]]\n                - LocalExchange[SINGLE] () \u003d\u003e orderkey_2:bigint, partkey_3:bigint, $hashvalue_9:bigint\n                        Cost: {rows: 30088 (881.47kB), cpu: ?, memory: ?, network: ?}\n                    - ScanFilterProject[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d (\u0027R\u0027 \u003d \"returnflag\"), filterPredicate \u003d (\"returnflag\" \u003d \u0027R\u0027)] \u003d\u003e [orderkey_2:bigint, partkey_3:bigint, $hashvalue_10:bigint]\n                            Cost: {rows: 60175 (1.72MB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (881.47kB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (881.47kB), cpu: ?, memory: ?, network: ?}\n                            $hashvalue_10 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"partkey_3\"), 0))\n                            returnflag :\u003d tpch:returnflag\n                            orderkey_2 :\u003d tpch:orderkey\n                            partkey_3 :\u003d tpch:partkey\n        - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, $hashvalue_12:bigint\n                Cost: {rows: 7500 (146.48kB), cpu: ?, memory: ?, network: ?}\n            - ScanFilterProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d (\"shippriority\" \u003e\u003d \"$literal$tinyint\"(BIGINT \u002710\u0027)), filterPredicate \u003d (\"shippriority\" \u003e\u003d \"$literal$tinyint\"(BIGINT \u002710\u0027))] \u003d\u003e [orderkey:bigint, $hashvalue_13:bigint]\n                    Cost: {rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}/{rows: 7500 (146.48kB), cpu: ?, memory: ?, network: ?}/{rows: 7500 (146.48kB), cpu: ?, memory: ?, network: ?}\n                    $hashvalue_13 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                    orderkey :\u003d tpch:orderkey\n                    shippriority :\u003d tpch:shippriority\n                    tpch:orderstatus\n                        :: [[F], [O], [P]]\n\n] which resolves to [\n\n- Output[orderkey] \u003d\u003e [orderkey_2:bigint]\n        Cost: {rows: 120350 (1.15MB), cpu: ?, memory: ?, network: ?}\n        orderkey :\u003d orderkey_2\n    - InnerJoin[(\"orderkey_2\" \u003d \"orderkey\")][$hashvalue_11, $hashvalue_12] \u003d\u003e [orderkey_2:bigint]\n            Cost: {rows: 120350 (1.15MB), cpu: ?, memory: ?, network: ?}\n        - Project[] \u003d\u003e [orderkey_2:bigint, $hashvalue_11:bigint]\n                Cost: {rows: 60175 (1.15MB), cpu: ?, memory: ?, network: ?}\n                $hashvalue_11 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey_2\"), 0))\n            - InnerJoin[(\"partkey\" \u003d \"partkey_3\")][$hashvalue, $hashvalue_9] \u003d\u003e [orderkey_2:bigint]\n                    Cost: {rows: 60175 (587.65kB), cpu: ?, memory: ?, network: ?}\n                - ScanProject[table \u003d local:tpch:part:sf0.01, originalConstraint \u003d true] \u003d\u003e [partkey:bigint, $hashvalue:bigint]\n                        Cost: {rows: 2000 (19.53kB), cpu: ?, memory: ?, network: ?}/{rows: 2000 (39.06kB), cpu: ?, memory: ?, network: ?}\n                        $hashvalue :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"partkey\"), 0))\n                        partkey :\u003d tpch:partkey\n                        tpch:container\n                            :: [[JUMBO BAG, WRAP PKG]]\n                        tpch:type\n                            :: [[ECONOMY ANODIZED BRASS, STANDARD POLISHED TIN]]\n                - LocalExchange[SINGLE] () \u003d\u003e orderkey_2:bigint, partkey_3:bigint, $hashvalue_9:bigint\n                        Cost: {rows: 30088 (881.47kB), cpu: ?, memory: ?, network: ?}\n                    - ScanFilterProject[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d (\u0027R\u0027 \u003d \"returnflag\"), filterPredicate \u003d (\"returnflag\" \u003d \u0027R\u0027)] \u003d\u003e [orderkey_2:bigint, partkey_3:bigint, $hashvalue_10:bigint]\n                            Cost: {rows: 60175 (1.72MB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (881.47kB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (881.47kB), cpu: ?, memory: ?, network: ?}\n                            $hashvalue_10 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"partkey_3\"), 0))\n                            returnflag :\u003d tpch:returnflag\n                            orderkey_2 :\u003d tpch:orderkey\n                            partkey_3 :\u003d tpch:partkey\n        - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, $hashvalue_12:bigint\n                Cost: {rows: 7500 (146.48kB), cpu: ?, memory: ?, network: ?}\n            - ScanFilterProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d (\"shippriority\" \u003e\u003d \"$literal$tinyint\"(BIGINT \u002710\u0027)), filterPredicate \u003d (\"shippriority\" \u003e\u003d \"$literal$tinyint\"(BIGINT \u002710\u0027))] \u003d\u003e [orderkey:bigint, $hashvalue_13:bigint]\n                    Cost: {rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}/{rows: 7500 (146.48kB), cpu: ?, memory: ?, network: ?}/{rows: 7500 (146.48kB), cpu: ?, memory: ?, network: ?}\n                    $hashvalue_13 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                    orderkey :\u003d tpch:orderkey\n                    shippriority :\u003d tpch:shippriority\n                    tpch:orderstatus\n                        :: [[F], [O], [P]]\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestPercentRankFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestPercentRankFunction#testPercentRank"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 0.0]\n      [5, F, 0.3333333333333333]\n      [6, F, 0.6666666666666666]\n      [33, F, 1.0]\n      [1, O, 0.0]\n      [2, O, 0.2]\n      [4, O, 0.4]\n      [7, O, 0.6]\n      [32, O, 0.8]\n      [34, O, 1.0]\nExpected:\n      [3, F, 0.0]\n      [5, F, 0.3333333333333333]\n      [6, F, 0.6666666666666666]\n      [33, F, 1.0]\n      [1, O, 0.0]\n      [2, O, 0.2]\n      [4, O, 0.4]\n      [7, O, 0.6]\n      [32, O, 0.8]\n      [34, O, 1.0]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestLeadFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestLeadFunction#testLeadFunction"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 1994-07-30]\n      [5, F, 1992-02-21]\n      [6, F, 1993-10-27]\n      [33, F, null]\n      [1, O, 1996-12-01]\n      [2, O, 1995-10-11]\n      [4, O, 1996-01-10]\n      [7, O, 1995-07-16]\n      [32, O, 1998-07-21]\n      [34, O, null]\nExpected:\n      [3, F, 1994-07-30]\n      [5, F, 1992-02-21]\n      [6, F, 1993-10-27]\n      [33, F, null]\n      [1, O, 1996-12-01]\n      [2, O, 1995-10-11]\n      [4, O, 1996-01-10]\n      [7, O, 1995-07-16]\n      [32, O, 1998-07-21]\n      [34, O, null]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestLegacyMapSubscript",
      "failingMethods": [
        "com.facebook.presto.type.TestLegacyMapSubscript#testSubscript"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$SUBSCRIPT(map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(1.5)), 2): $operator$SUBSCRIPT(map(tinyint,double),integer):double not found",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.TestInterpretedPageProjectionFunction",
      "failingMethods": [
        "com.facebook.presto.sql.planner.TestInterpretedPageProjectionFunction#testArithmeticExpression",
        "com.facebook.presto.sql.planner.TestInterpretedPageProjectionFunction#testCoalesceExpression",
        "com.facebook.presto.sql.planner.TestInterpretedPageProjectionFunction#testNullIf"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "tinyint addition overflow: 42 + 87",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [42] but found [42]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [42] but found [42]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestArrayOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestArrayOperators#testRepeat",
        "com.facebook.presto.type.TestArrayOperators#testDistinctFrom",
        "com.facebook.presto.type.TestArrayOperators#testSlice",
        "com.facebook.presto.type.TestArrayOperators#testArrayHashOperator",
        "com.facebook.presto.type.TestArrayOperators#testCardinality",
        "com.facebook.presto.type.TestArrayOperators#testComparison",
        "com.facebook.presto.type.TestArrayOperators#testArrayPosition",
        "com.facebook.presto.type.TestArrayOperators#testArrayToJson",
        "com.facebook.presto.type.TestArrayOperators#testConstructor",
        "com.facebook.presto.type.TestArrayOperators#testArrayMax",
        "com.facebook.presto.type.TestArrayOperators#testElementAt",
        "com.facebook.presto.type.TestArrayOperators#testSequence",
        "com.facebook.presto.type.TestArrayOperators#testArrayContains",
        "com.facebook.presto.type.TestArrayOperators#testDistinct",
        "com.facebook.presto.type.TestArrayOperators#testElementArrayConcat",
        "com.facebook.presto.type.TestArrayOperators#testArrayIntersect",
        "com.facebook.presto.type.TestArrayOperators#testArrayMin",
        "com.facebook.presto.type.TestArrayOperators#testSort",
        "com.facebook.presto.type.TestArrayOperators#testFlatten",
        "com.facebook.presto.type.TestArrayOperators#testTypeConstructor",
        "com.facebook.presto.type.TestArrayOperators#testArrayJoin",
        "com.facebook.presto.type.TestArrayOperators#testShuffle",
        "com.facebook.presto.type.TestArrayOperators#testArrayElements",
        "com.facebook.presto.type.TestArrayOperators#testArrayRemove",
        "com.facebook.presto.type.TestArrayOperators#testArrayToArrayConcat",
        "com.facebook.presto.type.TestArrayOperators#testArraysOverlap",
        "com.facebook.presto.type.TestArrayOperators#testSubscript",
        "com.facebook.presto.type.TestArrayOperators#testReverse",
        "com.facebook.presto.type.TestArrayOperators#testArrayUnion"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling contains(ARRAY_CONSTRUCTOR(1, 2, 3), 2): contains(array(tinyint),integer):boolean not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$CAST(ARRAY_CONSTRUCTOR(1, 2, 3)): ARRAY_CONSTRUCTOR(integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$hash_code(ARRAY_CONSTRUCTOR(1, 2)): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling array_join(ARRAY_CONSTRUCTOR(1, $operator$CAST(null), 2), Slice{base\u003d[B@40b21d1d, address\u003d16, length\u003d1}): ARRAY_CONSTRUCTOR(integer,tinyint,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling array_position(ARRAY_CONSTRUCTOR(10, 20, 30, 40), 30): array_position(array(tinyint),integer):bigint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$CAST($operator$CAST(ARRAY_CONSTRUCTOR(1, 2, $operator$CAST(null)))): ARRAY_CONSTRUCTOR(integer,integer,tinyint):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling arrays_overlap(ARRAY_CONSTRUCTOR(1, 2), ARRAY_CONSTRUCTOR(2, 3)): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling cardinality(ARRAY_CONSTRUCTOR(1, 2, 3)): ARRAY_CONSTRUCTOR(integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$EQUAL(ARRAY_CONSTRUCTOR(1, 2, 3), ARRAY_CONSTRUCTOR(1, 2, 3)): ARRAY_CONSTRUCTOR(integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$IS_DISTINCT_FROM($operator$CAST(null), ARRAY_CONSTRUCTOR(1, 2)): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling element_at(ARRAY_CONSTRUCTOR(), $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling sequence($operator$CAST($operator$NEGATION(10)), $operator$CAST($operator$NEGATION(5))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "ARRAY_CONSTRUCTOR(integer,integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        }
      ],
      "nbFailures": 29,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestIntegerOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestIntegerOperators#testDivide",
        "com.facebook.presto.type.TestIntegerOperators#testSubtract",
        "com.facebook.presto.type.TestIntegerOperators#testModulus",
        "com.facebook.presto.type.TestIntegerOperators#testAdd",
        "com.facebook.presto.type.TestIntegerOperators#testLiteral",
        "com.facebook.presto.type.TestIntegerOperators#testNegation",
        "com.facebook.presto.type.TestIntegerOperators#testUnaryMinus",
        "com.facebook.presto.type.TestIntegerOperators#testCastFromVarchar",
        "com.facebook.presto.type.TestIntegerOperators#testUnaryPlus",
        "com.facebook.presto.type.TestIntegerOperators#testMultiply",
        "com.facebook.presto.type.TestIntegerOperators#testIsDistinctFrom"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$IS_DISTINCT_FROM($operator$CAST(null), 37): $operator$IS_DISTINCT_FROM(tinyint,integer):boolean not found",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is smallint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        }
      ],
      "nbFailures": 11,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestDenseRankFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestDenseRankFunction#testDenseRank"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 1]\n      [5, F, 1]\n      [33, F, 1]\n      [6, F, 1]\n      [32, O, 2]\n      [34, O, 2]\n      [1, O, 2]\n      [2, O, 2]\n      [4, O, 2]\n      [7, O, 2]\nExpected:\n      [3, F, 1]\n      [5, F, 1]\n      [6, F, 1]\n      [33, F, 1]\n      [1, O, 2]\n      [2, O, 2]\n      [4, O, 2]\n      [7, O, 2]\n      [32, O, 2]\n      [34, O, 2]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestArrayFunctions",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestArrayFunctions#testArrayConcat"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestArrayTransformFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestArrayTransformFunction#testBasic",
        "com.facebook.presto.operator.scalar.TestArrayTransformFunction#testTypeCombinations",
        "com.facebook.presto.operator.scalar.TestArrayTransformFunction#testInstanceFunction",
        "com.facebook.presto.operator.scalar.TestArrayTransformFunction#testNull"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "transform(array(tinyint),function(tinyint,integer)):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$ADD(tinyint,integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$ADD(tinyint,integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestMapFilterFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestMapFilterFunction#testBasic",
        "com.facebook.presto.operator.scalar.TestMapFilterFunction#testTypeCombinations",
        "com.facebook.presto.operator.scalar.TestMapFilterFunction#testNull",
        "com.facebook.presto.operator.scalar.TestMapFilterFunction#testRetainedSizeBounded"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$LESS_THAN_OR_EQUAL(tinyint,integer):boolean not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,unknown)] but found [map(tinyint,unknown)]",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "ARRAY_CONSTRUCTOR(integer,integer,tinyint,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$EQUAL(tinyint,integer):boolean not found",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestArrayReduceFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestArrayReduceFunction#testInstanceFunction",
        "com.facebook.presto.operator.scalar.TestArrayReduceFunction#testTwoValueState",
        "com.facebook.presto.operator.scalar.TestArrayReduceFunction#testNulls",
        "com.facebook.presto.operator.scalar.TestArrayReduceFunction#testBasic",
        "com.facebook.presto.operator.scalar.TestArrayReduceFunction#testCoercion"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling reduce(ARRAY_CONSTRUCTOR(5, 20, 50), $operator$CAST(0), (s,x) -\u003e $operator$ADD(s, $operator$CAST(x)), (s) -\u003e s): ARRAY_CONSTRUCTOR(integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [unknown] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling reduce(ARRAY_CONSTRUCTOR(ARRAY_CONSTRUCTOR(1, 2), ARRAY_CONSTRUCTOR(3, 4), ARRAY_CONSTRUCTOR(5, $operator$CAST(null), 7)), $operator$CAST(ARRAY_CONSTRUCTOR()), (s,x) -\u003e concat(s, $operator$CAST(x)), (s) -\u003e s): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling reduce(ARRAY_CONSTRUCTOR(5, $operator$CAST(null), 50), $operator$CAST(0), (s,x) -\u003e $operator$ADD(s, $operator$CAST(x)), (s) -\u003e s): ARRAY_CONSTRUCTOR(integer,tinyint,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling reduce(ARRAY_CONSTRUCTOR(5, 20, 50), $operator$CAST(ROW_CONSTRUCTOR(0, 0)), (s,x) -\u003e $operator$CAST(ROW_CONSTRUCTOR($operator$ADD($operator$CAST(x), DEREFERENCE(s, 0)), $operator$ADD(DEREFERENCE(s, 1), $operator$CAST(1)))), (s) -\u003e $operator$DIVIDE(DEREFERENCE(s, 0), $operator$CAST(DEREFERENCE(s, 1)))): ARRAY_CONSTRUCTOR(integer,integer,integer):array(tinyint) not found",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestMultipleWindowSpecifications",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestMultipleWindowSpecifications#testIdenticalWindowSpecifications",
        "com.facebook.presto.operator.window.TestMultipleWindowSpecifications#testIntersectingWindowSpecifications",
        "com.facebook.presto.operator.window.TestMultipleWindowSpecifications#testDisjointWindowSpecifications"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 1, 3]\n      [5, F, 2, 8]\n      [6, F, 3, 14]\n      [33, F, 4, 47]\n      [1, O, 1, 1]\n      [2, O, 2, 3]\n      [4, O, 3, 7]\n      [7, O, 4, 14]\n      [32, O, 5, 46]\n      [34, O, 6, 80]\nExpected:\n      [3, F, 1, 3]\n      [5, F, 2, 8]\n      [6, F, 3, 14]\n      [33, F, 4, 47]\n      [1, O, 1, 1]\n      [2, O, 2, 3]\n      [4, O, 3, 7]\n      [7, O, 4, 14]\n      [32, O, 5, 46]\n      [34, O, 6, 80]",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestTinyintOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestTinyintOperators#testCastToInteger"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestAggregateWindowFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testSumCurrentRow",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testCountRowsUnordered",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testCountValuesUnordered",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testSumRollingUnboundedPrecedingNPreceding",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testSumUnordered",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testSumOrdered",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testSumRolling",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testCountRowsOrdered",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testSumEmptyWindow",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testSumRollingNFollowingUnboundedFollowing",
        "com.facebook.presto.operator.window.TestAggregateWindowFunction#testCountValuesOrdered"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 1]\n      [5, F, 2]\n      [6, F, 3]\n      [33, F, 4]\n      [1, O, 1]\n      [2, O, 2]\n      [4, O, 3]\n      [7, O, 4]\n      [32, O, 5]\n      [34, O, 6]\nExpected:\n      [3, F, 1]\n      [5, F, 2]\n      [6, F, 3]\n      [33, F, 4]\n      [1, O, 1]\n      [2, O, 2]\n      [4, O, 3]\n      [7, O, 4]\n      [32, O, 5]\n      [34, O, 6]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 4]\n      [5, F, 4]\n      [6, F, 4]\n      [33, F, 4]\n      [1, O, 6]\n      [2, O, 6]\n      [4, O, 6]\n      [7, O, 6]\n      [32, O, 6]\n      [34, O, 6]\nExpected:\n      [3, F, 4]\n      [5, F, 4]\n      [6, F, 4]\n      [33, F, 4]\n      [1, O, 6]\n      [2, O, 6]\n      [4, O, 6]\n      [7, O, 6]\n      [32, O, 6]\n      [34, O, 6]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 1]\n      [5, F, 2]\n      [6, F, 3]\n      [33, F, 4]\n      [1, O, 1]\n      [2, O, 2]\n      [4, O, 3]\n      [7, O, 4]\n      [32, O, 5]\n      [34, O, 6]\nExpected:\n      [3, F, 1]\n      [5, F, 2]\n      [6, F, 3]\n      [33, F, 4]\n      [1, O, 1]\n      [2, O, 2]\n      [4, O, 3]\n      [7, O, 4]\n      [32, O, 5]\n      [34, O, 6]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 4]\n      [5, F, 4]\n      [6, F, 4]\n      [33, F, 4]\n      [1, O, 6]\n      [2, O, 6]\n      [4, O, 6]\n      [7, O, 6]\n      [32, O, 6]\n      [34, O, 6]\nExpected:\n      [3, F, 4]\n      [5, F, 4]\n      [6, F, 4]\n      [33, F, 4]\n      [1, O, 6]\n      [2, O, 6]\n      [4, O, 6]\n      [7, O, 6]\n      [32, O, 6]\n      [34, O, 6]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 3]\n      [5, F, 5]\n      [6, F, 6]\n      [33, F, 33]\n      [1, O, 1]\n      [2, O, 2]\n      [4, O, 4]\n      [7, O, 7]\n      [32, O, 32]\n      [34, O, 34]\nExpected:\n      [3, F, 3]\n      [5, F, 5]\n      [6, F, 6]\n      [33, F, 33]\n      [1, O, 1]\n      [2, O, 2]\n      [4, O, 4]\n      [7, O, 7]\n      [32, O, 32]\n      [34, O, 34]",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 3]\n      [5, F, 8]\n      [6, F, 14]\n      [33, F, 47]\n      [1, O, 1]\n      [2, O, 3]\n      [4, O, 7]\n      [7, O, 14]\n      [32, O, 46]\n      [34, O, 80]\nExpected:\n      [3, F, 3]\n      [5, F, 8]\n      [6, F, 14]\n      [33, F, 47]\n      [1, O, 1]\n      [2, O, 3]\n      [4, O, 7]\n      [7, O, 14]\n      [32, O, 46]\n      [34, O, 80]",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame end value type must be INTEGER or BIGINT (actual tinyint)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 47]\n      [5, F, 47]\n      [6, F, 47]\n      [33, F, 47]\n      [1, O, 80]\n      [2, O, 80]\n      [4, O, 80]\n      [7, O, 80]\n      [32, O, 80]\n      [34, O, 80]\nExpected:\n      [3, F, 47]\n      [5, F, 47]\n      [6, F, 47]\n      [33, F, 47]\n      [1, O, 80]\n      [2, O, 80]\n      [4, O, 80]\n      [7, O, 80]\n      [32, O, 80]\n      [34, O, 80]",
          "isError": false
        }
      ],
      "nbFailures": 11,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.TestDomainTranslator",
      "failingMethods": [
        "com.facebook.presto.sql.planner.TestDomainTranslator#testFromBetweenPredicate",
        "com.facebook.presto.sql.planner.TestDomainTranslator#testNumericTypeTranslation",
        "com.facebook.presto.sql.planner.TestDomainTranslator#testFromComparisonsWithCoercions"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Mismatched Marker types: integer vs tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Mismatched Marker types: integer vs tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Mismatched Marker types: tinyint vs integer",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.TestExpressionInterpreter",
      "failingMethods": [
        "com.facebook.presto.sql.TestExpressionInterpreter#testFailedExpressionOptimization",
        "com.facebook.presto.sql.TestExpressionInterpreter#testSearchCase",
        "com.facebook.presto.sql.TestExpressionInterpreter#testSimpleCase"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [(CASE \"unbound_long\" WHEN BIGINT \u00271\u0027 THEN 1 WHEN CAST(\"fail\"() AS bigint) THEN 2 END)] but found [(CASE \"unbound_long\" WHEN BIGINT \u00271\u0027 THEN \"$literal$tinyint\"(BIGINT \u00271\u0027) WHEN CAST(\"fail\"() AS bigint) THEN \"$literal$tinyint\"(BIGINT \u00272\u0027) END)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [(CASE WHEN CAST(\"fail\"() AS boolean) THEN 1 END)] but found [(CASE WHEN CAST(\"fail\"() AS boolean) THEN \"$literal$tinyint\"(BIGINT \u00271\u0027) END)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [(CASE BIGINT \u00271234\u0027 WHEN (BIGINT \u00271230\u0027 + \"unbound_long\") THEN true ELSE false END)] but found [(CASE BIGINT \u00271234\u0027 WHEN CAST(\"fail\"(\"json_parse\"(U\u0026\u0027{\\000A  \"type\" : \"com.facebook.presto.spi.PrestoException\",\\000A  \"message\" : \"tinyint multiplication overflow: 123 * 10\",\\000A  \"cause\" : {\\000A    \"type\" : \"java.lang.IllegalArgumentException\",\\000A    \"message\" : \"Out of range: 1230\",\\000A    \"suppressed\" : [ ],\\000A    \"stack\" : [ \"com.google.common.base.Preconditions.checkArgument(Preconditions.java:179)\", \"com.google.common.primitives.SignedBytes.checkedCast(SignedBytes.java:57)\", \"com.facebook.presto.type.TinyintOperators.multiply(TinyintOperators.java:83)\", \"java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)\", \"java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:649)\", \"com.facebook.presto.sql.FunctionInvoker.invoke(FunctionInvoker.java:88)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.invokeOperator(ExpressionInterpreter.java:1276)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitArithmeticBinary(ExpressionInterpreter.java:791)\", \"com.facebook.presto.sql.tree.ArithmeticBinaryExpression.accept(ArithmeticBinaryExpression.java:85)\", \"com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitCast(ExpressionInterpreter.java:1127)\", \"com.facebook.presto.sql.tree.Cast.accept(Cast.java:98)\", \"com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitArithmeticBinary(ExpressionInterpreter.java:778)\", \"com.facebook.presto.sql.tree.ArithmeticBinaryExpression.accept(ArithmeticBinaryExpression.java:85)\", \"com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.processWithExceptionHandling(ExpressionInterpreter.java:556)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitSimpleCaseExpression(ExpressionInterpreter.java:583)\", \"com.facebook.presto.sql.tree.SimpleCaseExpression.accept(SimpleCaseExpression.java:70)\", \"com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:283)\", \"com.facebook.presto.sql.TestExpressionInterpreter.optimize(TestExpressionInterpreter.java:1376)\", \"com.facebook.presto.sql.TestExpressionInterpreter.assertOptimizedEquals(TestExpressionInterpreter.java:1353)\", \"com.facebook.presto.sql.TestExpressionInterpreter.testSimpleCase(TestExpressionInterpreter.java:988)\", \"sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\", \"sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\", \"sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\", \"java.lang.reflect.Method.invoke(Method.java:498)\", \"org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)\", \"org.testng.internal.Invoker.invokeMethod(Invoker.java:645)\", \"org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)\", \"org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)\", \"org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\", \"org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\", \"java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\", \"java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\", \"java.lang.Thread.run(Thread.java:745)\" ]\\000A  },\\000A  \"suppressed\" : [ ],\\000A  \"stack\" : [ \"com.facebook.presto.type.TinyintOperators.multiply(TinyintOperators.java:86)\", \"java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:627)\", \"java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:649)\", \"com.facebook.presto.sql.FunctionInvoker.invoke(FunctionInvoker.java:88)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.invokeOperator(ExpressionInterpreter.java:1276)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitArithmeticBinary(ExpressionInterpreter.java:791)\", \"com.facebook.presto.sql.tree.ArithmeticBinaryExpression.accept(ArithmeticBinaryExpression.java:85)\", \"com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitCast(ExpressionInterpreter.java:1127)\", \"com.facebook.presto.sql.tree.Cast.accept(Cast.java:98)\", \"com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitArithmeticBinary(ExpressionInterpreter.java:778)\", \"com.facebook.presto.sql.tree.ArithmeticBinaryExpression.accept(ArithmeticBinaryExpression.java:85)\", \"com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.processWithExceptionHandling(ExpressionInterpreter.java:556)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter$Visitor.visitSimpleCaseExpression(ExpressionInterpreter.java:583)\", \"com.facebook.presto.sql.tree.SimpleCaseExpression.accept(SimpleCaseExpression.java:70)\", \"com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:27)\", \"com.facebook.presto.sql.planner.ExpressionInterpreter.optimize(ExpressionInterpreter.java:283)\", \"com.facebook.presto.sql.TestExpressionInterpreter.optimize(TestExpressionInterpreter.java:1376)\", \"com.facebook.presto.sql.TestExpressionInterpreter.assertOptimizedEquals(TestExpressionInterpreter.java:1353)\", \"com.facebook.presto.sql.TestExpressionInterpreter.testSimpleCase(TestExpressionInterpreter.java:988)\", \"sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\", \"sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\", \"sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\", \"java.lang.reflect.Method.invoke(Method.java:498)\", \"org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)\", \"org.testng.internal.Invoker.invokeMethod(Invoker.java:645)\", \"org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)\", \"org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)\", \"org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\", \"org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\", \"java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\", \"java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\", \"java.lang.Thread.run(Thread.java:745)\" ]\\000A}\u0027)) AS bigint) THEN true ELSE false END)]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestJsonFunctions",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestJsonFunctions#testJsonEquality",
        "com.facebook.presto.operator.scalar.TestJsonFunctions#testJsonArrayContainsLong",
        "com.facebook.presto.operator.scalar.TestJsonFunctions#testJsonArrayGetDouble",
        "com.facebook.presto.operator.scalar.TestJsonFunctions#testJsonArrayGetBoolean",
        "com.facebook.presto.operator.scalar.TestJsonFunctions#testJsonArrayGetLong",
        "com.facebook.presto.operator.scalar.TestJsonFunctions#testJsonArrayGetNonScalar"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling json_array_contains(Slice{base\u003d[B@6642db8d, address\u003d16, length\u003d4}, $operator$CAST($operator$NEGATION(4))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling json_array_get(Slice{base\u003d[B@17e3f302, address\u003d16, length\u003d6}, $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling json_array_get(Slice{base\u003d[B@d5953ef, address\u003d16, length\u003d5}, $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling json_array_get(Slice{base\u003d[B@63c451ba, address\u003d16, length\u003d21}, $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling json_array_get(Slice{base\u003d[B@624a03e1, address\u003d16, length\u003d37}, $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$EQUAL(json_parse(Slice{base\u003d[B@203185f6, address\u003d16, length\u003d14}), $operator$CAST(map(ARRAY_CONSTRUCTOR(Slice{base\u003d[B@4c021674, address\u003d16, length\u003d1}, Slice{base\u003d[B@1ca587d3, address\u003d16, length\u003d1}), ARRAY_CONSTRUCTOR(2, 1)))): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        }
      ],
      "nbFailures": 6,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestMapOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestMapOperators#testCardinality",
        "com.facebook.presto.type.TestMapOperators#testDistinctFrom",
        "com.facebook.presto.type.TestMapOperators#testMapFromEntries",
        "com.facebook.presto.type.TestMapOperators#testConstructor",
        "com.facebook.presto.type.TestMapOperators#testElementAt",
        "com.facebook.presto.type.TestMapOperators#testEquals",
        "com.facebook.presto.type.TestMapOperators#testMapHashOperator",
        "com.facebook.presto.type.TestMapOperators#testMapConcat",
        "com.facebook.presto.type.TestMapOperators#testMapEntries",
        "com.facebook.presto.type.TestMapOperators#testMapToJson",
        "com.facebook.presto.type.TestMapOperators#testEntryMappings",
        "com.facebook.presto.type.TestMapOperators#testMapToMapCast",
        "com.facebook.presto.type.TestMapOperators#testMapValues",
        "com.facebook.presto.type.TestMapOperators#testNotEquals",
        "com.facebook.presto.type.TestMapOperators#testSubscript",
        "com.facebook.presto.type.TestMapOperators#testMapKeys"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling cardinality(map(ARRAY_CONSTRUCTOR(Slice{base\u003d[B@725da5e3, address\u003d16, length\u003d1}, Slice{base\u003d[B@8b2fa4d, address\u003d16, length\u003d1}), ARRAY_CONSTRUCTOR(2, 4))): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(varchar(1),integer)] but found [map(varchar(1),tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling element_at(map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(1.0)), 2): element_at(map(tinyint,double),integer):double not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,varchar(1))] but found [map(tinyint,varchar(1))]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$EQUAL(map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(2)), map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(2))): ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$IS_DISTINCT_FROM(map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(2)), $operator$CAST(null)): ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling map_concat($operator$CAST(map(ARRAY_CONSTRUCTOR(true), ARRAY_CONSTRUCTOR(1))), map($operator$CAST(ARRAY_CONSTRUCTOR()), $operator$CAST(ARRAY_CONSTRUCTOR()))): ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(row(field0 integer,field1 unknown))] but found [array(row(field0 tinyint,field1 unknown))]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,integer)] but found [map(tinyint,tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$hash_code(map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(2))): ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling map_keys(map(ARRAY_CONSTRUCTOR(1.0, 2.0), ARRAY_CONSTRUCTOR(ARRAY_CONSTRUCTOR(1, 2), ARRAY_CONSTRUCTOR(3)))): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$CAST(map(ARRAY_CONSTRUCTOR(7, 5, 3, 1), ARRAY_CONSTRUCTOR(8, 6, 4, 2))): ARRAY_CONSTRUCTOR(integer,integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$CAST(map(ARRAY_CONSTRUCTOR(1, 2), ARRAY_CONSTRUCTOR(1, 2))): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(array(array(integer)))] but found [array(array(array(tinyint)))]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$NOT_EQUAL(map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(2)), map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(2))): ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$SUBSCRIPT(map(ARRAY_CONSTRUCTOR(1), ARRAY_CONSTRUCTOR(null)), 1): $operator$SUBSCRIPT(map(tinyint,unknown),integer):unknown not found",
          "isError": false
        }
      ],
      "nbFailures": 16,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestRankFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestRankFunction#testRank"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 1]\n      [5, F, 1]\n      [33, F, 1]\n      [6, F, 1]\n      [32, O, 5]\n      [34, O, 5]\n      [1, O, 5]\n      [2, O, 5]\n      [4, O, 5]\n      [7, O, 5]\nExpected:\n      [3, F, 1]\n      [5, F, 1]\n      [6, F, 1]\n      [33, F, 1]\n      [1, O, 5]\n      [2, O, 5]\n      [4, O, 5]\n      [7, O, 5]\n      [32, O, 5]\n      [34, O, 5]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.gen.TestVarArgsToArrayAdapterGenerator",
      "failingMethods": [
        "com.facebook.presto.sql.gen.TestVarArgsToArrayAdapterGenerator#testArrayElements"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "var_args_sum(tinyint):integer not found",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.analyzer.TestAnalyzer",
      "failingMethods": [
        "com.facebook.presto.sql.analyzer.TestAnalyzer#testInvalidWindowFrame"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected error INVALID_WINDOW_FRAME, but found TYPE_MISMATCH: line 1:8: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestZipWithFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestZipWithFunction#testWithNull",
        "com.facebook.presto.operator.scalar.TestZipWithFunction#testRetainedSizeBounded",
        "com.facebook.presto.operator.scalar.TestZipWithFunction#testSameLength"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "ARRAY_CONSTRUCTOR(integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(row(field0 varchar(1),field1 integer))] but found [array(row(field0 varchar(1),field1 tinyint))]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling zip_with(ARRAY_CONSTRUCTOR(Slice{base\u003d[B@17d01639, address\u003d16, length\u003d1}, $operator$CAST(null)), ARRAY_CONSTRUCTOR($operator$CAST(null), 1), (x,y) -\u003e OR(IS_NULL(x), IS_NULL(y))): ARRAY_CONSTRUCTOR(tinyint,integer):array(tinyint) not found",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.gen.TestExpressionCompiler",
      "failingMethods": [
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testBinaryOperatorsIntegralIntegral",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testSearchCaseSingle",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testTernaryOperatorsLongDouble",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#smokedTest",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testBinaryOperatorsIntegralDouble",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testTryCast",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testCast",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testHugeIn",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testNullif",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testSearchCaseMultiple",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testIn",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testBinaryOperatorsBigintDecimal",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testBinaryOperatorsIntegerDecimal",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testTernaryOperatorsLongDecimal",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testBinaryOperatorsDecimalBigint",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testSimpleCase",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testTernaryOperatorsDoubleDouble",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testIf",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testCoalesce",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testBinaryOperatorsDecimalInteger",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testBinaryOperatorsDoubleIntegral",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testTernaryOperatorsLongLong",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testFunctionCall",
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testUnaryOperators"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing 42",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing CAST( -9 AS BIGINT) \u003d CAST( 3.0 AS decimal(2,1) )",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing CAST( 9.0 AS decimal(2,1) ) \u003d CAST( -3 AS BIGINT)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing CAST( 9.0 AS decimal(2,1) ) \u003d -3",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing CAST(9.0 as DOUBLE) \u003d -3",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing nullif(9, CAST( 3.0 AS decimal(2,1) ))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing nullif(9, 3)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing cast(true as integer)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing coalesce(9, 1)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing log(9, -3)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing bound_integer in
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing if(null and true, 1, 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing 9 in (33, 9, -9, -33)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing nullif(2, NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing case when 9.0 \u003d CAST( -9 AS BIGINT) then \u0027first\u0027 when 9.0 \u003d 3.0 then \u0027second\u0027 end",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing case when 9.0 \u003d CAST( -9 AS BIGINT) then \u0027first\u0027 when 9.0 \u003d 3.0 then \u0027second\u0027 else \u0027else\u0027 end",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing case 9 when 9 then \u0027first\u0027 when -3 then \u0027second\u0027 end",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing 9.0 between 9.0 and -3",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing CAST( 9 AS BIGINT) between CAST( 9.0 AS decimal(3,1) ) and CAST( -3 AS BIGINT)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing 9 between 9.0 and -3",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing 9 between 9 and -3",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing try_cast(\u0027123\u0027 as integer)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing 9",
          "isError": false
        }
      ],
      "nbFailures": 24,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.TestPredicatePushdown",
      "failingMethods": [
        "com.facebook.presto.sql.planner.TestPredicatePushdown#testPushDownToLhsOfSemiJoin"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(SemiJoinNode)\n        SemiJoinMatcher{filteringSymbolAlias\u003dORDERS_ORDER_KEY, sourceSymbolAlias\u003dLINE_ORDER_KEY, outputAlias\u003dSEMI_JOIN_RESULT}\n        - anyTree\n            - node(FilterNode)\n                FilterMatcher{predicate\u003d(\"LINE_NUMBER\" \u003d 2)}\n                - node(TableScanNode)\n                    TableScanMatcher{expectedTableName\u003dlineitem}\n                    bind LINE_ORDER_KEY -\u003e Column lineitem:orderkey\n                    bind LINE_NUMBER -\u003e Column lineitem:linenumber\n                    bind LINE_QUANTITY -\u003e Column lineitem:quantity\n        - anyTree\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dorders}\n                bind ORDERS_ORDER_KEY -\u003e Column orders:orderkey\n\n] but found [\n\n- Output[quantity] \u003d\u003e [quantity:double]\n        Cost: {rows: 30088 (293.82kB), cpu: ?, memory: ?, network: ?}\n    - FilterProject[filterPredicate \u003d \"expr_8\"] \u003d\u003e [quantity:double]\n            Cost: {rows: 30088 (1.15MB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (293.82kB), cpu: ?, memory: ?, network: ?}\n        - Project[] \u003d\u003e [orderkey:bigint, linenumber:integer, quantity:double, expr_8:boolean]\n                Cost: {rows: 60175 (2.30MB), cpu: ?, memory: ?, network: ?}\n            - SemiJoin[orderkey \u003d orderkey_1][$hashvalue, $hashvalue_77] \u003d\u003e [orderkey:bigint, linenumber:integer, quantity:double, $hashvalue:bigint, expr_8:boolean]\n                    Cost: {rows: 60175 (2.87MB), cpu: ?, memory: ?, network: ?}\n                - ScanFilterProject[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d (\"linenumber\" \u003d \"$literal$tinyint\"(BIGINT \u00272\u0027)), filterPredicate \u003d (\"linenumber\" \u003d \"$literal$tinyint\"(BIGINT \u00272\u0027))] \u003d\u003e [orderkey:bigint, linenumber:integer, quantity:double, $hashvalue:bigint]\n                        Cost: {rows: 60175 (1.72MB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (881.47kB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (1.15MB), cpu: ?, memory: ?, network: ?}\n                        $hashvalue :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                        linenumber :\u003d tpch:linenumber\n                        quantity :\u003d tpch:quantity\n                        orderkey :\u003d tpch:orderkey\n                - LocalExchange[SINGLE] () \u003d\u003e orderkey_1:bigint, $hashvalue_77:bigint\n                        Cost: {rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}\n                    - ScanProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey_1:bigint, $hashvalue_78:bigint]\n                            Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}\n                            $hashvalue_78 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey_1\"), 0))\n                            orderkey_1 :\u003d tpch:orderkey\n                            tpch:orderstatus\n                                :: [[F], [O], [P]]\n\n] which resolves to [\n\n- Output[quantity] \u003d\u003e [quantity:double]\n        Cost: {rows: 30088 (293.82kB), cpu: ?, memory: ?, network: ?}\n    - FilterProject[filterPredicate \u003d \"expr_8\"] \u003d\u003e [quantity:double]\n            Cost: {rows: 30088 (1.15MB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (293.82kB), cpu: ?, memory: ?, network: ?}\n        - Project[] \u003d\u003e [orderkey:bigint, linenumber:integer, quantity:double, expr_8:boolean]\n                Cost: {rows: 60175 (2.30MB), cpu: ?, memory: ?, network: ?}\n            - SemiJoin[orderkey \u003d orderkey_1][$hashvalue, $hashvalue_77] \u003d\u003e [orderkey:bigint, linenumber:integer, quantity:double, $hashvalue:bigint, expr_8:boolean]\n                    Cost: {rows: 60175 (2.87MB), cpu: ?, memory: ?, network: ?}\n                - ScanFilterProject[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d (\"linenumber\" \u003d \"$literal$tinyint\"(BIGINT \u00272\u0027)), filterPredicate \u003d (\"linenumber\" \u003d \"$literal$tinyint\"(BIGINT \u00272\u0027))] \u003d\u003e [orderkey:bigint, linenumber:integer, quantity:double, $hashvalue:bigint]\n                        Cost: {rows: 60175 (1.72MB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (881.47kB), cpu: ?, memory: ?, network: ?}/{rows: 30088 (1.15MB), cpu: ?, memory: ?, network: ?}\n                        $hashvalue :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                        linenumber :\u003d tpch:linenumber\n                        quantity :\u003d tpch:quantity\n                        orderkey :\u003d tpch:orderkey\n                - LocalExchange[SINGLE] () \u003d\u003e orderkey_1:bigint, $hashvalue_77:bigint\n                        Cost: {rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}\n                    - ScanProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey_1:bigint, $hashvalue_78:bigint]\n                            Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}\n                            $hashvalue_78 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey_1\"), 0))\n                            orderkey_1 :\u003d tpch:orderkey\n                            tpch:orderstatus\n                                :: [[F], [O], [P]]\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestRealOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestRealOperators#testCastToInteger"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is smallint",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestCumulativeDistributionFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestCumulativeDistributionFunction#testCumulativeDistribution"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 0.25]\n      [5, F, 0.5]\n      [6, F, 0.75]\n      [33, F, 1.0]\n      [1, O, 0.16666666666666666]\n      [2, O, 0.3333333333333333]\n      [4, O, 0.5]\n      [7, O, 0.6666666666666666]\n      [32, O, 0.8333333333333334]\n      [34, O, 1.0]\nExpected:\n      [3, F, 0.25]\n      [5, F, 0.5]\n      [6, F, 0.75]\n      [33, F, 1.0]\n      [1, O, 0.16666666666666666]\n      [2, O, 0.3333333333333333]\n      [4, O, 0.5]\n      [7, O, 0.6666666666666666]\n      [32, O, 0.8333333333333334]\n      [34, O, 1.0]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestLastValueFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestLastValueFunction#testLastValueBounded",
        "com.facebook.presto.operator.window.TestLastValueFunction#testLastValueUnbounded"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 1993-10-27]\n      [5, F, 1993-10-27]\n      [6, F, 1993-10-27]\n      [33, F, 1993-10-27]\n      [1, O, 1998-07-21]\n      [2, O, 1998-07-21]\n      [4, O, 1998-07-21]\n      [7, O, 1998-07-21]\n      [32, O, 1998-07-21]\n      [34, O, 1998-07-21]\nExpected:\n      [3, F, 1993-10-27]\n      [5, F, 1993-10-27]\n      [6, F, 1993-10-27]\n      [33, F, 1993-10-27]\n      [1, O, 1998-07-21]\n      [2, O, 1998-07-21]\n      [4, O, 1998-07-21]\n      [7, O, 1998-07-21]\n      [32, O, 1998-07-21]\n      [34, O, 1998-07-21]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestMapTransformValueFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestMapTransformValueFunction#testBasic",
        "com.facebook.presto.operator.scalar.TestMapTransformValueFunction#testNullValue",
        "com.facebook.presto.operator.scalar.TestMapTransformValueFunction#testRetainedSizeBounded",
        "com.facebook.presto.operator.scalar.TestMapTransformValueFunction#testTypeCombinations",
        "com.facebook.presto.operator.scalar.TestMapTransformValueFunction#testEmpty"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,integer)] but found [map(tinyint,tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,unknown)] but found [map(tinyint,unknown)]",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "ARRAY_CONSTRUCTOR(integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,integer)] but found [map(tinyint,tinyint)]",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "transform_values(map(unknown,unknown),function(unknown,unknown,integer)):map(unknown,tinyint) not found",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestDecimalParametricType",
      "failingMethods": [
        "com.facebook.presto.type.TestDecimalParametricType#decimalIsCreatedWithOnlyPrecisionDefined",
        "com.facebook.presto.type.TestDecimalParametricType#decimalIsCreatedWithoutParameters"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$CAST($operator$NEGATION(22)): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$CAST($operator$NEGATION(22)): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestLambdaExpression",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testInstanceFunction",
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testNull",
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testUnreferencedLambdaArgument",
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testBasic",
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testBind",
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testTypeCombinations",
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testLambdaWithoutArgument",
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testNestedLambda",
        "com.facebook.presto.operator.scalar.TestLambdaExpression#testCoercion"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$ADD(tinyint,integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling apply(90, (x) -\u003e $operator$ADD($operator$CAST(x), 9.0)): apply(integer,function(tinyint,double)):double not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "invoke(function(integer)):tinyint not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$MULTIPLY(tinyint,integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$ADD(tinyint,integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$ADD(tinyint,integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "apply(tinyint,function(tinyint,integer)):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 9,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestMapZipWithFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestMapZipWithFunction#testRetainedSizeBounded",
        "com.facebook.presto.operator.scalar.TestMapZipWithFunction#testBasic",
        "com.facebook.presto.operator.scalar.TestMapZipWithFunction#testTypes"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "ARRAY_CONSTRUCTOR(integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,integer)] but found [map(tinyint,tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,integer)] but found [map(tinyint,tinyint)]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestFirstValueFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestFirstValueFunction#testFirstValueBounded",
        "com.facebook.presto.operator.window.TestFirstValueFunction#testFirstValueUnbounded"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.sql.analyzer.SemanticException",
          "failureDetail": "line 2:1: Window frame start value type must be INTEGER or BIGINT(actual tinyint)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, 1993-10-14]\n      [5, F, 1993-10-14]\n      [6, F, 1993-10-14]\n      [33, F, 1993-10-14]\n      [1, O, 1996-01-02]\n      [2, O, 1996-01-02]\n      [4, O, 1996-01-02]\n      [7, O, 1996-01-02]\n      [32, O, 1996-01-02]\n      [34, O, 1996-01-02]\nExpected:\n      [3, F, 1993-10-14]\n      [5, F, 1993-10-14]\n      [6, F, 1993-10-14]\n      [33, F, 1993-10-14]\n      [1, O, 1996-01-02]\n      [2, O, 1996-01-02]\n      [4, O, 1996-01-02]\n      [7, O, 1996-01-02]\n      [32, O, 1996-01-02]\n      [34, O, 1996-01-02]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestMathFunctions",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestMathFunctions#testRandom",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testFloor",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testWidthBucketArray",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testMod",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testRound",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testTruncate",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testPower",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testGreatest",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testLeast",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testAbs",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testCeil",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testSign",
        "com.facebook.presto.operator.scalar.TestMathFunctions#testWidthBucket"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling power($operator$CAST(9), $operator$CAST($operator$NEGATION(3))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [smallint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027sign\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling width_bucket($operator$CAST($operator$NEGATION(1)), $operator$CAST(0), 3.2, $operator$CAST(4)): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling width_bucket($operator$CAST($operator$NEGATION(1)), ARRAY_CONSTRUCTOR(0.0, 1.2, 3.3, 4.5)): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling truncate(1234, $operator$CAST($operator$NEGATION(1))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 13,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestLagFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestLagFunction#testLagFunction"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [3, F, null]\n      [5, F, 1993-10-14]\n      [6, F, 1994-07-30]\n      [33, F, 1992-02-21]\n      [1, O, null]\n      [2, O, 1996-01-02]\n      [4, O, 1996-12-01]\n      [7, O, 1995-10-11]\n      [32, O, 1996-01-10]\n      [34, O, 1995-07-16]\nExpected:\n      [3, F, null]\n      [5, F, 1993-10-14]\n      [6, F, 1994-07-30]\n      [33, F, 1992-02-21]\n      [1, O, null]\n      [2, O, 1996-01-02]\n      [4, O, 1996-12-01]\n      [7, O, 1995-10-11]\n      [32, O, 1996-01-10]\n      [34, O, 1995-07-16]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestSmallintOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestSmallintOperators#testCastToInteger"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestRowNumberFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestRowNumberFunction#testRowNumber"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [1, O, 1]\n      [2, O, 2]\n      [3, F, 3]\n      [4, O, 4]\n      [5, F, 5]\n      [6, F, 6]\n      [7, O, 7]\n      [32, O, 8]\n      [33, F, 9]\n      [34, O, 10]\nExpected:\n      [1, O, 1]\n      [2, O, 2]\n      [3, F, 3]\n      [4, O, 4]\n      [5, F, 5]\n      [6, F, 6]\n      [7, O, 7]\n      [32, O, 8]\n      [33, F, 9]\n      [34, O, 10]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.query.TestJoinUsing",
      "failingMethods": [
        "com.facebook.presto.sql.query.TestJoinUsing#testOuter",
        "com.facebook.presto.sql.query.TestJoinUsing#testCoercion"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Types mismatch for query: \n SELECT * FROM (VALUES (DECIMAL \u00270000000000000000001\u0027, 2.0)) x (a, b) JOIN (VALUES (1, 3)) y (a, b) USING(a)\n:: Lists differ at element [0]: decimal(10,0) !\u003d decimal(3,0) expected [decimal(10,0)] but found [decimal(3,0)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Types mismatch for query: \n SELECT * FROM (VALUES (0, 1, 2), (3, 6, 5)) a(x1, y, z1) FULL OUTER JOIN (VALUES (3, 1, 5), (0, 4, 2)) b(x2, y, z2) USING (y)\n:: Lists differ at element [1]: integer !\u003d tinyint expected [integer] but found [tinyint]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestJsonOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestJsonOperators#testCastToInteger"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is smallint",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestStringFunctions",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestStringFunctions#testCharSubstring",
        "com.facebook.presto.operator.scalar.TestStringFunctions#testCodepoint",
        "com.facebook.presto.operator.scalar.TestStringFunctions#testSubstring"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling substr($operator$CAST(Slice{base\u003d[B@41fd1a47, address\u003d16, length\u003d13}), $operator$CAST($operator$NEGATION(5))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027codepoint\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling substr(Slice{base\u003d[B@1dd74658, address\u003d16, length\u003d13}, $operator$CAST($operator$NEGATION(5))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.TestLogicalPlanner",
      "failingMethods": [
        "com.facebook.presto.sql.planner.TestLogicalPlanner#testPruneCountAggregationOverScalar"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- node(OutputNode)\n    - node(ValuesNode)\n        ValuesMatcher{outputSymbolAliases\u003d{_col0\u003d0}, expectedOutputSymbolCount\u003dOptional[1], expectedRows\u003dOptional[[[1]]]}\n\n] but found [\n\n- Output[_col0] \u003d\u003e [count:bigint]\n        Cost: {rows: 1 (10B), cpu: ?, memory: ?, network: ?}\n        _col0 :\u003d count\n    - Values \u003d\u003e [count:bigint]\n            Cost: {rows: 1 (10B), cpu: ?, memory: ?, network: ?}\n            (\"$literal$tinyint\"(BIGINT \u00271\u0027))\n\n] which resolves to [\n\n- Output[_col0] \u003d\u003e [count:bigint]\n        Cost: {rows: 1 (10B), cpu: ?, memory: ?, network: ?}\n        _col0 :\u003d count\n    - Values \u003d\u003e [count:bigint]\n            Cost: {rows: 1 (10B), cpu: ?, memory: ?, network: ?}\n            (\"$literal$tinyint\"(BIGINT \u00271\u0027))\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.window.TestNTileFunction",
      "failingMethods": [
        "com.facebook.presto.operator.window.TestNTileFunction#testNTile"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: collections to be equal (ignoring order).\nActual:\n      [1, O, 1]\n      [2, O, 1]\n      [3, F, 1]\n      [4, O, 2]\n      [5, F, 2]\n      [6, F, 2]\n      [7, O, 3]\n      [32, O, 3]\n      [33, F, 4]\n      [34, O, 4]\nExpected:\n      [1, O, 1]\n      [2, O, 1]\n      [3, F, 1]\n      [4, O, 2]\n      [5, F, 2]\n      [6, F, 2]\n      [7, O, 3]\n      [32, O, 3]\n      [33, F, 4]\n      [34, O, 4]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestConditions",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestConditions#testDistinctFrom",
        "com.facebook.presto.operator.scalar.TestConditions#testBetween",
        "com.facebook.presto.operator.scalar.TestConditions#testSimpleCase",
        "com.facebook.presto.operator.scalar.TestConditions#testSearchCase"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$IS_DISTINCT_FROM($operator$CAST(null), 1): $operator$IS_DISTINCT_FROM(tinyint,integer):boolean not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$BETWEEN($operator$CAST(null), 2, 4): $operator$BETWEEN(tinyint,integer,integer):boolean not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [integer] but found [tinyint]",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestDecimalCasts",
      "failingMethods": [
        "com.facebook.presto.type.TestDecimalCasts#testDecimalToIntegerCasts"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "type of symbol \u0027expr\u0027 is expected to be integer, but the actual type is tinyint",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestDecimalOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestDecimalOperators#testCoalesce",
        "com.facebook.presto.type.TestDecimalOperators#testIsDistinctFrom",
        "com.facebook.presto.type.TestDecimalOperators#testModulus"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [decimal(13,3)] but found [decimal(6,3)]",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$IS_DISTINCT_FROM($operator$CAST(null), 37): $operator$IS_DISTINCT_FROM(tinyint,integer):boolean not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$MODULUS(70000000000000000, $operator$CAST($operator$NEGATION(3))): $operator$NEGATION(integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestTryFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestTryFunction#testExceptions",
        "com.facebook.presto.operator.scalar.TestTryFunction#testBasic"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$internal$try(function(integer)):tinyint not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$DIVIDE(integer,integer):tinyint not found",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestRowOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestRowOperators#testRowToJson",
        "com.facebook.presto.type.TestRowOperators#testFieldAccessor",
        "com.facebook.presto.type.TestRowOperators#testIsDistinctFrom",
        "com.facebook.presto.type.TestRowOperators#testRowComparison"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling DEREFERENCE($operator$CAST(ROW_CONSTRUCTOR(false, ARRAY_CONSTRUCTOR(1, 2), map(ARRAY_CONSTRUCTOR(1, 3), ARRAY_CONSTRUCTOR(2.0, 4.0)))), 1): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$IS_DISTINCT_FROM(ROW_CONSTRUCTOR(1, ARRAY_CONSTRUCTOR(1)), ROW_CONSTRUCTOR(1, ARRAY_CONSTRUCTOR(1))): ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$CAST(ROW_CONSTRUCTOR(ARRAY_CONSTRUCTOR(1, 2), ARRAY_CONSTRUCTOR(3, $operator$CAST(null)), ARRAY_CONSTRUCTOR(), ARRAY_CONSTRUCTOR(null, null), $operator$CAST(null))): ARRAY_CONSTRUCTOR(integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error compiling $operator$EQUAL(ROW_CONSTRUCTOR(true, ARRAY_CONSTRUCTOR(1), map(ARRAY_CONSTRUCTOR(1, 3), ARRAY_CONSTRUCTOR(2.0, 4.0))), ROW_CONSTRUCTOR(true, ARRAY_CONSTRUCTOR(1, 2), map(ARRAY_CONSTRUCTOR(1, 3), ARRAY_CONSTRUCTOR(2.0, 4.0)))): ARRAY_CONSTRUCTOR(integer):array(tinyint) not found",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.query.TestLegacyJoinUsing",
      "failingMethods": [
        "com.facebook.presto.sql.query.TestLegacyJoinUsing#test"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Types mismatch for query: \n SELECT * FROM (VALUES (1, \u0027a\u0027)) t(k, v1) LEFT JOIN (VALUES (2, \u0027b\u0027)) u(k, v2) USING (k)\n:: Lists differ at element [2]: integer !\u003d tinyint expected [integer] but found [tinyint]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestArrayFilterFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestArrayFilterFunction#testNull",
        "com.facebook.presto.operator.scalar.TestArrayFilterFunction#testBasic",
        "com.facebook.presto.operator.scalar.TestArrayFilterFunction#testTypeCombinations"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$EQUAL(tinyint,integer):boolean not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$EQUAL(tinyint,integer):boolean not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "$operator$EQUAL(tinyint,integer):boolean not found",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestArrayExceptFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestArrayExceptFunction#testDuplicates",
        "com.facebook.presto.operator.scalar.TestArrayExceptFunction#testEmpty",
        "com.facebook.presto.operator.scalar.TestArrayExceptFunction#testBasic"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [array(integer)] but found [array(tinyint)]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.operator.scalar.TestMapTransformKeyFunction",
      "failingMethods": [
        "com.facebook.presto.operator.scalar.TestMapTransformKeyFunction#testDuplicateKeys",
        "com.facebook.presto.operator.scalar.TestMapTransformKeyFunction#testRetainedSizeBounded",
        "com.facebook.presto.operator.scalar.TestMapTransformKeyFunction#testBasic",
        "com.facebook.presto.operator.scalar.TestMapTransformKeyFunction#testEmpty",
        "com.facebook.presto.operator.scalar.TestMapTransformKeyFunction#testNullKey",
        "com.facebook.presto.operator.scalar.TestMapTransformKeyFunction#testTypeCombinations"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,integer)] but found [map(tinyint,tinyint)]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [INVALID_FUNCTION_ARGUMENT:7] but found [FUNCTION_IMPLEMENTATION_MISSING:65546]",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "transform_keys(map(unknown,unknown),function(unknown,unknown,integer)):map(tinyint,unknown) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [INVALID_FUNCTION_ARGUMENT:7] but found [FUNCTION_IMPLEMENTATION_MISSING:65546]",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "ARRAY_CONSTRUCTOR(integer,integer,integer,integer):array(tinyint) not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [map(integer,integer)] but found [map(tinyint,tinyint)]",
          "isError": false
        }
      ],
      "nbFailures": 6,
      "nbErrors": 0
    }
  ]
}