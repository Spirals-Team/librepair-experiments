{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 7,
  "repo": "INRIA/spoon",
  "metrics": {
    "NbFailingTests": 9,
    "NbErroringTests": 7,
    "NbSkippingTests": 4,
    "NbRunningTests": 1440,
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/8fd897e20dcd52ac91fd1409daedbc72dc33dee0",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbFileApp": 0,
    "NbFileTests": 664,
    "NbCPU": 32,
    "FreeMemory": 682483024,
    "TotalMemory": 6096420864,
    "AngelicValuesByTest": {
      "spoon/test/lambda/LambdaTest": 0,
      "spoon/test/refactoring/MethodsRefactoringTest": 0,
      "spoon/MavenLauncherTest": 0,
      "spoon/test/interfaces/InterfaceTest": 0,
      "spoon/test/imports/ImportTest": 0,
      "spoon/test/main/MainTest": 0,
      "spoon/test/reference/TypeReferenceTest": 0,
      "spoon/test/reference/ExecutableReferenceTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 497535536,
      "ComputeClasspath": 563349440,
      "ComputeTestDir": 563349440,
      "BuildProject": 483481488,
      "InitRepoToPush": 566242424,
      "ComputeSourceDir": 563349440,
      "AstorJMut": 742996992,
      "CloneRepository": 607398648,
      "CheckoutPatchedBuild": 682483024,
      "Nopol": 1084667408,
      "NPEFix": 1083642328,
      "TestProject": 472925936,
      "GatherTestInformation": 451260224,
      "CommitPatch": 682483024
    },
    "NbSucceedingTests": 1424,
    "ReproductionDate": "Jun 3, 2018 11:10:14 PM",
    "BuggyBuildId": 387511079,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/387511079",
    "BuggyBuildDate": "Jun 3, 2018 11:09:51 PM",
    "BugCommit": "8fd897e20dcd52ac91fd1409daedbc72dc33dee0",
    "NbLibraries": 14,
    "FailureNames": [
      "spoon.SpoonException",
      "java.lang.AssertionError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 3,
      "ComputeClasspath": 5,
      "ComputeTestDir": 0,
      "BuildProject": 42,
      "InitRepoToPush": 4,
      "ComputeSourceDir": 0,
      "AstorJMut": 14,
      "CloneRepository": 6,
      "CheckoutPatchedBuild": 0,
      "Nopol": 136,
      "NPEFix": 0,
      "TestProject": 414,
      "GatherTestInformation": 0,
      "CommitPatch": 3
    }
  },
  "failingModule": "/root/workspace/INRIA/spoon/387511079",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 9,
  "error-types": [
    "spoon.SpoonException",
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 1440,
  "failing-test-cases": [
    {
      "className": "spoon.test.reference.ExecutableReferenceTest",
      "failingMethods": [
        "testSpecifyGetAllExecutablesMethod"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c13\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAllMethodsSameSignatureFunction",
        "testExecutableReferenceFilter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But spoon.test.refactoring.parameter.testclasses.IFaceB has at least two: getClass() and wait(long,int)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But spoon.test.refactoring.parameter.testclasses.IFaceB has at least two: getClass() and wait(long,int)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.Bar$SingleOnSubscribe has at least two: getClass() and wait(long,int)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [
        "testSuperInheritanceHierarchyFunctionNoClasspath"
      ],
      "erroringMethods": [
        "testSortingOfImports"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The lambda can be based on interface, which has only one method. But java.util.function.Consumer has at least two: getClass() and wait(long,int)",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c2\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.interfaces.InterfaceTest",
      "failingMethods": [
        "testRedefinesDefaultMethodInSubInterface",
        "testExtendsDefaultMethodInSubInterface",
        "testExtendsStaticMethodInSubInterface",
        "testRedefinesStaticMethodInSubInterface"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Sub interface must have 6+12(from java.lang.Object) methods in its interface and its super interfaces expected:\u003c6\u003e but was:\u003c18\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Sub interface must have 6 methods in its interface and its super interfaces expected:\u003c6\u003e but was:\u003c18\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Sub interface must have 6 methods in its interface and its super interfaces expected:\u003c6\u003e but was:\u003c18\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Sub interface must have 6 methods in its interface and its super interfaces expected:\u003c6\u003e but was:\u003c18\u003e",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.lambda.LambdaTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetOverriddenMethodWithFunction",
        "testLambdaMethod",
        "testCompileLambdaGeneratedBySpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.LambdaRxJava$NbpOperator has at least two: getClass() and wait(long,int)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But java.util.function.Consumer has at least two: getClass() and wait(long,int)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.Bar$SingleOnSubscribe has at least two: getClass() and wait(long,int)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [
        "testGetAllExecutablesForInterfaces"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c14\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}