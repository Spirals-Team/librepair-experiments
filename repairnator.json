{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "failingModule": "/root/workspace/prestodb/presto/311642597/presto-main",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 3,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 4172,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.sql.planner.TestLogicalPlanner",
      "failingMethods": [
        "com.facebook.presto.sql.planner.TestLogicalPlanner#testLeftConvertedToInnerInequalityJoinNoEquiJoinConjuncts",
        "com.facebook.presto.sql.planner.TestLogicalPlanner#testDistinctLimitOverInequalityJoin",
        "com.facebook.presto.sql.planner.TestLogicalPlanner#testInnerInequalityJoinNoEquiJoinConjuncts"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(DistinctLimitNode)\n        - anyTree\n            - node(FilterNode)\n                FilterMatcher{predicate\u003d(\"O_ORDERKEY\" \u003c \"L_ORDERKEY\")}\n                - node(JoinNode)\n                    JoinMatcher{equiCriteria\u003d[]}\n                    StrictSymbolsMatcher{exact outputs\u003d[O_ORDERKEY, L_ORDERKEY]}\n                    - node(TableScanNode)\n                        TableScanMatcher{expectedTableName\u003dorders}\n                        bind O_ORDERKEY -\u003e Column orders:orderkey\n                    - node\n                        - node(TableScanNode)\n                            TableScanMatcher{expectedTableName\u003dlineitem}\n                            bind L_ORDERKEY -\u003e Column lineitem:orderkey\n\n] but found [\n\n- Output[orderkey] \u003d\u003e [orderkey:bigint]\n    - Project[] \u003d\u003e [orderkey:bigint]\n        - DistinctLimit[1][$hashvalue] \u003d\u003e [orderkey:bigint, $hashvalue:bigint]\n            - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, $hashvalue:bigint\n                    Cost: {rows: 120350, bytes: ?}\n                - Project[] \u003d\u003e [orderkey:bigint, $hashvalue_8:bigint]\n                        Cost: {rows: 120350, bytes: ?}\n                        $hashvalue_8 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                    - InnerJoin[(\"orderkey\" \u003c \"orderkey_0\")] \u003d\u003e [orderkey:bigint]\n                            SortExpression[\"orderkey_0\"]\n                            Cost: {rows: 120350, bytes: ?}\n                        - TableScan[local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint]\n                                Cost: {rows: 15000, bytes: ?}\n                                orderkey :\u003d tpch:orderkey\n                        - LocalExchange[SINGLE] () \u003d\u003e orderkey_0:bigint\n                                Cost: {rows: 60175, bytes: ?}\n                            - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey_0:bigint]\n                                    Cost: {rows: 60175, bytes: ?}\n                                    orderkey_0 :\u003d tpch:orderkey\n\n] which resolves to [\n\n- Output[orderkey] \u003d\u003e [orderkey:bigint]\n    - Project[] \u003d\u003e [orderkey:bigint]\n        - DistinctLimit[1][$hashvalue] \u003d\u003e [orderkey:bigint, $hashvalue:bigint]\n            - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, $hashvalue:bigint\n                    Cost: {rows: 120350, bytes: ?}\n                - Project[] \u003d\u003e [orderkey:bigint, $hashvalue_8:bigint]\n                        Cost: {rows: 120350, bytes: ?}\n                        $hashvalue_8 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                    - InnerJoin[(\"orderkey\" \u003c \"orderkey_0\")] \u003d\u003e [orderkey:bigint]\n                            SortExpression[\"orderkey_0\"]\n                            Cost: {rows: 120350, bytes: ?}\n                        - TableScan[local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint]\n                                Cost: {rows: 15000, bytes: ?}\n                                orderkey :\u003d tpch:orderkey\n                        - LocalExchange[SINGLE] () \u003d\u003e orderkey_0:bigint\n                                Cost: {rows: 60175, bytes: ?}\n                            - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey_0:bigint]\n                                    Cost: {rows: 60175, bytes: ?}\n                                    orderkey_0 :\u003d tpch:orderkey\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(FilterNode)\n        FilterMatcher{predicate\u003d(\"O_ORDERKEY\" \u003c \"L_ORDERKEY\")}\n        - node(JoinNode)\n            JoinMatcher{equiCriteria\u003d[]}\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dorders}\n                bind O_ORDERKEY -\u003e Column orders:orderkey\n            - node\n                - node(TableScanNode)\n                    TableScanMatcher{expectedTableName\u003dlineitem}\n                    bind L_ORDERKEY -\u003e Column lineitem:orderkey\n\n] but found [\n\n- Output[_col0] \u003d\u003e [expr_4:integer]\n        Cost: {rows: 120350, bytes: ?}\n        _col0 :\u003d expr_4\n    - Project[] \u003d\u003e [expr_4:integer]\n            Cost: {rows: 120350, bytes: ?}\n            expr_4 :\u003d 1\n        - InnerJoin[(\"orderkey\" \u003c \"orderkey_0\")] \u003d\u003e []\n                SortExpression[\"orderkey_0\"]\n                Cost: {rows: 120350, bytes: ?}\n            - TableScan[local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint]\n                    Cost: {rows: 15000, bytes: ?}\n                    orderkey :\u003d tpch:orderkey\n            - LocalExchange[SINGLE] () \u003d\u003e orderkey_0:bigint\n                    Cost: {rows: 60175, bytes: ?}\n                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey_0:bigint]\n                        Cost: {rows: 60175, bytes: ?}\n                        orderkey_0 :\u003d tpch:orderkey\n\n] which resolves to [\n\n- Output[_col0] \u003d\u003e [expr_4:integer]\n        Cost: {rows: 120350, bytes: ?}\n        _col0 :\u003d expr_4\n    - Project[] \u003d\u003e [expr_4:integer]\n            Cost: {rows: 120350, bytes: ?}\n            expr_4 :\u003d 1\n        - InnerJoin[(\"orderkey\" \u003c \"orderkey_0\")] \u003d\u003e []\n                SortExpression[\"orderkey_0\"]\n                Cost: {rows: 120350, bytes: ?}\n            - TableScan[local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint]\n                    Cost: {rows: 15000, bytes: ?}\n                    orderkey :\u003d tpch:orderkey\n            - LocalExchange[SINGLE] () \u003d\u003e orderkey_0:bigint\n                    Cost: {rows: 60175, bytes: ?}\n                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey_0:bigint]\n                        Cost: {rows: 60175, bytes: ?}\n                        orderkey_0 :\u003d tpch:orderkey\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(FilterNode)\n        FilterMatcher{predicate\u003d(\"O_ORDERKEY\" \u003c \"L_ORDERKEY\")}\n        - node(JoinNode)\n            JoinMatcher{equiCriteria\u003d[]}\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dorders}\n                bind O_ORDERKEY -\u003e Column orders:orderkey\n            - node\n                - node(FilterNode)\n                    FilterMatcher{predicate\u003d(NOT (\"L_ORDERKEY\" IS NULL))}\n                    - node(TableScanNode)\n                        TableScanMatcher{expectedTableName\u003dlineitem}\n                        bind L_ORDERKEY -\u003e Column lineitem:orderkey\n\n] but found [\n\n- Output[_col0] \u003d\u003e [expr:integer]\n        Cost: {rows: 60175, bytes: ?}\n        _col0 :\u003d expr\n    - Project[] \u003d\u003e [expr:integer]\n            Cost: {rows: 60175, bytes: ?}\n            expr :\u003d 1\n        - InnerJoin[(\"orderkey\" \u003c \"orderkey_0\")] \u003d\u003e []\n                SortExpression[\"orderkey_0\"]\n                Cost: {rows: 60175, bytes: ?}\n            - TableScan[local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint]\n                    Cost: {rows: 15000, bytes: ?}\n                    orderkey :\u003d tpch:orderkey\n            - LocalExchange[SINGLE] () \u003d\u003e orderkey_0:bigint\n                    Cost: {rows: 30087, bytes: ?}\n                - ScanFilter[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d (NOT (\"orderkey_0\" IS NULL)), filterPredicate \u003d (NOT (\"orderkey_0\" IS NULL))] \u003d\u003e [orderkey_0:bigint]\n                        Cost: {rows: 60175, bytes: ?}/{rows: 30087, bytes: ?}\n                        orderkey_0 :\u003d tpch:orderkey\n\n] which resolves to [\n\n- Output[_col0] \u003d\u003e [expr:integer]\n        Cost: {rows: 60175, bytes: ?}\n        _col0 :\u003d expr\n    - Project[] \u003d\u003e [expr:integer]\n            Cost: {rows: 60175, bytes: ?}\n            expr :\u003d 1\n        - InnerJoin[(\"orderkey\" \u003c \"orderkey_0\")] \u003d\u003e []\n                SortExpression[\"orderkey_0\"]\n                Cost: {rows: 60175, bytes: ?}\n            - TableScan[local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint]\n                    Cost: {rows: 15000, bytes: ?}\n                    orderkey :\u003d tpch:orderkey\n            - LocalExchange[SINGLE] () \u003d\u003e orderkey_0:bigint\n                    Cost: {rows: 30087, bytes: ?}\n                - ScanFilter[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d (NOT (\"orderkey_0\" IS NULL)), filterPredicate \u003d (NOT (\"orderkey_0\" IS NULL))] \u003d\u003e [orderkey_0:bigint]\n                        Cost: {rows: 60175, bytes: ?}/{rows: 30087, bytes: ?}\n                        orderkey_0 :\u003d tpch:orderkey\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    }
  ]
}