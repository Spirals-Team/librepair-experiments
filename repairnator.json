{
  "bugType": "only_fail",
  "hostname": "spirals-repairnator",
  "repo": "INRIA/spoon",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError",
      "org.junit.ComparisonFailure"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 4,
      "ComputeClasspath": 23,
      "ComputeTestDir": 1,
      "BuildProject": 100,
      "InitRepoToPush": 18,
      "ComputeSourceDir": 1,
      "ComputeModules": 0,
      "AstorJMut": 43,
      "CloneRepository": 14,
      "CheckoutPatchedBuild": 0,
      "NopolAllTests": 92,
      "NPEFix": 0,
      "TestProject": 998,
      "GatherTestInformation": 3,
      "CommitPatch": 25
    },
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/298dc144bb9e08bbcb290ff5d36e7cd6db4206fc",
    "NbFailingTests": 3,
    "NbErroringTests": 0,
    "NbSkippingTests": 4,
    "NbRunningTests": 1534,
    "ReproductionDate": "Aug 3, 2018 12:14:21 AM",
    "BuggyBuildId": 411470587,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/411470587",
    "BuggyBuildDate": "Aug 3, 2018 12:05:31 AM",
    "BugCommit": "298dc144bb9e08bbcb290ff5d36e7cd6db4206fc",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 30,
    "NbFileApp": 615,
    "NbFileTests": 692,
    "NbCPU": 4,
    "FreeMemory": 698808192,
    "TotalMemory": 1423441920,
    "AngelicValuesByTest": {
      "spoon/MavenLauncherTest:spoon/processing/CtGenerationTest:": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 183002128,
      "ComputeClasspath": 185236888,
      "ComputeTestDir": 178167736,
      "BuildProject": 173313888,
      "InitRepoToPush": 187533464,
      "ComputeSourceDir": 695765168,
      "ComputeModules": 695765168,
      "AstorJMut": 786308080,
      "CloneRepository": 93724536,
      "CheckoutPatchedBuild": 698808192,
      "NopolAllTests": 283286304,
      "NPEFix": 283286304,
      "TestProject": 157887256,
      "GatherTestInformation": 130967992,
      "CommitPatch": 698808192
    },
    "NbSucceedingTests": 1531
  },
  "failing-test-cases": [
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [
        "testGenerateCloneVisitor"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "CloneBuilder different expected:\u003c...isitorGenerator\n    [@java.lang.Override\n    public \u003cT\u003e void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e e) {\n        ((spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e) (other)).setValue(e.getValue());\n        super.visitCtCodeSnippetExpression(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement e) {\n        ((spoon.reflect.code.CtCodeSnippetStatement) (other)).setValue(e.getValue());\n        super.visitCtCodeSnippetStatement(e);\n    }\n\n    /**\n     * Scans an abstract element.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void scanCtElement(spoon.reflect.declaration.CtElement e) {\n        ((spoon.reflect.declaration.CtElement) (other)).setPosition(e.getPosition());\n        ((spoon.reflect.declaration.CtElement) (other)).setAllMetadata(e.getAllMetadata());\n        ((spoon.reflect.declaration.CtElement) (other)).setImplicit(e.isImplicit());\n        super.scanCtElement(e);\n    }\n\n    /**\n     * Scans an abstract named element.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void scanCtNamedElement(spoon.reflect.declaration.CtNamedElement e) {\n        ((spoon.reflect.declaration.CtNamedElement) (other)).setSimpleName(e.getSimpleName());\n        super.scanCtNamedElement(e);\n    }\n\n    /**\n     * Scans an abstract reference.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void scanCtReference(spoon.reflect.reference.CtReference reference) {\n        ((spoon.reflect.reference.CtReference) (other)).setSimpleName(reference.getSimpleName());\n        super.scanCtReference(reference);\n    }\n\n    /**\n     * Scans an abstract statement.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void scanCtStatement(spoon.reflect.code.CtStatement s) {\n        ((spoon.reflect.code.CtStatement) (other)).setLabel(s.getLabel());\n        super.scanCtStatement(s);\n    }\n\n    /**\n     * Scans an abstract type.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void scanCtType(spoon.reflect.declaration.CtType\u003cT\u003e type) {\n        ((spoon.reflect.declaration.CtType\u003cT\u003e) (other)).setModifiers(type.getModifiers());\n        ((spoon.reflect.declaration.CtType\u003cT\u003e) (other)).setShadow(type.isShadow());\n        super.scanCtType(type);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e e) {\n        ((spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e) (other)).setKind(e.getKind());\n        super.visitCtOperatorAssignment(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation\u003cA\u003e e) {\n        ((spoon.reflect.declaration.CtAnnotation\u003cA\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtAnnotation(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e) {\n        ((spoon.reflect.declaration.CtAnonymousExecutable) (other)).setModifiers(e.getModifiers());\n        super.visitCtAnonymousExecutable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator\u003cT\u003e e) {\n        ((spoon.reflect.code.CtBinaryOperator\u003cT\u003e) (other)).setKind(e.getKind());\n        super.visitCtBinaryOperator(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtBreak(spoon.reflect.code.CtBreak e) {\n        ((spoon.reflect.code.CtBreak) (other)).setTargetLabel(e.getTargetLabel());\n        super.visitCtBreak(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructor(spoon.reflect.declaration.CtConstructor\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtConstructor(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtContinue(spoon.reflect.code.CtContinue e) {\n        ((spoon.reflect.code.CtContinue) (other)).setTargetLabel(e.getTargetLabel());\n        super.visitCtContinue(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtExecutableReference\u003cT\u003e) (other)).setStatic(e.isStatic());\n        super.visitCtExecutableReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtField(spoon.reflect.declaration.CtField\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtField\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtField\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtField(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldReference(spoon.reflect.reference.CtFieldReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtFieldReference\u003cT\u003e) (other)).setFinal(e.isFinal());\n        ((spoon.reflect.reference.CtFieldReference\u003cT\u003e) (other)).setStatic(e.isStatic());\n        super.visitCtFieldReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInvocation(spoon.reflect.code.CtInvocation\u003cT\u003e e) {\n        ((spoon.reflect.code.CtInvocation\u003cT\u003e) (other)).setLabel(e.getLabel());\n        super.visitCtInvocation(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLiteral(spoon.reflect.code.CtLiteral\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLiteral\u003cT\u003e) (other)).setValue(e.getValue());\n        super.visitCtLiteral(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setInferred(e.isInferred());\n        super.visitCtLocalVariable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable\u003cT\u003e e) {\n        ((spoon.reflect.code.CtCatchVariable\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        ((spoon.reflect.code.CtCatchVariable\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        super.visitCtCatchVariable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtMethod(spoon.reflect.declaration.CtMethod\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setDefaultMethod(e.isDefaultMethod());\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtMethod(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall\u003cT\u003e e) {\n        ((spoon.reflect.code.CtConstructorCall\u003cT\u003e) (other)).setLabel(e.getLabel());\n        super.visitCtConstructorCall(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLambda(spoon.reflect.code.CtLambda\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLambda\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        super.visitCtLambda(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignement(spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e assignment) {\n        ((spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e) (other)).setKind(assignment.getKind());\n        super.visitCtOperatorAssignement(assignment);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtPackage(spoon.reflect.declaration.CtPackage e) {\n        ((spoon.reflect.declaration.CtPackage) (other)).setShadow(e.isShadow());\n        super.visitCtPackage(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtParameter(spoon.reflect.declaration.CtParameter\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtParameter\u003cT\u003e) (other)).setVarArgs(e.isVarArgs());\n        ((spoon.reflect.declaration.CtParameter\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtParameter\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtParameter(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference e) {\n        ((spoon.reflect.reference.CtTypeParameterReference) (other)).setUpper(e.isUpper());\n        super.visitCtTypeParameterReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtTypeReference(spoon.reflect.reference.CtTypeReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtTypeReference\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtTypeReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override]\n    public \u003cT\u003e void...\u003e but was:\u003c...isitorGenerator\n    [public \u003cT\u003e void visitCtCodeSnippetExpression(spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e e) {\n        ((spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e) (other)).setValue(e.getValue());\n        super.visitCtCodeSnippetExpression(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtCodeSnippetStatement(spoon.reflect.code.CtCodeSnippetStatement e) {\n        ((spoon.reflect.code.CtCodeSnippetStatement) (other)).setValue(e.getValue());\n        super.visitCtCodeSnippetStatement(e);\n    }\n\n    /**\n     * Scans an abstract element.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void scanCtElement(spoon.reflect.declaration.CtElement e) {\n        ((spoon.reflect.declaration.CtElement) (other)).setPosition(e.getPosition());\n        ((spoon.reflect.declaration.CtElement) (other)).setAllMetadata(e.getAllMetadata());\n        ((spoon.reflect.declaration.CtElement) (other)).setImplicit(e.isImplicit());\n        super.scanCtElement(e);\n    }\n\n    /**\n     * Scans an abstract named element.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void scanCtNamedElement(spoon.reflect.declaration.CtNamedElement e) {\n        ((spoon.reflect.declaration.CtNamedElement) (other)).setSimpleName(e.getSimpleName());\n        super.scanCtNamedElement(e);\n    }\n\n    /**\n     * Scans an abstract reference.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void scanCtReference(spoon.reflect.reference.CtReference reference) {\n        ((spoon.reflect.reference.CtReference) (other)).setSimpleName(reference.getSimpleName());\n        super.scanCtReference(reference);\n    }\n\n    /**\n     * Scans an abstract statement.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void scanCtStatement(spoon.reflect.code.CtStatement s) {\n        ((spoon.reflect.code.CtStatement) (other)).setLabel(s.getLabel());\n        super.scanCtStatement(s);\n    }\n\n    /**\n     * Scans an abstract type.\n     */\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void scanCtType(spoon.reflect.declaration.CtType\u003cT\u003e type) {\n        ((spoon.reflect.declaration.CtType\u003cT\u003e) (other)).setModifiers(type.getModifiers());\n        ((spoon.reflect.declaration.CtType\u003cT\u003e) (other)).setShadow(type.isShadow());\n        super.scanCtType(type);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e e) {\n        ((spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e) (other)).setKind(e.getKind());\n        super.visitCtOperatorAssignment(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotation(spoon.reflect.declaration.CtAnnotation\u003cA\u003e e) {\n        ((spoon.reflect.declaration.CtAnnotation\u003cA\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtAnnotation(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e) {\n        ((spoon.reflect.declaration.CtAnonymousExecutable) (other)).setModifiers(e.getModifiers());\n        super.visitCtAnonymousExecutable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator\u003cT\u003e e) {\n        ((spoon.reflect.code.CtBinaryOperator\u003cT\u003e) (other)).setKind(e.getKind());\n        super.visitCtBinaryOperator(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtBreak(spoon.reflect.code.CtBreak e) {\n        ((spoon.reflect.code.CtBreak) (other)).setTargetLabel(e.getTargetLabel());\n        super.visitCtBreak(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtConstructor(spoon.reflect.declaration.CtConstructor\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtConstructor(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtContinue(spoon.reflect.code.CtContinue e) {\n        ((spoon.reflect.code.CtContinue) (other)).setTargetLabel(e.getTargetLabel());\n        super.visitCtContinue(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtExecutableReference(spoon.reflect.reference.CtExecutableReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtExecutableReference\u003cT\u003e) (other)).setStatic(e.isStatic());\n        super.visitCtExecutableReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtField(spoon.reflect.declaration.CtField\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtField\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtField\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtField(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtFieldReference(spoon.reflect.reference.CtFieldReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtFieldReference\u003cT\u003e) (other)).setFinal(e.isFinal());\n        ((spoon.reflect.reference.CtFieldReference\u003cT\u003e) (other)).setStatic(e.isStatic());\n        super.visitCtFieldReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtInvocation(spoon.reflect.code.CtInvocation\u003cT\u003e e) {\n        ((spoon.reflect.code.CtInvocation\u003cT\u003e) (other)).setLabel(e.getLabel());\n        super.visitCtInvocation(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtLiteral(spoon.reflect.code.CtLiteral\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLiteral\u003cT\u003e) (other)).setValue(e.getValue());\n        super.visitCtLiteral(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtLocalVariable(spoon.reflect.code.CtLocalVariable\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.code.CtLocalVariable\u003cT\u003e) (other)).setInferred(e.isInferred());\n        super.visitCtLocalVariable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtCatchVariable(spoon.reflect.code.CtCatchVariable\u003cT\u003e e) {\n        ((spoon.reflect.code.CtCatchVariable\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        ((spoon.reflect.code.CtCatchVariable\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        super.visitCtCatchVariable(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtMethod(spoon.reflect.declaration.CtMethod\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setDefaultMethod(e.isDefaultMethod());\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtMethod\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtMethod(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructorCall(spoon.reflect.code.CtConstructorCall\u003cT\u003e e) {\n        ((spoon.reflect.code.CtConstructorCall\u003cT\u003e) (other)).setLabel(e.getLabel());\n        super.visitCtConstructorCall(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLambda(spoon.reflect.code.CtLambda\u003cT\u003e e) {\n        ((spoon.reflect.code.CtLambda\u003cT\u003e) (other)).setSimpleName(e.getSimpleName());\n        super.visitCtLambda(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignement(spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e assignment) {\n        ((spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e) (other)).setKind(assignment.getKind());\n        super.visitCtOperatorAssignement(assignment);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtPackage(spoon.reflect.declaration.CtPackage e) {\n        ((spoon.reflect.declaration.CtPackage) (other)).setShadow(e.isShadow());\n        super.visitCtPackage(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtParameter(spoon.reflect.declaration.CtParameter\u003cT\u003e e) {\n        ((spoon.reflect.declaration.CtParameter\u003cT\u003e) (other)).setVarArgs(e.isVarArgs());\n        ((spoon.reflect.declaration.CtParameter\u003cT\u003e) (other)).setModifiers(e.getModifiers());\n        ((spoon.reflect.declaration.CtParameter\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtParameter(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtTypeParameterReference(spoon.reflect.reference.CtTypeParameterReference e) {\n        ((spoon.reflect.reference.CtTypeParameterReference) (other)).setUpper(e.isUpper());\n        super.visitCtTypeParameterReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtTypeReference(spoon.reflect.reference.CtTypeReference\u003cT\u003e e) {\n        ((spoon.reflect.reference.CtTypeReference\u003cT\u003e) (other)).setShadow(e.isShadow());\n        super.visitCtTypeReference(e);\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator]\n    public \u003cT\u003e void...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ],
  "failingModule": "/root/workspace/INRIA/spoon/411470587"
}