{
  "totalNumberSkippingTests": 8,
  "bugType": "only_fail",
  "totalNumberErroringTests": 5,
  "repo": "jdereg/n-cube",
  "bugCommit": "https://github.com/jdereg/n-cube/compare/13fd8372e302...bab6acbb375d",
  "failingModule": "/root/workspace/jdereg/n-cube/372064396",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 16,
  "error-types": [
    "java.lang.IllegalStateException",
    "org.codehaus.groovy.runtime.powerassert.PowerAssertionError",
    "java.lang.AssertionError",
    "java.lang.NullPointerException"
  ],
  "totalNumberRunningTests": 1269,
  "failing-test-cases": [
    {
      "className": "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching",
      "failingMethods": [
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testOfflineReadOfInvalidSnapshot",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadWriteNonChangingReleaseWithUpdate",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadWriteChangingToMissingSnapshotWithForce",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testWriteMissingReleaseWithReleaseOnly",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadOfInvalidSnapshotWithUpdate",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testWriteValidReleaseWithReleaseOnly",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testWriteWithException",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadWriteNonChangingReleaseWithForce",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadWriteChangingSnapshotWithForce",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadWriteMissingToValidSnapshotWithForce",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadWriteNonChangingSnapshotWithForce",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadWriteNonChangingSnapshotWithUpdate",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testReadWriteChangingSnapshotWithUpdate"
      ],
      "erroringMethods": [
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testOfflineReadEmptySnapshot",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testOfflineReadValidRelease",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testOfflineReadValidSnapshot",
        "com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching#testOfflineReadEmptyRelease"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/snapshot/test/TestBranch.sha1 should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/release/head/TestMissing.json should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/snapshot/test/TestBranch.sha1 should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to find cube: TestBranch in offline cache",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to find cube: TestBranch in offline cache",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/release/head/TestBranch.json should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to find cube: TestEmpty in offline cache",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/release/head/TestBranch.json should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/snapshot/test/TestBranch.sha1 should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/release/head/TestBranch.json should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/snapshot/test/TestBranch.sha1 should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to find cube: TestEmpty in offline cache",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/snapshot/test/TestBranch.sha1 should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/snapshot/test/TestBranch.sha1 should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: exception with message a string containing \"Failed to load cube: TestBranch from offline cache\"\n     but: message was \"Failed to find cube: TestBranch in offline cache\"\nStacktrace was: java.lang.IllegalStateException: Failed to find cube: TestBranch in offline cache\n at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n at java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)\n at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:77)\n at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)\n at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:250)\n at com.cedarsoftware.ncube.util.LocalFileCache.get(LocalFileCache.groovy:113)\n at com.cedarsoftware.ncube.NCubeRuntime.getCubeInternal(NCubeRuntime.groovy:1276)\n at com.cedarsoftware.ncube.NCubeRuntime.getCube(NCubeRuntime.groovy:346)\n at com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching.getCubeFromRuntime(TestNCubeRuntimeFileCaching.groovy:682)\n at com.cedarsoftware.ncube.TestNCubeRuntimeFileCaching.testOfflineReadOfInvalidSnapshot(TestNCubeRuntimeFileCaching.groovy:648)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n at java.lang.reflect.Method.invoke(Method.java:498)\n at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)\n at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)\n at org.junit.rules.ExpectedException$ExpectedExceptionStatement.evaluate(ExpectedException.java:239)\n at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)\n at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)\n at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)\n at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\n at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)\n at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)\n at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)\n at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:236)\n at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)\n at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)\n at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)\n at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143)\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "file\u003dtarget/ncubeFileCacheTests/none/default_app/999.99.9/snapshot/test/TestBranch.sha1 should exist expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        }
      ],
      "nbFailures": 13,
      "nbErrors": 4
    },
    {
      "className": "com.cedarsoftware.visualizer.VisualizerTest",
      "failingMethods": [
        "com.cedarsoftware.visualizer.VisualizerTest#testLoadGraph_hasCircularRef",
        "com.cedarsoftware.visualizer.VisualizerTest#testLoadGraph_ruleCubeWithAllDefaultsAndOnlyDefaultValues",
        "com.cedarsoftware.visualizer.VisualizerTest#testLoadGraph_checkNodeAndEdgeInfo"
      ],
      "erroringMethods": [
        "com.cedarsoftware.visualizer.VisualizerTest#testLoadGraph_cubeHasTwoRefsToSameCube"
      ],
      "failures": [
        {
          "failureName": "org.codehaus.groovy.runtime.powerassert.PowerAssertionError",
          "failureDetail": "assert \u0027\u0027 \u003d\u003d edge.fromFieldName\n             |    |\n             |    :\n             [id:1, from:1, to:5, fromName:RuleCubeWithAllDefaultsAndOnlyDefaultValues, toName:CubeWithNoDefaultsAndNoValues, fromFieldName::, sourceTrail:[1], level:2, title::]",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "org.codehaus.groovy.runtime.powerassert.PowerAssertionError",
          "failureDetail": "assert \u0027CubeGAxis1: CubeGAxis1Col3, CubeGAxis2: CubeGAxis2Col2\u0027 \u003d\u003d node.fromFieldName\n                                                                   |    |\n                                                                   |    CubeGAxis1:CubeGAxis1Col3, CubeGAxis2:CubeGAxis2Col2\n                                                                   [id:2, level:2, cubeName:CubeHasCircularRef2, sourceCubeName:CubeHasCircularRef1, sourceTrail:[1], sourceId:1, sourceScope:[:], scope:[CubeGAxis1:CubeGAxis1Col3, CubeGAxis2:CubeGAxis2Col2], availableScope:[CubeGAxis1:CubeGAxis1Col3, CubeGAxis2:CubeGAxis2Col2], availableScopeValues:[:], scopeCubeNames:[:], fromFieldName:CubeGAxis1:CubeGAxis1Col3, CubeGAxis2:CubeGAxis2Col2, sourceDescription:CubeHasCircularRef1, title:CubeHasCircularRef2, group:NCUBE, showCellValuesLink:true, showCellValues:false, cubeLoaded:false, label:CubeHasCircularRef2, detailsTitle1:CubeHasCircularRef2, detailsTitle2:null, typesToAdd:[n-cube, rule cube]]",
          "isError": false
        },
        {
          "failureName": "org.codehaus.groovy.runtime.powerassert.PowerAssertionError",
          "failureDetail": "assert \u0027CubeDAxis1: CubeDAxis1Col3\u0027 \u003d\u003d node.fromFieldName\n                                       |    |\n                                       |    CubeDAxis1:CubeDAxis1Col3\n                                       [id:3, level:2, cubeName:CubeHasTwoRefsToSameCube, sourceCubeName:CubeWithRefs, sourceTrail:[1], sourceId:1, sourceScope:[:], scope:[CubeDAxis1:CubeDAxis1Col3], availableScope:[CubeDAxis1:CubeDAxis1Col3], availableScopeValues:[:], scopeCubeNames:[:], fromFieldName:CubeDAxis1:CubeDAxis1Col3, sourceDescription:CubeWithRefs, title:CubeHasTwoRefsToSameCube, group:NCUBE, showCellValuesLink:true, showCellValues:false, cubeLoaded:false, label:CubeHasTwoRefsToSameCube, detailsTitle1:CubeHasTwoRefsToSameCube, detailsTitle2:null, typesToAdd:[n-cube, rule cube]]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 1
    }
  ]
}