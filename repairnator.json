{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 795,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/361353762",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 3,
  "error-types": [
    "java.lang.IndexOutOfBoundsException",
    "spoon.SpoonException",
    "java.lang.AssertionError",
    "java.lang.NoClassDefFoundError",
    "java.lang.NullPointerException",
    "java.lang.ExceptionInInitializerError",
    "java.lang.Exception",
    "spoon.compiler.ModelBuildingException"
  ],
  "totalNumberRunningTests": 1079,
  "failing-test-cases": [
    {
      "className": "spoon.test.staticFieldAccess.StaticAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.staticFieldAccess.StaticAccessTest#testProcessAndCompile",
        "spoon.test.staticFieldAccess.StaticAccessTest#testReferences"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.modifiers.TestModifiers",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.modifiers.TestModifiers#testMethodWithVarargsDoesNotBecomeTransient",
        "spoon.test.modifiers.TestModifiers#testGetModifiersHelpers",
        "spoon.test.modifiers.TestModifiers#testCtModifiableAddRemoveReturnCtModifiable"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.field.FieldTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.field.FieldTest#testFieldImplicitTarget",
        "spoon.test.field.FieldTest#testAddFieldsAtTop"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.imports.ImportAndExtendWithPackageNameTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.imports.ImportAndExtendWithPackageNameTest#testBuildModel"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.casts.CastTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.casts.CastTest#testCast1",
        "spoon.test.casts.CastTest#testCase4",
        "spoon.test.casts.CastTest#testCast3",
        "spoon.test.casts.CastTest#testCast2",
        "spoon.test.casts.CastTest#testTypeAnnotationOnCast"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { String x\u003d(String) new Object();}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class\u003cString\u003e x\u003d(Class\u003cString\u003e) new Object();}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X\u003cA\u003e {void addConsumedAnnotationType(Class\u003c? extends A\u003e annotationType) {}\n        public void foo() { Class\u003c?\u003e x \u003d null; addConsumedAnnotationType((Class\u003cA\u003e) x);}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.template.TemplateClassAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateClassAccessTest#testClassAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.model.BlockTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.model.BlockTest#testIterationStatements",
        "spoon.test.model.BlockTest#testAddEmptyBlock"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;int y\u003d0;}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.ctBlock.TestCtBlock",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctBlock.TestCtBlock#testAddStatementInCase",
        "spoon.test.ctBlock.TestCtBlock#testAddStatementInBlock",
        "spoon.test.ctBlock.TestCtBlock#testRemoveStatement"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.annotation.AnnotationValuesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationValuesTest#testValuesOnJava7Annotation",
        "spoon.test.annotation.AnnotationValuesTest#testValuesOnJava8Annotation",
        "spoon.test.annotation.AnnotationValuesTest#testAnnotationPrintAnnotation"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.constructorcallnewclass.NewClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructorcallnewclass.NewClassTest#testMoreThan9NewClass",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithObjectClass",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassInterfaceWithParameters",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassInEnumeration",
        "spoon.test.constructorcallnewclass.NewClassTest#testCtNewClassInNoClasspath",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithInterface",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithInterfaceGeneric"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.sourcePosition.SourcePositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.sourcePosition.SourcePositionTest#equalPositionsHaveSameHashcode",
        "spoon.test.sourcePosition.SourcePositionTest#testSourcePositionOfSecondPrimitiveType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.strings.StringLiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.strings.StringLiteralTest#testSnippetFullClass"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class StringValueUTF {\n         String f0 \u003d \"toto\";\n         String f1 \u003d \"\\n\";\n         char c1 \u003d \u0027\\n\u0027;\n         String f2 \u003d \"\\u20ac\";\n         char c2 \u003d \u0027\\u20ac\u0027;\n         String f3 \u003d \"€\";\n         char c3 \u003d \u0027€\u0027;\n         String f4 \u003d \"\\t\";\n         char c4 \u003d \u0027\\t\u0027;\n         String f5 \u003d \" \";\n         char c5 \u003d \u0027 \u0027;\n         String f6 \u003d \"€\\u20ac\";\n        };\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.api.APITest#testPrintNotAllSourcesWithFilter",
        "spoon.test.api.APITest#testOverrideOutputWriter",
        "spoon.test.api.APITest#testSetterInNodes",
        "spoon.test.api.APITest#testOneLinerIntro",
        "spoon.test.api.APITest#testDuplicateFilePlusFolder",
        "spoon.test.api.APITest#testPrintNotAllSourcesInCommandLine",
        "spoon.test.api.APITest#testPrintNotAllSourcesWithNames",
        "spoon.test.api.APITest#testDuplicateFolder",
        "spoon.test.api.APITest#testDuplicateEntry",
        "spoon.test.api.APITest#testBasicAPIUsage",
        "spoon.test.api.APITest#testOutputDestinationHandlerWithCUFactory"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 11
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateTest#testFieldAccessNameSubstitutionInInnerClass",
        "spoon.test.template.TemplateTest#substituteTypeAccessReference",
        "spoon.test.template.TemplateTest#substituteSubString",
        "spoon.test.template.TemplateTest#testTemplateArrayAccess",
        "spoon.test.template.TemplateTest#testTemplateInterfaces",
        "spoon.test.template.TemplateTest#createTypeFromTemplate",
        "spoon.test.template.TemplateTest#testExtensionBlock",
        "spoon.test.template.TemplateTest#testSubstituteInnerClass",
        "spoon.test.template.TemplateTest#testObjectIsNotParamTemplate",
        "spoon.test.template.TemplateTest#testTemplateWithWrongUsedStringParam",
        "spoon.test.template.TemplateTest#testCheckBoundTemplate",
        "spoon.test.template.TemplateTest#testExtensionDecoupledSubstitutionVisitor",
        "spoon.test.template.TemplateTest#testTemplateMatcherWithWholePackage",
        "spoon.test.template.TemplateTest#testTemplateMatcher",
        "spoon.test.template.TemplateTest#testTemplateC1",
        "spoon.test.template.TemplateTest#testStatementTemplateRootSubstitution",
        "spoon.test.template.TemplateTest#substituteStringLiteral",
        "spoon.test.template.TemplateTest#testTemplateInvocationSubstitution",
        "spoon.test.template.TemplateTest#testTemplateInheritance",
        "spoon.test.template.TemplateTest#testSubstitutionInsertAllNtoN",
        "spoon.test.template.TemplateTest#testFieldAccessNameSubstitution",
        "spoon.test.template.TemplateTest#testSimpleTemplate",
        "spoon.test.template.TemplateTest#testAnotherFieldAccessNameSubstitution"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 23
    },
    {
      "className": "spoon.test.condition.ConditionalTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.condition.ConditionalTest#testNoBlockInConditionAndLoop",
        "spoon.test.condition.ConditionalTest#testConditional",
        "spoon.test.condition.ConditionalTest#testBlockInConditionAndLoop",
        "spoon.test.condition.ConditionalTest#testConditionalWithAssignment"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.interfaces.TestInterfaceWithoutSetup",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.interfaces.TestInterfaceWithoutSetup#testModifierFromInterfaceFieldAndMethod",
        "spoon.test.interfaces.TestInterfaceWithoutSetup#testInterfacePrettyPrinting"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.factory.ConstructorFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.ConstructorFactoryTest#testCreate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reflect.visitor.ReferenceQueryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reflect.visitor.ReferenceQueryTest#getAllTypeReferencesInEnum"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.intercession.RemoveTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.RemoveTest#testRemoveAllStatements"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;int y\u003d0;}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.support.ResourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.support.ResourceTest#testFilteringFolder"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.query_function.VariableReferencesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.query_function.VariableReferencesTest#testPotentialVariableAccessFromStaticMethod",
        "spoon.test.query_function.VariableReferencesTest#testVariableReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testCheckModelConsistency",
        "spoon.test.query_function.VariableReferencesTest#testLocalVariableReferenceDeclarationFunction",
        "spoon.test.query_function.VariableReferencesTest#testCatchVariableReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testParameterReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testVariableScopeFunction",
        "spoon.test.query_function.VariableReferencesTest#testLocalVariableReferenceFunction"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.prettyprinter.PrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.PrinterTest#testPrinterTokenListener",
        "spoon.test.prettyprinter.PrinterTest#testPrintingOfOrphanFieldReference",
        "spoon.test.prettyprinter.PrinterTest#testFQNModeWriteFQNConstructorInCtVisitor",
        "spoon.test.prettyprinter.PrinterTest#testJDTBatchCompilerCanBeBuild",
        "spoon.test.prettyprinter.PrinterTest#testAutoimportModeDontImportUselessStatic",
        "spoon.test.prettyprinter.PrinterTest#testRuleCanBeBuild",
        "spoon.test.prettyprinter.PrinterTest#testPrettyPrinter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.change.ChangeCollectorTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.change.ChangeCollectorTest#testChangeCollector"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.visitor.CtVisitorTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtVisitorTest#testMethodsInVisitor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceGenericTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.ExecutableReferenceGenericTest#testMultiReferenceWithGenericMethodOutOfTheClass",
        "spoon.test.reference.ExecutableReferenceGenericTest#testMethodGenericWithoutReferences",
        "spoon.test.reference.ExecutableReferenceGenericTest#testOneReferenceBetweenMethodsInSameClass",
        "spoon.test.reference.ExecutableReferenceGenericTest#testOneReferenceWithGenericMethodOutOfTheClass",
        "spoon.test.reference.ExecutableReferenceGenericTest#testMultiReferenceBetweenMethodsWithGenericInSameClass",
        "spoon.test.reference.ExecutableReferenceGenericTest#testOneReferenceWithMethodNotGenericOutOfTheClass",
        "spoon.test.reference.ExecutableReferenceGenericTest#testReferencesBetweenConstructors",
        "spoon.test.reference.ExecutableReferenceGenericTest#testReferencesBetweenConstructorsInOtherClass",
        "spoon.test.reference.ExecutableReferenceGenericTest#testExecutableReferences",
        "spoon.test.reference.ExecutableReferenceGenericTest#testMethodWithoutReferences",
        "spoon.test.reference.ExecutableReferenceGenericTest#testReferencesBetweenMethods",
        "spoon.test.reference.ExecutableReferenceGenericTest#testMultiReferencesBetweenMethodsWithoutGenericInSameClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "spoon.test.template.TemplateInvocationSubstitutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateInvocationSubstitutionTest#testSubstitutionByExpression",
        "spoon.test.template.TemplateInvocationSubstitutionTest#testInvocationSubstitutionByExpression",
        "spoon.test.template.TemplateInvocationSubstitutionTest#testInvocationSubstitutionByStatement"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.targeted.TargetedExpressionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.targeted.TargetedExpressionTest#testStaticTargetsOfInv",
        "spoon.test.targeted.TargetedExpressionTest#testStaticTargetsOfFieldAccessNoClasspath",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldAccessInInnerClass",
        "spoon.test.targeted.TargetedExpressionTest#testClassDeclaredInALambda",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldAccess",
        "spoon.test.targeted.TargetedExpressionTest#testNotTargetedExpression",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldInAnonymousClass",
        "spoon.test.targeted.TargetedExpressionTest#testCastWriteWithGenerics",
        "spoon.test.targeted.TargetedExpressionTest#testTargetOfFieldAccess",
        "spoon.test.targeted.TargetedExpressionTest#testInitializeFieldAccessInNoclasspathMode",
        "spoon.test.targeted.TargetedExpressionTest#testCtThisAccess",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInv",
        "spoon.test.targeted.TargetedExpressionTest#testStaticTargetsOfInvNoClasspath",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInvInInnerClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInvInAnonymousClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfStaticFieldAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.jdtimportbuilder.ImportBuilderTest#testWithSimpleImportNoAutoimport",
        "spoon.test.jdtimportbuilder.ImportBuilderTest#testWithSimpleImport",
        "spoon.test.jdtimportbuilder.ImportBuilderTest#testInternalImportWhenNoClasspath",
        "spoon.test.jdtimportbuilder.ImportBuilderTest#testWithImportFromItf"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctClass.CtClassTest#testCloneAnonymousClassInvocationWithAutoimports",
        "spoon.test.ctClass.CtClassTest#testSpoonShouldInferImplicitPackageInNoClasspath",
        "spoon.test.ctClass.CtClassTest#testDefaultConstructorAreOk",
        "spoon.test.ctClass.CtClassTest#testCloneAnonymousClassInvocation",
        "spoon.test.ctClass.CtClassTest#testNoClasspathWithSuperClassOfAClassInAnInterface",
        "spoon.test.ctClass.CtClassTest#testParentOfTheEnclosingClassOfStaticClass",
        "spoon.test.ctClass.CtClassTest#testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "spoon.test.ctClass.CtClassTest#getConstructor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.variable.AccessFullyQualifiedFieldTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testPrivateStaticImportShouldNotBeImportedInSameClass",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNWhenUsedInLoop",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNWhenShadowedByField",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNWhenShadowedByLocalVariable",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNAndStaticImport",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testCheckAssignmentContracts",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNWhenUsedInTryCatch",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testStaticImportWithAutoImport"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.filters.FilterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.filters.FilterTest#testOverriddenMethodFromInterface",
        "spoon.test.filters.FilterTest#testInvalidQueryStep",
        "spoon.test.filters.FilterTest#testElementMapFunctionNull",
        "spoon.test.filters.FilterTest#testClassCastExceptionOnForEach",
        "spoon.test.filters.FilterTest#testQueryWithOptionalNumberOfInputs",
        "spoon.test.filters.FilterTest#testSubInheritanceHierarchyResolver",
        "spoon.test.filters.FilterTest#testQueryStepScannWithConsumer",
        "spoon.test.filters.FilterTest#testReturnOrThrowFilter",
        "spoon.test.filters.FilterTest#testEarlyTerminatingQuery",
        "spoon.test.filters.FilterTest#filteredElementsAreOfTheCorrectType",
        "spoon.test.filters.FilterTest#testgetTopDefinitions",
        "spoon.test.filters.FilterTest#unionOfTwoFilters",
        "spoon.test.filters.FilterTest#classCastExceptionIsNotThrown",
        "spoon.test.filters.FilterTest#intersectionOfTwoFilters",
        "spoon.test.filters.FilterTest#testQueryBuilderWithFilterChain",
        "spoon.test.filters.FilterTest#testLineFilter",
        "spoon.test.filters.FilterTest#testReflectionBasedTypeFilter",
        "spoon.test.filters.FilterTest#testBoundQuery",
        "spoon.test.filters.FilterTest#testOverriddenMethodsFromSubClassOfAbstractClass",
        "spoon.test.filters.FilterTest#testElementMapConsumableFunction",
        "spoon.test.filters.FilterTest#testReuseOfBaseQuery",
        "spoon.test.filters.FilterTest#testOverridingMethodFromInterface",
        "spoon.test.filters.FilterTest#testOverridingMethodFromAbstractClass",
        "spoon.test.filters.FilterTest#testQueryInQuery",
        "spoon.test.filters.FilterTest#testFilterQueryStep",
        "spoon.test.filters.FilterTest#testElementMapFunction",
        "spoon.test.filters.FilterTest#testNameFilterWithGenericType",
        "spoon.test.filters.FilterTest#testEmptyQuery",
        "spoon.test.filters.FilterTest#testOverriddenMethodFromSubClassOfInterface",
        "spoon.test.filters.FilterTest#testReuseOfQuery",
        "spoon.test.filters.FilterTest#testElementMapFunctionOtherContracts",
        "spoon.test.filters.FilterTest#testFilterChildrenWithoutFilterQueryStep",
        "spoon.test.filters.FilterTest#testFilters",
        "spoon.test.filters.FilterTest#testAnnotationFilter",
        "spoon.test.filters.FilterTest#testOverridingMethodFromSubClassOfAbstractClass",
        "spoon.test.filters.FilterTest#testCtScannerListener",
        "spoon.test.filters.FilterTest#testParentFunction",
        "spoon.test.filters.FilterTest#testFieldAccessFilter",
        "spoon.test.filters.FilterTest#testInvalidQueryStepFailurePolicyIgnore",
        "spoon.test.filters.FilterTest#testOverriddenMethodFromAbstractClass",
        "spoon.test.filters.FilterTest#testFunctionQueryStep",
        "spoon.test.filters.FilterTest#testOverridingMethodFromSubClassOfInterface",
        "spoon.test.filters.FilterTest#testInvocationFilterWithExecutableInLibrary"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 43
    },
    {
      "className": "spoon.test.template.TemplateArrayAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateArrayAccessTest#testArrayAccess",
        "spoon.test.template.TemplateArrayAccessTest#testArrayLengthAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.control.ControlTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.control.ControlTest#testModelBuildingFor",
        "spoon.test.control.ControlTest#testModelBuildingDoWhile"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.literal.LiteralTest#testCharLiteralInNoClasspath",
        "spoon.test.literal.LiteralTest#testEscapedString",
        "spoon.test.literal.LiteralTest#testBuildLiternal",
        "spoon.test.literal.LiteralTest#testLiteralInForEachWithNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.reference.AnnotationFieldReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.AnnotationFieldReferenceTest#testAnnotationFieldReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilationunit.TestCompilationUnit#testGetUnitTypeWorksWithDeclaredPackage",
        "spoon.test.compilationunit.TestCompilationUnit#testAddDeclaredTypeInCU",
        "spoon.test.compilationunit.TestCompilationUnit#testNewlyCreatedCUWouldGetAPartialPosition",
        "spoon.test.compilationunit.TestCompilationUnit#testIsoEncodingIsSupported",
        "spoon.test.compilationunit.TestCompilationUnit#testCompilationUnitDeclaredTypes"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.reflect.declaration.UnknownDeclarationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.declaration.UnknownDeclarationTest#testUnknownCalls"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.interfaces.InterfaceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.interfaces.InterfaceTest#testRedefinesDefaultMethodInSubInterface",
        "spoon.test.interfaces.InterfaceTest#testExtendsStaticMethodInSubInterface",
        "spoon.test.interfaces.InterfaceTest#testExtendsDefaultMethodInSubInterface",
        "spoon.test.interfaces.InterfaceTest#testRedefinesStaticMethodInSubInterface",
        "spoon.test.interfaces.InterfaceTest#testDefaultMethodInInterface",
        "spoon.test.interfaces.InterfaceTest#testDefaultMethodInConsumer"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.replace.ReplaceParametrizedTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.declaration.CtTypeInformationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.declaration.CtTypeInformationTest#testClassTypingContextContinueScanning",
        "spoon.reflect.declaration.CtTypeInformationTest#testGetAllMethodsWontReturnOverriddenMethod",
        "spoon.reflect.declaration.CtTypeInformationTest#testGetAllMethodsReturnsTheRightNumber",
        "spoon.reflect.declaration.CtTypeInformationTest#testGetSuperclass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.signature.SignatureTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.signature.SignatureTest#testUnboundFieldSignature",
        "spoon.test.signature.SignatureTest#testArgumentNotNullForExecutableReference",
        "spoon.test.signature.SignatureTest#testNullSignatureInUnboundVariable",
        "spoon.test.signature.SignatureTest#testBugSignature",
        "spoon.test.signature.SignatureTest#testMethodInvocationSignatureWithVariableAccess",
        "spoon.test.signature.SignatureTest#testNullSignature",
        "spoon.test.signature.SignatureTest#testMethodInvocationSignatureStaticFieldsVariables",
        "spoon.test.signature.SignatureTest#testLiteralSignature"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        Integer.toBinaryString(Integer.MAX_VALUE);\n    }\n}",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        System.out.println(\"hello\");\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public Object foo() { return null;}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.arrays.ArraysTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.arrays.ArraysTest#testCtNewArrayInnerCtNewArray",
        "spoon.test.arrays.ArraysTest#testInitializeWithNewArray",
        "spoon.test.arrays.ArraysTest#testCtNewArrayWitComments",
        "spoon.test.arrays.ArraysTest#testArrayReferences"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.enums.EnumsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.enums.EnumsTest#testModelBuildingEnum",
        "spoon.test.enums.EnumsTest#testAnnotationsOnEnum"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.reference.ElasticsearchStackoverflowTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.ElasticsearchStackoverflowTest#testStackOverflow"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.generics.GenericsTest#testWildCardonShadowClass",
        "spoon.test.generics.GenericsTest#testModelBuildingGenericConstructor",
        "spoon.test.generics.GenericsTest#testIsSameSignatureWithReferencedGenerics",
        "spoon.test.generics.GenericsTest#testInvocationGenerics",
        "spoon.test.generics.GenericsTest#testClassTypingContextMethodSignature",
        "spoon.test.generics.GenericsTest#testTypeParameterReferenceAsActualTypeArgument",
        "spoon.test.generics.GenericsTest#testGenericsInConstructorCall",
        "spoon.test.generics.GenericsTest#testClassTypingContext",
        "spoon.test.generics.GenericsTest#testClassContextOnInnerClass",
        "spoon.test.generics.GenericsTest#testGenericTypeReference",
        "spoon.test.generics.GenericsTest#testAccessToGenerics",
        "spoon.test.generics.GenericsTest#testConstructorCallGenerics",
        "spoon.test.generics.GenericsTest#testGenericWithExtendsInDeclaration",
        "spoon.test.generics.GenericsTest#testWildcard",
        "spoon.test.generics.GenericsTest#testCannotAdaptTypeOfNonTypeScope",
        "spoon.test.generics.GenericsTest#testTypeParameterDeclarer",
        "spoon.test.generics.GenericsTest#testCtTypeReference_getSuperclass",
        "spoon.test.generics.GenericsTest#testDiamondComplexGenericsRxJava",
        "spoon.test.generics.GenericsTest#testIsSameSignatureWithMethodGenerics",
        "spoon.test.generics.GenericsTest#testModelBuildingTree",
        "spoon.test.generics.GenericsTest#testBugComparableComparator",
        "spoon.test.generics.GenericsTest#testisGeneric",
        "spoon.test.generics.GenericsTest#testName",
        "spoon.test.generics.GenericsTest#testGenericsInQualifiedNameInConstructorCall",
        "spoon.test.generics.GenericsTest#testGenericMethodCallWithExtend",
        "spoon.test.generics.GenericsTest#testMethodTypingContext",
        "spoon.test.generics.GenericsTest#testIsGenericTypeEqual",
        "spoon.test.generics.GenericsTest#testGenericInField",
        "spoon.test.generics.GenericsTest#testIsGenericsMethod",
        "spoon.test.generics.GenericsTest#testMethodsWithGenericsWhoExtendsObject",
        "spoon.test.generics.GenericsTest#testModelBuildingSimilarSignatureMethods",
        "spoon.test.generics.GenericsTest#testRecursiveTypeAdapting",
        "spoon.test.generics.GenericsTest#testDiamond1",
        "spoon.test.generics.GenericsTest#testDeclarationOfTypeParameterReference",
        "spoon.test.generics.GenericsTest#testGetDeclarationOfTypeParameterReference",
        "spoon.test.generics.GenericsTest#testTypeParameterReference",
        "spoon.test.generics.GenericsTest#testDiamond2",
        "spoon.test.generics.GenericsTest#testTypeAdapted",
        "spoon.test.generics.GenericsTest#testMethodTypingContextAdaptMethod",
        "spoon.test.generics.GenericsTest#testIsSameSignatureWithGenerics",
        "spoon.test.generics.GenericsTest#testGenericsOnLocalType",
        "spoon.test.generics.GenericsTest#testBugCommonCollection",
        "spoon.test.generics.GenericsTest#testNewClassGenerics",
        "spoon.test.generics.GenericsTest#testInstanceOfMapEntryGeneric"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class Diamond {\n         java.util.List\u003cString\u003e f \u003d new java.util.ArrayList\u003c\u003e();\n        };\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 44
    },
    {
      "className": "spoon.test.model.SwitchCaseTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.model.SwitchCaseTest#testSwitchStatementOnAString",
        "spoon.test.model.SwitchCaseTest#testIterationStatements"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;switch(x) {case 0: x\u003dx+1;break;case 1: x\u003d0;default: x\u003d-1;}}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.method.MethodTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.method.MethodTest#testGetAllMethodsAdaptingType",
        "spoon.test.method.MethodTest#testGetAllMethods",
        "spoon.test.method.MethodTest#testSearchMethodWithGeneric",
        "spoon.test.method.MethodTest#testClone"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.method_overriding.MethodOverriddingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.method_overriding.MethodOverriddingTest#testMethodOverride",
        "spoon.test.method_overriding.MethodOverriddingTest#testMethodOverrideByReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.variable.AccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.variable.AccessTest#testCanVisitArrayAccessAndSubClasses",
        "spoon.test.variable.AccessTest#testAccessToStringOnPostIncrement",
        "spoon.test.variable.AccessTest#testFieldWriteDeclaredInTheSuperclass",
        "spoon.test.variable.AccessTest#testVariableAccessInNoClasspath",
        "spoon.test.variable.AccessTest#testCanVisitVariableAccessAndSubClasses",
        "spoon.test.variable.AccessTest#testStackedAssignments",
        "spoon.test.variable.AccessTest#testRHS"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Integer i \u003d 1; (i++).toString(); int k \u003d 0; k++;}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.parent.SetParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.SetParentTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class spoon.test.parent.ParentContractTest",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.constructor.ConstructorTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructor.ConstructorTest#testTransformationOnConstructorWithInsertBegin",
        "spoon.test.constructor.ConstructorTest#testTypeAnnotationWithConstructorsOnFormalType",
        "spoon.test.constructor.ConstructorTest#testConstructorCallFactory",
        "spoon.test.constructor.ConstructorTest#testTransformationOnConstructorWithInsertBefore",
        "spoon.test.constructor.ConstructorTest#callParamConstructor",
        "spoon.test.constructor.ConstructorTest#testTypeAnnotationOnExceptionDeclaredInConstructors"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.parent.ParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.ParentTest#testParentSet",
        "spoon.test.parent.ParentTest#testParentPackage",
        "spoon.test.parent.ParentTest#testParent",
        "spoon.test.parent.ParentTest#testParentOfGenericInTypeReference",
        "spoon.test.parent.ParentTest#testParentOfCtPackageReference",
        "spoon.test.parent.ParentTest#testParentOfPrimitiveReference",
        "spoon.test.parent.ParentTest#testHasParent",
        "spoon.test.parent.ParentTest#testGetParentWithFilter",
        "spoon.test.parent.ParentTest#testParentOfCtVariableReference",
        "spoon.test.parent.ParentTest#testParentOfCtExecutableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#metamodelPackageRule",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testSpecPackage",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testSrcMainJava",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testStaticClasses",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#statelessFactory",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testInterfacesAreCtScannable",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testFactorySubFactory",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testGoodTestClassNames"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.processing.CtGenerationTest#testGenerateReplacementVisitor",
        "spoon.processing.CtGenerationTest#testGenerateCloneVisitor",
        "spoon.processing.CtGenerationTest#testGenerateRoleHandler",
        "spoon.processing.CtGenerationTest#testGenerateCtBiScanner"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.testing.CtElementAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.testing.CtElementAssertTest#testEqualityBetweenACtElementAndAString",
        "spoon.testing.CtElementAssertTest#testEqualityBetweenTwoCtElementWithTheSameSignatureButNotTheSameContent",
        "spoon.testing.CtElementAssertTest#testEqualityBetweenTwoDifferentCtElement",
        "spoon.testing.CtElementAssertTest#testEqualityBetweenTwoCtElement"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.exceptions.ExceptionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.exceptions.ExceptionTest#testExceptionIfNotCompilable",
        "spoon.test.exceptions.ExceptionTest#testUnionCatchExceptionInsideLambdaInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.executable.ExecutableTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.executable.ExecutableTest#testInfoInsideAnonymousExecutable",
        "spoon.test.executable.ExecutableTest#testBlockInExecutable"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.compilationunit.GetBinaryFilesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilationunit.GetBinaryFilesTest#testSingleBinary",
        "spoon.test.compilationunit.GetBinaryFilesTest#testExistingButNotBuiltBinary",
        "spoon.test.compilationunit.GetBinaryFilesTest#testMultiClassInSingleFile",
        "spoon.test.compilationunit.GetBinaryFilesTest#testAnonymousClasses",
        "spoon.test.compilationunit.GetBinaryFilesTest#testNestedTypes"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.replace.ReplaceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.replace.ReplaceTest#testReplaceExpression",
        "spoon.test.replace.ReplaceTest#testReplaceTwoMethods",
        "spoon.test.replace.ReplaceTest#testReplaceStmtByList",
        "spoon.test.replace.ReplaceTest#testReplaceAPackageReferenceByAnotherOne",
        "spoon.test.replace.ReplaceTest#testReplaceMethod",
        "spoon.test.replace.ReplaceTest#testReplaceStmtByListStatementsAndNull",
        "spoon.test.replace.ReplaceTest#testReplaceIntegerReference",
        "spoon.test.replace.ReplaceTest#testReplaceReplace",
        "spoon.test.replace.ReplaceTest#testReplaceExecutableReferenceByAnotherOne",
        "spoon.test.replace.ReplaceTest#testReplaceStmtByListStatements",
        "spoon.test.replace.ReplaceTest#testReplaceAllTypeRefenceWithGenerics",
        "spoon.test.replace.ReplaceTest#testReplaceSet",
        "spoon.test.replace.ReplaceTest#testReplaceField",
        "spoon.test.replace.ReplaceTest#testReplaceAParameterReferenceToFieldReference",
        "spoon.test.replace.ReplaceTest#testReplaceStatement",
        "spoon.test.replace.ReplaceTest#testReplaceBlockTry",
        "spoon.test.replace.ReplaceTest#testReplaceBlock"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 17
    },
    {
      "className": "spoon.test.type.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.type.TypeTest#testIntersectionTypeOnTopLevelType",
        "spoon.test.type.TypeTest#testTypeAccessForTypeAccessInInstanceOf",
        "spoon.test.type.TypeTest#testTypeReferenceInGenericsAndCasts",
        "spoon.test.type.TypeTest#test",
        "spoon.test.type.TypeTest#testTypeAccessOnPrimitive",
        "spoon.test.type.TypeTest#testTypeAccessForDotClass",
        "spoon.test.type.TypeTest#testPolyTypBindingInTernaryExpression",
        "spoon.test.type.TypeTest#testTypeAccessOfArrayObjectInFullyQualifiedName",
        "spoon.test.type.TypeTest#testIntersectionTypeReferenceInGenericsAndCasts",
        "spoon.test.type.TypeTest#testTypeMemberOrder"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class klass\u003dnull;  boolean x\u003d (klass \u003d\u003d short.class);}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtInheritanceScannerMethodsTest#testMethodsInInheritanceScanner"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.CloneTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.ast.CloneTest#testCloneListener",
        "spoon.reflect.ast.CloneTest#testCopyMethod",
        "spoon.reflect.ast.CloneTest#testCloneCastConditional",
        "spoon.reflect.ast.CloneTest#testCloneMethodsDeclaredInAST",
        "spoon.reflect.ast.CloneTest#testCopyType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.factory.TypeFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.TypeFactoryTest#testGetClassWithDollarAndNestedClass",
        "spoon.test.factory.TypeFactoryTest#testGetClassInAnInterface"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.IntercessionTest#testSettersAreAllGood",
        "spoon.test.intercession.IntercessionTest#testInsertIfIntercession",
        "spoon.test.intercession.IntercessionTest#testEqualConstructor",
        "spoon.test.intercession.IntercessionTest#testInsertEnd",
        "spoon.test.intercession.IntercessionTest#testInsertAfter",
        "spoon.test.intercession.IntercessionTest#testInsertBegin"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public int bar() {if (1 \u003d\u003d 0)\n            return 1;\n        else\n            return 0;\n        }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0; int y\u003d0; int z\u003dx+y;}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0; String foo\u003d\"toto\";}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public X() {} };;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.fieldaccesses.FieldAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.fieldaccesses.FieldAccessTest#testTargetedAccessPosition",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessInLambda",
        "spoon.test.fieldaccesses.FieldAccessTest#testBCUBug20140402",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessDeclaredInADefaultClass",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessInAnonymousClass",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessWithoutAnyImport",
        "spoon.test.fieldaccesses.FieldAccessTest#testGetReference",
        "spoon.test.fieldaccesses.FieldAccessTest#testModelBuildingFieldAccesses",
        "spoon.test.fieldaccesses.FieldAccessTest#testBUG20160112",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessOnUnknownType",
        "spoon.test.fieldaccesses.FieldAccessTest#testTypeDeclaredInAnonymousClass",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessNoClasspath",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldWriteWithPlusEqualsOperation",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessAutoExplicit",
        "spoon.test.fieldaccesses.FieldAccessTest#testIncrementationOnAVarIsAUnaryOperator",
        "spoon.test.fieldaccesses.FieldAccessTest#testTypeOfFieldAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    },
    {
      "className": "spoon.test.delete.DeleteTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.delete.DeleteTest#testDeleteMethod",
        "spoon.test.delete.DeleteTest#testDeleteConditionInACondition",
        "spoon.test.delete.DeleteTest#testDeleteParameterOfMethod",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInConstructor",
        "spoon.test.delete.DeleteTest#testDeleteChainOfAssignment",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInMethod",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInAnonymousExecutable",
        "spoon.test.delete.DeleteTest#testDeleteAnnotationOnAClass",
        "spoon.test.delete.DeleteTest#testDeleteACaseOfASwitch",
        "spoon.test.delete.DeleteTest#testDeleteStatementInCase",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInStaticAnonymousExecutable",
        "spoon.test.delete.DeleteTest#testDeleteAClassTopLevel",
        "spoon.test.delete.DeleteTest#testDeleteBodyOfAMethod",
        "spoon.test.delete.DeleteTest#testDeleteReturn"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 14
    },
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.trycatch.TryCatchTest#testExceptionJava7",
        "spoon.test.trycatch.TryCatchTest#testTryCatchVariableGetType",
        "spoon.test.trycatch.TryCatchTest#testCatchWithExplicitFinalVariable",
        "spoon.test.trycatch.TryCatchTest#testCatchWithUnknownExceptions",
        "spoon.test.trycatch.TryCatchTest#testCatchOrder",
        "spoon.test.trycatch.TryCatchTest#testTryWithResources",
        "spoon.test.trycatch.TryCatchTest#testRethrowingExceptionsJava7",
        "spoon.test.trycatch.TryCatchTest#testTryWithOneResource",
        "spoon.test.trycatch.TryCatchTest#testMultiTryCatchWithCustomExceptions",
        "spoon.test.trycatch.TryCatchTest#testModelBuildingInitializer",
        "spoon.test.trycatch.TryCatchTest#testCompileMultiTryCatchWithCustomExceptions",
        "spoon.test.trycatch.TryCatchTest#testFullyQualifiedException"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(java.lang.RuntimeException e){}}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException | Error e){System.exit(0);}}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException e){java.lang.System.exit(0);}      catch(Exception e){}}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException e){System.exit(0);}}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "spoon.test.parent.NullParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.NullParentTest#testAssertNullExpression",
        "spoon.test.parent.NullParentTest#testIfNullBranches",
        "spoon.test.parent.NullParentTest#testFieldNullDefaultExpression",
        "spoon.test.parent.NullParentTest#testReturnNullExpression",
        "spoon.test.parent.NullParentTest#testTargetedAccessNullTarget",
        "spoon.test.parent.NullParentTest#testForLoopNullChildren",
        "spoon.test.parent.NullParentTest#testLocalVariableNullDefaultExpression",
        "spoon.test.parent.NullParentTest#testTargetedExpressionNullTarget"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "spoon.MavenLauncherTest#spoonMavenLauncherTest",
        "spoon.MavenLauncherTest#mavenLauncherTestMultiModulesAndVariables"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.imports.ImportTest#testCanAccess",
        "spoon.test.imports.ImportTest#testDeepNestedStaticPathWithTypedParameter",
        "spoon.test.imports.ImportTest#testSpoonWithImports",
        "spoon.test.imports.ImportTest#testImportOfInvocationOfPrivateClass",
        "spoon.test.imports.ImportTest#testStaticImportForInvocationInNoClasspath",
        "spoon.test.imports.ImportTest#testmportInCu",
        "spoon.test.imports.ImportTest#testJavaLangIsConsideredAsImported",
        "spoon.test.imports.ImportTest#testNestedAccessPathWithTypedParameterWithImports",
        "spoon.test.imports.ImportTest#testSortImportPutStaticImportAfterTypeImport",
        "spoon.test.imports.ImportTest#testImportStaticAndFieldAccessWithImport",
        "spoon.test.imports.ImportTest#testStaticMethodWithDifferentClassSameNameCollision",
        "spoon.test.imports.ImportTest#testAccessToNestedClass",
        "spoon.test.imports.ImportTest#testWithInnerEnumDoesNotImportStaticInnerMethods",
        "spoon.test.imports.ImportTest#testImportOfAnInnerClassInASuperClassAvailableInLibrary",
        "spoon.test.imports.ImportTest#testImportOfAnInnerClassInASuperClassPackageFullQualified",
        "spoon.test.imports.ImportTest#testNestedStaticPathWithTypedParameter",
        "spoon.test.imports.ImportTest#testDeepNestedStaticPathWithTypedParameterWithImports",
        "spoon.test.imports.ImportTest#testImportStaticAndFieldAccess",
        "spoon.test.imports.ImportTest#testJavaLangIsConsideredAsImportedButNotForSubPackages",
        "spoon.test.imports.ImportTest#testNestedAccessPathWithTypedParameter",
        "spoon.test.imports.ImportTest#testSortingOfImports",
        "spoon.test.imports.ImportTest#testNestedStaticPathWithTypedParameterWithImports",
        "spoon.test.imports.ImportTest#testAccessType",
        "spoon.test.imports.ImportTest#testImportStarredPackageWithNonVisibleClass",
        "spoon.test.imports.ImportTest#testImportOfAnInnerClassInASuperClassPackageAutoImport",
        "spoon.test.imports.ImportTest#testStaticMethodWithDifferentClassSameNameJava3NoCollision",
        "spoon.test.imports.ImportTest#testNotImportExecutableType",
        "spoon.test.imports.ImportTest#testAnotherMissingImport",
        "spoon.test.imports.ImportTest#testImportOfAnInnerClassInAClassPackage",
        "spoon.test.imports.ImportTest#testStaticMethodWithDifferentClassSameNameJava7NoCollision",
        "spoon.test.imports.ImportTest#testNewInnerClassDefinesInItsClassAndSuperClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 31
    },
    {
      "className": "spoon.test.snippets.SnippetTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.snippets.SnippetTest#testCompileSnippetWithContext",
        "spoon.test.snippets.SnippetTest#testCompileStatementWithReturn",
        "spoon.test.snippets.SnippetTest#testIssue981",
        "spoon.test.snippets.SnippetTest#testCompileSnippetSeveralTimes",
        "spoon.test.snippets.SnippetTest#testSnippetFullClass"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static java.lang.Object wrap() throws java.lang.Throwable {\n        return 1 \u003e 2;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        int i \u003d 1;;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static java.lang.Integer wrap() throws java.lang.Throwable {\n        return 3;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest#testRenameAllLocalVariablesOfRenameTestSubject",
        "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest#testRenameLocalVariableToSameName",
        "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest#testRefactorWrongUsage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.initializers.InitializerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.initializers.InitializerTest#testModelBuildingInitializer",
        "spoon.test.initializers.InitializerTest#testModelBuildingStaticInitializer"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.TypeReferenceTest#testTypeDeclarationWildcard",
        "spoon.test.reference.TypeReferenceTest#testConstructorCallInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testSubTypeAnonymous",
        "spoon.test.reference.TypeReferenceTest#testPackageInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#doNotCloseLoader",
        "spoon.test.reference.TypeReferenceTest#testGetTypeDeclaration",
        "spoon.test.reference.TypeReferenceTest#testTypeReferenceSpecifiedInClassDeclarationInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testIgnoreEnclosingClassInActualTypes",
        "spoon.test.reference.TypeReferenceTest#testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testRecursiveTypeReferenceInGenericType",
        "spoon.test.reference.TypeReferenceTest#testToStringEqualityBetweenTwoGenericTypeDifferent",
        "spoon.test.reference.TypeReferenceTest#testEqualityTypeReference",
        "spoon.test.reference.TypeReferenceTest#testInvocationWithFieldAccessInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testGetAllExecutablesForInterfaces",
        "spoon.test.reference.TypeReferenceTest#testUnknownSuperClassWithSameNameInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testArgumentOfAInvocationIsNotATypeAccess",
        "spoon.test.reference.TypeReferenceTest#testAnnotationOnMethodWithPrimitiveReturnTypeInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        java.util.List\u003c?\u003e l \u003d null;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 17
    },
    {
      "className": "spoon.test.parent.ParentContractTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.ParentContractTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.loop.LoopTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.loop.LoopTest#testForeachShouldHaveAlwaysABlockInItsBody",
        "spoon.test.loop.LoopTest#testAnnotationInForLoop"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.refactoring.RefactoringTest#testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "spoon.test.refactoring.RefactoringTest#testThisInConstructorAfterATransformation",
        "spoon.test.refactoring.RefactoringTest#testTransformedInstanceofAfterATransformation",
        "spoon.test.refactoring.RefactoringTest#testThisInConstructor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.ctBodyHolder.CtBodyHolderTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctBodyHolder.CtBodyHolderTest#testConstructor",
        "spoon.test.ctBodyHolder.CtBodyHolderTest#testMethod",
        "spoon.test.ctBodyHolder.CtBodyHolderTest#testForWithStatement",
        "spoon.test.ctBodyHolder.CtBodyHolderTest#testForWithBlock",
        "spoon.test.ctBodyHolder.CtBodyHolderTest#testTryCatch",
        "spoon.test.ctBodyHolder.CtBodyHolderTest#testWhileWithBlock"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.template.TemplateReplaceReturnTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateReplaceReturnTest#testNoReturnReplaceTemplate",
        "spoon.test.template.TemplateReplaceReturnTest#testReturnReplaceTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.prettyprinter.PrintChangesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.PrintChangesTest#testPrintUnchaged",
        "spoon.test.prettyprinter.PrintChangesTest#testPrintChanged"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationTest#testPersistenceProperty",
        "spoon.test.annotation.AnnotationTest#testAnnotationInterfacePreserveMethods",
        "spoon.test.annotation.AnnotationTest#testOutputGeneratedByTypeAnnotation",
        "spoon.test.annotation.AnnotationTest#testCreateRepeatableAnnotation",
        "spoon.test.annotation.AnnotationTest#testAnnotatedElementTypes",
        "spoon.test.annotation.AnnotationTest#testRepeatableAnnotationAreManagedWithArrays",
        "spoon.test.annotation.AnnotationTest#testInnerAnnotationsWithArray",
        "spoon.test.annotation.AnnotationTest#testRepeatableAnnotationAreManaged",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationInCast",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationInReturnTypeInMethod",
        "spoon.test.annotation.AnnotationTest#testAnnotationIntrospection",
        "spoon.test.annotation.AnnotationTest#testGetAnnotationFromParameter",
        "spoon.test.annotation.AnnotationTest#annotationAddValue",
        "spoon.test.annotation.AnnotationTest#testModelBuildingAnnotationBound",
        "spoon.test.annotation.AnnotationTest#testAbstractAllAnnotationProcessorWithGlobalAnnotation",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationInNewInstance",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationOnLocalVariableInMethod",
        "spoon.test.annotation.AnnotationTest#testCreateRepeatableAnnotationWithArrays",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod",
        "spoon.test.annotation.AnnotationTest#testUsageOfParametersInTypeAnnotation",
        "spoon.test.annotation.AnnotationTest#testWritingAnnotParamArray",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationInExtendsImplementsOfAClass",
        "spoon.test.annotation.AnnotationTest#testAnnotationWithDefaultArrayValue",
        "spoon.test.annotation.AnnotationTest#testAbstractAllAnnotationProcessor",
        "spoon.test.annotation.AnnotationTest#testSpoonSpoonResult",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationOnParameterInMethod",
        "spoon.test.annotation.AnnotationTest#testFieldAndMethodInAnnotation",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationWithGenericTypesInStatements",
        "spoon.test.annotation.AnnotationTest#testAnnotationNotRepeatableNotArrayAnnotation",
        "spoon.test.annotation.AnnotationTest#annotationOverrideFQNIsOK",
        "spoon.test.annotation.AnnotationTest#testDefaultValueInAnnotationsForAnnotationFields",
        "spoon.test.annotation.AnnotationTest#testGetAnnotationOuter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 33
    },
    {
      "className": "spoon.test.invocations.InvocationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.invocations.InvocationTest#testIssue1753"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.strings.StringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.strings.StringTest#testModelBuildingInitializer"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.jar.JarTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.jar.JarTest#testFile",
        "spoon.test.jar.JarTest#testResource",
        "spoon.test.jar.JarTest#testJar"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.LauncherTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.LauncherTest#testLLauncherBuildModelReturnAModel",
        "spoon.LauncherTest#testLauncherInEmptyWorkingDir"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.pkg.PackageTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.pkg.PackageTest#testAddAnnotationToPackage",
        "spoon.test.pkg.PackageTest#testRenamePackageAndPrettyPrintWithProcessor",
        "spoon.test.pkg.PackageTest#testRenamePackageAndPrettyPrintNoclasspath",
        "spoon.test.pkg.PackageTest#testGetFQNSimple",
        "spoon.test.pkg.PackageTest#testAnnotationOnPackage",
        "spoon.test.pkg.PackageTest#testGetFQNInNoClassPath",
        "spoon.test.pkg.PackageTest#testRenameRootPackageWithNullOrEmpty",
        "spoon.test.pkg.PackageTest#testPackage",
        "spoon.test.pkg.PackageTest#testRenamePackageAndPrettyPrint",
        "spoon.test.pkg.PackageTest#testRenameRootPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.varargs.VarArgsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.varargs.VarArgsTest#testModelBuildingInitializer"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.intercession.IntercessionContractTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.IntercessionContractTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateEnumAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateEnumAccessTest#testEnumAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.methodreference.MethodReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAClassParametrizedConstructor",
        "spoon.test.methodreference.MethodReferenceTest#testNoClasspathSuperExecutable",
        "spoon.test.methodreference.MethodReferenceTest#testNoClasspathExecutableReferenceExpression",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAnInstanceMethodOfMultiParticularObject",
        "spoon.test.methodreference.MethodReferenceTest#testGetGenericMethodFromReference",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceBuilderWithComplexGenerics",
        "spoon.test.methodreference.MethodReferenceTest#testCompileMethodReferenceGeneratedBySpoon",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAnInstanceMethodOfAParticularObject",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAJavaUtilClassConstructor",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAStaticMethod",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAConstructor",
        "spoon.test.methodreference.MethodReferenceTest#testGetGenericExecutableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "spoon.test.factory.AnnotationFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.AnnotationFactoryTest#testAnnotate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.executable.ExecutableRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.executable.ExecutableRefTest#constructorTest",
        "spoon.test.executable.ExecutableRefTest#methodTest",
        "spoon.test.executable.ExecutableRefTest#testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable",
        "spoon.test.executable.ExecutableRefTest#testGetActualClassTest",
        "spoon.test.executable.ExecutableRefTest#testOverridingMethod"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testAmbiguousImplicitFieldReference",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testAmbiguousImplicitFieldReferenceAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testGenericsWithAmbiguousStaticField",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testImplicitStaticClassAccess",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testChildOfGenericsWithAmbiguousStaticFieldAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testImplicitStaticFieldReference",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testImplicitStaticFieldReferenceAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testAnnotationInChildWithConstantsAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testGenericsWithAmbiguousMemberField",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testAnnotationInChildWithConstants",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testGenericsWithAmbiguousStaticFieldAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testImplicitFieldReferenceAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testImplicitFieldReference",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testGenericsWithAmbiguousMemberFieldAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testImplicitStaticClassAccessAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testChildOfGenericsWithAmbiguousStaticField"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    },
    {
      "className": "spoon.test.ctCase.SwitchCaseTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctCase.SwitchCaseTest#insertBeforeStatementInSwitchCaseWithoutException",
        "spoon.test.ctCase.SwitchCaseTest#insertAfterStatementInSwitchCaseWithoutException"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.FactoryTest#specificationCoreFactoryCreate",
        "spoon.test.factory.FactoryTest#testClassAccessCreatedFromFactories",
        "spoon.test.factory.FactoryTest#testCtModel",
        "spoon.test.factory.FactoryTest#testFactoryOverriding",
        "spoon.test.factory.FactoryTest#testClone",
        "spoon.test.factory.FactoryTest#testIncrementalModel"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.enums.EnumsTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.enums.EnumsTypeTest#testEnumsType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.constructorcallnewclass.ConstructorCallTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallWithGenericArray",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallObjectWithoutParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallStringWithParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testCoreConstructorCall",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallStringWithoutParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallObjectWithParameters"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.comparison.EqualTest",
      "failingMethods": [
        "spoon.test.comparison.EqualTest#testEqualsEmptyException"
      ],
      "erroringMethods": [
        "spoon.test.comparison.EqualTest#testEqualsMultitype",
        "spoon.test.comparison.EqualTest#testEqualsActualTypeRef",
        "spoon.test.comparison.EqualTest#testEqualsComment"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        try{}catch(RuntimeException | AssertionError e){};\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        java.util.List\u003cString\u003e l ;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Unable create model",
          "isError": false
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        int i\u003d0;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.labels.TestLabels",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.labels.TestLabels#testLabelsAreDetected"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.TopLevelTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.TopLevelTypeTest#testTopLevelType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.LinesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.LinesTest#testIdenticalPrettyPrinter",
        "spoon.test.prettyprinter.LinesTest#testCompileWhenUsingLinesArgument",
        "spoon.test.prettyprinter.LinesTest#testPrettyPrinterWithLines"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.api.NoClasspathTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.api.NoClasspathTest#test",
        "spoon.test.api.NoClasspathTest#testInheritanceInNoClassPathWithClasses",
        "spoon.test.api.NoClasspathTest#testIssue1747"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.ctType.CtTypeParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctType.CtTypeParameterTest#testTypeSame",
        "spoon.test.ctType.CtTypeParameterTest#testTypeErasure"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.api.MetamodelTest#testGetterSetterFroRole",
        "spoon.test.api.MetamodelTest#testRoleOnField",
        "spoon.test.api.MetamodelTest#testGetAllMetamodelInterfacess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.limits.utils.InternalTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.limits.utils.InternalTest#testStaticFinalFieldInAnonymousClass",
        "spoon.test.limits.utils.InternalTest#testInternalClasses"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.reflect.ast.AstCheckerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.ast.AstCheckerTest#testAvoidSetCollectionSavedOnAST",
        "spoon.reflect.ast.AstCheckerTest#testPushToStackChanges"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.insertBefore.InsertMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBeforeWithBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfterWithoutBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBefore",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfterWithBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfterSwitchCase",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBeforeWithoutBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfter",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBeforeSwitchCase",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#insertBeforeAndUpdateParent"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.factory.FieldFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.FieldFactoryTest#testCreateFromSource",
        "spoon.test.factory.FieldFactoryTest#testCreate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.position.PositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.position.PositionTest#testPositionParameterTypeReference",
        "spoon.test.position.PositionTest#testPositionGeneric",
        "spoon.test.position.PositionTest#testPositionInterface",
        "spoon.test.position.PositionTest#testPositionStatement",
        "spoon.test.position.PositionTest#testPositionClass",
        "spoon.test.position.PositionTest#testPositionCastExpressionOfVariableRead",
        "spoon.test.position.PositionTest#testPositionMethod",
        "spoon.test.position.PositionTest#testPositionClassWithComments",
        "spoon.test.position.PositionTest#testPositionAbstractMethod",
        "spoon.test.position.PositionTest#testPositionField",
        "spoon.test.position.PositionTest#getPositionOfImplicitBlock",
        "spoon.test.position.PositionTest#testPositionAnnotation"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "spoon.test.model.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.model.TypeTest#testTypeInfoIsInterface",
        "spoon.test.model.TypeTest#testGetDeclaredOrIheritedFieldByReflection",
        "spoon.test.model.TypeTest#testGetUsedTypes",
        "spoon.test.model.TypeTest#testGetDeclaredOrIheritedFieldOnType",
        "spoon.test.model.TypeTest#testGetDeclaredOrIheritedFieldOnTypeRef",
        "spoon.test.model.TypeTest#testGetAllExecutables",
        "spoon.test.model.TypeTest#superclassTest",
        "spoon.test.model.TypeTest#testGetUsedTypesForTypeInRootPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { X x; };\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.reference.CloneReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.CloneReferenceTest#testGetDeclarationOfFieldAfterClone",
        "spoon.test.reference.CloneReferenceTest#testGetDeclarationAfterClone"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.prettyprinter.QualifiedThisRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.QualifiedThisRefTest#testPrintCtFieldAccessWorkEvenWhenParentNotInitialized",
        "spoon.test.prettyprinter.QualifiedThisRefTest#testCloneThisAccess",
        "spoon.test.prettyprinter.QualifiedThisRefTest#testQualifiedThisRef"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtScannerTest#testScannerCallsAllProperties",
        "spoon.reflect.visitor.CtScannerTest#testScan",
        "spoon.reflect.visitor.CtScannerTest#testScannerContract"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.refactoring.MethodsRefactoringTest#testExecutableReferenceFilter",
        "spoon.test.refactoring.MethodsRefactoringTest#testSubInheritanceHierarchyFunction",
        "spoon.test.refactoring.MethodsRefactoringTest#testAllMethodsSameSignatureFunction",
        "spoon.test.refactoring.MethodsRefactoringTest#testCtParameterRemoveRefactoringValidationCheck",
        "spoon.test.refactoring.MethodsRefactoringTest#testCtParameterRemoveRefactoring"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.processing.ProcessingTest#testCallProcessorWithMultipleTypes",
        "spoon.test.processing.ProcessingTest#testInsertBegin",
        "spoon.test.processing.ProcessingTest#testInsertEnd",
        "spoon.test.processing.ProcessingTest#testProcessorWithGenericType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.reference.VariableAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.VariableAccessTest#testReferences",
        "spoon.test.reference.VariableAccessTest#testParameterReferenceInConstructorNoClasspath",
        "spoon.test.reference.VariableAccessTest#testReferencesInInitExpression",
        "spoon.test.reference.VariableAccessTest#testSuperAccess",
        "spoon.test.reference.VariableAccessTest#testDeclaringTypeOfALambdaReferencedByParameterReference",
        "spoon.test.reference.VariableAccessTest#testVariableAccessDeclarationInAnonymousClass",
        "spoon.test.reference.VariableAccessTest#testReferenceToLocalVariableDeclaredInLoop",
        "spoon.test.reference.VariableAccessTest#testDeclarationArray",
        "spoon.test.reference.VariableAccessTest#testDeclarationOfVariableReference",
        "spoon.test.reference.VariableAccessTest#testMultipleDeclarationsOfLocalVariable",
        "spoon.test.reference.VariableAccessTest#testGetDeclarationAfterClone"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 11
    },
    {
      "className": "spoon.test.secondaryclasses.ClassesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.secondaryclasses.ClassesTest#testClassWithInternalPublicClassOrInterf",
        "spoon.test.secondaryclasses.ClassesTest#testAnonymousClass",
        "spoon.test.secondaryclasses.ClassesTest#testInnerClassContruction",
        "spoon.test.secondaryclasses.ClassesTest#testIsAnonymousMethodInCtClass",
        "spoon.test.secondaryclasses.ClassesTest#testTopLevel",
        "spoon.test.secondaryclasses.ClassesTest#testAnonymousClassInStaticField"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.visitor.AssignmentsEqualsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.visitor.AssignmentsEqualsTest#testEquals"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#printerCanPrintInvocationWithoutException",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#importsFromMultipleTypesSupported",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAClassWithImports",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAMethodWithGeneric",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#superInvocationWithEnclosingInstance",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAMethodWithImports",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testTernaryParenthesesOnLocalVariable",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testIssue1501",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#printClassCreatedWithSpoon",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        final int foo \u003d (new Object() instanceof Object ? new Object().equals(null) : new Object().equals(new Object())) ? 0 : new Object().hashCode();;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.comment.CommentTest#testCommentsInComment1And2",
        "spoon.test.comment.CommentTest#testCombinedPackageInfoComment",
        "spoon.test.comment.CommentTest#testJavaDocCommentOnMac",
        "spoon.test.comment.CommentTest#testCodeFactory",
        "spoon.test.comment.CommentTest#testWildComments",
        "spoon.test.comment.CommentTest#testJavaDocEmptyCommentAndTag",
        "spoon.test.comment.CommentTest#testDocumentationContract",
        "spoon.test.comment.CommentTest#testInsertNewComment",
        "spoon.test.comment.CommentTest#testJavadocShortAndLongComment",
        "spoon.test.comment.CommentTest#testSnippedWithComments",
        "spoon.test.comment.CommentTest#testBlockComment",
        "spoon.test.comment.CommentTest#testInLineComment",
        "spoon.test.comment.CommentTest#testJavaDocCommentOnUnix",
        "spoon.test.comment.CommentTest#testCoreFactory",
        "spoon.test.comment.CommentTest#testRemoveComment"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.imports.ImportScannerTest#testComputeImportsInClass",
        "spoon.test.imports.ImportScannerTest#testMultiCatchImport",
        "spoon.test.imports.ImportScannerTest#testComputeImportsInClassWithSameName",
        "spoon.test.imports.ImportScannerTest#testComputeMinimalImportsInClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.visibility.VisibilityTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.visibility.VisibilityTest#testVisibilityOfClassesNamedByClassesInJavaLangPackage",
        "spoon.test.visibility.VisibilityTest#testInvocationVisibilityInFieldDeclaration",
        "spoon.test.visibility.VisibilityTest#testMethodeWithNonAccessibleTypeArgument",
        "spoon.test.visibility.VisibilityTest#testName",
        "spoon.test.visibility.VisibilityTest#testFullyQualifiedNameOfTypeReferenceWithGeneric"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.ctType.CtTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctType.CtTypeTest#testIsSubTypeOfonTypeParameters",
        "spoon.test.ctType.CtTypeTest#testHasMethodNotHasMethod",
        "spoon.test.ctType.CtTypeTest#testHasMethodInSuperClass",
        "spoon.test.ctType.CtTypeTest#testIsSubTypeOf",
        "spoon.test.ctType.CtTypeTest#testHasMethodOnNull",
        "spoon.test.ctType.CtTypeTest#testIsSubTypeOfonTypeReferences",
        "spoon.test.ctType.CtTypeTest#testHasMethodInDefaultMethod",
        "spoon.test.ctType.CtTypeTest#testHasMethodInDirectMethod"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.model.AnonymousExecutableTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.model.AnonymousExecutableTest#testStatements"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.path.PathTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.path.PathTest#testPathFromString",
        "spoon.test.path.PathTest#testGetPathFromNonParent",
        "spoon.test.path.PathTest#testBuilder",
        "spoon.test.path.PathTest#exceptionTest",
        "spoon.test.path.PathTest#testMultiPathFromString",
        "spoon.test.path.PathTest#toStringTest",
        "spoon.test.path.PathTest#testIncorrectPathFromString",
        "spoon.test.path.PathTest#testWildcards",
        "spoon.test.path.PathTest#testBuilderMethod",
        "spoon.test.path.PathTest#testRoles"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.properties.PropertiesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.properties.PropertiesTest#testNonExistingDirectory"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.processing.ProcessingTest#testSpoonTagger",
        "spoon.processing.ProcessingTest#testInterruptAProcessor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.eval.EvalTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.eval.EvalTest#testVisitorPartialEvaluatorScanner",
        "spoon.test.eval.EvalTest#testVisitorPartialEvaluator_binary",
        "spoon.test.eval.EvalTest#testDoNotSimplifyToExpressionWhenStatementIsExpected",
        "spoon.test.eval.EvalTest#testVisitorPartialEvaluator_if",
        "spoon.test.eval.EvalTest#testDoNotSimplify",
        "spoon.test.eval.EvalTest#testStringConcatenation",
        "spoon.test.eval.EvalTest#testTryCatchAndStatement",
        "spoon.test.eval.EvalTest#testArrayLength",
        "spoon.test.eval.EvalTest#testDoNotSimplifyCasts"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static java.lang.Object wrap() throws java.lang.Throwable {\n        return 0+1;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        if (false) {System.out.println(\"foo\");} else {System.out.println(\"bar\");} ;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.serializable.SerializableTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.serializable.SerializableTest#testSerialCtStatement"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        String hello \u003d\"t1\"; System.out.println(hello);\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.ExecutableReferenceTest#testSuperClassInGetAllExecutables",
        "spoon.test.reference.ExecutableReferenceTest#testLambdaNoClasspath",
        "spoon.test.reference.ExecutableReferenceTest#testHashcodeWorksWithReference",
        "spoon.test.reference.ExecutableReferenceTest#testSpecifyGetAllExecutablesMethod",
        "spoon.test.reference.ExecutableReferenceTest#testCreateReferenceForAnonymousExecutable",
        "spoon.test.reference.ExecutableReferenceTest#testInvokeEnumMethod"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.parameters.ParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parameters.ParameterTest#testGetParameterReferenceInLambdaNoClasspath",
        "spoon.test.parameters.ParameterTest#testParameterInNoClasspath",
        "spoon.test.parameters.ParameterTest#testMultiParameterLambdaTypeReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest#spoon.test.main.MainTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reflect.meta.MetaModelTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reflect.meta.MetaModelTest#spoonMetaModelTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.lambda.LambdaTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.lambda.LambdaTest#testLambdaMethod",
        "spoon.test.lambda.LambdaTest#testFieldAccessInLambdaNoClassPathExternal1Example",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithParameterTyped",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithStatementBodyAndWithoutParameters",
        "spoon.test.lambda.LambdaTest#testEqualsLambdaParameterRef",
        "spoon.test.lambda.LambdaTest#testGetOverriddenMethodWithFunction",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithMultiParametersTyped",
        "spoon.test.lambda.LambdaTest#testLambdaFilter",
        "spoon.test.lambda.LambdaTest#testTypeParameterWithImplicitArrayType",
        "spoon.test.lambda.LambdaTest#testTypeParameterOfLambdaWithoutType2",
        "spoon.test.lambda.LambdaTest#testGetDeclarationOnTypeParameterFromLambda",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithoutTypeForParameter",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithoutParameter",
        "spoon.test.lambda.LambdaTest#testFieldAccessInLambdaNoClassPath",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionInIfConditional",
        "spoon.test.lambda.LambdaTest#testBuildExecutableReferenceFromLambda",
        "spoon.test.lambda.LambdaTest#testCompileLambdaGeneratedBySpoon",
        "spoon.test.lambda.LambdaTest#testTypeAccessInLambdaNoClassPath",
        "spoon.test.lambda.LambdaTest#testLambdaWithPrimitiveParameter",
        "spoon.test.lambda.LambdaTest#testTypeParameterOfLambdaWithoutType",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithStatementBodyAndWithParameter",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithMultiParameters"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 22
    },
    {
      "className": "spoon.testing.AbstractAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.testing.AbstractAssertTest#testTransformationFromCtElementWithProcessor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilation.CompilationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilation.CompilationTest#testNewInstanceFromExistingClass",
        "spoon.test.compilation.CompilationTest#compileCommandLineTest",
        "spoon.test.compilation.CompilationTest#testFilterResourcesDir",
        "spoon.test.compilation.CompilationTest#compileTest",
        "spoon.test.compilation.CompilationTest#testExoticClassLoader",
        "spoon.test.compilation.CompilationTest#testFilterResourcesFile",
        "spoon.test.compilation.CompilationTest#testNewInstance",
        "spoon.test.compilation.CompilationTest#testPrecompile"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X implements spoon.test.compilation.Ifoo { public int foo() {int i\u003d0; return i;} };\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.javadoc.JavaDocTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.javadoc.JavaDocTest#testJavadocNotPresentInAST",
        "spoon.test.javadoc.JavaDocTest#testJavaDocReprint"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    }
  ]
}