{
  "totalNumberSkippingTests": 110,
  "bugType": "only_fail",
  "totalNumberErroringTests": 1,
  "repo": "julianhyde/calcite",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError",
      "java.lang.IllegalArgumentException"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "BuildProject": 115,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 6,
      "AstorJMut": 540,
      "CloneRepository": 18,
      "CheckoutPatchedBuild": 0,
      "Nopol": 25,
      "NPEFix": 0,
      "TestProject": 229,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 7,
      "CommitPatch": 8
    },
    "BugCommitUrl": "http://github.com/julianhyde/calcite/commit/dd69e42785228fc23e5338106377bd2a38924b85",
    "NbFailingTests": 28,
    "NbErroringTests": 1,
    "NbSkippingTests": 110,
    "NbRunningTests": 4692,
    "ReproductionDate": "May 17, 2018 3:57:37 AM",
    "BuggyBuildId": 379995646,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/julianhyde/calcite/builds/379995646",
    "BuggyBuildDate": "May 17, 2018 3:57:30 AM",
    "BugCommit": "dd69e42785228fc23e5338106377bd2a38924b85",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 46,
    "NbFileApp": 3000,
    "NbFileTests": 192,
    "NbCPU": 32,
    "FreeMemory": 1034410912,
    "TotalMemory": 2414346240,
    "AngelicValuesByTest": {},
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 457482952,
      "ComputeClasspath": 422232512,
      "ComputeTestDir": 415301064,
      "BuildProject": 398120712,
      "ComputeSourceDir": 422232512,
      "InitRepoToPush": 561465376,
      "AstorJMut": 1250246656,
      "CloneRepository": 490861032,
      "CheckoutPatchedBuild": 1034410912,
      "Nopol": 1578363832,
      "NPEFix": 1578363832,
      "TestProject": 610054352,
      "GatherTestInformation": 580713224,
      "PushIncriminatedBuild": 423940664,
      "CommitPatch": 1034410912
    },
    "NbSucceedingTests": 4663
  },
  "bugCommit": "https://github.com/julianhyde/calcite/compare/360d12372995...dd69e4278522",
  "failingModule": "/root/workspace/julianhyde/calcite/379995646/core",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 28,
  "error-types": [
    "java.lang.AssertionError",
    "java.lang.IllegalArgumentException"
  ],
  "totalNumberRunningTests": 4692,
  "failing-test-cases": [
    {
      "className": "org.apache.calcite.test.RexImplicationCheckerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSimplifyFloor"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "unbound: CEIL(2010-10-10 00:00:00, FLAG(YEAR))",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.apache.calcite.test.RexProgramTest",
      "failingMethods": [
        "testSimplifyOrTerms"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "result mismatch: when applied to {?0.b\u003dNULL}, OR(\u003c\u003e(?0.b, 1), \u003d(?0.b, 1)) yielded false, and true yielded true",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.rel.rules.DateRangeRulesTest",
      "failingMethods": [
        "testExtractPartialRewriteForNotEqualsYear",
        "testExtractWithOrCondition2",
        "testExtractWithOrCondition1",
        "testExtractRewriteForInvalidMonthComparison",
        "testExtractRewriteMultipleOperands",
        "testExtractYearMonthDayFromTimestampColumn",
        "testFloorEqRewrite",
        "testFloorExtractBothRewrite",
        "testExtractYearMonthDayFromDateColumn",
        "testFloorRewriteWithTimezone",
        "testExtractYearFromDateColumn",
        "testFloorGeRewrite",
        "testCeilLeRewrite",
        "testCeilLtRewrite",
        "testExtractYearAndDayFromDateColumn",
        "testFloorGtRewrite",
        "testExtractYearAndMonthFromDateColumn2",
        "testExtractYearFromTimestampColumn",
        "testExtractPartialRewriteForInMonth",
        "testExtractRewriteForInvalidDayComparison",
        "testUnboundYearExtractRewrite",
        "testCeilGtRewrite",
        "testCeilEqRewrite",
        "testExtractYearAndMonthFromDateColumn",
        "testCeilGeRewrite",
        "testFloorLtRewrite",
        "testFloorLeRewrite"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        }
      ],
      "nbFailures": 27,
      "nbErrors": 0
    }
  ]
}