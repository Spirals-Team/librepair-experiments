{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "INRIA/spoon",
  "metrics": {
    "ReproductionDate": "May 19, 2018 1:11:58 PM",
    "BuggyBuildId": 381041449,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/381041449",
    "BuggyBuildDate": "May 19, 2018 1:11:39 PM",
    "BugCommit": "927a81e0db072c19d133922fefe1e70750105ee0",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 14,
    "NbFileApp": 1082,
    "NbFileTests": 661,
    "NbCPU": 32,
    "FreeMemory": 1930023232,
    "TotalMemory": 4001366016,
    "AngelicValuesByTest": {
      "spoon/support/visitor/java/JavaReflectionTreeBuilderTest": 0,
      "spoon/MavenLauncherTest": 0,
      "spoon/test/main/MainTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 552767600,
      "ComputeClasspath": 498718144,
      "ComputeTestDir": 529717360,
      "BuildProject": 518581296,
      "ComputeSourceDir": 498718144,
      "InitRepoToPush": 566759432,
      "AstorJMut": 2080743856,
      "CloneRepository": 516859832,
      "CheckoutPatchedBuild": 1930023232,
      "Nopol": 2411803504,
      "NPEFix": 2411803504,
      "TestProject": 504650448,
      "GatherTestInformation": 478221904,
      "PushIncriminatedBuild": 500403056,
      "CommitPatch": 1930023232
    },
    "NbSucceedingTests": 1415,
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/927a81e0db072c19d133922fefe1e70750105ee0",
    "NbFailingTests": 5,
    "NbErroringTests": 0,
    "NbSkippingTests": 4,
    "NbRunningTests": 1420,
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 5,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "BuildProject": 39,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 5,
      "AstorJMut": 10,
      "CloneRepository": 6,
      "CheckoutPatchedBuild": 0,
      "Nopol": 46,
      "NPEFix": 0,
      "TestProject": 350,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 7,
      "CommitPatch": 7
    }
  },
  "failingModule": "/root/workspace/INRIA/spoon/381041449",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 5,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 1420,
  "failing-test-cases": [
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [
        "testMain_checkShadow"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "cannot find decl for asList(T[])",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [
        "testShadowModelEqualsNormalModel",
        "testScannerClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Found 272 problems:\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d6]#typeMember\nShadow: public static final enum RequiresModifier {\n    STATIC, TRANSITIVE;\n    private RequiresModifier() {\n    }\n\n    private static transient boolean[] $jacocoData;\n}\nNormal: enum RequiresModifier {\n    STATIC, TRANSITIVE;}\n\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d6]#value[index\u003d0]#value\nShadow: STATIC\nNormal: STATIC\n\nDifference on path: #typeMember[index\u003d6]#value[index\u003d1]#value\nShadow: TRANSITIVE\nNormal: TRANSITIVE\n\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d8]#typeMember\nShadow: public static final enum CommentType {\n    FILE, JAVADOC, INLINE, BLOCK;\n    private CommentType() {\n    }\n\n    private static transient boolean[] $jacocoData;\n}\nNormal: enum CommentType {\n    FILE, JAVADOC, INLINE, BLOCK;}\n\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d8]#value[index\u003d0]#value\nShadow: FILE\nNormal: FILE\n\nDifference on path: #typeMember[index\u003d8]#value[index\u003d1]#value\nShadow: JAVADOC\nNormal: JAVADOC\n\nDifference on path: #typeMember[index\u003d8]#value[index\u003d2]#value\nShadow: INLINE\nNormal: INLINE\n\nDifference on path: #typeMember[index\u003d8]#value[index\u003d3]#value\nShadow: BLOCK\nNormal: BLOCK\n\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeParameter[index\u003d0]#superType\nShadow: null\nNormal: java.lang.Object\n\nMissing shadow typeMember: spoon.support.reflect.declaration.CtClassImpl$NewInstanceClassloader(java.io.File)\nDifference on path: #typeMember[index\u003d30]#typeMember\nShadow: null\nNormal: NewInstanceClassloader(java.io.File binaryOutputDirectory) throws java.net.MalformedURLException {\n    super(new java.net.URL[]{ binaryOutputDirectory.toURI().toURL() });\n}\n\nUnexpected shadow typeMember: spoon.support.reflect.declaration.CtClassImpl$NewInstanceClassloader(spoon.support.reflect.declaration.CtClassImpl,java.io.File)\nUnexpected shadow typeMember: this$0\nUnexpected shadow typeMember: $jacocoData\nMissing shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic spoon.reflect.declaration.CtConstructor\u003cT\u003e getConstructor(spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes) {\n    for (spoon.reflect.declaration.CtTypeMember typeMember : getTypeMembers()) {\n        if (!(typeMember instanceof spoon.reflect.declaration.CtConstructor)) {\n            continue;\n        }\n        spoon.reflect.declaration.CtConstructor\u003cT\u003e c \u003d ((spoon.reflect.declaration.CtConstructor\u003cT\u003e) (typeMember));\n        boolean cont \u003d (c.getParameters().size()) \u003d\u003d (parameterTypes.length);\n        for (int i \u003d 0; (cont \u0026\u0026 (i \u003c (c.getParameters().size()))) \u0026\u0026 (i \u003c (parameterTypes.length)); i++) {\n            if (!(parameterTypes[i].getQualifiedName().equals(c.getParameters().get(i).getType().getQualifiedName()))) {\n                cont \u003d false;\n            }\n        }\n        if (cont) {\n            return c;\n        }\n    }\n    return null;\n}\n\nUnexpected shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeParameter[index\u003d0]#superType\nShadow: null\nNormal: java.lang.Object\n\nMissing shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: /**\n * Returns the constructor of the class that takes the given argument types.\n *\n * Derived from {@link #getTypeMembers()}\n */\n@spoon.support.DerivedProperty\n@spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONSTRUCTOR)\nspoon.reflect.declaration.CtConstructor\u003cT\u003e getConstructor(spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes);\n\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: getConstructor(spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d15]#typeMember\nShadow: private static abstract enum InsertType {\n    BEFORE, AFTER;\n    InsertType(java.lang.String arg0, int arg1, spoon.support.reflect.code.CtStatementImpl. arg2) {\n    }\n\n    private InsertType() {\n    }\n\n    public int indexOfReference(java.util.List arg0, spoon.reflect.declaration.CtElement arg1) {\n    }\n\n    abstract \u003cT extends spoon.reflect.declaration.CtElement\u003e java.util.List\u003cT\u003e insertFromLastStatement(java.util.List\u003cT\u003e arg0, spoon.reflect.code.CtStatement arg1, spoon.reflect.code.CtStatementList arg2) {\n    }\n\n    abstract void insertFromFirstStatement(spoon.reflect.code.CtBlock\u003c?\u003e arg0, spoon.reflect.code.CtStatement arg1, spoon.reflect.code.CtStatementList arg2) {\n    }\n\n    abstract void insert(spoon.reflect.code.CtBlock\u003c?\u003e arg0, spoon.reflect.code.CtStatementList arg1) {\n    }\n\n    private static transient boolean[] $jacocoData;\n}\nNormal: private enum InsertType {\n    BEFORE {\n        @java.lang.Override\n        void insert(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n            block.insertBegin(statementsToBeInserted);\n        }\n\n        @java.lang.Override\n        void insertFromFirstStatement(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n            final java.util.List\u003cspoon.reflect.code.CtStatement\u003e copy \u003d new java.util.ArrayList\u003c\u003e(block.getStatements());\n            int indexOfTargetElement \u003d indexOfReference(block.getStatements(), target);\n            for (spoon.reflect.code.CtStatement ctStatement : statementsToBeInserted) {\n                copy.add((indexOfTargetElement++), ctStatement);\n            }\n            block.setStatements(copy);\n        }\n\n        @java.lang.Override\n        \u003cT extends spoon.reflect.declaration.CtElement\u003e java.util.List\u003cT\u003e insertFromLastStatement(java.util.List\u003cT\u003e statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n            final java.util.List\u003cT\u003e copy \u003d new java.util.ArrayList\u003c\u003e(statements);\n            int indexOfTargetElement \u003d indexOfReference(statements, target);\n            for (int j \u003d (statementsToBeInserted.getStatements().size()) - 1; j \u003e\u003d 0; j--) {\n                copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));\n            }\n            return copy;\n        }\n    }, AFTER {\n        @java.lang.Override\n        void insert(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n            block.insertEnd(statementsToBeInserted);\n        }\n\n        @java.lang.Override\n        void insertFromFirstStatement(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n            final java.util.List\u003cspoon.reflect.code.CtStatement\u003e copy \u003d new java.util.ArrayList\u003c\u003e(block.getStatements());\n            int indexOfTargetElement \u003d indexOfReference(block.getStatements(), target);\n            for (spoon.reflect.code.CtStatement s : statementsToBeInserted) {\n                copy.add((++indexOfTargetElement), s);\n            }\n            block.setStatements(copy);\n        }\n\n        @java.lang.Override\n        \u003cT extends spoon.reflect.declaration.CtElement\u003e java.util.List\u003cT\u003e insertFromLastStatement(java.util.List\u003cT\u003e statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n            final java.util.List\u003cT\u003e copy \u003d new java.util.ArrayList\u003c\u003e(statements);\n            int indexOfTargetElement \u003d (indexOfReference(copy, target)) + 1;\n            for (int j \u003d (statementsToBeInserted.getStatements().size()) - 1; j \u003e\u003d 0; j--) {\n                copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));\n            }\n            return copy;\n        }\n    };\n    public int indexOfReference(java.util.List statements, spoon.reflect.declaration.CtElement target) {\n        int indexOfTargetElement \u003d -1;\n        // check the reference not the equality\n        for (int i \u003d 0; i \u003c (statements.size()); i++) {\n            if ((statements.get(i)) \u003d\u003d target) {\n                indexOfTargetElement \u003d i;\n                break;\n            }\n        }\n        return indexOfTargetElement;\n    }\n\n    abstract void insert(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatementList statementsToBeInserted);\n\n    abstract void insertFromFirstStatement(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted);\n\n    abstract \u003cT extends spoon.reflect.declaration.CtElement\u003e java.util.List\u003cT\u003e insertFromLastStatement(java.util.List\u003cT\u003e statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted);\n}\n\nDifference on path: #typeMember[index\u003d15]#typeMember[index\u003d5]#body\nShadow: {\n}\nNormal: null\n\nDifference on path: #typeMember[index\u003d15]#typeMember[index\u003d3]#body\nShadow: {\n}\nNormal: null\n\nDifference on path: #typeMember[index\u003d15]#typeMember[index\u003d4]#body\nShadow: {\n}\nNormal: null\n\nUnexpected shadow typeMember: spoon.support.reflect.code.CtStatementImpl$InsertType(java.lang.String,int,spoon.support.reflect.code.CtStatementImpl$)\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d15]#value[index\u003d0]#value\nShadow: BEFORE\nNormal: BEFORE {\n    @java.lang.Override\n    void insert(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        block.insertBegin(statementsToBeInserted);\n    }\n\n    @java.lang.Override\n    void insertFromFirstStatement(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        final java.util.List\u003cspoon.reflect.code.CtStatement\u003e copy \u003d new java.util.ArrayList\u003c\u003e(block.getStatements());\n        int indexOfTargetElement \u003d indexOfReference(block.getStatements(), target);\n        for (spoon.reflect.code.CtStatement ctStatement : statementsToBeInserted) {\n            copy.add((indexOfTargetElement++), ctStatement);\n        }\n        block.setStatements(copy);\n    }\n\n    @java.lang.Override\n    \u003cT extends spoon.reflect.declaration.CtElement\u003e java.util.List\u003cT\u003e insertFromLastStatement(java.util.List\u003cT\u003e statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        final java.util.List\u003cT\u003e copy \u003d new java.util.ArrayList\u003c\u003e(statements);\n        int indexOfTargetElement \u003d indexOfReference(statements, target);\n        for (int j \u003d (statementsToBeInserted.getStatements().size()) - 1; j \u003e\u003d 0; j--) {\n            copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));\n        }\n        return copy;\n    }\n}\n\nDifference on path: #typeMember[index\u003d15]#value[index\u003d1]#value\nShadow: AFTER\nNormal: AFTER {\n    @java.lang.Override\n    void insert(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        block.insertEnd(statementsToBeInserted);\n    }\n\n    @java.lang.Override\n    void insertFromFirstStatement(spoon.reflect.code.CtBlock\u003c?\u003e block, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        final java.util.List\u003cspoon.reflect.code.CtStatement\u003e copy \u003d new java.util.ArrayList\u003c\u003e(block.getStatements());\n        int indexOfTargetElement \u003d indexOfReference(block.getStatements(), target);\n        for (spoon.reflect.code.CtStatement s : statementsToBeInserted) {\n            copy.add((++indexOfTargetElement), s);\n        }\n        block.setStatements(copy);\n    }\n\n    @java.lang.Override\n    \u003cT extends spoon.reflect.declaration.CtElement\u003e java.util.List\u003cT\u003e insertFromLastStatement(java.util.List\u003cT\u003e statements, spoon.reflect.code.CtStatement target, spoon.reflect.code.CtStatementList statementsToBeInserted) {\n        final java.util.List\u003cT\u003e copy \u003d new java.util.ArrayList\u003c\u003e(statements);\n        int indexOfTargetElement \u003d (indexOfReference(copy, target)) + 1;\n        for (int j \u003d (statementsToBeInserted.getStatements().size()) - 1; j \u003e\u003d 0; j--) {\n            copy.add(indexOfTargetElement, ((T) (statementsToBeInserted.getStatements().get(j))));\n        }\n        return copy;\n    }\n}\n\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nMissing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic \u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getMethod(spoon.reflect.reference.CtTypeReference\u003cR\u003e returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes) {\n    return null;\n}\n\nMissing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic \u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes) {\n    return null;\n}\n\nMissing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic java.util.Set\u003cspoon.reflect.declaration.CtMethod\u003c?\u003e\u003e getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference\u003c?\u003e... annotationTypes) {\n    return java.util.Collections.emptySet();\n}\n\nUnexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nMissing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\n@java.lang.SuppressWarnings(\"unchecked\")\npublic \u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getMethod(spoon.reflect.reference.CtTypeReference\u003cR\u003e returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes) {\n    for (spoon.reflect.declaration.CtTypeMember typeMember : typeMembers) {\n        if (!(typeMember instanceof spoon.reflect.declaration.CtMethod)) {\n            continue;\n        }\n        spoon.reflect.declaration.CtMethod\u003cR\u003e m \u003d ((spoon.reflect.declaration.CtMethod\u003cR\u003e) (typeMember));\n        if (m.getSimpleName().equals(name)) {\n            if (!(m.getType().equals(returnType))) {\n                continue;\n            }\n            boolean cont \u003d (m.getParameters().size()) \u003d\u003d (parameterTypes.length);\n            for (int i \u003d 0; (cont \u0026\u0026 (i \u003c (m.getParameters().size()))) \u0026\u0026 (i \u003c (parameterTypes.length)); i++) {\n                if (!(m.getParameters().get(i).getType().getQualifiedName().equals(parameterTypes[i].getQualifiedName()))) {\n                    cont \u003d false;\n                }\n            }\n            if (cont) {\n                return m;\n            }\n        }\n    }\n    return null;\n}\n\nMissing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\n@java.lang.SuppressWarnings(\"unchecked\")\npublic \u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes) {\n    if (name \u003d\u003d null) {\n        return null;\n    }\n    for (spoon.reflect.declaration.CtMethod\u003c?\u003e candidate : getMethodsByName(name)) {\n        boolean cont \u003d (candidate.getParameters().size()) \u003d\u003d (parameterTypes.length);\n        for (int i \u003d 0; (cont \u0026\u0026 (i \u003c (candidate.getParameters().size()))) \u0026\u0026 (i \u003c (parameterTypes.length)); i++) {\n            final spoon.reflect.reference.CtTypeReference\u003c?\u003e ctParameterType \u003d candidate.getParameters().get(i).getType();\n            final spoon.reflect.reference.CtTypeReference\u003c?\u003e parameterType \u003d parameterTypes[i];\n            if (parameterType instanceof spoon.reflect.reference.CtArrayTypeReference) {\n                if (ctParameterType instanceof spoon.reflect.reference.CtArrayTypeReference) {\n                    if (!(isSameParameter(candidate, ((spoon.reflect.reference.CtArrayTypeReference) (ctParameterType)).getComponentType(), ((spoon.reflect.reference.CtArrayTypeReference) (parameterType)).getComponentType()))) {\n                        cont \u003d false;\n                    }else {\n                        if (!((((spoon.reflect.reference.CtArrayTypeReference) (ctParameterType)).getDimensionCount()) \u003d\u003d (((spoon.reflect.reference.CtArrayTypeReference) (parameterType)).getDimensionCount()))) {\n                            cont \u003d false;\n                        }\n                    }\n                }else {\n                    cont \u003d false;\n                }\n            }else\n                if (!(isSameParameter(candidate, ctParameterType, parameterType))) {\n                    cont \u003d false;\n                }\n\n        }\n        if (cont) {\n            return ((spoon.reflect.declaration.CtMethod\u003cR\u003e) (candidate));\n        }\n    }\n    return null;\n}\n\nMissing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic java.util.Set\u003cspoon.reflect.declaration.CtMethod\u003c?\u003e\u003e getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference\u003c?\u003e... annotationTypes) {\n    java.util.Set\u003cspoon.reflect.declaration.CtMethod\u003c?\u003e\u003e result \u003d new spoon.support.util.SignatureBasedSortedSet\u003c\u003e();\n    for (spoon.reflect.declaration.CtTypeMember typeMember : typeMembers) {\n        if (!(typeMember instanceof spoon.reflect.declaration.CtMethod)) {\n            continue;\n        }\n        spoon.reflect.declaration.CtMethod\u003c?\u003e m \u003d ((spoon.reflect.declaration.CtMethod\u003c?\u003e) (typeMember));\n        for (spoon.reflect.declaration.CtAnnotation\u003c?\u003e a : m.getAnnotations()) {\n            if (java.util.Arrays.asList(annotationTypes).contains(a.getAnnotationType())) {\n                result.add(m);\n            }\n        }\n    }\n    return result;\n}\n\nUnexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])\nMissing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: /**\n * Gets a method from its return type, name, and parameter types.\n *\n * @return null if does not exit\n */\n@spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.METHOD)\n\u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getMethod(spoon.reflect.reference.CtTypeReference\u003cR\u003e returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes);\n\nMissing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: /**\n * Gets a method from its name and parameter types.\n *\n * @return null if does not exit\n */\n@spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.METHOD)\n\u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes);\n\nMissing shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: /**\n * Returns the methods that are directly declared by this class or\n * interface and annotated with one of the given annotations.\n */\n@spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.METHOD)\njava.util.Set\u003cspoon.reflect.declaration.CtMethod\u003c?\u003e\u003e getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference\u003c?\u003e... annotationTypes);\n\nUnexpected shadow typeMember: getMethodsAnnotatedWith(spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeParameter[index\u003d0]#superType\nShadow: null\nNormal: java.lang.Object\n\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d7]#body\nShadow: {\n}\nNormal: null\n\nDifference on path: #typeMember[index\u003d3]#body\nShadow: {\n}\nNormal: null\n\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d10]#typeMember\nShadow: public static final enum TagType {\n    AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;\n    private TagType() {\n    }\n\n    public boolean hasParam() {\n    }\n\n    public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String arg0) {\n    }\n\n    public java.lang.String toString() {\n    }\n\n    private static transient boolean[] $jacocoData;\n}\nNormal: /**\n * Define the possible type for a tag\n */\nenum TagType {\n    AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;\n    /**\n     * Return true if the tag can have a parameter\n     *\n     * @return true if the tag can have a parameter\n     */\n    public boolean hasParam() {\n        return ((this) \u003d\u003d (spoon.reflect.code.CtJavaDocTag.TagType.PARAM)) || ((this) \u003d\u003d (spoon.reflect.code.CtJavaDocTag.TagType.THROWS));\n    }\n\n    /**\n     * Get the tag type associated to a name\n     *\n     * @param tagName\n     *   the tag name\n     * @return the tag type\n     */\n    public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String tagName) {\n        for (spoon.reflect.code.CtJavaDocTag.TagType t : spoon.reflect.code.CtJavaDocTag.TagType.values()) {\n            if (t.name().toLowerCase().equals(tagName.toLowerCase())) {\n                return t;\n            }\n        }\n        return spoon.reflect.code.CtJavaDocTag.TagType.UNKNOWN;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (spoon.reflect.code.CtJavaDocTag.JAVADOC_TAG_PREFIX) + (name().toLowerCase());\n    }\n}\n\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d10]#value[index\u003d0]#value\nShadow: AUTHOR\nNormal: AUTHOR\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d1]#value\nShadow: DEPRECATED\nNormal: DEPRECATED\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d2]#value\nShadow: EXCEPTION\nNormal: EXCEPTION\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d3]#value\nShadow: PARAM\nNormal: PARAM\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d4]#value\nShadow: RETURN\nNormal: RETURN\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d5]#value\nShadow: SEE\nNormal: SEE\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d6]#value\nShadow: SERIAL\nNormal: SERIAL\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d7]#value\nShadow: SERIAL_DATA\nNormal: SERIAL_DATA\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d8]#value\nShadow: SERIAL_FIELD\nNormal: SERIAL_FIELD\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d9]#value\nShadow: SINCE\nNormal: SINCE\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d10]#value\nShadow: THROWS\nNormal: THROWS\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d11]#value\nShadow: VERSION\nNormal: VERSION\n\nDifference on path: #typeMember[index\u003d10]#value[index\u003d12]#value\nShadow: UNKNOWN\nNormal: UNKNOWN\n\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nDifference on path: #typeMember[index\u003d4]#body\nShadow: null\nNormal: {\n    if (element \u003d\u003d null) {\n        return null;\n    }\n    if (element instanceof spoon.reflect.declaration.CtMethod) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.METHOD;\n    }\n    if ((element instanceof spoon.reflect.declaration.CtAnnotation) || (element instanceof spoon.reflect.declaration.CtAnnotationType)) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.ANNOTATION_TYPE;\n    }\n    if (element instanceof spoon.reflect.declaration.CtType) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE;\n    }\n    if (element instanceof spoon.reflect.declaration.CtField) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.FIELD;\n    }\n    if (element instanceof spoon.reflect.declaration.CtConstructor) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.CONSTRUCTOR;\n    }\n    if (element instanceof spoon.reflect.declaration.CtParameter) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.PARAMETER;\n    }\n    if (element instanceof spoon.reflect.code.CtLocalVariable) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.LOCAL_VARIABLE;\n    }\n    if (element instanceof spoon.reflect.declaration.CtPackage) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.PACKAGE;\n    }\n    if (element instanceof spoon.reflect.reference.CtTypeParameterReference) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_PARAMETER;\n    }\n    if (element instanceof spoon.reflect.reference.CtTypeReference) {\n        return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_USE;\n    }\n    return null;\n}\n\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nMissing shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic \u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getMethod(spoon.reflect.reference.CtTypeReference\u003cR\u003e returnType, java.lang.String name, spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes) {\n    if (((\"values\".equals(name)) \u0026\u0026 ((parameterTypes.length) \u003d\u003d 0)) \u0026\u0026 (returnType.equals(getReference()))) {\n        return valuesMethod();\n    }else\n        if ((((\"valueOf\".equals(name)) \u0026\u0026 ((parameterTypes.length) \u003d\u003d 1)) \u0026\u0026 (parameterTypes[0].equals(factory.Type().STRING))) \u0026\u0026 (returnType.equals(factory.Type().createArrayReference(getReference())))) {\n            return valueOfMethod();\n        }else {\n            return super.getMethod(returnType, name, parameterTypes);\n        }\n\n}\n\nMissing shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[])\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic \u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getMethod(java.lang.String name, spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes) {\n    if ((\"values\".equals(name)) \u0026\u0026 ((parameterTypes.length) \u003d\u003d 0)) {\n        return valuesMethod();\n    }else\n        if (((\"valueOf\".equals(name)) \u0026\u0026 ((parameterTypes.length) \u003d\u003d 1)) \u0026\u0026 (parameterTypes[0].equals(factory.Type().STRING))) {\n            return valueOfMethod();\n        }else {\n            return super.getMethod(name, parameterTypes);\n        }\n\n}\n\nUnexpected shadow typeMember: getMethod(spoon.reflect.reference.CtTypeReference,java.lang.String,spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: getMethod(java.lang.String,spoon.reflect.reference.CtTypeReference[][])\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData\nUnexpected shadow typeMember: $jacocoData",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    }
  ]
}