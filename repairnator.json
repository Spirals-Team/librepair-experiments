{
  "totalNumberSkippingTests": 3,
  "bugType": "only_fail",
  "totalNumberErroringTests": 35,
  "repo": "testcontainers/testcontainers-java",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 6,
      "ComputeTestDir": 0,
      "ResolveDependency": 25,
      "BuildProject": 95,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 4,
      "CloneRepository": 5,
      "NopolRepair": 134,
      "CheckoutPatchedBuild": 0,
      "TestProject": 569,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 4,
      "CommitPatch": 8
    },
    "FailureNames": [
      "java.lang.IllegalStateException",
      "java.lang.AssertionError",
      "java.lang.ExceptionInInitializerError",
      "skipped"
    ],
    "NbFailingTests": 36,
    "BugCommitUrl": "http://github.com/testcontainers/testcontainers-java/commit/96bf1880ef6c2ca26eb63586308f38edc34b1782",
    "ReproductionDate": "May 23, 2017 4:42:47 PM",
    "BuggyBuildId": 235111392,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/testcontainers/testcontainers-java/builds/235111392",
    "BuggyBuildDate": "May 23, 2017 8:50:56 AM",
    "BugCommit": "96bf1880ef6c2ca26eb63586308f38edc34b1782",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 66,
    "NbLibraries": 65,
    "NbFileApp": 188,
    "NbFileTests": 102,
    "NbCPU": 4,
    "FreeMemory": 1091123640,
    "TotalMemory": 1553989632,
    "AngelicValuesByTest": {
      "org/testcontainers/utility/DirectoryTarResourceTest": 0,
      "org/testcontainers/junit/DockerComposeErrorHandlingTest": 0,
      "org/testcontainers/junit/ParameterizedDockerfileContainerTest": 0,
      "org/testcontainers/junit/DockerComposeOverrideTest": 0,
      "org/testcontainers/DockerClientFactoryTest": 0,
      "org/testcontainers/junit/wait/LogMessageWaitStrategyTest": 0,
      "org/testcontainers/junit/DockerComposeContainerScalingTest": 0,
      "org/testcontainers/junit/FixedHostPortContainerTest": 0,
      "org/testcontainers/junit/wait/HostPortWaitStrategyTest": 0,
      "org/testcontainers/junit/DockerComposeDoNotOverrideTest": 0,
      "org/testcontainers/junit/GenericContainerRuleTest": 0,
      "org/testcontainers/junit/DockerComposePassthroughTest": 0,
      "org/testcontainers/junit/DockerfileContainerTest": 0,
      "org/testcontainers/junit/DockerfileTest": 0,
      "org/testcontainers/junit/wait/HttpWaitStrategyTest": 0,
      "org/testcontainers/junit/WorkingDirectoryTest": 0,
      "org/testcontainers/junit/DockerComposeV2FormatTest": 0,
      "org/testcontainers/junit/OutputStreamTest": 0,
      "org/testcontainers/junit/DockerComposeContainerTest": 0,
      "org/testcontainers/junit/NonExistentImagePullTest": 0,
      "org/testcontainers/dockerclient/DockerClientConfigUtilsTest": 0,
      "org/testcontainers/junit/DockerNetworkModeTest": 0,
      "org/testcontainers/junit/DockerComposeV2WithNetworkTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 112087128,
      "ComputeClasspath": 153769976,
      "ComputeTestDir": 156646336,
      "ResolveDependency": 145188656,
      "BuildProject": 128877352,
      "ComputeSourceDir": 153769976,
      "InitRepoToPush": 163124656,
      "CloneRepository": 115712928,
      "NopolRepair": 1286743416,
      "CheckoutPatchedBuild": 1091123640,
      "TestProject": 162805016,
      "GatherTestInformation": 123771248,
      "PushIncriminatedBuild": 157254128,
      "CommitPatch": 1091123640
    }
  },
  "bugCommit": "https://github.com/testcontainers/testcontainers-java/compare/c76b8a14a051...96bf1880ef6c",
  "failingModule": "/root/workspace/testcontainers/testcontainers-java/235111392/core",
  "hostname": "repairnator",
  "totalNumberFailingTests": 1,
  "error-types": [
    "java.lang.IllegalStateException",
    "java.lang.AssertionError",
    "java.lang.ExceptionInInitializerError",
    "skipped"
  ],
  "totalNumberRunningTests": 66,
  "failing-test-cases": [
    {
      "className": "org.testcontainers.junit.DockerComposeV2WithNetworkTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeV2WithNetworkTest#org.testcontainers.junit.DockerComposeV2WithNetworkTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.WorkingDirectoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.WorkingDirectoryTest#org.testcontainers.junit.WorkingDirectoryTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.ParameterizedDockerfileContainerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.ParameterizedDockerfileContainerTest#simpleTest[alpine:3.3]",
        "org.testcontainers.junit.ParameterizedDockerfileContainerTest#simpleTest[alpine:3.2]"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.junit.DockerComposePassthroughTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposePassthroughTest#org.testcontainers.junit.DockerComposePassthroughTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeContainerScalingTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeContainerScalingTest#org.testcontainers.junit.DockerComposeContainerScalingTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.wait.HttpWaitStrategyTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.wait.HttpWaitStrategyTest#testWaitUntilReady_Success",
        "org.testcontainers.junit.wait.HttpWaitStrategyTest#testWaitUntilReady_Timeout"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.junit.OutputStreamTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.OutputStreamTest#testFetchStdoutWithTimeout",
        "org.testcontainers.junit.OutputStreamTest#testFetchStdoutWithNoLimit",
        "org.testcontainers.junit.OutputStreamTest#testToStringConsumer",
        "org.testcontainers.junit.OutputStreamTest#testLogConsumer",
        "org.testcontainers.junit.OutputStreamTest#testFetchStdout"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "org.testcontainers.junit.DockerNetworkModeTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerNetworkModeTest#org.testcontainers.junit.DockerNetworkModeTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeOverrideTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeOverrideTest#org.testcontainers.junit.DockerComposeOverrideTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.utility.DirectoryTarResourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.utility.DirectoryTarResourceTest#simpleRecursiveFileTest",
        "org.testcontainers.utility.DirectoryTarResourceTest#simpleRecursiveClasspathResourceTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.junit.NonExistentImagePullTest",
      "failingMethods": [
        "org.testcontainers.junit.NonExistentImagePullTest#pullingNonExistentImageFailsGracefully"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Pulling a nonexistent container will cause an exception to be thrown: IllegalStateException was thrown instead of ContainerFetchException",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.testcontainers.junit.DockerfileContainerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerfileContainerTest#simpleDslTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeV2FormatTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeV2FormatTest#org.testcontainers.junit.DockerComposeV2FormatTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.FixedHostPortContainerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.FixedHostPortContainerTest#testFixedHostPortMapping"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.wait.LogMessageWaitStrategyTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.wait.LogMessageWaitStrategyTest#testWaitUntilReady_Timeout",
        "org.testcontainers.junit.wait.LogMessageWaitStrategyTest#testWaitUntilReady_Success"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.junit.DockerComposeContainerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeContainerTest#org.testcontainers.junit.DockerComposeContainerTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.GenericContainerRuleTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.GenericContainerRuleTest#org.testcontainers.junit.GenericContainerRuleTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerfileTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerfileTest#filePermissions",
        "org.testcontainers.junit.DockerfileTest#simpleDockerfileWorks",
        "org.testcontainers.junit.DockerfileTest#customizableImage",
        "org.testcontainers.junit.DockerfileTest#dockerfileBuilderWorks"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.testcontainers.junit.wait.HostPortWaitStrategyTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.wait.HostPortWaitStrategyTest#testWaitUntilReady_Success",
        "org.testcontainers.junit.wait.HostPortWaitStrategyTest#testWaitUntilReady_Timeout"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.dockerclient.DockerClientConfigUtilsTest",
      "failingMethods": [
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnDockerHostIpWhenHttpsUri",
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnNullWhenUnsupportedUriScheme",
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnDockerHostIpWhenHttpUri"
      ],
      "erroringMethods": [
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnLocalhostWhenUnixSocket",
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnDockerHostIpWhenTcpUri"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.junit.DockerComposeDoNotOverrideTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeDoNotOverrideTest#org.testcontainers.junit.DockerComposeDoNotOverrideTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.DockerClientFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.DockerClientFactoryTest#runCommandInsideDockerShouldNotFailIfImageDoesNotExistsLocally"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeErrorHandlingTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeErrorHandlingTest#simpleTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}