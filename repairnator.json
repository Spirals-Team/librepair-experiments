{
  "bugType": "only_fail",
  "hostname": "spirals-repairnator",
  "repo": "ftomassetti/javaparser",
  "metrics": {
    "FailureNames": [
      "java.lang.UnsupportedOperationException",
      "com.github.javaparser.resolution.UnsolvedSymbolException",
      "java.lang.AssertionError",
      "java.lang.RuntimeException"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 2,
      "ComputeClasspath": 8,
      "ComputeTestDir": 0,
      "BuildProject": 59,
      "InitRepoToPush": 6,
      "ComputeSourceDir": 1,
      "ComputeModules": 0,
      "AstorJMut": 149,
      "CloneRepository": 13,
      "CheckoutPatchedBuild": 0,
      "NopolAllTests": 52,
      "NPEFix": 0,
      "TestProject": 418,
      "GatherTestInformation": 0,
      "CommitPatch": 14
    },
    "NbFailingTests": 1,
    "NbErroringTests": 54,
    "NbSkippingTests": 6,
    "NbRunningTests": 2213,
    "BugCommitUrl": "http://github.com/ftomassetti/javaparser/commit/1b47288751aae6a20466bb405b5331c719afb0e0",
    "ReproductionDate": "Jul 29, 2018 11:17:07 AM",
    "BuggyBuildId": 409480835,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/ftomassetti/javaparser/builds/409480835",
    "BuggyBuildDate": "Jul 29, 2018 11:16:48 AM",
    "BugCommit": "1b47288751aae6a20466bb405b5331c719afb0e0",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 16,
    "NbFileApp": 615,
    "NbFileTests": 256,
    "NbCPU": 4,
    "FreeMemory": 940475280,
    "TotalMemory": 1438121984,
    "AngelicValuesByTest": {
      "com/github/javaparser/symbolsolver/resolution/naming/NameLogicDisambiguationTest:com/github/javaparser/symbolsolver/resolution/JavaParserFacadeResolutionTest:com/github/javaparser/symbolsolver/resolution/javaparser/contexts/FieldAccessContextResolutionTest:com/github/javaparser/symbolsolver/resolution/ContextTest:com/github/javaparser/symbolsolver/resolution/GenericsResolutionTest:com/github/javaparser/symbolsolver/javaparsermodel/contexts/MultiCatchMethodCallExprTest:com/github/javaparser/symbolsolver/resolution/VariadicResolutionTest:com/github/javaparser/symbolsolver/resolution/StatementContextResolutionTest:com/github/javaparser/symbolsolver/resolution/javaparser/declarations/JavaParserTypeParameterResolutionTest:com/github/javaparser/symbolsolver/resolution/javaparser/contexts/MethodCallExprContextResolutionTest:com/github/javaparser/symbolsolver/javaparsermodel/DifferentiateDotExpressionTest:com/github/javaparser/symbolsolver/resolution/FieldsResolutionTest:com/github/javaparser/symbolsolver/resolution/javaparser/contexts/LambdaExprContextResolutionTest:com/github/javaparser/symbolsolver/javaparsermodel/declarations/JavaParserAnonymousClassDeclarationTest:com/github/javaparser/symbolsolver/resolution/EnumResolutionTest:com/github/javaparser/symbolsolver/resolution/AnalyseNewJavaParserHelpersTest:com/github/javaparser/symbolsolver/resolution/LambdaResolutionTest:": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 211881848,
      "ComputeClasspath": 242448456,
      "ComputeTestDir": 228390616,
      "BuildProject": 194238912,
      "InitRepoToPush": 245500000,
      "ComputeSourceDir": 928542448,
      "ComputeModules": 928542448,
      "AstorJMut": 1018280160,
      "CloneRepository": 309527640,
      "CheckoutPatchedBuild": 940475280,
      "NopolAllTests": 1078355840,
      "NPEFix": 1078355840,
      "TestProject": 175736264,
      "GatherTestInformation": 152544376,
      "CommitPatch": 940475280
    },
    "NbSucceedingTests": 2158
  },
  "failing-test-cases": [
    {
      "className": "com.github.javaparser.symbolsolver.resolution.naming.NameLogicDisambiguationTest",
      "failingMethods": [],
      "erroringMethods": [
        "ambiguousNameToLocalVar"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.JavaParserFacadeResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "solvingReferenceToCatchClauseParam",
        "solvingReferenceToUnsupportedOperationException",
        "solveTryWithResourceVariable"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.FieldAccessContextResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "solveMethodCallInFieldAccessContext"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.ContextTest",
      "failingMethods": [],
      "erroringMethods": [
        "resolveTypeUsageOfCascadeMethodInGenericClass",
        "resolveDeclaredFieldReference",
        "resolveReferenceToCallOnLambdaParam",
        "resolveParameterReference",
        "resolveTypeUsageOfFirstMethodInGenericClass",
        "resolveReferenceToMethodCalledOnArrayAccess",
        "resolveReferenceToOverloadMethodFindStricter",
        "resolveReferenceToLambdaParam",
        "localVariableDeclarationInScope",
        "resolveCascadeOfReferencesToMethod",
        "resolveGenericReturnTypeOfMethodInJar",
        "resolveReferenceToOverloadMethodFindOnlyCompatible",
        "resolveTypeUsageOfMethodInGenericClass",
        "resolveReferenceToMethod",
        "resolveLambdaType",
        "resolveInheritedFieldReference",
        "resolveReferenceToOverloadMethodWithNullParam"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter (t) -\u003e t.getName().equals(name) of method call cu.getTypes().stream().filter((t) -\u003e t.getName().equals(name))",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter (t) -\u003e t.getName().equals(name) of method call cu.getTypes().stream().filter((t) -\u003e t.getName().equals(name))",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "failureDetail": "Unsolved symbol in array[0].trim() : array[0]",
          "isError": true
        },
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "failureDetail": "Unsolved symbol in cu.getTypes() : cu",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "failureDetail": "Unsolved symbol in cu.getTypes().stream().filter((t) -\u003e t.getName().equals(name)) : cu.getTypes().stream()",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "failureDetail": "Unsolved symbol in cu.getTypes().stream() : cu.getTypes()",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter (t) -\u003e t.getName().equals(name) of method call cu.getTypes().stream().filter((t) -\u003e t.getName().equals(name))",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 17
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.GenericsResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "classCastScope",
        "classCast",
        "resolveUsageOfMethodOfGenericClass",
        "methodWithGenericParameterTypes",
        "typeParamOnReturnTypeStep2",
        "typeParamOnReturnType",
        "typeParamOnReturnTypeStep3",
        "methodTypeParams"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter n2 of method call n1.accept(this, n2)",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter n2 of method call n1.accept(this, n2)",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter arg of method call javadocComment.accept(this, arg)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "com.github.javaparser.symbolsolver.javaparsermodel.contexts.MultiCatchMethodCallExprTest",
      "failingMethods": [],
      "erroringMethods": [
        "issue1482"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.VariadicResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "selectMostSpecificVariadic"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.StatementContextResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "resolveLocalVariableInParentOfParent",
        "resolveLocalVariableInParent",
        "resolveLocalAndSeveralAnnidatedLevels"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.javaparser.declarations.JavaParserTypeParameterResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "genericMethodWithGenericClassBasedArgument",
        "declaredOnMethodNegativeCase",
        "declaredOnMethodPositiveCase",
        "genericMethodWithGenericClassArgument"
      ],
      "failures": [
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "failureDetail": "Unsolved symbol in items.apply(Transforms.of(new DoFn\u003cInteger, Long\u003e() {\n})) : items",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Unable to calculate the type of a parameter of a method call. Method call: foo(s), Parameter: s",
          "isError": true
        },
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "failureDetail": "Unsolved symbol in items.apply(Transforms.of(new MyFn2())) : items",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Unable to calculate the type of a parameter of a method call. Method call: foo(a), Parameter: a",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.MethodCallExprContextResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "solveNestedMethodCallExprContextWithoutScope"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.javaparsermodel.DifferentiateDotExpressionTest",
      "failingMethods": [
        "packageStaticMethodCalls"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003ctrue\u003e but was:\u003cfalse\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.FieldsResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "resolveClassFieldOfClassExtendingUnknownClass1"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.javaparser.contexts.LambdaExprContextResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "solveParameterOfLambdaInMethodCallExpr"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter p -\u003e p.toLowerCase() of method call persons.stream().map(p -\u003e p.toLowerCase())",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.javaparsermodel.declarations.JavaParserAnonymousClassDeclarationTest",
      "failingMethods": [],
      "erroringMethods": [
        "callingSuperClassInnerClassMethod",
        "callingAnonymousClassInnerMethod"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.EnumResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "enumAndStaticInitializer"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter unboxedType.nameOfBoxedType of method call unboxMap.put(unboxedType.nameOfBoxedType, unboxedType)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.AnalyseNewJavaParserHelpersTest",
      "failingMethods": [],
      "erroringMethods": [
        "nodesTypeIsCorrect"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.github.javaparser.symbolsolver.resolution.LambdaResolutionTest",
      "failingMethods": [],
      "erroringMethods": [
        "lambdaCollect",
        "lambdaMap",
        "lambdaMapParameter",
        "lambdaBlockMultiLineReturn",
        "lambdaBifunc",
        "typeOfVoidLambda",
        "personsStream",
        "lambdaBlockExplicitReturn"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter p -\u003e p.toLowerCase() of method call persons.stream().map(p -\u003e p.toLowerCase())",
          "isError": true
        },
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "failureDetail": "Unsolved symbol in persons.stream().map(p -\u003e p.toLowerCase()) : persons.stream()",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter i -\u003e {\n    int irrelevant;\n    return addPerson(\"\");\n} of method call persons.stream().parallel().map(i -\u003e {\n    int irrelevant;\n    return addPerson(\"\");\n})",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error calculating the type of parameter i -\u003e {\n    return addPerson(\"\");\n} of method call persons.stream().parallel().map(i -\u003e {\n    return addPerson(\"\");\n})",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "isError": true
        },
        {
          "failureName": "com.github.javaparser.resolution.UnsolvedSymbolException",
          "failureDetail": "Unsolved symbol in persons.stream().forEach(p -\u003e {\n    System.out.println(p);\n}) : persons.stream()",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    }
  ],
  "failingModule": "/root/workspace/ftomassetti/javaparser/409480835/javaparser-symbol-solver-testing",
  "bugCommit": "https://github.com/ftomassetti/javaparser/compare/dccbbfd1ba48...1b47288751aa"
}