{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 163,
  "repo": "INRIA/spoon",
  "metrics": {
    "ReproductionDate": "Jun 13, 2018 8:23:33 PM",
    "BuggyBuildId": 391880446,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/391880446",
    "BuggyBuildDate": "Jun 13, 2018 8:23:12 PM",
    "BugCommit": "157dc2a68fca6aa1354a4251ea6c93dc1f399cb8",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 30,
    "NbFileApp": 0,
    "NbFileTests": 682,
    "NbCPU": 32,
    "FreeMemory": 2281155216,
    "TotalMemory": 6393167872,
    "AngelicValuesByTest": {
      "spoon/support/visitor/java/JavaReflectionTreeBuilderTest": 0,
      "spoon/processing/CtGenerationTest": 0,
      "spoon/test/template/TemplateTest": 0,
      "spoon/test/eval/EvalTest": 0,
      "spoon/test/filters/FilterTest": 0,
      "spoon/MavenLauncherTest": 0,
      "spoon/test/imports/ImportTest": 0,
      "spoon/test/main/MainTest": 0,
      "spoon/test/api/MetamodelTest": 0,
      "spoon/test/architecture/SpoonArchitectureEnforcerTest": 0,
      "spoon/test/variable/AccessFullyQualifiedFieldTest": 0,
      "spoon/test/support/ResourceTest": 0,
      "spoon/test/processing/ProcessingTest": 0,
      "spoon/test/staticFieldAccess2/ImplicitStaticFieldReferenceTest": 0,
      "spoon/test/generics/GenericsTest": 0,
      "spoon/test/template/PatternTest": 0,
      "spoon/test/ctType/CtTypeTest": 0,
      "spoon/test/prettyprinter/DefaultPrettyPrinterTest": 0,
      "spoon/test/trycatch/TryCatchTest": 0,
      "spoon/test/annotation/AnnotationTest": 0,
      "spoon/reflect/visitor/CtScannerTest": 0,
      "spoon/processing/ProcessingTest": 0,
      "spoon/test/javadoc/JavaDocTest": 0,
      "spoon/test/query_function/VariableReferencesTest": 0,
      "spoon/test/model/TypeTest": 0,
      "spoon/test/pkg/PackageTest": 0,
      "spoon/reflect/ast/AstCheckerTest": 0,
      "spoon/LauncherTest": 0,
      "spoon/test/jdtimportbuilder/ImportBuilderTest": 0,
      "spoon/test/ctBodyHolder/CtBodyHolderTest": 0,
      "spoon/test/prettyprinter/PrinterTest": 0,
      "spoon/test/position/PositionTest": 0,
      "spoon/test/imports/ImportScannerTest": 0,
      "spoon/reflect/ast/CloneTest": 0,
      "spoon/test/refactoring/RefactoringTest": 0,
      "spoon/test/intercession/IntercessionTest": 0,
      "spoon/test/refactoring/CtRenameLocalVariableRefactoringTest": 0,
      "spoon/test/compilation/CompilationTest": 0,
      "spoon/test/api/APITest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 512019608,
      "ComputeClasspath": 317422704,
      "ComputeTestDir": 317422704,
      "BuildProject": 494717320,
      "InitRepoToPush": 319400840,
      "ComputeSourceDir": 317422704,
      "AstorJMut": 2333792864,
      "CloneRepository": 492456344,
      "CheckoutPatchedBuild": 2281155216,
      "Nopol": 2813852768,
      "NPEFix": 2739284464,
      "TestProject": 474474280,
      "GatherTestInformation": 432490112,
      "CommitPatch": 2281155216
    },
    "NbSucceedingTests": 1321,
    "FailureNames": [
      "java.lang.UnsupportedOperationException",
      "spoon.SpoonException",
      "java.lang.AssertionError",
      "java.lang.NullPointerException",
      "spoon.compiler.ModelBuildingException",
      "org.junit.ComparisonFailure"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 5,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "BuildProject": 60,
      "InitRepoToPush": 3,
      "ComputeSourceDir": 0,
      "AstorJMut": 15,
      "CloneRepository": 6,
      "CheckoutPatchedBuild": 0,
      "Nopol": 620,
      "NPEFix": 10,
      "TestProject": 164,
      "GatherTestInformation": 0,
      "CommitPatch": 2
    },
    "NbFailingTests": 11,
    "NbErroringTests": 163,
    "NbSkippingTests": 4,
    "NbRunningTests": 1495,
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/157dc2a68fca6aa1354a4251ea6c93dc1f399cb8"
  },
  "failingModule": "/root/workspace/INRIA/spoon/391880446",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 11,
  "error-types": [
    "java.lang.UnsupportedOperationException",
    "spoon.SpoonException",
    "java.lang.AssertionError",
    "java.lang.NullPointerException",
    "spoon.compiler.ModelBuildingException",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1495,
  "failing-test-cases": [
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCatchWithExplicitFinalVariable"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Statement cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/trycatch/testclasses/Bar.java:6",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRoleOnField",
        "testGetAllMetamodelInterfacess",
        "testGetterSetterFroRole",
        "testMetamodelWithoutSources"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "no glb for [\u003cT extends CtReference\u003e, [MISSING:CtReference]]",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The hierarchy of the type CtConstructor is inconsistent at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/reflect/declaration/CtConstructor.java:28",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The hierarchy of the type CtConstructor is inconsistent at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/reflect/declaration/CtConstructor.java:28",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSuperInheritanceHierarchyFunctionListener",
        "testStaticMethodWithDifferentClassSameNameCollision",
        "testSortImportPutStaticImportAfterTypeImport",
        "testAccessToNestedClass",
        "testImportStarredPackageWithNonVisibleClass",
        "testSpoonWithImports",
        "testStaticMethodWithDifferentClassSameNameJava3NoCollision",
        "testAccessType",
        "testCanAccess",
        "testStaticMethodWithDifferentClassSameNameJava7NoCollision",
        "testSuperInheritanceHierarchyFunction",
        "testWithInnerEnumDoesNotImportStaticInnerMethods",
        "testImportOfAnInnerClassInASuperClassPackageFullQualified"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestCase cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/enums/EnumTestSuite.java:9",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestCase cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/enums/EnumTestSuite.java:9",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "spoon.test.imports.testclasses.internal.PublicInterface2 cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/ClientClass.java:7",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "ChildClass cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/ClientClass.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "ChildClass cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/ClientClass.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "ItfWithEnum cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/StaticImportsFromEnum.java:39",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.test.imports.testclasses.ClientClass cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/internal/ChildClass.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestCase cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/enums/EnumTestSuite.java:9",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "spoon.reflect.ast.AstCheckerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPushToStackChanges"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "no glb for [\u003cT extends CtReference\u003e, [MISSING:CtReference]]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRenameAllLocalVariablesOfRenameTestSubject",
        "testRefactorWrongUsage",
        "testRenameLocalVariableToSameName"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.position.PositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPositionTryCatch"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testShadowModelEqualsNormalModel"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetExecDeclarationOfEnumSetOf",
        "testWildCardonShadowClass",
        "testInvocationGenerics",
        "testIsSameSignatureWithMethodGenerics",
        "testMethodsWithGenericsWhoExtendsObject",
        "testNewClassGenerics",
        "testIsSameSignatureWithReferencedGenerics",
        "testGenericsInQualifiedNameInConstructorCall",
        "testConstructorCallGenerics",
        "testName"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses2/SameSignature3.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "CtElement cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses/FakeTpl.java:10",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses2/SameSignature2.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/generics/testclasses/EnumSetOf.java:5",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.model.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetDeclaredOrIheritedFieldOnType",
        "testGetDeclaredOrIheritedFieldOnTypeRef"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Foo cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/model/ClassWithSuperAndIFace.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Foo cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/model/ClassWithSuperAndIFace.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testScannerCallsAllProperties"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.SpoonException cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/reflect/visitor/filter/LocalVariableReferenceFunction.java:19",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "testThisInConstructorAfterATransformation",
        "testTransformedInstanceofAfterATransformation",
        "testThisInConstructor"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/refactoring/testclasses/CtRenameLocalVariableRefactoringTestSubject.java:9",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.ctBodyHolder.CtBodyHolderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testWhileWithBlock",
        "testForWithBlock",
        "testMethod",
        "testTryCatch",
        "testConstructor",
        "testForWithStatement"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "StatementTemplate cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctBodyHolder/testclasses/CWBStatementTemplate.java:6",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "testProcessorWithGenericType",
        "testCallProcessorWithMultipleTypes"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/StaticNoOrdered.java:4",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [
        "testSetterInNodes"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Check the number of if in method setIndexExpression(spoon.reflect.code.CtExpression) in the declaring class spoon.support.reflect.code.CtArrayAccessImpl expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRepeatSameAnnotationOnClass",
        "testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod",
        "testRepeatSameAnnotationOnMethod",
        "testUsageOfTypeAnnotationOnLocalVariableInMethod",
        "testUsageOfTypeAnnotationWithGenericTypesInStatements",
        "testRepeatSameAnnotationOnConstructor",
        "testRepeatSameAnnotationOnLocalVariable",
        "testUsageOfTypeAnnotationInExtendsImplementsOfAClass",
        "testReplaceAnnotationValue",
        "testOutputGeneratedByTypeAnnotation",
        "testUsageOfTypeAnnotationInReturnTypeInMethod",
        "testRepeatSameAnnotationOnPackage",
        "testUsageOfParametersInTypeAnnotation",
        "testDefaultValueInAnnotationsForAnnotationFields",
        "testUsageOfTypeAnnotationInCast",
        "testModelBuildingAnnotationBoundUsage",
        "testRepeatSameAnnotationOnField",
        "testAccessAnnotationValue",
        "testRepeatSameAnnotationOnParameter",
        "testUsageOfTypeAnnotationOnParameterInMethod",
        "testUsageOfTypeAnnotationInNewInstance",
        "testAnnotationParameterTypes",
        "testSpoonSpoonResult",
        "testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration",
        "testAnnotationIntrospection"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/Main.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "InnerAnnot cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationDefaultAnnotation.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.test.annotation.testclasses.PortRange cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/dropwizard/GraphiteReporterFactory.java:15",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/Main.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationIntrospection.java:8",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/Main.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/Main.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "BasicAnnotation cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsAppliedOnAnyTypeInAClass.java:44",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "AnnotationRepeated cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/annotation/testclasses/AnnotationsRepeated.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 25
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [
        "testTemplateMatcherWithWholePackage",
        "substituteTypeAccessReference",
        "testTemplateMatcher"
      ],
      "erroringMethods": [
        "testTemplateArrayAccess",
        "testExtensionBlock",
        "testTemplateInterfaces",
        "testTemplateMatcherMatchTwoSnippets"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Parameter value class: spoon.support.reflect.code.CtBlockImpl$1 cannot be converted to class is: spoon.reflect.code.CtExpression",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "SuperClass cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/inheritance/SubClass.java:3",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile testclasses because spoon.template cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/target/spooned/test/template/testclasses/spoon/test/template/testclasses/TypeReferenceClassAccessTemplate.java:4",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "ContextHelper cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/TwoSnippets.java:21",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.query_function.VariableReferencesTest",
      "failingMethods": [],
      "erroringMethods": [
        "testParameterReferenceFunction",
        "testLocalVariableReferenceFunction",
        "testLocalVariableReferenceDeclarationFunction",
        "testCatchVariableReferenceFunction",
        "testCheckModelConsistency",
        "testPotentialVariableAccessFromStaticMethod",
        "testVariableReferenceFunction",
        "testVariableScopeFunction"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/query_function/testclasses/VariableReferencesModelTest.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.support.ResourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFilteringFolder"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/visibility/VisibilityTest.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.LauncherTest",
      "failingMethods": [],
      "erroringMethods": [
        "testLauncherInEmptyWorkingDir"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/LauncherTest.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.PrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFQNModeWriteFQNConstructorInCtVisitor",
        "testAutoimportModeDontImportUselessStatic",
        "testJDTBatchCompilerCanBeBuild"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.test.prettyprinter.testclasses.sub cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/prettyprinter/testclasses/ImportStatic.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "spoon.reflect cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/support/visitor/replace/ReplacementVisitor.java:25",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "org.eclipse cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/support/compiler/jdt/JDTBatchCompiler.java:47",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.pkg.PackageTest",
      "failingMethods": [
        "testAddAnnotationToPackage"
      ],
      "erroringMethods": [
        "testAnnotationOnPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "AbstractProcessor cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/pkg/testclasses/ElementProcessor.java:10",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile package-info.java because The import spoon.test.annotation cannot be resolved at /root/workspace/INRIA/spoon/391880446/target/spoon-packageinfo/spoon/test/pkg/testclasses/package-info.java:5",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSrcMainJava",
        "testInterfacesAreCtScannable",
        "testSpecPackage",
        "testStaticClasses",
        "metamodelPackageRule",
        "testGoodTestClassNames",
        "testFactorySubFactory",
        "statelessFactory"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The hierarchy of the type CtExpressionImpl is inconsistent at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/support/reflect/code/CtExpressionImpl.java:33",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "no glb for [\u003cT extends CtReference\u003e, [MISSING:CtReference]]",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "CompilationUnit cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/support/compiler/jdt/CompilationUnitWrapper.java:27",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "CompilationUnit cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/support/compiler/jdt/CompilationUnitWrapper.java:27",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/api/MetamodelTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.compiler cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/reflect/factory/FactoryImpl.java:19",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.compiler cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/reflect/factory/FactoryImpl.java:19",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "CompilationUnit cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/support/compiler/jdt/CompilationUnitWrapper.java:27",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testWithSimpleImportNoAutoimport",
        "testSimpleStaticImport",
        "testWithSimpleImport"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.test.annotation cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/ClassWithInvocation.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.test.jdtimportbuilder.testclasses.staticimport cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/jdtimportbuilder/testclasses/StaticImport.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.test.annotation cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/ClassWithInvocation.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [
        "testGenerateCtBiScanner",
        "testGenerateRoleHandler"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "ModelRoleHandlers different expected:\u003c...ndler extends spoon.[reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtTypeAccess, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypeAccess_ACCESSED_TYPE_RoleHandler() {\n            super(CtRole.ACCESSED_TYPE, spoon.reflect.code.CtTypeAccess.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAccessedType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAccessedType(castValue(value));\n        }\n    }\n\n    static class CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtAnonymousExecutable\u003e {\n        private CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler() {\n            super(CtRole.ANNONYMOUS_EXECUTABLE, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtAnonymousExecutable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousExecutables())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAnonymousExecutables(castValue(value));\n        }\n    }\n\n    static class CtElement_ANNOTATION_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e {\n        private CtElement_ANNOTATION_RoleHandler() {\n            super(CtRole.ANNOTATION, spoon.reflect.declaration.CtElement.class, spoon.reflect.declaration.CtAnnotation.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAnnotations())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAnnotations(castValue(value));\n        }\n    }\n\n    static class CtAnnotation_ANNOTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtAnnotation, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.annotation.Annotation\u003e\u003e {\n        private CtAnnotation_ANNOTATION_TYPE_RoleHandler() {\n            super(CtRole.ANNOTATION_TYPE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAnnotationType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAnnotationType(castValue(value));\n        }\n    }\n\n    static class CtAbstractInvocation_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAbstractInvocation_ARGUMENT_RoleHandler() {\n            super(CtRole.ARGUMENT, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getArguments())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setArguments(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_ARGUMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtExecutableReference_ARGUMENT_TYPE_RoleHandler() {\n            super(CtRole.ARGUMENT_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setParameters(castValue(value));\n        }\n    }\n\n    static class CtAssignment_ASSIGNED_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAssignment, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAssignment_ASSIGNED_RoleHandler() {\n            super(CtRole.ASSIGNED, spoon.reflect.code.CtAssignment.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAssigned())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAssigned(castValue(value));\n        }\n    }\n\n    static class CtRHSReceiver_ASSIGNMENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtRHSReceiver, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtRHSReceiver_ASSIGNMENT_RoleHandler() {\n            super(CtRole.ASSIGNMENT, spoon.reflect.code.CtRHSReceiver.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAssignment())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAssignment(castValue(value));\n        }\n    }\n\n    static class CtBodyHolder_BODY_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtBodyHolder, spoon.reflect.code.CtStatement\u003e {\n        private CtBodyHolder_BODY_RoleHandler() {\n            super(CtRole.BODY, spoon.reflect.code.CtBodyHolder.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getBody())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setBody(castValue(value));\n        }\n    }\n\n    static class CtSynchronized_BODY_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtSynchronized, spoon.reflect.code.CtBlock\u003c?\u003e\u003e {\n        private CtSynchronized_BODY_RoleHandler() {\n            super(CtRole.BODY, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtBlock.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getBlock())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setBlock(castValue(value));\n        }\n    }\n\n    static class CtIntersectionTypeReference_BOUND_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtIntersectionTypeReference_BOUND_RoleHandler() {\n            super(CtRole.BOUND, spoon.reflect.reference.CtIntersectionTypeReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getBounds())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setBounds(castValue(value));\n        }\n    }\n\n    static class CtTypeParameterReference_BOUNDING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypeParameterReference_BOUNDING_TYPE_RoleHandler() {\n            super(CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtTypeParameterReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setBoundingType(castValue(value));\n        }\n    }\n\n    static class CtSwitch_CASE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase\u003c?\u003e\u003e {\n        private CtSwitch_CASE_RoleHandler() {\n            super(CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCases())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCases(castValue(value));\n        }\n    }\n\n    static class CtExpression_CAST_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtExpression_CAST_RoleHandler() {\n            super(CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTypeCasts(castValue(value));\n        }\n    }\n\n    static class CtTry_CATCH_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtTry, spoon.reflect.code.CtCatch\u003e {\n        private CtTry_CATCH_RoleHandler() {\n            super(CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCatchers(castValue(value));\n        }\n    }\n\n    static class CtElement_COMMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment\u003e {\n        private CtElement_COMMENT_RoleHandler() {\n            super(CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getComments())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setComments(castValue(value));\n        }\n    }\n\n    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtComment, java.lang.String\u003e {\n        private CtComment_COMMENT_CONTENT_RoleHandler() {\n            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getContent())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setContent(castValue(value));\n        }\n    }\n\n    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtJavaDocTag, java.lang.String\u003e {\n        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {\n            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getContent())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setContent(castValue(value));\n        }\n    }\n\n    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag\u003e {\n        private CtJavaDoc_COMMENT_TAG_RoleHandler() {\n            super(CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTags())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTags(castValue(value));\n        }\n    }\n\n    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType\u003e {\n        private CtComment_COMMENT_TYPE_RoleHandler() {\n            super(CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, CtComment.CommentType.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCommentType(castValue(value));\n        }\n    }\n\n    static class CtAssert_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtAssert_CONDITION_RoleHandler() {\n            super(CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAssertExpression(castValue(value));\n        }\n    }\n\n    static class CtConditional_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtConditional_CONDITION_RoleHandler() {\n            super(CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCondition(castValue(value));\n        }\n    }\n\n    static class CtIf_CONDITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtIf, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtIf_CONDITION_RoleHandler() {\n            super(CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCondition(castValue(value));\n        }\n    }\n\n    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor\u003c?\u003e\u003e {\n        private CtClass_CONSTRUCTOR_RoleHandler() {\n            super(CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setConstructors(castValue(value));\n        }\n    }\n\n    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType\u003c?\u003e\u003e {\n        private CtPackage_CONTAINED_TYPE_RoleHandler() {\n            super(CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTypes(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {\n            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDeclaringType(castValue(value));\n        }\n    }\n\n    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtFieldReference_DECLARING_TYPE_RoleHandler() {\n            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDeclaringType(castValue(value));\n        }\n    }\n\n    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypeReference_DECLARING_TYPE_RoleHandler() {\n            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDeclaringType(castValue(value));\n        }\n    }\n\n    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {\n            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDefaultExpression(castValue(value));\n        }\n    }\n\n    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {\n            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDefaultExpression(castValue(value));\n        }\n    }\n\n    static class CtNewArray_DIMENSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e\u003e {\n        private CtNewArray_DIMENSION_RoleHandler() {\n            super(CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDimensionExpressions(castValue(value));\n        }\n    }\n\n    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType\u003e {\n        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {\n            super(CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, CtJavaDocTag.TagType.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtConditional_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtConditional_ELSE_RoleHandler() {\n            super(CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setElseExpression(castValue(value));\n        }\n    }\n\n    static class CtIf_ELSE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtIf, spoon.reflect.code.CtStatement\u003e {\n        private CtIf_ELSE_RoleHandler() {\n            super(CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setElseStatement(castValue(value));\n        }\n    }\n\n    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference\u003c?\u003e\u003e {\n        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {\n            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExecutable(castValue(value));\n        }\n    }\n\n    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference\u003c?\u003e\u003e {\n        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {\n            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExecutable(castValue(value));\n        }\n    }\n\n    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport\u003e {\n        private CtModule_EXPORTED_PACKAGE_RoleHandler() {\n            super(CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExportedPackages(castValue(value));\n        }\n    }\n\n    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e\u003e {\n        private CtArrayAccess_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setIndexExpression(castValue(value));\n        }\n    }\n\n    static class CtAssert_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAssert_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtCase_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtCase, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtCase_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCaseExpression(castValue(value));\n        }\n    }\n\n    static class CtDo_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtDo, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtDo_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setLoopingExpression(castValue(value));\n        }\n    }\n\n    static class CtFor_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtFor, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtFor_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtForEach_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtForEach_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtLambda_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtLambda_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtNewArray_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getElements())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setElements(castValue(value));\n        }\n    }\n\n    static class CtReturn_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtReturn_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setReturnedExpression(castValue(value));\n        }\n    }\n\n    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtSwitch_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSelector(castValue(value));\n        }\n    }\n\n    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtSynchronized_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtThrow_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression\u003c? extends java.lang.Throwable\u003e\u003e {\n        private CtThrow_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThrownExpression(castValue(value));\n        }\n    }\n\n    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtUnaryOperator_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setOperand(castValue(value));\n        }\n    }\n\n    static class CtWhile_EXPRESSION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtWhile_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setLoopingExpression(castValue(value));\n        }\n    }\n\n    static class CtType_FIELD_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField\u003c?\u003e\u003e {\n        private CtType_FIELD_RoleHandler() {\n            super(CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getFields())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFields(castValue(value));\n        }\n    }\n\n    static class CtTry_FINALIZER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtTry, spoon.reflect.code.CtBlock\u003c?\u003e\u003e {\n        private CtTry_FINALIZER_RoleHandler() {\n            super(CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFinalizer(castValue(value));\n        }\n    }\n\n    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable\u003c?\u003e\u003e {\n        private CtForEach_FOREACH_VARIABLE_RoleHandler() {\n            super(CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setVariable(castValue(value));\n        }\n    }\n\n    static class CtFor_FOR_INIT_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtFor, spoon.reflect.code.CtStatement\u003e {\n        private CtFor_FOR_INIT_RoleHandler() {\n            super(CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setForInit(castValue(value));\n        }\n    }\n\n    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtFor, spoon.reflect.code.CtStatement\u003e {\n        private CtFor_FOR_UPDATE_RoleHandler() {\n            super(CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setForUpdate(castValue(value));\n        }\n    }\n\n    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference\u003e {\n        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {\n            super(CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setImplementationTypes(castValue(value));\n        }\n    }\n\n    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference\u003e {\n        private CtImport_IMPORT_REFERENCE_RoleHandler() {\n            super(CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getReference())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setReference(castValue(value));\n        }\n    }\n\n    static class CtType_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtType_INTERFACE_RoleHandler() {\n            super(CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSuperInterfaces(castValue(value));\n        }\n    }\n\n    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypeInformation_INTERFACE_RoleHandler() {\n            super(CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));\n        }\n    }\n\n    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtMethod, java.lang.Boolean\u003e {\n        private CtMethod_IS_DEFAULT_RoleHandler() {\n            super(CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDefaultMethod(castValue(value));\n        }\n    }\n\n    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtFieldReference, java.lang.Boolean\u003e {\n        private CtFieldReference_IS_FINAL_RoleHandler() {\n            super(CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFinal(castValue(value));\n        }\n    }\n\n    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtElement, java.lang.Boolean\u003e {\n        private CtElement_IS_IMPLICIT_RoleHandler() {\n            super(CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setImplicit(castValue(value));\n        }\n    }\n\n    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtShadowable, java.lang.Boolean\u003e {\n        private CtShadowable_IS_SHADOW_RoleHandler() {\n            super(CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setShadow(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtExecutableReference, java.lang.Boolean\u003e {\n        private CtExecutableReference_IS_STATIC_RoleHandler() {\n            super(CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setStatic(castValue(value));\n        }\n    }\n\n    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtFieldReference, java.lang.Boolean\u003e {\n        private CtFieldReference_IS_STATIC_RoleHandler() {\n            super(CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setStatic(castValue(value));\n        }\n    }\n\n    static class CtTypeParameterReference_IS_UPPER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtTypeParameterReference, java.lang.Boolean\u003e {\n        private CtTypeParameterReference_IS_UPPER_RoleHandler() {\n            super(CtRole.IS_UPPER, spoon.reflect.reference.CtTypeParameterReference.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setUpper(castValue(value));\n        }\n    }\n\n    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtParameter, java.lang.Boolean\u003e {\n        private CtParameter_IS_VARARGS_RoleHandler() {\n            super(CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setVarArgs(castValue(value));\n        }\n    }\n\n    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtJavaDocTag, java.lang.String\u003e {\n        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {\n            super(CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getParam())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setParam(castValue(value));\n        }\n    }\n\n    static class CtStatement_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtStatement, java.lang.String\u003e {\n        private CtStatement_LABEL_RoleHandler() {\n            super(CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setLabel(castValue(value));\n        }\n    }\n\n    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {\n            super(CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setLeftHandOperand(castValue(value));\n        }\n    }\n\n    static class CtType_METHOD_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod\u003c?\u003e\u003e {\n        private CtType_METHOD_RoleHandler() {\n            super(CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setMethods(castValue(value));\n        }\n    }\n\n    static class CtModifiable_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind\u003e {\n        private CtModifiable_MODIFIER_RoleHandler() {\n            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setModifiers(castValue(value));\n        }\n    }\n\n    static class CtModule_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtModule, java.lang.Boolean\u003e {\n        private CtModule_MODIFIER_RoleHandler() {\n            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setIsOpenModule(castValue(value));\n        }\n    }\n\n    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier\u003e {\n        private CtModuleRequirement_MODIFIER_RoleHandler() {\n            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, CtModuleRequirement.RequiresModifier.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setRequiresModifiers(castValue(value));\n        }\n    }\n\n    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind\u003e {\n        private CtTypeInformation_MODIFIER_RoleHandler() {\n            super(CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));\n        }\n    }\n\n    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective\u003e {\n        private CtModule_MODULE_DIRECTIVE_RoleHandler() {\n            super(CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setModuleDirectives(castValue(value));\n        }\n    }\n\n    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference\u003e {\n        private CtModuleRequirement_MODULE_REF_RoleHandler() {\n            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setModuleReference(castValue(value));\n        }\n    }\n\n    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference\u003e {\n        private CtPackageExport_MODULE_REF_RoleHandler() {\n            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTargetExport(castValue(value));\n        }\n    }\n\n    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {\n            super(CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setMultiTypes(castValue(value));\n        }\n    }\n\n    static class CtNamedElement_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtNamedElement, java.lang.String\u003e {\n        private CtNamedElement_NAME_RoleHandler() {\n            super(CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSimpleName(castValue(value));\n        }\n    }\n\n    static class CtReference_NAME_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtReference, java.lang.String\u003e {\n        private CtReference_NAME_RoleHandler() {\n            super(CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSimpleName(castValue(value));\n        }\n    }\n\n    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass\u003c?\u003e\u003e {\n        private CtNewClass_NESTED_TYPE_RoleHandler() {\n            super(CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAnonymousClass(castValue(value));\n        }\n    }\n\n    static class CtType_NESTED_TYPE_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType\u003c?\u003e\u003e {\n        private CtType_NESTED_TYPE_RoleHandler() {\n            super(CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setNestedTypes(castValue(value));\n        }\n    }\n\n    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport\u003e {\n        private CtModule_OPENED_PACKAGE_RoleHandler() {\n            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setOpenedPackages(castValue(value));\n        }\n    }\n\n    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtPackageExport, java.lang.Boolean\u003e {\n        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {\n            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setOpenedPackage(castValue(value));\n        }\n    }\n\n    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind\u003e {\n        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {\n            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getKind())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setKind(castValue(value));\n        }\n    }\n\n    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind\u003e {\n        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {\n            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getKind())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setKind(castValue(value));\n        }\n    }\n\n    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind\u003e {\n        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {\n            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getKind())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setKind(castValue(value));\n        }\n    }\n\n    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference\u003e {\n        private CtPackageExport_PACKAGE_REF_RoleHandler() {\n            super(CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setPackageReference(castValue(value));\n        }\n    }\n\n    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference\u003e {\n        private CtTypeReference_PACKAGE_REF_RoleHandler() {\n            super(CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setPackage(castValue(value));\n        }\n    }\n\n    static class CtCatch_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable\u003c? extends java.lang.Throwable\u003e\u003e {\n        private CtCatch_PARAMETER_RoleHandler() {\n            super(CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setParameter(castValue(value));\n        }\n    }\n\n    static class CtExecutable_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter\u003c?\u003e\u003e {\n        private CtExecutable_PARAMETER_RoleHandler() {\n            super(CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setParameters(castValue(value));\n        }\n    }\n\n    static class CtElement_POSITION_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition\u003e {\n        private CtElement_POSITION_RoleHandler() {\n            super(CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setPosition(castValue(value));\n        }\n    }\n\n    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService\u003e {\n        private CtModule_PROVIDED_SERVICE_RoleHandler() {\n            super(CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setProvidedServices(castValue(value));\n        }\n    }\n\n    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement\u003e {\n        private CtModule_REQUIRED_MODULE_RoleHandler() {\n            super(CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setRequiredModules(castValue(value));\n        }\n    }\n\n    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {\n            super(CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setRightHandOperand(castValue(value));\n        }\n    }\n\n    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService\u003e {\n        private CtModule_SERVICE_TYPE_RoleHandler() {\n            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setUsedServices(castValue(value));\n        }\n    }\n\n    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference\u003e {\n        private CtProvidedService_SERVICE_TYPE_RoleHandler() {\n            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setServiceType(castValue(value));\n        }\n    }\n\n    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference\u003e {\n        private CtUsedService_SERVICE_TYPE_RoleHandler() {\n            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setServiceType(castValue(value));\n        }\n    }\n\n    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtCodeSnippet, java.lang.String\u003e {\n        private CtCodeSnippet_SNIPPET_RoleHandler() {\n            super(CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValue())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValue(castValue(value));\n        }\n    }\n\n    static class CtStatementList_STATEMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement\u003e {\n        private CtStatementList_STATEMENT_RoleHandler() {\n            super(CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setStatements(castValue(value));\n        }\n    }\n\n    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage\u003e {\n        private CtModule_SUB_PACKAGE_RoleHandler() {\n            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setRootPackage(castValue(value));\n        }\n    }\n\n    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage\u003e {\n        private CtPackage_SUB_PACKAGE_RoleHandler() {\n            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setPackages(castValue(value));\n        }\n    }\n\n    static class CtType_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtType_SUPER_TYPE_RoleHandler() {\n            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSuperclass(castValue(value));\n        }\n    }\n\n    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypeInformation_SUPER_TYPE_RoleHandler() {\n            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));\n        }\n    }\n\n    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtTargetedExpression_TARGET_RoleHandler() {\n            super(CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLabelledFlowBreak, java.lang.String\u003e {\n        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {\n            super(CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTargetLabel(castValue(value));\n        }\n    }\n\n    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtConditional_THEN_RoleHandler() {\n            super(CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThenExpression(castValue(value));\n        }\n    }\n\n    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtIf, spoon.reflect.code.CtStatement\u003e {\n        private CtIf_THEN_RoleHandler() {\n            super(CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThenStatement(castValue(value));\n        }\n    }\n\n    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e {\n        private CtExecutable_THROWN_RoleHandler() {\n            super(CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThrownTypes(castValue(value));\n        }\n    }\n\n    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable\u003c?\u003e\u003e {\n        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {\n            super(CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getResources())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setResources(castValue(value));\n        }\n    }\n\n    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtArrayTypeReference_TYPE_RoleHandler() {\n            super(CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setComponentType(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtExecutableReference_TYPE_RoleHandler() {\n            super(CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypedElement_TYPE_RoleHandler() {\n            super(CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtVariableReference_TYPE_RoleHandler() {\n            super(CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {\n            super(CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setActualTypeArguments(castValue(value));\n        }\n    }\n\n    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember\u003e {\n        private CtType_TYPE_MEMBER_RoleHandler() {\n            super(CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTypeMembers(castValue(value));\n        }\n    }\n\n    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter\u003e {\n        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {\n            super(CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFormalCtTypeParameters(castValue(value));\n        }\n    }\n\n    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler\u003cspoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression\u003e {\n        private CtAnnotation_VALUE_RoleHandler() {\n            super(CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValues())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValues(castValue(value));\n        }\n    }\n\n    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue\u003c?\u003e\u003e {\n        private CtEnum_VALUE_RoleHandler() {\n            super(CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setEnumValues(castValue(value));\n        }\n    }\n\n    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLiteral, java.lang.Object\u003e {\n        private CtLiteral_VALUE_RoleHandler() {\n            super(CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValue())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValue(castValue(value));\n        }\n    }\n\n    static class CtVariableAccess_VARIABLE_RoleHandler extends ]spoon.reflect.meta.i...\u003e but was:\u003c...ndler extends spoon.[generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtTypeAccess, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypeAccess_ACCESSED_TYPE_RoleHandler() {\n            super(CtRole.ACCESSED_TYPE, spoon.reflect.code.CtTypeAccess.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAccessedType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAccessedType(castValue(value));\n        }\n    }\n\n    static class CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtAnonymousExecutable\u003e {\n        private CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler() {\n            super(CtRole.ANNONYMOUS_EXECUTABLE, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtAnonymousExecutable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousExecutables())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAnonymousExecutables(castValue(value));\n        }\n    }\n\n    static class CtElement_ANNOTATION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtElement, spoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e {\n        private CtElement_ANNOTATION_RoleHandler() {\n            super(CtRole.ANNOTATION, spoon.reflect.declaration.CtElement.class, spoon.reflect.declaration.CtAnnotation.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAnnotations())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAnnotations(castValue(value));\n        }\n    }\n\n    static class CtAnnotation_ANNOTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtAnnotation, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.annotation.Annotation\u003e\u003e {\n        private CtAnnotation_ANNOTATION_TYPE_RoleHandler() {\n            super(CtRole.ANNOTATION_TYPE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAnnotationType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAnnotationType(castValue(value));\n        }\n    }\n\n    static class CtAbstractInvocation_ARGUMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtAbstractInvocation, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAbstractInvocation_ARGUMENT_RoleHandler() {\n            super(CtRole.ARGUMENT, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getArguments())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setArguments(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_ARGUMENT_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtExecutableReference_ARGUMENT_TYPE_RoleHandler() {\n            super(CtRole.ARGUMENT_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setParameters(castValue(value));\n        }\n    }\n\n    static class CtAssignment_ASSIGNED_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAssignment, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAssignment_ASSIGNED_RoleHandler() {\n            super(CtRole.ASSIGNED, spoon.reflect.code.CtAssignment.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAssigned())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAssigned(castValue(value));\n        }\n    }\n\n    static class CtRHSReceiver_ASSIGNMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtRHSReceiver, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtRHSReceiver_ASSIGNMENT_RoleHandler() {\n            super(CtRole.ASSIGNMENT, spoon.reflect.code.CtRHSReceiver.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAssignment())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAssignment(castValue(value));\n        }\n    }\n\n    static class CtBodyHolder_BODY_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtBodyHolder, spoon.reflect.code.CtStatement\u003e {\n        private CtBodyHolder_BODY_RoleHandler() {\n            super(CtRole.BODY, spoon.reflect.code.CtBodyHolder.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getBody())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setBody(castValue(value));\n        }\n    }\n\n    static class CtSynchronized_BODY_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtSynchronized, spoon.reflect.code.CtBlock\u003c? extends java.lang.Object\u003e\u003e {\n        private CtSynchronized_BODY_RoleHandler() {\n            super(CtRole.BODY, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtBlock.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getBlock())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setBlock(castValue(value));\n        }\n    }\n\n    static class CtIntersectionTypeReference_BOUND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.reference.CtIntersectionTypeReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtIntersectionTypeReference_BOUND_RoleHandler() {\n            super(CtRole.BOUND, spoon.reflect.reference.CtIntersectionTypeReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getBounds())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setBounds(castValue(value));\n        }\n    }\n\n    static class CtTypeParameterReference_BOUNDING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtTypeParameterReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtTypeParameterReference_BOUNDING_TYPE_RoleHandler() {\n            super(CtRole.BOUNDING_TYPE, spoon.reflect.reference.CtTypeParameterReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getBoundingType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setBoundingType(castValue(value));\n        }\n    }\n\n    static class CtSwitch_CASE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtSwitch, spoon.reflect.code.CtCase\u003c?\u003e\u003e {\n        private CtSwitch_CASE_RoleHandler() {\n            super(CtRole.CASE, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtCase.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCases())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCases(castValue(value));\n        }\n    }\n\n    static class CtExpression_CAST_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtExpression, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtExpression_CAST_RoleHandler() {\n            super(CtRole.CAST, spoon.reflect.code.CtExpression.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTypeCasts())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTypeCasts(castValue(value));\n        }\n    }\n\n    static class CtTry_CATCH_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtTry, spoon.reflect.code.CtCatch\u003e {\n        private CtTry_CATCH_RoleHandler() {\n            super(CtRole.CATCH, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtCatch.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCatchers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCatchers(castValue(value));\n        }\n    }\n\n    static class CtElement_COMMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtElement, spoon.reflect.code.CtComment\u003e {\n        private CtElement_COMMENT_RoleHandler() {\n            super(CtRole.COMMENT, spoon.reflect.declaration.CtElement.class, spoon.reflect.code.CtComment.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getComments())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setComments(castValue(value));\n        }\n    }\n\n    static class CtComment_COMMENT_CONTENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtComment, java.lang.String\u003e {\n        private CtComment_COMMENT_CONTENT_RoleHandler() {\n            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtComment.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getContent())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setContent(castValue(value));\n        }\n    }\n\n    static class CtJavaDocTag_COMMENT_CONTENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtJavaDocTag, java.lang.String\u003e {\n        private CtJavaDocTag_COMMENT_CONTENT_RoleHandler() {\n            super(CtRole.COMMENT_CONTENT, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getContent())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setContent(castValue(value));\n        }\n    }\n\n    static class CtJavaDoc_COMMENT_TAG_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtJavaDoc, spoon.reflect.code.CtJavaDocTag\u003e {\n        private CtJavaDoc_COMMENT_TAG_RoleHandler() {\n            super(CtRole.COMMENT_TAG, spoon.reflect.code.CtJavaDoc.class, spoon.reflect.code.CtJavaDocTag.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTags())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTags(castValue(value));\n        }\n    }\n\n    static class CtComment_COMMENT_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtComment, spoon.reflect.code.CtComment.CommentType\u003e {\n        private CtComment_COMMENT_TYPE_RoleHandler() {\n            super(CtRole.COMMENT_TYPE, spoon.reflect.code.CtComment.class, CtComment.CommentType.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCommentType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCommentType(castValue(value));\n        }\n    }\n\n    static class CtAssert_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtAssert_CONDITION_RoleHandler() {\n            super(CtRole.CONDITION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAssertExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAssertExpression(castValue(value));\n        }\n    }\n\n    static class CtConditional_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtConditional_CONDITION_RoleHandler() {\n            super(CtRole.CONDITION, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCondition(castValue(value));\n        }\n    }\n\n    static class CtIf_CONDITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtIf, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtIf_CONDITION_RoleHandler() {\n            super(CtRole.CONDITION, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCondition())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCondition(castValue(value));\n        }\n    }\n\n    static class CtClass_CONSTRUCTOR_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtClass, spoon.reflect.declaration.CtConstructor\u003c?\u003e\u003e {\n        private CtClass_CONSTRUCTOR_RoleHandler() {\n            super(CtRole.CONSTRUCTOR, spoon.reflect.declaration.CtClass.class, spoon.reflect.declaration.CtConstructor.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getConstructors())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setConstructors(castValue(value));\n        }\n    }\n\n    static class CtPackage_CONTAINED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtType\u003c? extends java.lang.Object\u003e\u003e {\n        private CtPackage_CONTAINED_TYPE_RoleHandler() {\n            super(CtRole.CONTAINED_TYPE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtType.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTypes(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtExecutableReference_DECLARING_TYPE_RoleHandler() {\n            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDeclaringType(castValue(value));\n        }\n    }\n\n    static class CtFieldReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtFieldReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtFieldReference_DECLARING_TYPE_RoleHandler() {\n            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtFieldReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDeclaringType(castValue(value));\n        }\n    }\n\n    static class CtTypeReference_DECLARING_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtTypeReference_DECLARING_TYPE_RoleHandler() {\n            super(CtRole.DECLARING_TYPE, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDeclaringType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDeclaringType(castValue(value));\n        }\n    }\n\n    static class CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtAnnotationMethod, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler() {\n            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtAnnotationMethod.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDefaultExpression(castValue(value));\n        }\n    }\n\n    static class CtVariable_DEFAULT_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtVariable, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtVariable_DEFAULT_EXPRESSION_RoleHandler() {\n            super(CtRole.DEFAULT_EXPRESSION, spoon.reflect.declaration.CtVariable.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDefaultExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDefaultExpression(castValue(value));\n        }\n    }\n\n    static class CtNewArray_DIMENSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e\u003e {\n        private CtNewArray_DIMENSION_RoleHandler() {\n            super(CtRole.DIMENSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getDimensionExpressions())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDimensionExpressions(castValue(value));\n        }\n    }\n\n    static class CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtJavaDocTag, spoon.reflect.code.CtJavaDocTag.TagType\u003e {\n        private CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler() {\n            super(CtRole.DOCUMENTATION_TYPE, spoon.reflect.code.CtJavaDocTag.class, CtJavaDocTag.TagType.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtConditional_ELSE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtConditional_ELSE_RoleHandler() {\n            super(CtRole.ELSE, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getElseExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setElseExpression(castValue(value));\n        }\n    }\n\n    static class CtIf_ELSE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtIf, spoon.reflect.code.CtStatement\u003e {\n        private CtIf_ELSE_RoleHandler() {\n            super(CtRole.ELSE, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getElseStatement())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setElseStatement(castValue(value));\n        }\n    }\n\n    static class CtAbstractInvocation_EXECUTABLE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAbstractInvocation, spoon.reflect.reference.CtExecutableReference\u003c?\u003e\u003e {\n        private CtAbstractInvocation_EXECUTABLE_REF_RoleHandler() {\n            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtAbstractInvocation.class, spoon.reflect.reference.CtExecutableReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExecutable(castValue(value));\n        }\n    }\n\n    static class CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtExecutableReferenceExpression, spoon.reflect.reference.CtExecutableReference\u003c?\u003e\u003e {\n        private CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler() {\n            super(CtRole.EXECUTABLE_REF, spoon.reflect.code.CtExecutableReferenceExpression.class, spoon.reflect.reference.CtExecutableReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExecutable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExecutable(castValue(value));\n        }\n    }\n\n    static class CtModule_EXPORTED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport\u003e {\n        private CtModule_EXPORTED_PACKAGE_RoleHandler() {\n            super(CtRole.EXPORTED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExportedPackages())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExportedPackages(castValue(value));\n        }\n    }\n\n    static class CtArrayAccess_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtArrayAccess, spoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e\u003e {\n        private CtArrayAccess_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtArrayAccess.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getIndexExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setIndexExpression(castValue(value));\n        }\n    }\n\n    static class CtAssert_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAssert, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAssert_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtAssert.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtCase_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtCase, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtCase_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtCase.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getCaseExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setCaseExpression(castValue(value));\n        }\n    }\n\n    static class CtDo_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtDo, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtDo_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtDo.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setLoopingExpression(castValue(value));\n        }\n    }\n\n    static class CtFor_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtFor, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtFor_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtForEach_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtForEach, spoon.reflect.code.CtExpression\u003c? extends java.lang.Object\u003e\u003e {\n        private CtForEach_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtLambda_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLambda, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtLambda_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtLambda.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtNewArray_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtNewArray, spoon.reflect.code.CtExpression\u003c? extends java.lang.Object\u003e\u003e {\n        private CtNewArray_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtNewArray.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getElements())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setElements(castValue(value));\n        }\n    }\n\n    static class CtReturn_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtReturn, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtReturn_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtReturn.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getReturnedExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setReturnedExpression(castValue(value));\n        }\n    }\n\n    static class CtSwitch_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtSwitch, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtSwitch_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtSwitch.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSelector())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSelector(castValue(value));\n        }\n    }\n\n    static class CtSynchronized_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtSynchronized, spoon.reflect.code.CtExpression\u003c? extends java.lang.Object\u003e\u003e {\n        private CtSynchronized_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtSynchronized.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setExpression(castValue(value));\n        }\n    }\n\n    static class CtThrow_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtThrow, spoon.reflect.code.CtExpression\u003c? extends java.lang.Throwable\u003e\u003e {\n        private CtThrow_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtThrow.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThrownExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThrownExpression(castValue(value));\n        }\n    }\n\n    static class CtUnaryOperator_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtUnaryOperator, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtUnaryOperator_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getOperand())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setOperand(castValue(value));\n        }\n    }\n\n    static class CtWhile_EXPRESSION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtWhile, spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e\u003e {\n        private CtWhile_EXPRESSION_RoleHandler() {\n            super(CtRole.EXPRESSION, spoon.reflect.code.CtWhile.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getLoopingExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setLoopingExpression(castValue(value));\n        }\n    }\n\n    static class CtType_FIELD_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtField\u003c? extends java.lang.Object\u003e\u003e {\n        private CtType_FIELD_RoleHandler() {\n            super(CtRole.FIELD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtField.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getFields())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFields(castValue(value));\n        }\n    }\n\n    static class CtTry_FINALIZER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtTry, spoon.reflect.code.CtBlock\u003c? extends java.lang.Object\u003e\u003e {\n        private CtTry_FINALIZER_RoleHandler() {\n            super(CtRole.FINALIZER, spoon.reflect.code.CtTry.class, spoon.reflect.code.CtBlock.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getFinalizer())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFinalizer(castValue(value));\n        }\n    }\n\n    static class CtForEach_FOREACH_VARIABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtForEach, spoon.reflect.code.CtLocalVariable\u003c? extends java.lang.Object\u003e\u003e {\n        private CtForEach_FOREACH_VARIABLE_RoleHandler() {\n            super(CtRole.FOREACH_VARIABLE, spoon.reflect.code.CtForEach.class, spoon.reflect.code.CtLocalVariable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setVariable(castValue(value));\n        }\n    }\n\n    static class CtFor_FOR_INIT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtFor, spoon.reflect.code.CtStatement\u003e {\n        private CtFor_FOR_INIT_RoleHandler() {\n            super(CtRole.FOR_INIT, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getForInit())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setForInit(castValue(value));\n        }\n    }\n\n    static class CtFor_FOR_UPDATE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtFor, spoon.reflect.code.CtStatement\u003e {\n        private CtFor_FOR_UPDATE_RoleHandler() {\n            super(CtRole.FOR_UPDATE, spoon.reflect.code.CtFor.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getForUpdate())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setForUpdate(castValue(value));\n        }\n    }\n\n    static class CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference\u003e {\n        private CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler() {\n            super(CtRole.IMPLEMENTATION_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getImplementationTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setImplementationTypes(castValue(value));\n        }\n    }\n\n    static class CtImport_IMPORT_REFERENCE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtImport, spoon.reflect.reference.CtReference\u003e {\n        private CtImport_IMPORT_REFERENCE_RoleHandler() {\n            super(CtRole.IMPORT_REFERENCE, spoon.reflect.declaration.CtImport.class, spoon.reflect.reference.CtReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getReference())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setReference(castValue(value));\n        }\n    }\n\n    static class CtType_INTERFACE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtType_INTERFACE_RoleHandler() {\n            super(CtRole.INTERFACE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSuperInterfaces(castValue(value));\n        }\n    }\n\n    static class CtTypeInformation_INTERFACE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypeInformation_INTERFACE_RoleHandler() {\n            super(CtRole.INTERFACE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSuperInterfaces())));\n        }\n    }\n\n    static class CtMethod_IS_DEFAULT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtMethod, java.lang.Boolean\u003e {\n        private CtMethod_IS_DEFAULT_RoleHandler() {\n            super(CtRole.IS_DEFAULT, spoon.reflect.declaration.CtMethod.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isDefaultMethod())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setDefaultMethod(castValue(value));\n        }\n    }\n\n    static class CtFieldReference_IS_FINAL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtFieldReference, java.lang.Boolean\u003e {\n        private CtFieldReference_IS_FINAL_RoleHandler() {\n            super(CtRole.IS_FINAL, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isFinal())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFinal(castValue(value));\n        }\n    }\n\n    static class CtElement_IS_IMPLICIT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtElement, java.lang.Boolean\u003e {\n        private CtElement_IS_IMPLICIT_RoleHandler() {\n            super(CtRole.IS_IMPLICIT, spoon.reflect.declaration.CtElement.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isImplicit())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setImplicit(castValue(value));\n        }\n    }\n\n    static class CtShadowable_IS_SHADOW_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtShadowable, java.lang.Boolean\u003e {\n        private CtShadowable_IS_SHADOW_RoleHandler() {\n            super(CtRole.IS_SHADOW, spoon.reflect.declaration.CtShadowable.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isShadow())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setShadow(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_IS_STATIC_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtExecutableReference, java.lang.Boolean\u003e {\n        private CtExecutableReference_IS_STATIC_RoleHandler() {\n            super(CtRole.IS_STATIC, spoon.reflect.reference.CtExecutableReference.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setStatic(castValue(value));\n        }\n    }\n\n    static class CtFieldReference_IS_STATIC_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtFieldReference, java.lang.Boolean\u003e {\n        private CtFieldReference_IS_STATIC_RoleHandler() {\n            super(CtRole.IS_STATIC, spoon.reflect.reference.CtFieldReference.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isStatic())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setStatic(castValue(value));\n        }\n    }\n\n    static class CtTypeParameterReference_IS_UPPER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtTypeParameterReference, java.lang.Boolean\u003e {\n        private CtTypeParameterReference_IS_UPPER_RoleHandler() {\n            super(CtRole.IS_UPPER, spoon.reflect.reference.CtTypeParameterReference.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isUpper())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setUpper(castValue(value));\n        }\n    }\n\n    static class CtParameter_IS_VARARGS_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtParameter, java.lang.Boolean\u003e {\n        private CtParameter_IS_VARARGS_RoleHandler() {\n            super(CtRole.IS_VARARGS, spoon.reflect.declaration.CtParameter.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isVarArgs())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setVarArgs(castValue(value));\n        }\n    }\n\n    static class CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtJavaDocTag, java.lang.String\u003e {\n        private CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler() {\n            super(CtRole.JAVADOC_TAG_VALUE, spoon.reflect.code.CtJavaDocTag.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getParam())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setParam(castValue(value));\n        }\n    }\n\n    static class CtStatement_LABEL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtStatement, java.lang.String\u003e {\n        private CtStatement_LABEL_RoleHandler() {\n            super(CtRole.LABEL, spoon.reflect.code.CtStatement.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getLabel())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setLabel(castValue(value));\n        }\n    }\n\n    static class CtBinaryOperator_LEFT_OPERAND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression\u003c? extends java.lang.Object\u003e\u003e {\n        private CtBinaryOperator_LEFT_OPERAND_RoleHandler() {\n            super(CtRole.LEFT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getLeftHandOperand())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setLeftHandOperand(castValue(value));\n        }\n    }\n\n    static class CtType_METHOD_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtMethod\u003c? extends java.lang.Object\u003e\u003e {\n        private CtType_METHOD_RoleHandler() {\n            super(CtRole.METHOD, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtMethod.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getMethods())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setMethods(castValue(value));\n        }\n    }\n\n    static class CtModifiable_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtModifiable, spoon.reflect.declaration.ModifierKind\u003e {\n        private CtModifiable_MODIFIER_RoleHandler() {\n            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModifiable.class, spoon.reflect.declaration.ModifierKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setModifiers(castValue(value));\n        }\n    }\n\n    static class CtModule_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtModule, java.lang.Boolean\u003e {\n        private CtModule_MODIFIER_RoleHandler() {\n            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModule.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isOpenModule())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setIsOpenModule(castValue(value));\n        }\n    }\n\n    static class CtModuleRequirement_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtModuleRequirement, spoon.reflect.declaration.CtModuleRequirement.RequiresModifier\u003e {\n        private CtModuleRequirement_MODIFIER_RoleHandler() {\n            super(CtRole.MODIFIER, spoon.reflect.declaration.CtModuleRequirement.class, CtModuleRequirement.RequiresModifier.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getRequiresModifiers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setRequiresModifiers(castValue(value));\n        }\n    }\n\n    static class CtTypeInformation_MODIFIER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtTypeInformation, spoon.reflect.declaration.ModifierKind\u003e {\n        private CtTypeInformation_MODIFIER_RoleHandler() {\n            super(CtRole.MODIFIER, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.declaration.ModifierKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getModifiers())));\n        }\n    }\n\n    static class CtModule_MODULE_DIRECTIVE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleDirective\u003e {\n        private CtModule_MODULE_DIRECTIVE_RoleHandler() {\n            super(CtRole.MODULE_DIRECTIVE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleDirective.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getModuleDirectives())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setModuleDirectives(castValue(value));\n        }\n    }\n\n    static class CtModuleRequirement_MODULE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtModuleRequirement, spoon.reflect.reference.CtModuleReference\u003e {\n        private CtModuleRequirement_MODULE_REF_RoleHandler() {\n            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtModuleRequirement.class, spoon.reflect.reference.CtModuleReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getModuleReference())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setModuleReference(castValue(value));\n        }\n    }\n\n    static class CtPackageExport_MODULE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtModuleReference\u003e {\n        private CtPackageExport_MODULE_REF_RoleHandler() {\n            super(CtRole.MODULE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtModuleReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTargetExport())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTargetExport(castValue(value));\n        }\n    }\n\n    static class CtMultiTypedElement_MULTI_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtMultiTypedElement, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtMultiTypedElement_MULTI_TYPE_RoleHandler() {\n            super(CtRole.MULTI_TYPE, spoon.reflect.declaration.CtMultiTypedElement.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getMultiTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setMultiTypes(castValue(value));\n        }\n    }\n\n    static class CtNamedElement_NAME_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtNamedElement, java.lang.String\u003e {\n        private CtNamedElement_NAME_RoleHandler() {\n            super(CtRole.NAME, spoon.reflect.declaration.CtNamedElement.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSimpleName(castValue(value));\n        }\n    }\n\n    static class CtReference_NAME_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtReference, java.lang.String\u003e {\n        private CtReference_NAME_RoleHandler() {\n            super(CtRole.NAME, spoon.reflect.reference.CtReference.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSimpleName())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSimpleName(castValue(value));\n        }\n    }\n\n    static class CtNewClass_NESTED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtNewClass, spoon.reflect.declaration.CtClass\u003c? extends java.lang.Object\u003e\u003e {\n        private CtNewClass_NESTED_TYPE_RoleHandler() {\n            super(CtRole.NESTED_TYPE, spoon.reflect.code.CtNewClass.class, spoon.reflect.declaration.CtClass.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getAnonymousClass())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setAnonymousClass(castValue(value));\n        }\n    }\n\n    static class CtType_NESTED_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtType\u003c? extends java.lang.Object\u003e\u003e {\n        private CtType_NESTED_TYPE_RoleHandler() {\n            super(CtRole.NESTED_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtType.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getNestedTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setNestedTypes(castValue(value));\n        }\n    }\n\n    static class CtModule_OPENED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackageExport\u003e {\n        private CtModule_OPENED_PACKAGE_RoleHandler() {\n            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackageExport.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getOpenedPackages())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setOpenedPackages(castValue(value));\n        }\n    }\n\n    static class CtPackageExport_OPENED_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtPackageExport, java.lang.Boolean\u003e {\n        private CtPackageExport_OPENED_PACKAGE_RoleHandler() {\n            super(CtRole.OPENED_PACKAGE, spoon.reflect.declaration.CtPackageExport.class, java.lang.Boolean.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).isOpenedPackage())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setOpenedPackage(castValue(value));\n        }\n    }\n\n    static class CtBinaryOperator_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtBinaryOperator, spoon.reflect.code.BinaryOperatorKind\u003e {\n        private CtBinaryOperator_OPERATOR_KIND_RoleHandler() {\n            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.BinaryOperatorKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getKind())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setKind(castValue(value));\n        }\n    }\n\n    static class CtOperatorAssignment_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtOperatorAssignment, spoon.reflect.code.BinaryOperatorKind\u003e {\n        private CtOperatorAssignment_OPERATOR_KIND_RoleHandler() {\n            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtOperatorAssignment.class, spoon.reflect.code.BinaryOperatorKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getKind())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setKind(castValue(value));\n        }\n    }\n\n    static class CtUnaryOperator_OPERATOR_KIND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtUnaryOperator, spoon.reflect.code.UnaryOperatorKind\u003e {\n        private CtUnaryOperator_OPERATOR_KIND_RoleHandler() {\n            super(CtRole.OPERATOR_KIND, spoon.reflect.code.CtUnaryOperator.class, spoon.reflect.code.UnaryOperatorKind.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getKind())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setKind(castValue(value));\n        }\n    }\n\n    static class CtPackageExport_PACKAGE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtPackageExport, spoon.reflect.reference.CtPackageReference\u003e {\n        private CtPackageExport_PACKAGE_REF_RoleHandler() {\n            super(CtRole.PACKAGE_REF, spoon.reflect.declaration.CtPackageExport.class, spoon.reflect.reference.CtPackageReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getPackageReference())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setPackageReference(castValue(value));\n        }\n    }\n\n    static class CtTypeReference_PACKAGE_REF_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtTypeReference, spoon.reflect.reference.CtPackageReference\u003e {\n        private CtTypeReference_PACKAGE_REF_RoleHandler() {\n            super(CtRole.PACKAGE_REF, spoon.reflect.reference.CtTypeReference.class, spoon.reflect.reference.CtPackageReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getPackage())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setPackage(castValue(value));\n        }\n    }\n\n    static class CtCatch_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtCatch, spoon.reflect.code.CtCatchVariable\u003c? extends java.lang.Throwable\u003e\u003e {\n        private CtCatch_PARAMETER_RoleHandler() {\n            super(CtRole.PARAMETER, spoon.reflect.code.CtCatch.class, spoon.reflect.code.CtCatchVariable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getParameter())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setParameter(castValue(value));\n        }\n    }\n\n    static class CtExecutable_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtExecutable, spoon.reflect.declaration.CtParameter\u003c? extends java.lang.Object\u003e\u003e {\n        private CtExecutable_PARAMETER_RoleHandler() {\n            super(CtRole.PARAMETER, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.declaration.CtParameter.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getParameters())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setParameters(castValue(value));\n        }\n    }\n\n    static class CtElement_POSITION_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtElement, spoon.reflect.cu.SourcePosition\u003e {\n        private CtElement_POSITION_RoleHandler() {\n            super(CtRole.POSITION, spoon.reflect.declaration.CtElement.class, spoon.reflect.cu.SourcePosition.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getPosition())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setPosition(castValue(value));\n        }\n    }\n\n    static class CtModule_PROVIDED_SERVICE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtProvidedService\u003e {\n        private CtModule_PROVIDED_SERVICE_RoleHandler() {\n            super(CtRole.PROVIDED_SERVICE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtProvidedService.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getProvidedServices())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setProvidedServices(castValue(value));\n        }\n    }\n\n    static class CtModule_REQUIRED_MODULE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtModuleRequirement\u003e {\n        private CtModule_REQUIRED_MODULE_RoleHandler() {\n            super(CtRole.REQUIRED_MODULE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtModuleRequirement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getRequiredModules())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setRequiredModules(castValue(value));\n        }\n    }\n\n    static class CtBinaryOperator_RIGHT_OPERAND_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtBinaryOperator, spoon.reflect.code.CtExpression\u003c? extends java.lang.Object\u003e\u003e {\n        private CtBinaryOperator_RIGHT_OPERAND_RoleHandler() {\n            super(CtRole.RIGHT_OPERAND, spoon.reflect.code.CtBinaryOperator.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getRightHandOperand())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setRightHandOperand(castValue(value));\n        }\n    }\n\n    static class CtModule_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtUsedService\u003e {\n        private CtModule_SERVICE_TYPE_RoleHandler() {\n            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtUsedService.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getUsedServices())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setUsedServices(castValue(value));\n        }\n    }\n\n    static class CtProvidedService_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtProvidedService, spoon.reflect.reference.CtTypeReference\u003e {\n        private CtProvidedService_SERVICE_TYPE_RoleHandler() {\n            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtProvidedService.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setServiceType(castValue(value));\n        }\n    }\n\n    static class CtUsedService_SERVICE_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtUsedService, spoon.reflect.reference.CtTypeReference\u003e {\n        private CtUsedService_SERVICE_TYPE_RoleHandler() {\n            super(CtRole.SERVICE_TYPE, spoon.reflect.declaration.CtUsedService.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getServiceType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setServiceType(castValue(value));\n        }\n    }\n\n    static class CtCodeSnippet_SNIPPET_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtCodeSnippet, java.lang.String\u003e {\n        private CtCodeSnippet_SNIPPET_RoleHandler() {\n            super(CtRole.SNIPPET, spoon.reflect.declaration.CtCodeSnippet.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValue())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValue(castValue(value));\n        }\n    }\n\n    static class CtStatementList_STATEMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtStatementList, spoon.reflect.code.CtStatement\u003e {\n        private CtStatementList_STATEMENT_RoleHandler() {\n            super(CtRole.STATEMENT, spoon.reflect.code.CtStatementList.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getStatements())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setStatements(castValue(value));\n        }\n    }\n\n    static class CtModule_SUB_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtModule, spoon.reflect.declaration.CtPackage\u003e {\n        private CtModule_SUB_PACKAGE_RoleHandler() {\n            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtModule.class, spoon.reflect.declaration.CtPackage.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getRootPackage())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setRootPackage(castValue(value));\n        }\n    }\n\n    static class CtPackage_SUB_PACKAGE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtPackage, spoon.reflect.declaration.CtPackage\u003e {\n        private CtPackage_SUB_PACKAGE_RoleHandler() {\n            super(CtRole.SUB_PACKAGE, spoon.reflect.declaration.CtPackage.class, spoon.reflect.declaration.CtPackage.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getPackages())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setPackages(castValue(value));\n        }\n    }\n\n    static class CtType_SUPER_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtType_SUPER_TYPE_RoleHandler() {\n            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtType.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setSuperclass(castValue(value));\n        }\n    }\n\n    static class CtTypeInformation_SUPER_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtTypeInformation, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypeInformation_SUPER_TYPE_RoleHandler() {\n            super(CtRole.SUPER_TYPE, spoon.reflect.declaration.CtTypeInformation.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getSuperclass())));\n        }\n    }\n\n    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtTargetedExpression_TARGET_RoleHandler() {\n            super(CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLabelledFlowBreak, java.lang.String\u003e {\n        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {\n            super(CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTargetLabel(castValue(value));\n        }\n    }\n\n    static class CtConditional_THEN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtConditional_THEN_RoleHandler() {\n            super(CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThenExpression(castValue(value));\n        }\n    }\n\n    static class CtIf_THEN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtIf, spoon.reflect.code.CtStatement\u003e {\n        private CtIf_THEN_RoleHandler() {\n            super(CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThenStatement(castValue(value));\n        }\n    }\n\n    static class CtExecutable_THROWN_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e {\n        private CtExecutable_THROWN_RoleHandler() {\n            super(CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThrownTypes(castValue(value));\n        }\n    }\n\n    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable\u003c? extends java.lang.Object\u003e\u003e {\n        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {\n            super(CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getResources())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setResources(castValue(value));\n        }\n    }\n\n    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtArrayTypeReference_TYPE_RoleHandler() {\n            super(CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setComponentType(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtExecutableReference_TYPE_RoleHandler() {\n            super(CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtTypedElement_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypedElement_TYPE_RoleHandler() {\n            super(CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtVariableReference_TYPE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtVariableReference_TYPE_RoleHandler() {\n            super(CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {\n            super(CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setActualTypeArguments(castValue(value));\n        }\n    }\n\n    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember\u003e {\n        private CtType_TYPE_MEMBER_RoleHandler() {\n            super(CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTypeMembers(castValue(value));\n        }\n    }\n\n    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter\u003e {\n        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {\n            super(CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFormalCtTypeParameters(castValue(value));\n        }\n    }\n\n    static class CtAnnotation_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.MapHandler\u003cspoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression\u003e {\n        private CtAnnotation_VALUE_RoleHandler() {\n            super(CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValues())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValues(castValue(value));\n        }\n    }\n\n    static class CtEnum_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue\u003c? extends java.lang.Object\u003e\u003e {\n        private CtEnum_VALUE_RoleHandler() {\n            super(CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setEnumValues(castValue(value));\n        }\n    }\n\n    static class CtLiteral_VALUE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLiteral, java.lang.Object\u003e {\n        private CtLiteral_VALUE_RoleHandler() {\n            super(CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValue())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValue(castValue(value));\n        }\n    }\n\n    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.generating.meta.spoon.reflect.meta.impl.]spoon.reflect.meta.i...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPrintAMethodWithGeneric",
        "testPrintAMethodWithImports",
        "testPrintAClassWithImports"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/prettyprinter/testclasses/ImportStatic.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/prettyprinter/testclasses/ImportStatic.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/prettyprinter/testclasses/ImportStatic.java:5",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testComputeImportsInClassWithSameName",
        "testImportOnSpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "CompilationUnit cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/support/compiler/jdt/CompilationUnitWrapper.java:27",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "TestCase cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/resources/spoon/test/imports/testclasses2/apachetestsuite/enums/EnumTestSuite.java:9",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.variable.AccessFullyQualifiedFieldTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStaticImportWithAutoImport",
        "testNoFQNAndStaticImport",
        "testNoFQNWhenShadowedByField",
        "testNoFQNWhenUsedInLoop",
        "testNoFQNWhenUsedInTryCatch",
        "testNoFQNWhenShadowedByLocalVariable",
        "testPrivateStaticImportShouldNotBeImportedInSameClass"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/variable/testclasses/Burritos.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/variable/testclasses/BurritosWithLoop.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/variable/testclasses/MultiBurritos.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/variable/testclasses/BurritosWithTryCatch.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/variable/testclasses/MultiBurritos.java:5",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.Launcher cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/variable/testclasses/BurritosFielded.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "MessageDigest cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/variable/testclasses/digest/DigestUtil.java:23",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.ctType.CtTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIsSubTypeOfonTypeReferences",
        "testIsSubTypeOfonTypeParameters",
        "testHasMethodInDefaultMethod",
        "testIsSubTypeOf",
        "testHasMethodInSuperClass"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "X cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctType/testclasses/SubtypeModel.java:7",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "List cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctType/testclasses/X.java:33",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "List cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctType/testclasses/X.java:33",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "List cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctType/testclasses/X.java:33",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "List cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/ctType/testclasses/X.java:33",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testImplicitStaticFieldReferenceAutoImport",
        "testImplicitStaticFieldReference",
        "testAnnotationInChildWithConstants",
        "testChildOfGenericsWithAmbiguousStaticFieldAutoImport",
        "testAnnotationInChildWithConstantsAutoImport",
        "testChildOfGenericsWithAmbiguousStaticField"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "ALong cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/staticFieldAccess2/ChildOfConstants.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "GenericsWithAmbiguousStaticField cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/staticFieldAccess2/ChildOfGenericsWithAmbiguousStaticField.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Constants cannot be resolved to a variable at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/staticFieldAccess2/ImplicitStaticFieldReference.java:10",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "GenericsWithAmbiguousStaticField cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/staticFieldAccess2/ChildOfGenericsWithAmbiguousStaticField.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "ALong cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/staticFieldAccess2/ChildOfConstants.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Constants cannot be resolved to a variable at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/staticFieldAccess2/ImplicitStaticFieldReference.java:10",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.filters.FilterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testNameFilterWithGenericType"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Foo cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/internal4/Constants.java:4",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.CloneTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCopyType"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInterruptAProcessor"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Filter cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/processing/CtGenerationTest.java:189",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.eval.EvalTest",
      "failingMethods": [],
      "erroringMethods": [
        "testDoNotSimplify",
        "testArrayLength",
        "testStringConcatenation",
        "testDoNotSimplifyToExpressionWhenStatementIsExpected",
        "testDoNotSimplifyCasts",
        "testTryCatchAndStatement"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/eval/ToEvaluate.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/eval/ToEvaluate.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/eval/ToEvaluate.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/eval/ToEvaluate.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/eval/ToEvaluate.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/eval/ToEvaluate.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSettersAreAllGood"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.SpoonException cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/reflect/visitor/filter/LocalVariableReferenceFunction.java:19",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "CompilationUnit cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/main/java/spoon/support/compiler/jdt/CompilationUnitWrapper.java:27",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilation.CompilationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testNewInstance",
        "testFilterResourcesFile",
        "testFilterResourcesDir",
        "testPrecompile",
        "testNewInstanceFromExistingClass"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Bar cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/imports/testclasses/internal3/Foo.java:4",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Unable to load processor \"compilation.SimpleProcessor\" - Check your classpath.",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "IBar cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/compilation/testclasses/Bar.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import org.junit cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/reference/AnnotationFieldReferenceTest.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X implements spoon.test.compilation.Ifoo { public int foo() {int i\u003d0; return i;} };\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.javadoc.JavaDocTest",
      "failingMethods": [],
      "erroringMethods": [
        "testJavadocNotPresentInAST"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.reflect cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/javadoc/testclasses/Bar.java:3",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.PatternTest",
      "failingMethods": [
        "testPatternToString",
        "testMatchSample1"
      ],
      "erroringMethods": [
        "testMatchOfMapAttribute",
        "testMatchParameterValue",
        "testMatchOfAttribute",
        "testMatchGreedyMultiValueMinCount2",
        "testPatternMatchOfMultipleElements",
        "testMatchParameterValueType",
        "testExtensionDecoupledSubstitutionVisitor",
        "testMatchParameterCondition",
        "testMatchReluctantMultivalueMinCount1",
        "testMatchPossesiveMultiValueUnlimited",
        "testMatchReluctantMultivalue",
        "testMatchPossesiveMultiValueMinCount2",
        "testMatchGreedyMultiValueUnlimited",
        "testMatchOfMapKeySubstring",
        "testMatchGreedyMultiValueMaxCountLimit",
        "testGenerateMultiValues",
        "testMatchOfMapAttributeAndOtherAnnotations",
        "testMatchReluctantMultivalueExactly2",
        "testMatchPossesiveMultiValueMinCount",
        "testMatchPossesiveMultiValueMaxCount4"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.template cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple2.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Check cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMap.java:22",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Check cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMap.java:22",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/ToBeMatched.java:6",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchWithParameterType.java:3",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.template cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple3.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Parameter value class: spoon.support.reflect.code.CtBlockImpl cannot be converted to class is: spoon.reflect.code.CtExpression",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "Check cannot be resolved to a type at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMap.java:22",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.template cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple2.java:3",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c... CtForEach\n        /[expression/ \u003c\u003d ${getIterable}\n        /foreachVariable/ \u003c\u003d ${item}\n     */\n    for (/* CtLocalVariable\n        / \u003c\u003d ${item}\n     */\n    java.lang.Object item : /* CtInvocation\n        / \u003c\u003d ${getIterable}\n     */\n    getIterable()) /* CtBlock\n        /statement/ \u003c\u003d ${statements}\n     */\n    {\n        lp.printSeparatorIfAppropriate();\n        /* CtInvocation\n            / \u003c\u003d ${statements}\n         */\n        statements]();\n    }\n}\n\u003e but was:\u003c... CtForEach\n        /[foreachVariable/ \u003c\u003d ${item}\n     */\n    for (/* CtLocalVariable\n        / \u003c\u003d ${item}\n     */\n    java.lang.Object item : /* CtInvocation\n        /target/ \u003c\u003d ${getIterable}\n     */\n    /* CtInvocation\n        / \u003c\u003d ${getIterable}\n     */\n    getIterable().S()) {\n        lp.printSeparatorIfAppropriate();\n        /* CtInvocation\n            /target/ \u003c\u003d ${statements}\n         */\n        /* CtInvocation\n            / \u003c\u003d ${statements}\n         */\n        statements().S]();\n    }\n}\n\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchModifiers.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchMultiple.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchWithParameterCondition.java:3",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "The import spoon.pattern cannot be resolved at /root/workspace/INRIA/spoon/391880446/src/test/java/spoon/test/template/testclasses/match/MatchWithParameterType.java:3",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 20
    }
  ]
}