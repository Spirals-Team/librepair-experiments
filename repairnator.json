{
  "totalNumberSkippingTests": 0,
  "totalMemory": 584581120,
  "nbLibraries": 139,
  "workspace": "./workspace",
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "freeMemory": 329286144,
  "metrics": {
    "RepoSlug": "prestodb/presto",
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 63,
      "ComputeClasspath": 3,
      "ComputeTestDir": 0,
      "ResolveDependency": 119,
      "BuildProject": 571,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 244,
      "CloneRepository": 35,
      "NopolRepair": 33,
      "CheckoutPatchedBuild": 0,
      "TestProject": 1135,
      "GatherTestInformation": 2,
      "PushIncriminatedBuild": 8,
      "CommitPatch": 106
    },
    "FailureNames": [
      "com.facebook.presto.client.FailureInfo$FailureException",
      "java.lang.AssertionError"
    ],
    "NbFailingTests": 42,
    "BugCommitUrl": "http://github.com/prestodb/presto/commit/f420f5c8116ab40641896ca441642de935b20280",
    "NbRunningTests": 4596,
    "NbFileApp": 6074,
    "NbFileTests": 1852,
    "NbLibraries": 139,
    "NbCPU": 4,
    "FreeMemory": 442063648,
    "TotalMemory": 1690304512,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "AngelicValuesByTest": {
      "com/facebook/presto/tests/TestTpchDistributedQueries": 0,
      "com/facebook/presto/tests/TestDistributedQueriesIndexed": 0,
      "com/facebook/presto/tests/TestQueryPlanDeterminism": 0
    },
    "BugCommit": "f420f5c8116ab40641896ca441642de935b20280",
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 329286144,
      "ComputeClasspath": 335570392,
      "ComputeTestDir": 100199224,
      "ResolveDependency": 407645064,
      "BuildProject": 330997704,
      "ComputeSourceDir": 335570392,
      "InitRepoToPush": 128298040,
      "CloneRepository": 220848592,
      "NopolRepair": 794582952,
      "CheckoutPatchedBuild": 442063648,
      "TestProject": 298619936,
      "GatherTestInformation": 273034384,
      "PushIncriminatedBuild": 337821448,
      "CommitPatch": 442063648
    },
    "PatchChangedFiles": 1,
    "BuggyBuildId": 229311285,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/prestodb/presto/builds/229311285",
    "BuggyBuildDate": "May 6, 2017 1:05:00 AM"
  },
  "failingModule": "/root/workspace/prestodb/presto/229311285/presto-tests",
  "buildid": 229311285,
  "hostname": "repairnator",
  "totalNumberFailingTests": 42,
  "error-types": [
    "com.facebook.presto.client.FailureInfo$FailureException",
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 4596,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.tests.TestDistributedQueriesIndexed",
      "failingMethods": [
        "com.facebook.presto.tests.TestDistributedQueriesIndexed#testOuterNonEquiJoins",
        "com.facebook.presto.tests.TestDistributedQueriesIndexed#testNonEquiJoin"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.quantity + length(orders.comment) \u003e 7",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT OUTER JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.quantity \u003e 5 WHERE orders.orderkey IS NULL",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestTpchDistributedQueries",
      "failingMethods": [
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonEqualityRightJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testAggregationWithProjection2",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTableSampleBernoulli",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testIfExpression",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testGroupingSetsWithMultipleDistinctNoInput",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testCoercions",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTry",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testGroupingSetsRepeatedSetsAllNoInput",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testCountWithOrPredicate",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testExistsSubquery",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonDeterministicJoinPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testDefaultDecimalLiteralSwitch",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testApproxPercentile",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testCountWithAndPredicate",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonDeterministicFilter",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSameWindowFunctionsTwoCoerces",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testGroupingSetsMultipleGrandTotalSetsNoInput",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testHaving3",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTrivialNonDeterministicPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testAggregationWithProjection",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testCubeNoInput",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testScalarSubquery",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testJoinCoercion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testGroupingSetsWithGlobalAggregationNoInput",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testGroupingSetsNoInput",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonDeterministicAggregationPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testValues",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonEqualityFullJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testApproximateCountDistinctGroupByWithStandardError",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonEqualityLeftJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testAggregationWithSomeArgumentCasts",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testApproximateCountDistinct",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonDeterministicTableScanPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonEqualityJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testJoinCriteriaCoercion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testColumnAliases",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testComplexDistinct",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testCorrelatedScalarSubqueriesWithScalarAggregation",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testIn"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT sum(totalprice * 2) - sum(totalprice) FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT sum(totalprice * 2) + sum(totalprice * 2) FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "For query: \n SELECT APPROX_PERCENTILE(0.1E0, x), AVG(x), MIN(x) FROM (values 1, 1, 1) t(x)\nnot equal\nActual 1 rows:\n    [4.9E-324, 1.0, 1]\nExpected 1 rows:\n    [0.1, 1.0, 1]\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [true] but found [false]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT approx_distinct(custkey, 0.023) FROM orders",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "Max standard error must be in [0.0115, 0.26]: 1.14E-322",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "For query: \n SELECT CAST(1.1 AS DECIMAL(38,1)) + CAST(1.1 AS DOUBLE)\nnot equal\nActual 1 rows:\n    [1.1E-322]\nExpected 1 rows:\n    [2.2]\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x, T.y, z + 1 FROM (SELECT custkey, orderstatus, totalprice FROM orders) T (x, y, z)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(DISTINCT custkey), SUM(DISTINCT custkey), SUM(DISTINCT custkey + 1.0E0), AVG(DISTINCT custkey), VARIANCE(DISTINCT custkey) FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT (SELECT round(3 * avg(i.a)) FROM (VALUES 1, 1, 1, 2, 2, 3, 4) i(a) WHERE i.a \u003c o.a AND i.a \u003c 4) FROM (VALUES 0, 3, 3, 5) o(a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem WHERE tax \u003c discount AND tax \u003e 0.01 AND discount \u003c 0.05",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem WHERE tax \u003c 0.01 OR discount \u003e 0.05",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity \u003c 0 GROUP BY CUBE (linenumber, suppkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [1.0] but found [4.9E-323]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT o1.orderkey, COUNT(*) FROM orders o1  JOIN (SELECT * FROM orders LIMIT 10) o2 ON (SELECT avg(orderkey) FROM ORDERS) \u003e 3 GROUP BY o1.orderkey ORDER BY o1.orderkey LIMIT 5",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity \u003c 0 GROUP BY GROUPING SETS ((), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity \u003c 0 GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity \u003c 0 GROUP BY GROUPING SETS ((), (linenumber, suppkey), (), (linenumber, suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem WHERE quantity \u003c 0 GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey), ())",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(DISTINCT CAST(quantity AS BIGINT)), COUNT(DISTINCT linestatus) FROM lineitem WHERE quantity \u003c 0 GROUP BY GROUPING SETS ((linenumber, suppkey), (suppkey))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, sum(totalprice) * 2 FROM orders GROUP BY custkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT sum(IF(orderstatus \u003d \u0027F\u0027, totalprice, 0.0)) FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM orders WHERE orderkey IN (1, CAST(2.0 AS DOUBLE), 3)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM orders t join (SELECT * FROM orders LIMIT 1) t2 ON sin(t2.custkey) \u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "For query: \n SELECT * FROM (VALUES (1, 2.0)) x (a, b) JOIN (VALUES (DOUBLE \u00271.0\u0027, 3)) y (a, b) USING(a)\nnot equal\nActual 0 rows:\n    \nExpected 1 rows:\n    [1, 2.0, 1.0, 3]\n",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "$operator$GREATER_THAN(double,decimal(1,1)):boolean not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "$operator$GREATER_THAN(double,decimal(1,1)):boolean not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "$operator$MULTIPLY(double,decimal(5,1)):double not found",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "$operator$GREATER_THAN(double,decimal(1,1)):boolean not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem FULL JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.quantity \u003e 5 WHERE lineitem.orderkey IS NULL OR orders.orderkey IS NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.quantity + length(orders.comment) \u003e 7",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT OUTER JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.quantity \u003e 5 WHERE orders.orderkey IS NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM       (SELECT * FROM lineitem ORDER BY orderkey,linenumber LIMIT 5) l          RIGHT OUTER JOIN       (SELECT * FROM orders ORDER BY orderkey LIMIT 5) o          ON       l.quantity !\u003d 5 WHERE l.orderkey IS NULL",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "$operator$MULTIPLY(decimal(3,1),double):double not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT DISTINCT orderkey FROM lineitem WHERE orderkey BETWEEN   (SELECT avg(orderkey) FROM orders) - 10    AND   (SELECT avg(orderkey) FROM orders) + 10",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "$operator$LESS_THAN(double,decimal(1,1)):boolean not found",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) WHERE rand() \u003e\u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, sum(TRY(100/(CAST (tax*10 AS BIGINT)))) FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "For query: \n VALUES (1.1, 2, \u0027foo\u0027), (sin(3.3), 2+2, \u0027bar\u0027)\nnot equal\nActual 2 rows:\n    [11.0, 2, foo]\n    [-1.577456941432482E15, 4, bar]\nExpected 2 rows:\n    [1.1, 2, foo]\n    [-0.1577456941432482, 4, bar]\n",
          "isError": false
        }
      ],
      "nbFailures": 39,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestQueryPlanDeterminism",
      "failingMethods": [
        "com.facebook.presto.tests.TestQueryPlanDeterminism#testDefaultDecimalLiteralSwitch"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [SELECT 1.0\n\n] but found [SELECT DECIMAL \u00271.0\u0027\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ],
  "nbCPU": 4
}