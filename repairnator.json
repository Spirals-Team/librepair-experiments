{
  "totalNumberSkippingTests": 59,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "druid-io/druid",
  "failingModule": "/root/workspace/druid-io/druid/281359996/processing",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 25,
  "error-types": [
    "java.lang.AssertionError",
    "skipped"
  ],
  "totalNumberRunningTests": 77356,
  "failing-test-cases": [
    {
      "className": "io.druid.query.groupby.GroupByQueryRunnerTest",
      "failingMethods": [
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003dmMappedTestIndex]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 75,
      "nbErrors": 0
    }
  ]
}