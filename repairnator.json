{
  "totalNumberSkippingTests": 1,
  "bugType": "only_fail",
  "totalNumberErroringTests": 57,
  "repo": "lukas-krecan/JsonUnit",
  "bugCommit": "https://github.com/lukas-krecan/JsonUnit/compare/095bbc417d4c...4dd39d0b1d00",
  "failingModule": "/root/workspace/lukas-krecan/JsonUnit/267666195/tests/test-jsonp",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 5,
  "error-types": [
    "java.lang.IndexOutOfBoundsException",
    "java.lang.AssertionError",
    "java.lang.ArrayIndexOutOfBoundsException",
    "java.lang.IllegalArgumentException",
    "javax.json.stream.JsonParsingException",
    "java.lang.ClassCastException",
    "java.lang.Exception",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1942,
  "failing-test-cases": [
    {
      "className": "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest",
      "failingMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testEqualsToDoubleArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testOkNull",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testEqualsToNull"
      ],
      "erroringMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIssue3SpaceStrings",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#negativeArrayIndexShouldCountBackwardsAndReportFailure",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertPath",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#positiveArrayIndexOutOfBounds",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertPathArrayOk",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testOkNumberInString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertNode",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIssue3",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertNodeInExpectOnly",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#equalsShouldFailOnStringAndANumber",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAcceptEscapedPath",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAllowWeirdCharsInArrayPattern",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertDifferentType",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testAssertPathArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#anyStringShouldAcceptAString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAcceptEscapedPathWithTwoDots",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#negativeArrayIndexShouldCountBackwards",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIssue3NoSpace",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#negativeArrayIndexOutOfBounds",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAcceptEscapedPathAndShowCorrectErrorMessage",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testLongPaths",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#testIssue3Original",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpFluentAssertTest#shouldAllowUnquotedKeysAndCommentInExpectedValue"
      ],
      "failures": [
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 47 at (line no\u003d1, column no\u003d2, offset\u003d1)",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "org.glassfish.json.JsonNumberImpl$JsonIntNumber cannot be cast to javax.json.JsonObject",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 101 at (line no\u003d1, column no\u003d3, offset\u003d2), expecting \u0027r\u0027",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test[0]\". Expected 1, got 1.0. Different value found in node \"test[1]\". Expected 2, got 2.0. Different value found in node \"test[2]\". Expected 3, got 3.0. ",
          "isError": false
        },
        {
          "failureName": "java.lang.ArrayIndexOutOfBoundsException",
          "failureDetail": "-2",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027{}\u0027, got \u0027null\u0027. ",
          "isError": false
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "org.glassfish.json.JsonNumberImpl$JsonIntNumber cannot be cast to javax.json.JsonObject",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "org.glassfish.json.JsonNumberImpl$JsonIntNumber cannot be cast to javax.json.JsonObject",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d10, offset\u003d9). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 5, Size: 3",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Unsupported type class org.glassfish.json.JsonNumberImpl$JsonIntNumber",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d9, offset\u003d8). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "org.glassfish.json.JsonNumberImpl$JsonIntNumber cannot be cast to javax.json.JsonObject",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d10, offset\u003d9). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different value found in node \"test\". Expected \u0027{}\u0027, got \u0027null\u0027. ",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Unsupported type class org.glassfish.json.JsonNumberImpl$JsonIntNumber",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "org.glassfish.json.JsonNumberImpl$JsonIntNumber cannot be cast to javax.json.JsonObject",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 24
    },
    {
      "className": "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest",
      "failingMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#structureEqualsShouldPassOnNull",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#strictStructureEqualsShouldFailOnNull"
      ],
      "erroringMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testNumberAndString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEqualsNodeFail",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testSimpleDifferent",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#assertPartNotEqualsShouldPass",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testComparisonWhenOverTolerance",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertJsonNodePresentInArray",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOk",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#shouldFailIfQuotationMarksMissingOnActualKeys",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#shouldIgnoreValuesWhenToleranceSet",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEqualsNode",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#parametrizedMatcherShouldFail",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEqualsNodeIgnore",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEmptyValues",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#shouldParseExpectedValueLeniently",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#parametrizedMatcherShouldMatch",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#missingParameterShouldResultInEmptyString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testNotEqualWhenToleranceNotSet",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testSimpleIgnore",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testComparisonWhenWithinToleranceNegative",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOkReaders",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPart",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testSimple",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#assertPartNotEqualsShouldFailWithCorrectMessage",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testInvalidJsonActual",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartArrayOk",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartOkString",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testAssertPartNonexisting",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonAssertTest#testEqualsNodeStringFail"
      ],
      "failures": [
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 101 at (line no\u003d1, column no\u003d3, offset\u003d2), expecting \u0027r\u0027",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Unsupported type class org.glassfish.json.JsonStringImpl",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Unsupported type class org.glassfish.json.JsonStringImpl",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d21, offset\u003d20). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003cjavax.json.stream.JsonParsingException\u003e",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Unsupported type class org.glassfish.json.JsonNumberImpl$JsonIntNumber",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Unsupported type class org.glassfish.json.JsonNumberImpl$JsonIntNumber",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d2, offset\u003d1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.NumberFormatException\u003e but was\u003cjavax.json.stream.JsonParsingException\u003e",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 3, Size: 2",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 101 at (line no\u003d1, column no\u003d3, offset\u003d2), expecting \u0027r\u0027",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d5, offset\u003d4). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "JSON documents are different: Different keys found in node \"\". Expected [test], got []. Missing: \"test\"  ",
          "isError": false
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dSTRING at (line no\u003d1, column no\u003d4, offset\u003d3). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Unexpected char 47 at (line no\u003d1, column no\u003d2, offset\u003d1)",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ifferent: Different [value found in node \"\". Expected \u0027{\"test\":3}\u0027, got \u0027null\u0027.] \u003e but was:\u003c...ifferent: Different [keys found in node \"\". Expected [test], got []. Missing: \"test\" ] \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.IllegalArgumentException\u003e but was\u003cjavax.json.stream.JsonParsingException\u003e",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 28
    },
    {
      "className": "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest",
      "failingMethods": [],
      "erroringMethods": [
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testDifferentPartValue",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testJsonNode",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testEquals",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testPresent",
        "net.javacrumbs.jsonunit.test.jackson2.JsonpJsonMatchersTest#testGenericsStringInference"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Unsupported type class org.glassfish.json.JsonNumberImpl$JsonIntNumber",
          "isError": true
        },
        {
          "failureName": "java.lang.ClassCastException",
          "failureDetail": "org.glassfish.json.JsonNumberImpl$JsonIntNumber cannot be cast to javax.json.JsonObject",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        },
        {
          "failureName": "javax.json.stream.JsonParsingException",
          "failureDetail": "Invalid token\u003dNUMBER at (line no\u003d1, column no\u003d0, offset\u003d-1). Expected tokens are: [CURLYOPEN, SQUAREOPEN]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    }
  ]
}