{
  "totalNumberSkippingTests": 110,
  "bugType": "only_fail",
  "totalNumberErroringTests": 1,
  "repo": "julianhyde/calcite",
  "bugCommit": "https://github.com/julianhyde/calcite/compare/360d12372995...dd69e4278522",
  "failingModule": "/root/workspace/julianhyde/calcite/379995646/core",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 28,
  "error-types": [
    "java.lang.AssertionError",
    "java.lang.IllegalArgumentException"
  ],
  "totalNumberRunningTests": 4692,
  "failing-test-cases": [
    {
      "className": "org.apache.calcite.test.RexImplicationCheckerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSimplifyFloor"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "unbound: CEIL(2010-10-10 00:00:00, FLAG(YEAR))",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.apache.calcite.test.RexProgramTest",
      "failingMethods": [
        "testSimplifyOrTerms"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "result mismatch: when applied to {?0.b\u003dNULL}, OR(\u003c\u003e(?0.b, 1), \u003d(?0.b, 1)) yielded false, and true yielded true",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.rel.rules.DateRangeRulesTest",
      "failingMethods": [
        "testExtractPartialRewriteForNotEqualsYear",
        "testExtractWithOrCondition2",
        "testExtractWithOrCondition1",
        "testExtractRewriteForInvalidMonthComparison",
        "testExtractRewriteMultipleOperands",
        "testExtractYearMonthDayFromTimestampColumn",
        "testFloorEqRewrite",
        "testFloorExtractBothRewrite",
        "testExtractYearMonthDayFromDateColumn",
        "testFloorRewriteWithTimezone",
        "testExtractYearFromDateColumn",
        "testFloorGeRewrite",
        "testCeilLeRewrite",
        "testCeilLtRewrite",
        "testExtractYearAndDayFromDateColumn",
        "testFloorGtRewrite",
        "testExtractYearAndMonthFromDateColumn2",
        "testExtractYearFromTimestampColumn",
        "testExtractPartialRewriteForInMonth",
        "testExtractRewriteForInvalidDayComparison",
        "testUnboundYearExtractRewrite",
        "testCeilGtRewrite",
        "testCeilEqRewrite",
        "testExtractYearAndMonthFromDateColumn",
        "testCeilGeRewrite",
        "testFloorLtRewrite",
        "testFloorLeRewrite"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $9 of type JavaType(class java.sql.Timestamp)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "don\u0027t know values for $8 of type JavaType(class java.sql.Date)",
          "isError": false
        }
      ],
      "nbFailures": 27,
      "nbErrors": 0
    }
  ]
}