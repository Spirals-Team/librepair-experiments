{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 77,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/380444930",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 4,
  "error-types": [
    "spoon.support.SpoonClassNotFoundException",
    "spoon.SpoonException",
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 1420,
  "failing-test-cases": [
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSrcMainJava"
      ],
      "failures": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.util.TreeMap",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTemplateInterfaces"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Getting of template parameters failed",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTest",
        "testMain_checkGenericContracts",
        "testMain_checkShadow"
      ],
      "failures": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.CodeFactory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.util.Arrays",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.util.Arrays",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.util.Collections",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAccessToNestedClass",
        "testSpoonWithImports",
        "testAccessType",
        "testCanAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.util.Arrays",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.util.Arrays",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.util.Arrays",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: java.util.Arrays",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [
        "testShadowModelEqualsNormalModel",
        "testScannerClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Unexpected shadow typeMember: $jacocoData",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.parent.ParentContractTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[public interface CtAnnotationFieldAccess\u003cT\u003e extends spoon.reflect.code.CtTargetedExpression\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e , spoon.reflect.code.CtVariableRead\u003cT\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.VARIABLE)\n    spoon.reflect.reference.CtFieldReference\u003cT\u003e getVariable();\n\n    @java.lang.Override\n    spoon.reflect.code.CtAnnotationFieldAccess\u003cT\u003e clone();\n}]",
        "testContract[public interface CtCatch extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtCodeElement {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PARAMETER)\n    spoon.reflect.code.CtCatchVariable\u003c? extends java.lang.Throwable\u003e getParameter();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PARAMETER)\n    \u003cT extends spoon.reflect.code.CtCatch\u003e T setParameter(spoon.reflect.code.CtCatchVariable\u003c? extends java.lang.Throwable\u003e parameter);\n\n    @java.lang.Override\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.BODY)\n    spoon.reflect.code.CtBlock\u003c?\u003e getBody();\n\n    @java.lang.Override\n    spoon.reflect.code.CtCatch clone();\n}]",
        "testContract[public interface CtEnumValue\u003cT\u003e extends spoon.reflect.declaration.CtField\u003cT\u003e {\n    @java.lang.Override\n    spoon.reflect.declaration.CtEnumValue clone();\n}]",
        "testContract[public interface CtCodeSnippetStatement extends spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtCodeSnippet {\n    \u003cS extends spoon.reflect.code.CtStatement\u003e S compile() throws spoon.support.compiler.SnippetCompilationError;\n\n    @java.lang.Override\n    spoon.reflect.code.CtCodeSnippetStatement clone();\n}]",
        "testContract[public interface CtOperatorAssignment\u003cT, A extends T\u003e extends spoon.reflect.code.CtAssignment\u003cT, A\u003e {\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPERATOR_KIND)\n    \u003cC extends spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e\u003e C setKind(spoon.reflect.code.BinaryOperatorKind kind);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPERATOR_KIND)\n    spoon.reflect.code.BinaryOperatorKind getKind();\n\n    @java.lang.Override\n    spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e clone();\n}]",
        "testContract[public interface CtAnnotationType\u003cT extends java.lang.annotation.Annotation\u003e extends spoon.reflect.declaration.CtType\u003cT\u003e {\n    @spoon.support.DerivedProperty\n    java.util.Set\u003cspoon.reflect.declaration.CtAnnotationMethod\u003c?\u003e\u003e getAnnotationMethods();\n\n    @java.lang.Override\n    \u003cM, C extends spoon.reflect.declaration.CtType\u003cT\u003e\u003e C addMethod(spoon.reflect.declaration.CtMethod\u003cM\u003e method);\n\n    @java.lang.Override\n    \u003cC extends spoon.reflect.declaration.CtType\u003cT\u003e\u003e C setMethods(java.util.Set\u003cspoon.reflect.declaration.CtMethod\u003c?\u003e\u003e methods);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtAnnotationType\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT extends spoon.reflect.declaration.CtFormalTypeDeclarer\u003e T setFormalCtTypeParameters(java.util.List\u003cspoon.reflect.declaration.CtTypeParameter\u003e formalTypeParameters);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cT\u003e\u003e C setSuperInterfaces(java.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e interfaces);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cT\u003e\u003e C setSuperclass(spoon.reflect.reference.CtTypeReference\u003c?\u003e superClass);\n}]",
        "testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {\n    java.lang.String TOP_LEVEL_MODULE_NAME \u003d \"unnamed module\";\n\n    @spoon.support.DerivedProperty\n    boolean isUnnamedModule();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    boolean isOpenModule();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setIsOpenModule(boolean openModule);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setModuleDirectives(java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e moduleDirectives);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e getModuleDirectives();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e getUsedServices();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setUsedServices(java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e usedServices);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addUsedService(spoon.reflect.declaration.CtUsedService usedService);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getExportedPackages();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setExportedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e exportedPackages);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getOpenedPackages();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setOpenedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e openedPackages);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e getRequiredModules();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRequiredModules(java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e requiredModules);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e getProvidedServices();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setProvidedServices(java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e providedServices);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getRootPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);\n\n    @spoon.support.DerivedProperty\n    @java.lang.Override\n    spoon.reflect.reference.CtModuleReference getReference();\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtModule clone();\n}]",
        "testContract[public interface CtParameter\u003cT\u003e extends spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtVariable\u003cT\u003e {\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtExecutable\u003c?\u003e getParent();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.IS_VARARGS)\n    boolean isVarArgs();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.IS_VARARGS)\n    \u003cC extends spoon.reflect.declaration.CtParameter\u003cT\u003e\u003e C setVarArgs(boolean varArgs);\n\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtParameterReference\u003cT\u003e getReference();\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtParameter\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtVariable\u003cT\u003e\u003e C setDefaultExpression(spoon.reflect.code.CtExpression\u003cT\u003e assignedExpression);\n}]",
        "testContract[public interface CtInvocation\u003cT\u003e extends spoon.reflect.code.CtAbstractInvocation\u003cT\u003e , spoon.reflect.code.CtStatement , spoon.reflect.code.CtTargetedExpression\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e , spoon.reflect.reference.CtActualTypeContainer {\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    java.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e getActualTypeArguments();\n\n    @java.lang.Override\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    \u003cT extends spoon.reflect.reference.CtActualTypeContainer\u003e T setActualTypeArguments(java.util.List\u003c? extends spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e actualTypeArguments);\n\n    @java.lang.Override\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    \u003cT extends spoon.reflect.reference.CtActualTypeContainer\u003e T addActualTypeArgument(spoon.reflect.reference.CtTypeReference\u003c?\u003e actualTypeArgument);\n\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.TYPE)\n    spoon.reflect.reference.CtTypeReference\u003cT\u003e getType();\n\n    @java.lang.Override\n    spoon.reflect.code.CtInvocation\u003cT\u003e clone();\n}]",
        "testContract[public interface CtNewArray\u003cT\u003e extends spoon.reflect.code.CtExpression\u003cT\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.DIMENSION)\n    java.util.List\u003cspoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e\u003e getDimensionExpressions();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.DIMENSION)\n    \u003cC extends spoon.reflect.code.CtNewArray\u003cT\u003e\u003e C setDimensionExpressions(java.util.List\u003cspoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e\u003e dimensions);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.DIMENSION)\n    \u003cC extends spoon.reflect.code.CtNewArray\u003cT\u003e\u003e C addDimensionExpression(spoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e dimension);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.DIMENSION)\n    boolean removeDimensionExpression(spoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e dimension);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    java.util.List\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e getElements();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cC extends spoon.reflect.code.CtNewArray\u003cT\u003e\u003e C setElements(java.util.List\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e expression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cC extends spoon.reflect.code.CtNewArray\u003cT\u003e\u003e C addElement(spoon.reflect.code.CtExpression\u003c?\u003e expression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    boolean removeElement(spoon.reflect.code.CtExpression\u003c?\u003e expression);\n\n    @java.lang.Override\n    spoon.reflect.code.CtNewArray\u003cT\u003e clone();\n}]",
        "testContract[public interface CtVariableWrite\u003cT\u003e extends spoon.reflect.code.CtVariableAccess\u003cT\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtVariableWrite\u003cT\u003e clone();\n}]",
        "testContract[public interface CtBlock\u003cR\u003e extends spoon.reflect.code.CtStatement , spoon.reflect.code.CtStatementList , spoon.template.TemplateParameter\u003cR\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtBlock\u003cR\u003e clone();\n}]",
        "testContract[public interface CtFieldWrite\u003cT\u003e extends spoon.reflect.code.CtFieldAccess\u003cT\u003e , spoon.reflect.code.CtVariableWrite\u003cT\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtFieldWrite\u003cT\u003e clone();\n}]",
        "testContract[public interface CtTypeParameter extends spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e {\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtTypeParameterReference getReference();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtFormalTypeDeclarer getTypeParameterDeclarer();\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtTypeParameter clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT extends spoon.reflect.declaration.CtFormalTypeDeclarer\u003e T setFormalCtTypeParameters(java.util.List\u003cspoon.reflect.declaration.CtTypeParameter\u003e formalTypeParameters);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\u003e C setSuperInterfaces(java.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e interfaces);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\u003e C setTypeMembers(java.util.List\u003cspoon.reflect.declaration.CtTypeMember\u003e members);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\u003e C setFields(java.util.List\u003cspoon.reflect.declaration.CtField\u003c?\u003e\u003e fields);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\u003e C setMethods(java.util.Set\u003cspoon.reflect.declaration.CtMethod\u003c?\u003e\u003e methods);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\u003e C setNestedTypes(java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e nestedTypes);\n}]",
        "testContract[public interface CtCase\u003cS\u003e extends spoon.reflect.code.CtStatement , spoon.reflect.code.CtStatementList {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cS\u003e getCaseExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtCase\u003cS\u003e\u003e T setCaseExpression(spoon.reflect.code.CtExpression\u003cS\u003e caseExpression);\n\n    @java.lang.Override\n    spoon.reflect.code.CtCase\u003cS\u003e clone();\n}]",
        "testContract[public interface CtEnum\u003cT extends java.lang.Enum\u003c?\u003e\u003e extends spoon.reflect.declaration.CtClass\u003cT\u003e {\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cC extends spoon.reflect.declaration.CtEnum\u003cT\u003e\u003e C addEnumValue(spoon.reflect.declaration.CtEnumValue\u003c?\u003e enumValue);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    boolean removeEnumValue(spoon.reflect.declaration.CtEnumValue\u003c?\u003e enumValue);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    spoon.reflect.declaration.CtEnumValue\u003c?\u003e getEnumValue(java.lang.String name);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    java.util.List\u003cspoon.reflect.declaration.CtEnumValue\u003c?\u003e\u003e getEnumValues();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cC extends spoon.reflect.declaration.CtEnum\u003cT\u003e\u003e C setEnumValues(java.util.List\u003cspoon.reflect.declaration.CtEnumValue\u003c?\u003e\u003e enumValues);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtEnum\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT extends spoon.reflect.declaration.CtFormalTypeDeclarer\u003e T setFormalCtTypeParameters(java.util.List\u003cspoon.reflect.declaration.CtTypeParameter\u003e formalTypeParameters);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cT\u003e\u003e C setSuperclass(spoon.reflect.reference.CtTypeReference\u003c?\u003e superClass);\n}]",
        "testContract[public interface CtExecutableReferenceExpression\u003cT, E extends spoon.reflect.code.CtExpression\u003c?\u003e\u003e extends spoon.reflect.code.CtTargetedExpression\u003cT, E\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXECUTABLE_REF)\n    spoon.reflect.reference.CtExecutableReference\u003cT\u003e getExecutable();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXECUTABLE_REF)\n    \u003cC extends spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e\u003e C setExecutable(spoon.reflect.reference.CtExecutableReference\u003cT\u003e executable);\n\n    @java.lang.Override\n    spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e clone();\n}]",
        "testContract[public interface CtBreak extends spoon.reflect.code.CtLabelledFlowBreak {\n    @java.lang.Override\n    spoon.reflect.code.CtBreak clone();\n}]",
        "testContract[public interface CtCodeSnippetExpression\u003cT\u003e extends spoon.reflect.code.CtExpression\u003cT\u003e , spoon.reflect.declaration.CtCodeSnippet {\n    \u003cE extends spoon.reflect.code.CtExpression\u003cT\u003e\u003e E compile() throws spoon.support.compiler.SnippetCompilationError;\n\n    @java.lang.Override\n    spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e clone();\n}]",
        "testContract[public interface CtConditional\u003cT\u003e extends spoon.reflect.code.CtExpression\u003cT\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.ELSE)\n    spoon.reflect.code.CtExpression\u003cT\u003e getElseExpression();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.THEN)\n    spoon.reflect.code.CtExpression\u003cT\u003e getThenExpression();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONDITION)\n    spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e getCondition();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.ELSE)\n    \u003cC extends spoon.reflect.code.CtConditional\u003cT\u003e\u003e C setElseExpression(spoon.reflect.code.CtExpression\u003cT\u003e elseExpression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.THEN)\n    \u003cC extends spoon.reflect.code.CtConditional\u003cT\u003e\u003e C setThenExpression(spoon.reflect.code.CtExpression\u003cT\u003e thenExpression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONDITION)\n    \u003cC extends spoon.reflect.code.CtConditional\u003cT\u003e\u003e C setCondition(spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e condition);\n\n    @java.lang.Override\n    spoon.reflect.code.CtConditional\u003cT\u003e clone();\n}]",
        "testContract[public interface CtAssert\u003cT\u003e extends spoon.reflect.code.CtStatement {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONDITION)\n    spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e getAssertExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONDITION)\n    \u003cA extends spoon.reflect.code.CtAssert\u003cT\u003e\u003e A setAssertExpression(spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e asserted);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cT\u003e getExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cA extends spoon.reflect.code.CtAssert\u003cT\u003e\u003e A setExpression(spoon.reflect.code.CtExpression\u003cT\u003e expression);\n\n    @java.lang.Override\n    spoon.reflect.code.CtAssert\u003cT\u003e clone();\n}]",
        "testContract[public interface CtProvidedService extends spoon.reflect.declaration.CtModuleDirective {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    spoon.reflect.reference.CtTypeReference getServiceType();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtProvidedService\u003e T setServiceType(spoon.reflect.reference.CtTypeReference providingType);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)\n    java.util.List\u003cspoon.reflect.reference.CtTypeReference\u003e getImplementationTypes();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtProvidedService\u003e T setImplementationTypes(java.util.List\u003cspoon.reflect.reference.CtTypeReference\u003e usedTypes);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtProvidedService\u003e T addImplementationType(spoon.reflect.reference.CtTypeReference usedType);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtProvidedService clone();\n}]",
        "testContract[public interface CtJavaDocTag extends spoon.reflect.declaration.CtElement {\n    java.lang.String JAVADOC_TAG_PREFIX \u003d \"@\";\n\n    enum TagType {\n        AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;\n        public boolean hasParam() {\n            return ((this) \u003d\u003d (spoon.reflect.code.CtJavaDocTag.TagType.PARAM)) || ((this) \u003d\u003d (spoon.reflect.code.CtJavaDocTag.TagType.THROWS));\n        }\n\n        public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String tagName) {\n            for (spoon.reflect.code.CtJavaDocTag.TagType t : spoon.reflect.code.CtJavaDocTag.TagType.values()) {\n                if (t.name().toLowerCase().equals(tagName.toLowerCase())) {\n                    return t;\n                }\n            }\n            return spoon.reflect.code.CtJavaDocTag.TagType.UNKNOWN;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return (spoon.reflect.code.CtJavaDocTag.JAVADOC_TAG_PREFIX) + (name().toLowerCase());\n        }\n    }\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)\n    spoon.reflect.code.CtJavaDocTag.TagType getType();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)\n    \u003cE extends spoon.reflect.code.CtJavaDocTag\u003e E setType(java.lang.String type);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)\n    \u003cE extends spoon.reflect.code.CtJavaDocTag\u003e E setType(spoon.reflect.code.CtJavaDocTag.TagType type);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.COMMENT_CONTENT)\n    java.lang.String getContent();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_CONTENT)\n    \u003cE extends spoon.reflect.code.CtJavaDocTag\u003e E setContent(java.lang.String content);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE)\n    java.lang.String getParam();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE)\n    \u003cE extends spoon.reflect.code.CtJavaDocTag\u003e E setParam(java.lang.String param);\n\n    @java.lang.Override\n    spoon.reflect.code.CtJavaDocTag clone();\n}]",
        "testContract[public interface CtCatchVariable\u003cT\u003e extends spoon.reflect.code.CtCodeElement , spoon.reflect.declaration.CtMultiTypedElement , spoon.reflect.declaration.CtVariable\u003cT\u003e {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtCatchVariableReference\u003cT\u003e getReference();\n\n    @java.lang.Override\n    spoon.reflect.code.CtCatchVariable\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtVariable\u003cT\u003e\u003e C setDefaultExpression(spoon.reflect.code.CtExpression\u003cT\u003e assignedExpression);\n\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtTypeReference\u003cT\u003e getType();\n}]",
        "testContract[public interface CtComment extends spoon.reflect.code.CtStatement {\n    enum CommentType {\n        FILE, JAVADOC, INLINE, BLOCK;}\n\n    java.lang.String LINE_SEPARATOR \u003d \"\\n\";\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.COMMENT_CONTENT)\n    java.lang.String getContent();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_CONTENT)\n    \u003cE extends spoon.reflect.code.CtComment\u003e E setContent(java.lang.String content);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TYPE)\n    spoon.reflect.code.CtComment.CommentType getCommentType();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TYPE)\n    \u003cE extends spoon.reflect.code.CtComment\u003e E setCommentType(spoon.reflect.code.CtComment.CommentType commentType);\n\n    @java.lang.Override\n    spoon.reflect.code.CtComment clone();\n\n    spoon.reflect.code.CtJavaDoc asJavaDoc();\n}]",
        "testContract[public interface CtSynchronized extends spoon.reflect.code.CtStatement {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003c?\u003e getExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtSynchronized\u003e T setExpression(spoon.reflect.code.CtExpression\u003c?\u003e expression);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.BODY)\n    spoon.reflect.code.CtBlock\u003c?\u003e getBlock();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.BODY)\n    \u003cT extends spoon.reflect.code.CtSynchronized\u003e T setBlock(spoon.reflect.code.CtBlock\u003c?\u003e block);\n\n    @java.lang.Override\n    spoon.reflect.code.CtSynchronized clone();\n}]",
        "testContract[public interface CtAssignment\u003cT, A extends T\u003e extends spoon.reflect.code.CtExpression\u003cT\u003e , spoon.reflect.code.CtRHSReceiver\u003cA\u003e , spoon.reflect.code.CtStatement {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.ASSIGNED)\n    spoon.reflect.code.CtExpression\u003cT\u003e getAssigned();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.ASSIGNED)\n    \u003cC extends spoon.reflect.code.CtAssignment\u003cT, A\u003e\u003e C setAssigned(spoon.reflect.code.CtExpression\u003cT\u003e assigned);\n\n    @java.lang.Override\n    spoon.reflect.code.CtAssignment\u003cT, A\u003e clone();\n}]",
        "testContract[public interface CtConstructorCall\u003cT\u003e extends spoon.reflect.code.CtAbstractInvocation\u003cT\u003e , spoon.reflect.code.CtStatement , spoon.reflect.code.CtTargetedExpression\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e , spoon.reflect.reference.CtActualTypeContainer {\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    java.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e getActualTypeArguments();\n\n    @java.lang.Override\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    \u003cT extends spoon.reflect.reference.CtActualTypeContainer\u003e T setActualTypeArguments(java.util.List\u003c? extends spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e actualTypeArguments);\n\n    @java.lang.Override\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    \u003cT extends spoon.reflect.reference.CtActualTypeContainer\u003e T addActualTypeArgument(spoon.reflect.reference.CtTypeReference\u003c?\u003e actualTypeArgument);\n\n    @java.lang.Override\n    spoon.reflect.code.CtConstructorCall\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.TYPE)\n    spoon.reflect.reference.CtTypeReference\u003cT\u003e getType();\n}]",
        "testContract[public interface CtArrayRead\u003cT\u003e extends spoon.reflect.code.CtArrayAccess\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtArrayRead\u003cT\u003e clone();\n}]",
        "testContract[public interface CtInterface\u003cT\u003e extends spoon.reflect.declaration.CtType\u003cT\u003e {\n    @java.lang.Override\n    spoon.reflect.declaration.CtInterface\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtType\u003cT\u003e\u003e C setSuperclass(spoon.reflect.reference.CtTypeReference\u003c?\u003e superClass);\n}]",
        "testContract[public interface CtIf extends spoon.reflect.code.CtStatement , spoon.template.TemplateParameter\u003cjava.lang.Void\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONDITION)\n    spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e getCondition();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.ELSE)\n    \u003cS extends spoon.reflect.code.CtStatement\u003e S getElseStatement();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.THEN)\n    \u003cS extends spoon.reflect.code.CtStatement\u003e S getThenStatement();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONDITION)\n    \u003cT extends spoon.reflect.code.CtIf\u003e T setCondition(spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e expression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.ELSE)\n    \u003cT extends spoon.reflect.code.CtIf\u003e T setElseStatement(spoon.reflect.code.CtStatement elseStatement);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.THEN)\n    \u003cT extends spoon.reflect.code.CtIf\u003e T setThenStatement(spoon.reflect.code.CtStatement thenStatement);\n\n    @java.lang.Override\n    spoon.reflect.code.CtIf clone();\n}]",
        "testContract[public interface CtAnonymousExecutable extends spoon.reflect.declaration.CtExecutable\u003cjava.lang.Void\u003e , spoon.reflect.declaration.CtTypeMember {\n    @java.lang.Override\n    spoon.reflect.declaration.CtAnonymousExecutable clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT extends spoon.reflect.declaration.CtExecutable\u003cjava.lang.Void\u003e\u003e T setThrownTypes(java.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e thrownTypes);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT extends spoon.reflect.declaration.CtExecutable\u003cjava.lang.Void\u003e\u003e T setParameters(java.util.List\u003cspoon.reflect.declaration.CtParameter\u003c?\u003e\u003e parameters);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtTypedElement\u003e C setType(spoon.reflect.reference.CtTypeReference\u003cjava.lang.Void\u003e type);\n}]",
        "testContract[public interface CtLocalVariable\u003cT\u003e extends spoon.reflect.code.CtRHSReceiver\u003cT\u003e , spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtVariable\u003cT\u003e {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtLocalVariableReference\u003cT\u003e getReference();\n\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    spoon.reflect.code.CtExpression\u003cT\u003e getAssignment();\n\n    @java.lang.Override\n    spoon.reflect.code.CtLocalVariable\u003cT\u003e clone();\n}]",
        "testContract[public interface CtSwitch\u003cS\u003e extends spoon.reflect.code.CtStatement {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cS\u003e getSelector();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtSwitch\u003cS\u003e\u003e T setSelector(spoon.reflect.code.CtExpression\u003cS\u003e selector);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CASE)\n    java.util.List\u003cspoon.reflect.code.CtCase\u003c? super S\u003e\u003e getCases();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CASE)\n    \u003cT extends spoon.reflect.code.CtSwitch\u003cS\u003e\u003e T setCases(java.util.List\u003cspoon.reflect.code.CtCase\u003c? super S\u003e\u003e cases);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CASE)\n    \u003cT extends spoon.reflect.code.CtSwitch\u003cS\u003e\u003e T addCase(spoon.reflect.code.CtCase\u003c? super S\u003e c);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CASE)\n    boolean removeCase(spoon.reflect.code.CtCase\u003c? super S\u003e c);\n\n    @java.lang.Override\n    spoon.reflect.code.CtSwitch\u003cS\u003e clone();\n}]",
        "testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {\n    @java.lang.Override\n    spoon.reflect.code.CtContinue clone();\n}]",
        "testContract[public interface CtModuleRequirement extends spoon.reflect.declaration.CtModuleDirective {\n    enum RequiresModifier {\n        STATIC, TRANSITIVE;}\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    java.util.Set\u003cspoon.reflect.declaration.CtModuleRequirement.RequiresModifier\u003e getRequiresModifiers();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    \u003cT extends spoon.reflect.declaration.CtModuleRequirement\u003e T setRequiresModifiers(java.util.Set\u003cspoon.reflect.declaration.CtModuleRequirement.RequiresModifier\u003e requiresModifiers);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_REF)\n    spoon.reflect.reference.CtModuleReference getModuleReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_REF)\n    \u003cT extends spoon.reflect.declaration.CtModuleRequirement\u003e T setModuleReference(spoon.reflect.reference.CtModuleReference moduleReference);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtModuleRequirement clone();\n}]",
        "testContract[public interface CtForEach extends spoon.reflect.code.CtLoop {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003c?\u003e getExpression();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.FOREACH_VARIABLE)\n    spoon.reflect.code.CtLocalVariable\u003c?\u003e getVariable();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtForEach\u003e T setExpression(spoon.reflect.code.CtExpression\u003c?\u003e expression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.FOREACH_VARIABLE)\n    \u003cT extends spoon.reflect.code.CtForEach\u003e T setVariable(spoon.reflect.code.CtLocalVariable\u003c?\u003e variable);\n\n    @java.lang.Override\n    spoon.reflect.code.CtForEach clone();\n}]",
        "testContract[public interface CtAnnotationMethod\u003cT\u003e extends spoon.reflect.declaration.CtMethod\u003cT\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.DEFAULT_EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cT\u003e getDefaultExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.DEFAULT_EXPRESSION)\n    \u003cC extends spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e\u003e C setDefaultExpression(spoon.reflect.code.CtExpression\u003cT\u003e assignedExpression);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT1 extends spoon.reflect.code.CtBodyHolder\u003e T1 setBody(spoon.reflect.code.CtStatement body);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT1 extends spoon.reflect.declaration.CtExecutable\u003cT\u003e\u003e T1 setThrownTypes(java.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e thrownTypes);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT extends spoon.reflect.declaration.CtFormalTypeDeclarer\u003e T setFormalCtTypeParameters(java.util.List\u003cspoon.reflect.declaration.CtTypeParameter\u003e formalTypeParameters);\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT1 extends spoon.reflect.declaration.CtExecutable\u003cT\u003e\u003e T1 setParameters(java.util.List\u003cspoon.reflect.declaration.CtParameter\u003c?\u003e\u003e parameters);\n}]",
        "testContract[public interface CtUnaryOperator\u003cT\u003e extends spoon.reflect.code.CtExpression\u003cT\u003e , spoon.reflect.code.CtStatement {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cT\u003e getOperand();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cC extends spoon.reflect.code.CtUnaryOperator\u003e C setOperand(spoon.reflect.code.CtExpression\u003cT\u003e expression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPERATOR_KIND)\n    \u003cC extends spoon.reflect.code.CtUnaryOperator\u003e C setKind(spoon.reflect.code.UnaryOperatorKind kind);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPERATOR_KIND)\n    spoon.reflect.code.UnaryOperatorKind getKind();\n\n    @java.lang.Override\n    spoon.reflect.code.CtUnaryOperator\u003cT\u003e clone();\n}]",
        "testContract[public interface CtClass\u003cT extends java.lang.Object\u003e extends spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtType\u003cT\u003e {\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)\n    java.util.List\u003cspoon.reflect.declaration.CtAnonymousExecutable\u003e getAnonymousExecutables();\n\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONSTRUCTOR)\n    spoon.reflect.declaration.CtConstructor\u003cT\u003e getConstructor(spoon.reflect.reference.CtTypeReference\u003c?\u003e... parameterTypes);\n\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONSTRUCTOR)\n    java.util.Set\u003cspoon.reflect.declaration.CtConstructor\u003cT\u003e\u003e getConstructors();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)\n    \u003cC extends spoon.reflect.declaration.CtClass\u003cT\u003e\u003e C setAnonymousExecutables(java.util.List\u003cspoon.reflect.declaration.CtAnonymousExecutable\u003e e);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)\n    \u003cC extends spoon.reflect.declaration.CtClass\u003cT\u003e\u003e C addAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)\n    boolean removeAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONSTRUCTOR)\n    \u003cC extends spoon.reflect.declaration.CtClass\u003cT\u003e\u003e C setConstructors(java.util.Set\u003cspoon.reflect.declaration.CtConstructor\u003cT\u003e\u003e constructors);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONSTRUCTOR)\n    \u003cC extends spoon.reflect.declaration.CtClass\u003cT\u003e\u003e C addConstructor(spoon.reflect.declaration.CtConstructor\u003cT\u003e constructor);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONSTRUCTOR)\n    void removeConstructor(spoon.reflect.declaration.CtConstructor\u003cT\u003e constructor);\n\n    boolean isAnonymous();\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtClass\u003cT\u003e clone();\n\n    T newInstance();\n}]",
        "testContract[public interface CtAnnotation\u003cA extends java.lang.annotation.Annotation\u003e extends spoon.reflect.code.CtExpression\u003cA\u003e , spoon.reflect.declaration.CtShadowable {\n    @spoon.support.DerivedProperty\n    A getActualAnnotation();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.ANNOTATION_TYPE)\n    spoon.reflect.reference.CtTypeReference\u003cA\u003e getAnnotationType();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.code.CtExpression\u003e T getValue(java.lang.String key);\n\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.code.CtExpression\u003e T getWrappedValue(java.lang.String key);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    java.util.Map\u003cjava.lang.String, spoon.reflect.code.CtExpression\u003e getValues();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.ANNOTATION_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtAnnotation\u003cA\u003e\u003e T setAnnotationType(spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.annotation.Annotation\u003e type);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.declaration.CtAnnotation\u003cA\u003e\u003e T setElementValues(java.util.Map\u003cjava.lang.String, java.lang.Object\u003e values);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.declaration.CtAnnotation\u003cA\u003e\u003e T setValues(java.util.Map\u003cjava.lang.String, spoon.reflect.code.CtExpression\u003e values);\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtElement getAnnotatedElement();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtAnnotatedElementType getAnnotatedElementType();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.declaration.CtAnnotation\u003cA\u003e\u003e T addValue(java.lang.String elementName, java.lang.Object value);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.declaration.CtAnnotation\u003cA\u003e\u003e T addValue(java.lang.String elementName, spoon.reflect.code.CtLiteral\u003c?\u003e value);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.declaration.CtAnnotation\u003cA\u003e\u003e T addValue(java.lang.String elementName, spoon.reflect.code.CtNewArray\u003c? extends spoon.reflect.code.CtExpression\u003e value);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.declaration.CtAnnotation\u003cA\u003e\u003e T addValue(java.lang.String elementName, spoon.reflect.code.CtFieldAccess\u003c?\u003e value);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cT extends spoon.reflect.declaration.CtAnnotation\u003cA\u003e\u003e T addValue(java.lang.String elementName, spoon.reflect.declaration.CtAnnotation\u003c?\u003e value);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtAnnotation\u003cA\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.code.CtExpression\u003cA\u003e\u003e C setTypeCasts(java.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e types);\n\n    static spoon.reflect.declaration.CtAnnotatedElementType getAnnotatedElementTypeForCtElement(spoon.reflect.declaration.CtElement element) {\n        if (element \u003d\u003d null) {\n            return null;\n        }\n        if (element instanceof spoon.reflect.declaration.CtMethod) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.METHOD;\n        }\n        if ((element instanceof spoon.reflect.declaration.CtAnnotation) || (element instanceof spoon.reflect.declaration.CtAnnotationType)) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.ANNOTATION_TYPE;\n        }\n        if (element instanceof spoon.reflect.declaration.CtType) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.TYPE;\n        }\n        if (element instanceof spoon.reflect.declaration.CtField) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.FIELD;\n        }\n        if (element instanceof spoon.reflect.declaration.CtConstructor) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.CONSTRUCTOR;\n        }\n        if (element instanceof spoon.reflect.declaration.CtParameter) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.PARAMETER;\n        }\n        if (element instanceof spoon.reflect.code.CtLocalVariable) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.LOCAL_VARIABLE;\n        }\n        if (element instanceof spoon.reflect.declaration.CtPackage) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.PACKAGE;\n        }\n        if (element instanceof spoon.reflect.reference.CtTypeParameterReference) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_PARAMETER;\n        }\n        if (element instanceof spoon.reflect.reference.CtTypeReference) {\n            return spoon.reflect.declaration.CtAnnotatedElementType.TYPE_USE;\n        }\n        return null;\n    }\n}]",
        "testContract[public interface CtArrayWrite\u003cT\u003e extends spoon.reflect.code.CtArrayAccess\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtArrayWrite\u003cT\u003e clone();\n}]",
        "testContract[public interface CtThrow extends spoon.reflect.code.CtCFlowBreak , spoon.template.TemplateParameter\u003cjava.lang.Void\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003c? extends java.lang.Throwable\u003e getThrownExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtThrow\u003e T setThrownExpression(spoon.reflect.code.CtExpression\u003c? extends java.lang.Throwable\u003e thrownExpression);\n\n    @java.lang.Override\n    spoon.reflect.code.CtThrow clone();\n}]",
        "testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    java.util.List\u003cspoon.reflect.code.CtJavaDocTag\u003e getTags();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E setTags(java.util.List\u003cspoon.reflect.code.CtJavaDocTag\u003e tags);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E addTag(spoon.reflect.code.CtJavaDocTag tag);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E addTag(int index, spoon.reflect.code.CtJavaDocTag tag);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E removeTag(int index);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.COMMENT_TAG)\n    \u003cE extends spoon.reflect.code.CtJavaDoc\u003e E removeTag(spoon.reflect.code.CtJavaDocTag tag);\n\n    @spoon.support.DerivedProperty\n    java.lang.String getShortDescription();\n\n    @spoon.support.DerivedProperty\n    java.lang.String getLongDescription();\n\n    @java.lang.Override\n    spoon.reflect.code.CtJavaDoc clone();\n}]",
        "testContract[public interface CtReturn\u003cR\u003e extends spoon.reflect.code.CtCFlowBreak , spoon.template.TemplateParameter\u003cjava.lang.Void\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cR\u003e getReturnedExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtReturn\u003cR\u003e\u003e T setReturnedExpression(spoon.reflect.code.CtExpression\u003cR\u003e returnedExpression);\n\n    @java.lang.Override\n    spoon.reflect.code.CtReturn\u003cR\u003e clone();\n}]",
        "testContract[public interface CtTry extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtStatement , spoon.template.TemplateParameter\u003cjava.lang.Void\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CATCH)\n    java.util.List\u003cspoon.reflect.code.CtCatch\u003e getCatchers();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CATCH)\n    \u003cT extends spoon.reflect.code.CtTry\u003e T setCatchers(java.util.List\u003cspoon.reflect.code.CtCatch\u003e catchers);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CATCH)\n    \u003cT extends spoon.reflect.code.CtTry\u003e T addCatcher(spoon.reflect.code.CtCatch catcher);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CATCH)\n    boolean removeCatcher(spoon.reflect.code.CtCatch catcher);\n\n    @java.lang.Override\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.BODY)\n    spoon.reflect.code.CtBlock\u003c?\u003e getBody();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.FINALIZER)\n    spoon.reflect.code.CtBlock\u003c?\u003e getFinalizer();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.FINALIZER)\n    \u003cT extends spoon.reflect.code.CtTry\u003e T setFinalizer(spoon.reflect.code.CtBlock\u003c?\u003e finalizer);\n\n    @java.lang.Override\n    spoon.reflect.code.CtTry clone();\n}]",
        "testContract[public interface CtVariableRead\u003cT\u003e extends spoon.reflect.code.CtVariableAccess\u003cT\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtVariableRead\u003cT\u003e clone();\n}]",
        "testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {\n    java.lang.String PACKAGE_SEPARATOR \u003d \".\";\n\n    char PACKAGE_SEPARATOR_CHAR \u003d \u0027.\u0027;\n\n    java.lang.String TOP_LEVEL_PACKAGE_NAME \u003d \"unnamed package\";\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtModule getDeclaringModule();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtPackage getDeclaringPackage();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getPackage(java.lang.String name);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e getPackages();\n\n    java.lang.String getQualifiedName();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtPackageReference getReference();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtType\u003c?\u003e\u003e T getType(java.lang.String simpleName);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e getTypes();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addType(spoon.reflect.declaration.CtType\u003c?\u003e type);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    void removeType(spoon.reflect.declaration.CtType\u003c?\u003e type);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setPackages(java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e pack);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addPackage(spoon.reflect.declaration.CtPackage pack);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    boolean removePackage(spoon.reflect.declaration.CtPackage pack);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setTypes(java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e types);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtPackage clone();\n\n    boolean isUnnamedPackage();\n}]",
        "testContract[public interface CtSuperAccess\u003cT\u003e extends spoon.reflect.code.CtTargetedExpression\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e , spoon.reflect.code.CtVariableRead\u003cT\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtSuperAccess\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtTypeReference\u003cT\u003e getType();\n}]",
        "testContract[public interface CtBinaryOperator\u003cT\u003e extends spoon.reflect.code.CtExpression\u003cT\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.LEFT_OPERAND)\n    spoon.reflect.code.CtExpression\u003c?\u003e getLeftHandOperand();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.RIGHT_OPERAND)\n    spoon.reflect.code.CtExpression\u003c?\u003e getRightHandOperand();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.LEFT_OPERAND)\n    \u003cC extends spoon.reflect.code.CtBinaryOperator\u003cT\u003e\u003e C setLeftHandOperand(spoon.reflect.code.CtExpression\u003c?\u003e expression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.RIGHT_OPERAND)\n    \u003cC extends spoon.reflect.code.CtBinaryOperator\u003cT\u003e\u003e C setRightHandOperand(spoon.reflect.code.CtExpression\u003c?\u003e expression);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPERATOR_KIND)\n    \u003cC extends spoon.reflect.code.CtBinaryOperator\u003cT\u003e\u003e C setKind(spoon.reflect.code.BinaryOperatorKind kind);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPERATOR_KIND)\n    spoon.reflect.code.BinaryOperatorKind getKind();\n\n    @java.lang.Override\n    spoon.reflect.code.CtBinaryOperator\u003cT\u003e clone();\n}]",
        "testContract[public interface CtLiteral\u003cT\u003e extends spoon.reflect.code.CtExpression\u003cT\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    T getValue();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.VALUE)\n    \u003cC extends spoon.reflect.code.CtLiteral\u003cT\u003e\u003e C setValue(T value);\n\n    @java.lang.Override\n    spoon.reflect.code.CtLiteral\u003cT\u003e clone();\n}]",
        "testContract[public interface CtStatementList extends java.lang.Iterable\u003cspoon.reflect.code.CtStatement\u003e , spoon.reflect.code.CtCodeElement {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    java.util.List\u003cspoon.reflect.code.CtStatement\u003e getStatements();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T setStatements(java.util.List\u003cspoon.reflect.code.CtStatement\u003e statements);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T addStatement(spoon.reflect.code.CtStatement statement);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T addStatement(int index, spoon.reflect.code.CtStatement statement);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T insertBegin(spoon.reflect.code.CtStatement statement);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T insertBegin(spoon.reflect.code.CtStatementList statements);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T insertEnd(spoon.reflect.code.CtStatement statement);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T insertEnd(spoon.reflect.code.CtStatementList statements);\n\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T insertBefore(spoon.reflect.visitor.Filter\u003c? extends spoon.reflect.code.CtStatement\u003e insertionPoints, spoon.reflect.code.CtStatement statement);\n\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T insertBefore(spoon.reflect.visitor.Filter\u003c? extends spoon.reflect.code.CtStatement\u003e insertionPoints, spoon.reflect.code.CtStatementList statements);\n\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T insertAfter(spoon.reflect.visitor.Filter\u003c? extends spoon.reflect.code.CtStatement\u003e insertionPoints, spoon.reflect.code.CtStatement statement);\n\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.code.CtStatementList\u003e T insertAfter(spoon.reflect.visitor.Filter\u003c? extends spoon.reflect.code.CtStatement\u003e insertionPoints, spoon.reflect.code.CtStatementList statements);\n\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.code.CtStatement\u003e T getStatement(int i);\n\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.code.CtStatement\u003e T getLastStatement();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.STATEMENT)\n    void removeStatement(spoon.reflect.code.CtStatement statement);\n\n    @java.lang.Override\n    spoon.reflect.code.CtStatementList clone();\n}]",
        "testContract[public interface CtLambda\u003cT\u003e extends spoon.reflect.code.CtExpression\u003cT\u003e , spoon.reflect.declaration.CtExecutable\u003cT\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cT\u003e getExpression();\n\n    @spoon.support.DerivedProperty\n    \u003cR\u003e spoon.reflect.declaration.CtMethod\u003cR\u003e getOverriddenMethod();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cC extends spoon.reflect.code.CtLambda\u003cT\u003e\u003e C setExpression(spoon.reflect.code.CtExpression\u003cT\u003e expression);\n\n    @java.lang.Override\n    spoon.reflect.code.CtLambda\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cT1 extends spoon.reflect.declaration.CtExecutable\u003cT\u003e\u003e T1 setThrownTypes(java.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e thrownTypes);\n}]",
        "testContract[public interface CtDo extends spoon.reflect.code.CtLoop {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e getLoopingExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtDo\u003e T setLoopingExpression(spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e expression);\n\n    @java.lang.Override\n    spoon.reflect.code.CtDo clone();\n}]",
        "testContract[public interface CtField\u003cT\u003e extends spoon.reflect.code.CtRHSReceiver\u003cT\u003e , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember , spoon.reflect.declaration.CtVariable\u003cT\u003e {\n    java.lang.String FIELD_SEPARATOR \u003d \"#\";\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtFieldReference\u003cT\u003e getReference();\n\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    spoon.reflect.code.CtExpression\u003cT\u003e getAssignment();\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtField\u003cT\u003e clone();\n}]",
        "testContract[public interface CtFieldRead\u003cT\u003e extends spoon.reflect.code.CtFieldAccess\u003cT\u003e , spoon.reflect.code.CtVariableRead\u003cT\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtFieldRead\u003cT\u003e clone();\n}]",
        "testContract[public interface CtWhile extends spoon.reflect.code.CtLoop {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e getLoopingExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtWhile\u003e T setLoopingExpression(spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e expression);\n\n    @java.lang.Override\n    spoon.reflect.code.CtWhile clone();\n}]",
        "testContract[public interface CtTypeAccess\u003cA\u003e extends spoon.reflect.code.CtExpression\u003cjava.lang.Void\u003e {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.ACCESSED_TYPE)\n    spoon.reflect.reference.CtTypeReference\u003cA\u003e getAccessedType();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.ACCESSED_TYPE)\n    \u003cC extends spoon.reflect.code.CtTypeAccess\u003cA\u003e\u003e C setAccessedType(spoon.reflect.reference.CtTypeReference\u003cA\u003e accessedType);\n\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtTypeReference\u003cjava.lang.Void\u003e getType();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtTypedElement\u003e C setType(spoon.reflect.reference.CtTypeReference\u003cjava.lang.Void\u003e type);\n\n    @java.lang.Override\n    spoon.reflect.code.CtTypeAccess\u003cA\u003e clone();\n}]",
        "testContract[public interface CtImport extends spoon.reflect.declaration.CtElement {\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtImportKind getImportKind();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.IMPORT_REFERENCE)\n    spoon.reflect.reference.CtReference getReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.IMPORT_REFERENCE)\n    \u003cT extends spoon.reflect.declaration.CtImport\u003e T setReference(spoon.reflect.reference.CtReference reference);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtImport clone();\n}]",
        "testContract[public interface CtPackageExport extends spoon.reflect.declaration.CtModuleDirective {\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackageExport\u003e T setOpenedPackage(boolean openedPackage);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    boolean isOpenedPackage();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PACKAGE_REF)\n    spoon.reflect.reference.CtPackageReference getPackageReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PACKAGE_REF)\n    \u003cT extends spoon.reflect.declaration.CtPackageExport\u003e T setPackageReference(spoon.reflect.reference.CtPackageReference packageReference);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_REF)\n    java.util.List\u003cspoon.reflect.reference.CtModuleReference\u003e getTargetExport();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_REF)\n    \u003cT extends spoon.reflect.declaration.CtPackageExport\u003e T setTargetExport(java.util.List\u003cspoon.reflect.reference.CtModuleReference\u003e targetExport);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_REF)\n    \u003cT extends spoon.reflect.declaration.CtPackageExport\u003e T addTargetExport(spoon.reflect.reference.CtModuleReference targetExport);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtPackageExport clone();\n}]",
        "testContract[public interface CtMethod\u003cT\u003e extends spoon.reflect.declaration.CtExecutable\u003cT\u003e , spoon.reflect.declaration.CtFormalTypeDeclarer , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember {\n    boolean isOverriding(spoon.reflect.declaration.CtMethod\u003c?\u003e superMethod);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.IS_DEFAULT)\n    boolean isDefaultMethod();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.IS_DEFAULT)\n    \u003cC extends spoon.reflect.declaration.CtMethod\u003cT\u003e\u003e C setDefaultMethod(boolean defaultMethod);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtMethod\u003cT\u003e clone();\n\n    java.util.Collection\u003cspoon.reflect.declaration.CtMethod\u003c?\u003e\u003e getTopDefinitions();\n\n    spoon.reflect.declaration.CtMethod\u003c?\u003e copyMethod();\n}]",
        "testContract[public interface CtUsedService extends spoon.reflect.declaration.CtModuleDirective {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    spoon.reflect.reference.CtTypeReference getServiceType();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtUsedService\u003e T setServiceType(spoon.reflect.reference.CtTypeReference providingType);\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtUsedService clone();\n}]",
        "testContract[public interface CtThisAccess\u003cT\u003e extends spoon.reflect.code.CtTargetedExpression\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n    @java.lang.Override\n    spoon.reflect.code.CtThisAccess\u003cT\u003e clone();\n}]",
        "testContract[public interface CtConstructor\u003cT\u003e extends spoon.reflect.declaration.CtExecutable\u003cT\u003e , spoon.reflect.declaration.CtFormalTypeDeclarer , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.NAME)\n    java.lang.String getSimpleName();\n\n    @java.lang.Override\n    spoon.reflect.declaration.CtConstructor\u003cT\u003e clone();\n\n    @java.lang.Override\n    @spoon.support.UnsettableProperty\n    \u003cC extends spoon.reflect.declaration.CtTypedElement\u003e C setType(spoon.reflect.reference.CtTypeReference\u003cT\u003e type);\n}]",
        "testContract[public interface CtFor extends spoon.reflect.code.CtLoop {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e getExpression();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPRESSION)\n    \u003cT extends spoon.reflect.code.CtFor\u003e T setExpression(spoon.reflect.code.CtExpression\u003cjava.lang.Boolean\u003e expression);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.FOR_INIT)\n    java.util.List\u003cspoon.reflect.code.CtStatement\u003e getForInit();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.FOR_INIT)\n    \u003cT extends spoon.reflect.code.CtFor\u003e T addForInit(spoon.reflect.code.CtStatement statement);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.FOR_INIT)\n    \u003cT extends spoon.reflect.code.CtFor\u003e T setForInit(java.util.List\u003cspoon.reflect.code.CtStatement\u003e forInit);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.FOR_INIT)\n    boolean removeForInit(spoon.reflect.code.CtStatement statement);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.FOR_UPDATE)\n    java.util.List\u003cspoon.reflect.code.CtStatement\u003e getForUpdate();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.FOR_UPDATE)\n    \u003cT extends spoon.reflect.code.CtFor\u003e T addForUpdate(spoon.reflect.code.CtStatement statement);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.FOR_UPDATE)\n    \u003cT extends spoon.reflect.code.CtFor\u003e T setForUpdate(java.util.List\u003cspoon.reflect.code.CtStatement\u003e forUpdate);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.FOR_UPDATE)\n    boolean removeForUpdate(spoon.reflect.code.CtStatement statement);\n\n    @java.lang.Override\n    spoon.reflect.code.CtFor clone();\n}]",
        "testContract[public interface CtNewClass\u003cT\u003e extends spoon.reflect.code.CtConstructorCall\u003cT\u003e {\n    @java.lang.Override\n    @spoon.support.DerivedProperty\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    java.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e getActualTypeArguments();\n\n    @java.lang.Override\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    \u003cT extends spoon.reflect.reference.CtActualTypeContainer\u003e T setActualTypeArguments(java.util.List\u003c? extends spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e actualTypeArguments);\n\n    @java.lang.Override\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TYPE_ARGUMENT)\n    \u003cT extends spoon.reflect.reference.CtActualTypeContainer\u003e T addActualTypeArgument(spoon.reflect.reference.CtTypeReference\u003c?\u003e actualTypeArgument);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.NESTED_TYPE)\n    spoon.reflect.declaration.CtClass\u003c?\u003e getAnonymousClass();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.NESTED_TYPE)\n    \u003cN extends spoon.reflect.code.CtNewClass\u003e N setAnonymousClass(spoon.reflect.declaration.CtClass\u003c?\u003e anonymousClass);\n\n    @java.lang.Override\n    spoon.reflect.code.CtNewClass\u003cT\u003e clone();\n}]",
        "testContract[public interface CtTryWithResource extends spoon.reflect.code.CtTry {\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.TRY_RESOURCE)\n    java.util.List\u003cspoon.reflect.code.CtLocalVariable\u003c?\u003e\u003e getResources();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TRY_RESOURCE)\n    \u003cT extends spoon.reflect.code.CtTryWithResource\u003e T setResources(java.util.List\u003cspoon.reflect.code.CtLocalVariable\u003c?\u003e\u003e resources);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TRY_RESOURCE)\n    \u003cT extends spoon.reflect.code.CtTryWithResource\u003e T addResource(spoon.reflect.code.CtLocalVariable\u003c?\u003e resource);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.TRY_RESOURCE)\n    boolean removeResource(spoon.reflect.code.CtLocalVariable\u003c?\u003e resource);\n\n    @java.lang.Override\n    spoon.reflect.code.CtTryWithResource clone();\n}]"
      ],
      "failures": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        },
        {
          "failureName": "spoon.support.SpoonClassNotFoundException",
          "failureDetail": "cannot create shadow class: spoon.reflect.factory.Factory",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 67
    }
  ]
}