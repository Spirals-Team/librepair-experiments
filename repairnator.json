{
  "totalNumberSkippingTests": 6,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "AsyncHttpClient/async-http-client",
  "bugCommit": "https://github.com/AsyncHttpClient/async-http-client/compare/90ee39aca58c...7ebe9c9d7405",
  "failingModule": "/root/workspace/AsyncHttpClient/async-http-client/314687249/client",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 17,
  "error-types": [
    "java.util.concurrent.ExecutionException",
    "org.apache.catalina.LifecycleException",
    "java.lang.AssertionError",
    "skipped"
  ],
  "totalNumberRunningTests": 575,
  "failing-test-cases": [
    {
      "className": "org.asynchttpclient.proxy.HttpsProxyTest",
      "failingMethods": [
        "org.asynchttpclient.proxy.HttpsProxyTest#testRequestProxy",
        "org.asynchttpclient.proxy.HttpsProxyTest#testConfigProxy",
        "org.asynchttpclient.proxy.HttpsProxyTest#testPooledConnectionsWithProxy"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [200] but found [500]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [200] but found [500]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [200] but found [500]",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "org.asynchttpclient.request.body.multipart.MultipartUploadTest",
      "failingMethods": [
        "org.asynchttpclient.request.body.multipart.MultipartUploadTest#sendEmptyFile",
        "org.asynchttpclient.request.body.multipart.MultipartUploadTest#sendEmptyFileZeroCopy"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [200] but found [405]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [200] but found [405]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.asynchttpclient.BasicHttpsTest",
      "failingMethods": [
        "org.asynchttpclient.BasicHttpsTest#testNormalEventsFired"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Got [ConnectionPool, HostnameResolution, HostnameResolutionSuccess, ConnectionOpen, ConnectionFailure, ConnectionOpen, ConnectionSuccess, TlsHandshake, TlsHandshakeSuccess, RequestSend, HeadersWritten, StatusReceived, HeadersReceived, ConnectionOffer, Completed]: lists don\u0027t have the same size expected [13] but found [15]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.asynchttpclient.ws.ProxyTunnellingTest",
      "failingMethods": [
        "org.asynchttpclient.ws.ProxyTunnellingTest#echoWSSText",
        "org.asynchttpclient.ws.ProxyTunnellingTest#echoWSText"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "java.lang.IllegalStateException: Invalid Status Code 500",
          "isError": false
        },
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "java.lang.IllegalStateException: Invalid Status Code 500",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.asynchttpclient.webdav.WebDavBasicTest",
      "failingMethods": [
        "org.asynchttpclient.webdav.WebDavBasicTest#propFindCompletionHandlerWebDavTest",
        "org.asynchttpclient.webdav.WebDavBasicTest#basicPropFindWebDavTest",
        "org.asynchttpclient.webdav.WebDavBasicTest#clean",
        "org.asynchttpclient.webdav.WebDavBasicTest#setUpGlobal",
        "org.asynchttpclient.webdav.WebDavBasicTest#mkcolWebDavTest2",
        "org.asynchttpclient.webdav.WebDavBasicTest#mkcolWebDavTest1",
        "org.asynchttpclient.webdav.WebDavBasicTest#propFindWebDavTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.apache.catalina.LifecycleException",
          "failureDetail": "Protocol handler initialization failed: java.net.SocketException: Protocol family unavailable",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "java.net.ConnectException: Connection refused: localhost/127.0.0.1:80",
          "isError": false
        },
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "java.net.ConnectException: Connection refused: localhost/127.0.0.1:80",
          "isError": false
        },
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "java.net.ConnectException: Connection refused: localhost/127.0.0.1:80",
          "isError": false
        },
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "java.net.ConnectException: Connection refused: localhost/127.0.0.1:80",
          "isError": false
        },
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "java.net.ConnectException: Connection refused: localhost/127.0.0.1:80",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 11,
      "nbErrors": 0
    },
    {
      "className": "org.asynchttpclient.BasicHttpTest",
      "failingMethods": [
        "org.asynchttpclient.BasicHttpTest#newConnectionEventsAreFired"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Got [ConnectionPool, HostnameResolution, HostnameResolutionSuccess, ConnectionOpen, ConnectionFailure, ConnectionOpen, ConnectionSuccess, RequestSend, HeadersWritten, StatusReceived, HeadersReceived, ConnectionOffer, Completed]: lists don\u0027t have the same size expected [11] but found [13]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.asynchttpclient.BasicHttpProxyToHttpsTest",
      "failingMethods": [
        "org.asynchttpclient.BasicHttpProxyToHttpsTest#nonPreemptyProxyAuthWithHttpsTarget"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [200] but found [500]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.asynchttpclient.request.body.FastUnauthorizedUploadTest",
      "failingMethods": [
        "org.asynchttpclient.request.body.FastUnauthorizedUploadTest#testUnauthorizedWhileUploading"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.util.concurrent.ExecutionException",
          "failureDetail": "java.io.IOException: Broken pipe",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}