{
  "bugType": "only_fail",
  "hostname": "spirals-repairnator",
  "repo": "INRIA/spoon",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError",
      "org.junit.ComparisonFailure"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 5,
      "ComputeClasspath": 10,
      "ComputeTestDir": 0,
      "BuildProject": 104,
      "InitRepoToPush": 9,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "AstorJMut": 33,
      "CloneRepository": 15,
      "CheckoutPatchedBuild": 0,
      "NopolAllTests": 58,
      "NPEFix": 0,
      "TestProject": 1063,
      "GatherTestInformation": 1,
      "CommitPatch": 9
    },
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/857ae940875bcfe5e2fc47b03255f8dae534504d",
    "NbFailingTests": 9,
    "NbErroringTests": 0,
    "NbSkippingTests": 5,
    "NbRunningTests": 1536,
    "ReproductionDate": "Aug 29, 2018 10:02:13 PM",
    "BuggyBuildId": 422224671,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/422224671",
    "BuggyBuildDate": "Aug 29, 2018 10:00:04 PM",
    "BugCommit": "857ae940875bcfe5e2fc47b03255f8dae534504d",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 33,
    "NbFileApp": 619,
    "NbFileTests": 694,
    "NbCPU": 4,
    "FreeMemory": 443029272,
    "TotalMemory": 1484783616,
    "AngelicValuesByTest": {
      "spoon/test/architecture/SpoonArchitectureEnforcerTest:spoon/test/main/MainTest:spoon/test/methodreference/MethodReferenceTest:spoon/processing/CtGenerationTest:spoon/support/visitor/java/JavaReflectionTreeBuilderTest:spoon/test/generics/GenericsTest:": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 138697136,
      "ComputeClasspath": 113685272,
      "ComputeTestDir": 106828616,
      "BuildProject": 126756792,
      "InitRepoToPush": 119961040,
      "ComputeSourceDir": 438968600,
      "ComputeModules": 438968600,
      "AstorJMut": 529072592,
      "CloneRepository": 229862560,
      "CheckoutPatchedBuild": 443029272,
      "NopolAllTests": 785009576,
      "NPEFix": 785009576,
      "TestProject": 99634160,
      "GatherTestInformation": 68413576,
      "CommitPatch": 443029272
    },
    "NbSucceedingTests": 1527
  },
  "failing-test-cases": [
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [
        "testSrcMainJava"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "37 public methods should be documented with proper API documentation: \nspoon.processing.AbstractAnnotationProcessor#process(spoon.reflect.declaration.CtElement)\nspoon.reflect.visitor.chain.CtQueryImpl#select(spoon.reflect.visitor.Filter)\nspoon.reflect.visitor.CtBiScannerDefault#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)\nspoon.reflect.visitor.CtBiScannerDefault#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)\nspoon.reflect.visitor.CtBiScannerDefault#visitCtAssignment(spoon.reflect.code.CtAssignment)\nspoon.reflect.visitor.CtBiScannerDefault#visitCtEnum(spoon.reflect.declaration.CtEnum)\nspoon.reflect.visitor.CtBiScannerDefault#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)\nspoon.reflect.visitor.CtBiScannerDefault#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)\nspoon.reflect.visitor.CtInheritanceScanner#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)\nspoon.reflect.visitor.CtScanner#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)\nspoon.reflect.visitor.CtScanner#visitCtAssignment(spoon.reflect.code.CtAssignment)\nspoon.reflect.visitor.CtScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)\nspoon.reflect.visitor.CtScanner#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)\nspoon.reflect.visitor.CtScanner#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)\nspoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)\nspoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtEnum(spoon.reflect.declaration.CtEnum)\nspoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)\nspoon.reflect.visitor.DefaultJavaPrettyPrinter#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)\nspoon.support.compiler.jdt.ParentExiter#visitCtAssignment(spoon.reflect.code.CtAssignment)\nspoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner#visitCtEnum(spoon.reflect.declaration.CtEnum)\nspoon.support.reflect.eval.VisitorPartialEvaluator#evaluate(spoon.reflect.declaration.CtElement)\nspoon.support.visitor.clone.CloneVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)\nspoon.support.visitor.clone.CloneVisitor#visitCtAnnotationType(spoon.reflect.declaration.CtAnnotationType)\nspoon.support.visitor.clone.CloneVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)\nspoon.support.visitor.clone.CloneVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)\nspoon.support.visitor.clone.CloneVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)\nspoon.support.visitor.clone.CloneVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)\nspoon.support.visitor.equals.EqualsChecker#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)\nspoon.support.visitor.java.JavaReflectionTreeBuilder#visitAnnotationClass(java.lang.Class)\nspoon.support.visitor.java.JavaReflectionTreeBuilder#visitTypeParameter(java.lang.reflect.TypeVariable)\nspoon.support.visitor.java.JavaReflectionTreeBuilder#visitTypeParameterReference(spoon.reflect.path.CtRole,java.lang.reflect.TypeVariable)\nspoon.support.visitor.java.JavaReflectionVisitorImpl#visitAnnotationClass(java.lang.Class)\nspoon.support.visitor.replace.ReplacementVisitor#visitCtAnnotation(spoon.reflect.declaration.CtAnnotation)\nspoon.support.visitor.replace.ReplacementVisitor#visitCtAssignment(spoon.reflect.code.CtAssignment)\nspoon.support.visitor.replace.ReplacementVisitor#visitCtEnum(spoon.reflect.declaration.CtEnum)\nspoon.support.visitor.replace.ReplacementVisitor#visitCtExecutableReferenceExpression(spoon.reflect.code.CtExecutableReferenceExpression)\nspoon.support.visitor.replace.ReplacementVisitor#visitCtOperatorAssignment(spoon.reflect.code.CtOperatorAssignment)",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [
        "testMain_checkShadow"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "cannot find decl for of(java.lang.Enum)",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.methodreference.MethodReferenceTest",
      "failingMethods": [
        "testGetGenericExecutableReference"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected: spoon.support.reflect.reference.CtTypeParameterReferenceImpl\u003cT\u003e but was: spoon.support.reflect.reference.CtTypeParameterReferenceImpl\u003cT\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [
        "testGenerateRoleHandler"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "ModelRoleHandlers different expected:\u003c...\n    static class Ct[TargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtTargetedExpression, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtTargetedExpression_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLabelledFlowBreak, java.lang.String\u003e {\n        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTargetLabel(castValue(value));\n        }\n    }\n\n    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtConditional_THEN_RoleHandler() {\n            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThenExpression(castValue(value));\n        }\n    }\n\n    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtIf, spoon.reflect.code.CtStatement\u003e {\n        private CtIf_THEN_RoleHandler() {\n            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThenStatement(castValue(value));\n        }\n    }\n\n    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e {\n        private CtExecutable_THROWN_RoleHandler() {\n            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThrownTypes(castValue(value));\n        }\n    }\n\n    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable\u003c? extends java.lang.Object\u003e\u003e {\n        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getResources())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setResources(castValue(value));\n        }\n    }\n\n    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtArrayTypeReference_TYPE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setComponentType(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtExecutableReference_TYPE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypedElement_TYPE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtVariableReference_TYPE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setActualTypeArguments(castValue(value));\n        }\n    }\n\n    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember\u003e {\n        private CtType_TYPE_MEMBER_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTypeMembers(castValue(value));\n        }\n    }\n\n    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter\u003e {\n        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFormalCtTypeParameters(castValue(value));\n        }\n    }\n\n    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler\u003cspoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression\u003e {\n        private CtAnnotation_VALUE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValues())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValues(castValue(value));\n        }\n    }\n\n    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue\u003c? extends java.lang.Object\u003e\u003e {\n        private CtEnum_VALUE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setEnumValues(castValue(value));\n        }\n    }\n\n    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLiteral, java.lang.Object\u003e {\n        private CtLiteral_VALUE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValue())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValue(castValue(value));\n        }\n    }\n\n    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference\u003c?\u003e\u003e {\n        private CtVariableAccess_VARIABLE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setVariable(castValue(value));\n        }\n    }\n\n    private ModelRoleHandlers() {\n    }\n\n    static final spoon.reflect.meta.RoleHandler[] roleHandlers \u003d new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_IS_UPPER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression]_TARGET_RoleHandler(...\u003e but was:\u003c...\n    static class Ct[AnnotationFieldAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtAnnotationFieldAccess, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtAnnotationFieldAccess_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtAnnotationFieldAccess.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtArrayRead_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtArrayRead, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtArrayRead_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtArrayRead.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtArrayWrite_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtArrayWrite, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtArrayWrite_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtArrayWrite.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtConstructorCall_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConstructorCall, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtConstructorCall_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtConstructorCall.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtFieldAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtFieldAccess, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtFieldAccess_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtFieldAccess.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtInvocation_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtInvocation, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtInvocation_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtInvocation.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtSuperAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtSuperAccess, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtSuperAccess_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtSuperAccess.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtTargetedExpression_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtTargetedExpression, java.lang.Object\u003e {\n        private CtTargetedExpression_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtTargetedExpression.class, java.lang.Object.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtThisAccess_TARGET_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtThisAccess, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtThisAccess_TARGET_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET, spoon.reflect.code.CtThisAccess.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTarget())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTarget(castValue(value));\n        }\n    }\n\n    static class CtLabelledFlowBreak_TARGET_LABEL_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLabelledFlowBreak, java.lang.String\u003e {\n        private CtLabelledFlowBreak_TARGET_LABEL_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TARGET_LABEL, spoon.reflect.code.CtLabelledFlowBreak.class, java.lang.String.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTargetLabel())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTargetLabel(castValue(value));\n        }\n    }\n\n    static class CtConditional_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtConditional, spoon.reflect.code.CtExpression\u003c?\u003e\u003e {\n        private CtConditional_THEN_RoleHandler() {\n            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtConditional.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThenExpression())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThenExpression(castValue(value));\n        }\n    }\n\n    static class CtIf_THEN_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtIf, spoon.reflect.code.CtStatement\u003e {\n        private CtIf_THEN_RoleHandler() {\n            super(spoon.reflect.path.CtRole.THEN, spoon.reflect.code.CtIf.class, spoon.reflect.code.CtStatement.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThenStatement())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThenStatement(castValue(value));\n        }\n    }\n\n    static class CtExecutable_THROWN_RoleHandler extends spoon.reflect.meta.impl.SetHandler\u003cspoon.reflect.declaration.CtExecutable, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e {\n        private CtExecutable_THROWN_RoleHandler() {\n            super(spoon.reflect.path.CtRole.THROWN, spoon.reflect.declaration.CtExecutable.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getThrownTypes())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setThrownTypes(castValue(value));\n        }\n    }\n\n    static class CtTryWithResource_TRY_RESOURCE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.code.CtTryWithResource, spoon.reflect.code.CtLocalVariable\u003c? extends java.lang.Object\u003e\u003e {\n        private CtTryWithResource_TRY_RESOURCE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TRY_RESOURCE, spoon.reflect.code.CtTryWithResource.class, spoon.reflect.code.CtLocalVariable.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getResources())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setResources(castValue(value));\n        }\n    }\n\n    static class CtArrayTypeReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtArrayTypeReference, spoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Object\u003e\u003e {\n        private CtArrayTypeReference_TYPE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtArrayTypeReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getComponentType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setComponentType(castValue(value));\n        }\n    }\n\n    static class CtExecutableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtExecutableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtExecutableReference_TYPE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtExecutableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtTypedElement_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.declaration.CtTypedElement, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtTypedElement_TYPE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.declaration.CtTypedElement.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtVariableReference_TYPE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.reference.CtVariableReference, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtVariableReference_TYPE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE, spoon.reflect.reference.CtVariableReference.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getType())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setType(castValue(value));\n        }\n    }\n\n    static class CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.reference.CtActualTypeContainer, spoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e {\n        private CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE_ARGUMENT, spoon.reflect.reference.CtActualTypeContainer.class, spoon.reflect.reference.CtTypeReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getActualTypeArguments())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setActualTypeArguments(castValue(value));\n        }\n    }\n\n    static class CtType_TYPE_MEMBER_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtType, spoon.reflect.declaration.CtTypeMember\u003e {\n        private CtType_TYPE_MEMBER_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE_MEMBER, spoon.reflect.declaration.CtType.class, spoon.reflect.declaration.CtTypeMember.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getTypeMembers())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setTypeMembers(castValue(value));\n        }\n    }\n\n    static class CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtFormalTypeDeclarer, spoon.reflect.declaration.CtTypeParameter\u003e {\n        private CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler() {\n            super(spoon.reflect.path.CtRole.TYPE_PARAMETER, spoon.reflect.declaration.CtFormalTypeDeclarer.class, spoon.reflect.declaration.CtTypeParameter.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getFormalCtTypeParameters())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setFormalCtTypeParameters(castValue(value));\n        }\n    }\n\n    static class CtAnnotation_VALUE_RoleHandler extends spoon.reflect.meta.impl.MapHandler\u003cspoon.reflect.declaration.CtAnnotation, spoon.reflect.code.CtExpression\u003e {\n        private CtAnnotation_VALUE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtAnnotation.class, spoon.reflect.code.CtExpression.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValues())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValues(castValue(value));\n        }\n    }\n\n    static class CtEnum_VALUE_RoleHandler extends spoon.reflect.meta.impl.ListHandler\u003cspoon.reflect.declaration.CtEnum, spoon.reflect.declaration.CtEnumValue\u003c? extends java.lang.Object\u003e\u003e {\n        private CtEnum_VALUE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.declaration.CtEnum.class, spoon.reflect.declaration.CtEnumValue.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getEnumValues())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setEnumValues(castValue(value));\n        }\n    }\n\n    static class CtLiteral_VALUE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtLiteral, java.lang.Object\u003e {\n        private CtLiteral_VALUE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VALUE, spoon.reflect.code.CtLiteral.class, java.lang.Object.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getValue())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setValue(castValue(value));\n        }\n    }\n\n    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference\u003c?\u003e\u003e {\n        private CtVariableAccess_VARIABLE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setVariable(castValue(value));\n        }\n    }\n\n    private ModelRoleHandlers() {\n    }\n\n    static final spoon.reflect.meta.RoleHandler[] roleHandlers \u003d new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLocalVariable_IS_INFERRED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_IS_UPPER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationFieldAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayRead_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayWrite_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConstructorCall_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtInvocation_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSuperAccess_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThisAccess]_TARGET_RoleHandler(...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [
        "testShadowModelEqualsNormalModel",
        "testSuperOfActualTypeArgumentsOfReturnTypeOfMethod"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Found 1729 problems:\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtConditional\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtConditional\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtConditional\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtConditional\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtConditional\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtConditional\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtProvidedService\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtProvidedService\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtProvidedService\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtProvidedService\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtProvidedService\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtProvidedService\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d14]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtParameter\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtParameter\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBodyHolder\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtWhile\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtWhile\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d23]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d22]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d28]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d28]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d23]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d23]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d29]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d29]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d22]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d22]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d8]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLabelledFlowBreak\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d0]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #interface[name\u003dCtAssignment]#typeArgument[index\u003d1]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d15]#type#typeArgument[index\u003d0]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d8]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d1]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d8]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, A]\n\nDifference on path: #typeMember[index\u003d3]#type#typeArgument[index\u003d0]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d2]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d2]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d9]#type#typeArgument[index\u003d1]#boundingType\nShadow: \nNormal: T\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAssignment\u003cT, A\u003e\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtRHSReceiver\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, A]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAssignment\u003cT, A\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBinaryOperator\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBinaryOperator\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBinaryOperator\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBinaryOperator\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBinaryOperator\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBinaryOperator\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nMissing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic \u003cE extends spoon.reflect.declaration.CtElement\u003e E setParent(E parent) {\n    this.parent \u003d parent;\n    return ((E) (this));\n}\n\nUnexpected shadow typeMember: setParent(java.lang.Object)\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d28]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d28]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d45]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d45]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d45]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d45]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d40]#type#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d40]#type#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d40]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d40]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d26]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d26]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d37]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d37]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d23]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d23]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d3]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d41]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d41]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d41]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d41]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d11]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d11]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d11]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d1]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d25]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d25]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d32]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d32]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d44]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d44]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d44]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d44]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nMissing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)\nDifference on path: #typeMember\nShadow: null\nNormal: /**\n * Manually sets the parent element of the current element.\n *\n * @param parent\n *   parent reference.\n */\n\u003cE extends spoon.reflect.declaration.CtElement\u003e E setParent(E parent);\n\nUnexpected shadow typeMember: setParent(java.lang.Object)\nDiff on path: #typeMember[index\u003d9]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d9]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d9]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d26]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d26]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d23]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d23]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d39]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d39]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d39]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d39]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d34]#type#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d34]#type#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d34]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d34]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d24]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d24]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d32]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d32]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d21]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d21]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d1]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d35]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d35]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d35]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d35]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d30]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d30]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d37]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d37]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d37]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d37]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d0]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtRHSReceiver\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModuleRequirement\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModuleRequirement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModuleRequirement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModuleRequirement\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtForEach\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtForEach\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtForEach\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtForEach\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d0]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtRHSReceiver\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, spoon.reflect.code.CtExpression\u003c?\u003e]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTargetedExpression\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #interface[name\u003dCtTargetedExpression]#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nMissing shadow typeMember: setTarget(spoon.reflect.code.CtExpression)\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\npublic \u003cC extends spoon.reflect.code.CtTargetedExpression\u003cE, T\u003e\u003e C setTarget(T target) {\n    if (target !\u003d null) {\n        target.setParent(this);\n    }\n    getFactory().getEnvironment().getModelChangeListener().onObjectUpdate(this, spoon.reflect.path.CtRole.TARGET, target, this.target);\n    this.target \u003d target;\n    return ((C) (this));\n}\n\nDifference on path: #typeMember[index\u003d1]#type#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nUnexpected shadow typeMember: setTarget(java.lang.Object)\nDiff on path: #interface[name\u003dCtTargetedExpression]#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #interface[name\u003dCtTargetedExpression]#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, E]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTargetedExpression\u003cT, E\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Void]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Void]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Void]\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Void]\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cjava.lang.Void\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cjava.lang.Void\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cjava.lang.Void\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cjava.lang.Void\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtComment\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtComment\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtComment\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtComment\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, spoon.reflect.code.CtExpression\u003c?\u003e]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTargetedExpression\u003cT, spoon.reflect.code.CtExpression\u003c?\u003e\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtReference\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtReference\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDoc\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #superType#typeArgument[index\u003d1]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #interface[name\u003dCtOperatorAssignment]#typeArgument[index\u003d1]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d2]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d1]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, A]\n\nDifference on path: #typeMember[index\u003d3]#type#typeArgument[index\u003d1]#boundingType\nShadow: \nNormal: T\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, A]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d9]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBodyHolder\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBodyHolder\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLabelledFlowBreak\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d17]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d14]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d19]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtClass\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtClass\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtClass\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtCodeElement\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtClass\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtClass\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtClass\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtClass\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtClass\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #superType#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #interface[name\u003dCtArrayAccess]#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d2]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, V]\n\nDifference on path: #typeMember[index\u003d3]#type#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDiff on path: #superType#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #superType#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #interface[name\u003dCtArrayAccess]#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #interface[name\u003dCtArrayAccess]#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d2]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtArrayAccess\u003cT, V\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, E]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtArrayAccess\u003cT, E\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtCodeSnippet\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d22]#type#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackage\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackage\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d22]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d22]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackage\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackage\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackage\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackage\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackage\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackage\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTryWithResource\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTryWithResource\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTryWithResource\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTryWithResource\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAssert\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAssert\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAssert\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAssert\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtVariableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d0]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtVariableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [S]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [S]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [S]\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSwitch\u003cS\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSwitch\u003cS\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSwitch\u003cS\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [S]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [S]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [S]\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSwitch\u003cS\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSwitch\u003cS\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSwitch\u003cS\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTry\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTry\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTry\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBodyHolder\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTry\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTry\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTry\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSynchronized\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSynchronized\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSynchronized\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtSynchronized\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtImport\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtImport\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeParameterReference\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeParameterReference\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeParameterReference\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeParameterReference\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeParameterReference\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeParameterReference\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeParameterReference\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtTypeParameterReference\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d12]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d20]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d13]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d20]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d20]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d14]#typeMember[index\u003d2]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d14]#typeMember[index\u003d2]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#typeMember[index\u003d2]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d14]#typeMember[index\u003d2]#parameter[index\u003d0]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtCodeSnippet\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtUnaryOperator\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtUnaryOperator\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtUnaryOperator\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtUnaryOperator\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d13]#type#typeArgument[index\u003d0]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtExecutableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtExecutableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtExecutableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtExecutableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d9]#type#typeArgument[index\u003d0]#boundingType\nShadow: \nNormal: T\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d0]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d10]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtExecutableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtExecutableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtExecutableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtExecutableReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtFor\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d19]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d21]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d11]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d17]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d9]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d18]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d14]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d34]#type#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d21]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d21]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d42]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d42]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d37]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d37]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d39]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d39]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d41]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d41]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d34]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d34]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d40]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d40]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d8]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d9]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [java.lang.Object]\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cjava.lang.Object\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtMultiTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtMultiTypedElement\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d17]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtRHSReceiver\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLocalVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLocalVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtRHSReceiver\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtIf\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtIf\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtIf\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtIf\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtIf\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtIf\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d10]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDifference on path: #typeMember[index\u003d9]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBodyHolder\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nMissing shadow typeMember: setParent(spoon.reflect.declaration.CtElement)\nDifference on path: #typeMember\nShadow: null\nNormal: @java.lang.Override\n@spoon.support.DerivedProperty\npublic \u003cT extends spoon.reflect.declaration.CtElement\u003e T setParent(T parent) {\n    return ((T) (this));\n}\n\nUnexpected shadow typeMember: setParent(java.lang.Object)\nDiff on path: #typeMember[index\u003d31]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d31]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d29]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d29]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d21]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d21]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d24]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d24]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d22]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d22]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d28]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d28]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d27]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d27]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d30]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d30]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d20]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d20]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d25]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d25]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d26]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d26]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d23]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d23]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d30]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d30]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d28]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d28]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d20]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d20]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d23]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d23]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d21]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d21]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d27]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d27]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d26]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d26]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d29]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d29]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d24]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d24]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d25]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d25]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d22]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModule\n\nDiff on path: #typeMember[index\u003d22]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackageExport\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackageExport\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackageExport\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackageExport\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackageExport\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackageExport\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackageExport\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtPackageExport\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d26]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d23]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d8]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d28]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d12]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d25]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d19]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d21]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d10]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d22]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d18]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d46]#type#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d26]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d26]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d23]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d23]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d28]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d28]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d55]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d55]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d58]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d58]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d25]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d25]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d49]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d49]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d21]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d21]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d52]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d52]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d22]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d22]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d50]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d50]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d54]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d54]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d46]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d46]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d53]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d53]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d23]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d20]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d25]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d10]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d31]#type#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d22]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d16]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d18]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d8]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d19]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d23]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d23]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d20]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d20]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d25]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d25]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d31]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d31]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d22]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d22]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d13]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d20]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d12]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d20]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d20]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtAbstractInvocation\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d17]#type#boundingType#typeArgument\nShadow: []\nNormal: [E]\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtCase\u003cE\u003e\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatementList\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [S]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtCase\u003cS\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtCatch\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBodyHolder\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtCatch\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtReference\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtArrayTypeReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtArrayTypeReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtReference\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtMethod\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtMethod\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d9]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d8]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d13]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBodyHolder\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLambda\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d0]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLambda\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtExecutable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d8]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewArray\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewArray\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewArray\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewArray\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewArray\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewArray\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewArray\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewArray\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtUsedService\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtUsedService\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtIntersectionTypeReference\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtIntersectionTypeReference\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtIntersectionTypeReference\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtIntersectionTypeReference\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtThrow\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtThrow\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtCodeElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtCodeElement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLiteral\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLiteral\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtReturn\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [R]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtReturn\u003cR\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtReference\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtElement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtReference\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDocTag\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDocTag\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDocTag\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDocTag\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDocTag\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDocTag\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDocTag\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtJavaDocTag\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d18]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtRHSReceiver\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtRHSReceiver\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTypeAccess\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtTypeAccess\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtCodeSnippet\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtStatement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtDo\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtDo\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtVariableAccess\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtVariableAccess\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d10]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d19]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d15]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d18]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d20]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d16]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d11]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d22]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d17]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d21]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDiff on path: #superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #interface[name\u003dCtAnnotation]#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #interface[name\u003dCtAnnotation]#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d30]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\n\nDiff on path: #typeMember[index\u003d30]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d35]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d35]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d10]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d10]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d10]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d10]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d19]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d19]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d19]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d19]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d15]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d18]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d33]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\n\nDiff on path: #typeMember[index\u003d33]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d20]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d20]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d20]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d20]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d38]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d38]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d16]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d16]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d11]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d22]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d22]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d22]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d22]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtShadowable\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d17]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d17]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d17]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d17]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d31]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d31]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d21]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d21]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d21]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d21]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d9]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDifference on path: #typeMember[index\u003d8]#type#boundingType#typeArgument\nShadow: []\nNormal: [A]\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d18]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\n\nDiff on path: #typeMember[index\u003d18]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d20]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\n\nDiff on path: #typeMember[index\u003d20]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtAnnotation\u003cA\u003e\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtLabelledFlowBreak\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d9]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtFieldReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtFieldReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtFieldReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d7]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d5]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtFieldReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtFieldReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtFieldReference\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDifference on path: #superType#typeArgument[index\u003d0]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #interface[name\u003dCtEnum]#typeArgument[index\u003d0]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d25]#type#typeArgument[index\u003d0]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d24]#type#typeArgument[index\u003d0]#type#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d13]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d13]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d11]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d11]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d14]#type#typeArgument[index\u003d0]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDiff on path: #superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.Enum\u003c?\u003e\n\nDiff on path: #interface[name\u003dCtEnum]#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.Enum\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d25]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.Enum\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d24]#type#typeArgument[index\u003d0]#type#[name]\nShadow: \nNormal: java.lang.Enum\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d13]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.Enum\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d13]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtEnum\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d13]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.Enum\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d11]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.Enum\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d11]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtEnum\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d11]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.Enum\u003c?\u003e\n\nDifference on path: #typeMember[index\u003d6]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d0]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtEnum\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtEnum\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtBodyHolder\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewClass\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.reference.CtActualTypeContainer\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.reference\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtNewClass\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #interface[name\u003dCtAnnotationType]#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #interface[name\u003dCtAnnotationType]#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d3]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#typeParameter[index\u003d1]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d2]#typeParameter[index\u003d1]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d4]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#typeArgument[index\u003d0]#[name]\nShadow: \nNormal: java.lang.annotation.Annotation\n\nDiff on path: #typeMember[index\u003d9]#type#typeArgument[index\u003d0]#boundingType#[name]\nShadow: java.lang\nNormal: java.lang.annotation\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d3]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDifference on path: #typeMember[index\u003d1]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d5]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtFormalTypeDeclarer\n\nDiff on path: #typeMember[index\u003d5]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d3]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d3]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtType\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d14]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d8]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d8]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d1]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d1]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d14]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d14]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d15]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtMultiTypedElement\n\nDiff on path: #typeMember[index\u003d15]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtNamedElement\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d9]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d9]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d12]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d12]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d6]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d6]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d7]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtModifiable\n\nDiff on path: #typeMember[index\u003d7]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d16]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtMultiTypedElement\n\nDiff on path: #typeMember[index\u003d16]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtVariable\u003cT\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDiff on path: #typeMember[index\u003d0]#type#[name]\nShadow: \nNormal: spoon.reflect.declaration.CtTypedElement\n\nDiff on path: #typeMember[index\u003d0]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.declaration\n\nDifference on path: #superType#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #interface[name\u003dCtExecutableReferenceExpression]#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d4]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDifference on path: #typeMember[index\u003d4]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, E]\n\nDifference on path: #typeMember[index\u003d2]#type#typeArgument[index\u003d1]#boundingType#typeArgument\nShadow: []\nNormal: [?]\n\nDiff on path: #superType#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #superType#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #interface[name\u003dCtExecutableReferenceExpression]#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #interface[name\u003dCtExecutableReferenceExpression]#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d4]#typeParameter[index\u003d0]#superType#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d4]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e\n\nDiff on path: #typeMember[index\u003d4]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDiff on path: #typeMember[index\u003d2]#type#typeArgument[index\u003d1]#[name]\nShadow: \nNormal: spoon.reflect.code.CtExpression\u003c?\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#typeArgument[index\u003d1]#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n\nDifference on path: #typeMember[index\u003d2]#type#boundingType#typeArgument\nShadow: []\nNormal: [T, E]\n\nDiff on path: #typeMember[index\u003d2]#type#[name]\nShadow: \nNormal: spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e\n\nDiff on path: #typeMember[index\u003d2]#type#boundingType#[name]\nShadow: java.lang\nNormal: spoon.reflect.code\n",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[T]\u003e but was:\u003c[Object]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [
        "testGetExecDeclarationOfEnumSetOf",
        "testIsSameSignatureWithGenerics",
        "testIsSameSignatureWithReferencedGenerics"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003cpublic static \u003cE extends java.lang.Enum\u003cE\u003e\u003e java.util.EnumSet\u003cE\u003e of(E arg0) {\n}\u003e but was:\u003cnull\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    }
  ],
  "failingModule": "/root/workspace/INRIA/spoon/422224671"
}