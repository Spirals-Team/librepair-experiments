{
  "totalNumberSkippingTests": 1,
  "bugType": "only_fail",
  "totalNumberErroringTests": 42,
  "repo": "graphhopper/graphhopper",
  "metrics": {
    "NbFailingTests": 192,
    "BugCommitUrl": "http://github.com/graphhopper/graphhopper/commit/7d0303fbb26ee31e717ea6d6622ba3eb631101d0",
    "ReproductionDate": "Sep 16, 2017 9:08:32 PM",
    "BuggyBuildId": 276317573,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/graphhopper/graphhopper/builds/276317573",
    "BuggyBuildDate": "Sep 16, 2017 8:44:34 PM",
    "BugCommit": "7d0303fbb26ee31e717ea6d6622ba3eb631101d0",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 1341,
    "NbLibraries": 13,
    "NbFileApp": 0,
    "NbFileTests": 0,
    "NbCPU": 8,
    "FreeMemory": 5863795288,
    "TotalMemory": 8371306496,
    "AngelicValuesByTest": {
      "com/graphhopper/routing/DijkstraTest": 311,
      "com/graphhopper/routing/AStarTest": 311,
      "com/graphhopper/routing/AStarBidirectionTest": 311,
      "com/graphhopper/routing/DijkstraBidirectionRefTest": 311
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 398776088,
      "ComputeClasspath": 190970784,
      "ComputeTestDir": 279042336,
      "ResolveDependency": 268881224,
      "BuildProject": 251992472,
      "NPERepair": 192103232,
      "ComputeSourceDir": 190970784,
      "InitRepoToPush": 178971256,
      "CloneRepository": 425781608,
      "NopolRepair": 4287441392,
      "CheckoutPatchedBuild": 5863795288,
      "TestProject": 241137448,
      "GatherTestInformation": 221039928,
      "PushIncriminatedBuild": 195705800,
      "CommitPatch": 5863795288
    },
    "FailureNames": [
      "java.lang.UnsupportedOperationException",
      "java.lang.IndexOutOfBoundsException",
      "java.lang.AssertionError",
      "java.lang.ArrayIndexOutOfBoundsException",
      "java.lang.IllegalArgumentException",
      "java.lang.NullPointerException",
      "org.junit.ComparisonFailure"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 3,
      "ComputeTestDir": 0,
      "ResolveDependency": 13,
      "BuildProject": 106,
      "NPERepair": 8,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 5,
      "CloneRepository": 26,
      "NopolRepair": 21475,
      "CheckoutPatchedBuild": 0,
      "TestProject": 23,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 7,
      "CommitPatch": 71
    }
  },
  "bugCommit": "https://github.com/graphhopper/graphhopper/compare/a2940b55fed4...7d0303fbb26e",
  "failingModule": "/root/workspace/graphhopper/graphhopper/276317573/core",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 150,
  "error-types": [
    "java.lang.UnsupportedOperationException",
    "java.lang.IndexOutOfBoundsException",
    "java.lang.AssertionError",
    "java.lang.ArrayIndexOutOfBoundsException",
    "java.lang.IllegalArgumentException",
    "java.lang.NullPointerException",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1341,
  "failing-test-cases": [
    {
      "className": "com.graphhopper.routing.DijkstraTest",
      "failingMethods": [
        "com.graphhopper.routing.DijkstraTest#testViaEdges_SpecialCases[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.DijkstraTest#testViaEdges_SpecialCases[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.DijkstraTest#testQueryGraphAndFastest[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.DijkstraTest#testTwoWeightsPerEdge2[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.DijkstraTest#testQueryGraphAndFastest[NODE_BASED]",
        "com.graphhopper.routing.DijkstraTest#testTwoWeightsPerEdge[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.DijkstraTest#testViaEdges_SpecialCases[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.DijkstraTest#testViaEdges_SpecialCases[NODE_BASED]",
        "com.graphhopper.routing.DijkstraTest#testTwoWeightsPerEdge2[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.DijkstraTest#testTwoWeightsPerEdge[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.DijkstraTest#testTwoWeightsPerEdge[NODE_BASED]",
        "com.graphhopper.routing.DijkstraTest#testTwoWeightsPerEdge[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.DijkstraTest#testQueryGraphAndFastest[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.DijkstraTest#testTwoWeightsPerEdge2[NODE_BASED]",
        "com.graphhopper.routing.DijkstraTest#testTwoWeightsPerEdge2[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.DijkstraTest#testQueryGraphAndFastest[EDGE_BASED_2DIR_UTURN]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[8, 0, 4, 6, 7, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[12, 3, 5, 8, 9, 13]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[8, 0, 4, 6, 7, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[12, 3, 5, 8, 9, 13]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[8, 0, 4, 6, 7, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[12, 3, 5, 8, 9, 13]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[8, 0, 4, 6, 7, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[12, 3, 5, 8, 9, 13]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 16,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.storage.GraphHopperStorageTest",
      "failingMethods": [
        "com.graphhopper.storage.GraphHopperStorageTest#testClone",
        "com.graphhopper.storage.GraphHopperStorageTest#testCreateDuplicateEdges"
      ],
      "erroringMethods": [
        "com.graphhopper.storage.GraphHopperStorageTest#test8BytesFlags"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c2\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Too few bytes reserved for EncodedValues data 8, requested integer index 2",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.reader.dem.TunnelElevationInterpolatorTest",
      "failingMethods": [
        "com.graphhopper.reader.dem.TunnelElevationInterpolatorTest#interpolatesElevationOfTunnelWithTwoOuterNodes",
        "com.graphhopper.reader.dem.TunnelElevationInterpolatorTest#interpolatesElevationOfTunnelWithFourOuterNodes",
        "com.graphhopper.reader.dem.TunnelElevationInterpolatorTest#interpolatesElevationOfTunnelWithThreeOuterNodes",
        "com.graphhopper.reader.dem.TunnelElevationInterpolatorTest#doesNotInterpolateElevationOfTunnelWithZeroOuterNodes",
        "com.graphhopper.reader.dem.TunnelElevationInterpolatorTest#interpolatesElevationOfTunnelWithSingleOuterNode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[3, 1]\u003e but was:\u003c[1]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[]\u003e but was:\u003c[0]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[3, 1, 6]\u003e but was:\u003c[1]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[3, 1, 6, 8]\u003e but was:\u003c[1]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[2]\u003e but was:\u003c[0]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.AStarBidirectionTest",
      "failingMethods": [
        "com.graphhopper.routing.AStarBidirectionTest#testQueryGraphAndFastest[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.AStarBidirectionTest#testViaEdges_SpecialCases[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.AStarBidirectionTest#testViaEdges_SpecialCases[NODE_BASED]",
        "com.graphhopper.routing.AStarBidirectionTest#testQueryGraphAndFastest[NODE_BASED]",
        "com.graphhopper.routing.AStarBidirectionTest#testTwoWeightsPerEdge2[NODE_BASED]",
        "com.graphhopper.routing.AStarBidirectionTest#testTwoWeightsPerEdge2[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.AStarBidirectionTest#testTwoWeightsPerEdge[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.AStarBidirectionTest#testViaEdges_SpecialCases[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.AStarBidirectionTest#testTwoWeightsPerEdge[NODE_BASED]",
        "com.graphhopper.routing.AStarBidirectionTest#testQueryGraphAndFastest[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.AStarBidirectionTest#testViaEdges_SpecialCases[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.AStarBidirectionTest#testTwoWeightsPerEdge[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.AStarBidirectionTest#testTwoWeightsPerEdge[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.AStarBidirectionTest#testTwoWeightsPerEdge2[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.AStarBidirectionTest#testQueryGraphAndFastest[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.AStarBidirectionTest#testTwoWeightsPerEdge2[EDGE_BASED_2DIR_UTURN]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 16,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.storage.index.LocationIndexTreeCHTest",
      "failingMethods": [
        "com.graphhopper.storage.index.LocationIndexTreeCHTest#testDifferentVehicles",
        "com.graphhopper.storage.index.LocationIndexTreeCHTest#testSearchWithFilter_issue318"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.PathTest",
      "failingMethods": [
        "com.graphhopper.routing.PathTest#testCalcInstructionsForDataFlagEncoder",
        "com.graphhopper.routing.PathTest#testCalcInstructionsRoundaboutIssue353"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[At roundabout, take exit 1 onto MainStreet 1 11, Arrive at destination]\u003e but was:\u003c[Continue onto 6-10, Arrive at destination]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.util.BitUtilLittleTest",
      "failingMethods": [
        "com.graphhopper.util.BitUtilLittleTest#testToBitString"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...00000000000000000000[100000000000000000000000000000001]\u003e but was:\u003c...00000000000000000000[000000000000000000000000000000000]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.weighting.FastestWeightingTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.graphhopper.routing.weighting.FastestWeightingTest#testMinWeightHasSameUnitAs_getWeight"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "Not supported. Edge is empty.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.routing.util.MotorcycleFlagEncoderTest",
      "failingMethods": [
        "com.graphhopper.routing.util.MotorcycleFlagEncoderTest#testAccess"
      ],
      "erroringMethods": [
        "com.graphhopper.routing.util.MotorcycleFlagEncoderTest#testSetSpeed0_issue367",
        "com.graphhopper.routing.util.MotorcycleFlagEncoderTest#testCurvature"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Cannot find encoded value motorcycle.curvature in existing collection: {roundabout\u003droundabout, road_class\u003droad_class, road_environment\u003droad_environment, motorcycle.access\u003dmotorcycle.access, motorcycle.average_speed\u003dmotorcycle.average_speed, motorcycle.priority\u003dcom.graphhopper.routing.util.MotorcycleFlagEncoder$2@5f9edf14, curvature\u003dcom.graphhopper.routing.util.MotorcycleFlagEncoder$3@68746f22, foot.average_speed\u003dfoot.average_speed, foot.priority\u003dfoot.priority, foot.access\u003dfoot.access}",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    },
    {
      "className": "com.graphhopper.routing.weighting.ShortFastestWeightingTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.graphhopper.routing.weighting.ShortFastestWeightingTest#testShort"
      ],
      "failures": [
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "Not supported. Edge is empty.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.storage.GraphHopperStorageForDataFlagEncoderTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.graphhopper.storage.GraphHopperStorageForDataFlagEncoderTest#testStorageProperties"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "entry in encoder list not supported roundabout",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest",
      "failingMethods": [
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testUnpackingOrder_Fastest",
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testDirectedGraph",
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testMoreComplexGraph",
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testUnpackingOrder",
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testFindShortcuts_Roundabout",
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testDirectedGraph3",
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testRoundaboutUnpacking",
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testDirectedGraph2"
      ],
      "erroringMethods": [
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testMultiplePreparationsDifferentView",
        "com.graphhopper.routing.ch.PrepareContractionHierarchiesTest#testMultiplePreparationsIdenticalView"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "node 2 is invalid. Not in [0,2)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c9\u003e but was:\u003c2\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "3-\u003e2, weight:12.0 (5,4)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c60\u003e but was:\u003c46\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "node 2 is invalid. Not in [0,2)",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "FlagEncoder bike requires the TagParser \u0027surface\u0027 and this must be created before adding the FlagEncoder",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "FlagEncoder bike requires the TagParser \u0027surface\u0027 and this must be created before adding the FlagEncoder",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c29\u003e but was:\u003c27\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 8,
      "nbErrors": 2
    },
    {
      "className": "com.graphhopper.reader.dem.BridgeElevationInterpolatorTest",
      "failingMethods": [
        "com.graphhopper.reader.dem.BridgeElevationInterpolatorTest#interpolatesElevationOfPillarNodes"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[3, 1, 2, 6, 8]\u003e but was:\u003c[2]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.AStarTest",
      "failingMethods": [
        "com.graphhopper.routing.AStarTest#testTwoWeightsPerEdge[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.AStarTest#testTwoWeightsPerEdge[NODE_BASED]",
        "com.graphhopper.routing.AStarTest#testQueryGraphAndFastest[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.AStarTest#testViaEdges_SpecialCases[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.AStarTest#testQueryGraphAndFastest[NODE_BASED]",
        "com.graphhopper.routing.AStarTest#testViaEdges_SpecialCases[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.AStarTest#testTwoWeightsPerEdge2[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.AStarTest#testTwoWeightsPerEdge2[NODE_BASED]",
        "com.graphhopper.routing.AStarTest#testQueryGraphAndFastest[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.AStarTest#testTwoWeightsPerEdge[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.AStarTest#testTwoWeightsPerEdge2[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.AStarTest#testTwoWeightsPerEdge2[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.AStarTest#testQueryGraphAndFastest[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.AStarTest#testViaEdges_SpecialCases[NODE_BASED]",
        "com.graphhopper.routing.AStarTest#testTwoWeightsPerEdge[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.AStarTest#testViaEdges_SpecialCases[EDGE_BASED_2DIR_UTURN]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[8, 0, 4, 6, 7, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[12, 3, 5, 8, 9, 13]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[8, 0, 4, 6, 7, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[12, 3, 5, 8, 9, 13]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[8, 0, 4, 6, 7, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[12, 3, 5, 8, 9, 13]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[8, 0, 4, 6, 7, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[12, 3, 5, 8, 9, 13]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 16,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.storage.index.Location2IDFullIndexTest",
      "failingMethods": [
        "com.graphhopper.storage.index.Location2IDFullIndexTest#testDifferentVehicles"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c-1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest",
      "failingMethods": [
        "com.graphhopper.storage.index.Location2IDFullWithEdgesIndexTest#testDifferentVehicles"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c-1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.util.Car4WDFlagEncoderTest",
      "failingMethods": [
        "com.graphhopper.routing.util.Car4WDFlagEncoderTest#testAccess"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.storage.GraphHopperStorageCHTest",
      "failingMethods": [
        "com.graphhopper.storage.GraphHopperStorageCHTest#testGetWeight",
        "com.graphhopper.storage.GraphHopperStorageCHTest#testCreateDuplicateEdges",
        "com.graphhopper.storage.GraphHopperStorageCHTest#testClone"
      ],
      "erroringMethods": [
        "com.graphhopper.storage.GraphHopperStorageCHTest#test8BytesFlags",
        "com.graphhopper.storage.GraphHopperStorageCHTest#testShortcutCreationAndAccessForManyVehicles",
        "com.graphhopper.storage.GraphHopperStorageCHTest#testGetWeightIfAdvancedEncoder"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Cannot find encoded value bike2.access in existing collection: {roundabout\u003droundabout, road_class\u003droad_class, road_environment\u003droad_environment, car.average_speed\u003dcar.average_speed, car.max_speed\u003dcar.max_speed, car.access\u003dcar.access, foot.average_speed\u003dfoot.average_speed, foot.priority\u003dfoot.priority, foot.access\u003dfoot.access}",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "FlagEncoder bike2 requires the TagParser \u0027surface\u0027 and this must be created before adding the FlagEncoder",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c2\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Too few bytes reserved for EncodedValues data 8, requested integer index 2",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 3
    },
    {
      "className": "com.graphhopper.routing.util.DataFlagEncoderTest",
      "failingMethods": [
        "com.graphhopper.routing.util.DataFlagEncoderTest#testHighwaySpeed",
        "com.graphhopper.routing.util.DataFlagEncoderTest#testInsufficientEncoderBitLength",
        "com.graphhopper.routing.util.DataFlagEncoderTest#reverseEdge",
        "com.graphhopper.routing.util.DataFlagEncoderTest#acceptWay",
        "com.graphhopper.routing.util.DataFlagEncoderTest#setAccess"
      ],
      "erroringMethods": [
        "com.graphhopper.routing.util.DataFlagEncoderTest#testHighway",
        "com.graphhopper.routing.util.DataFlagEncoderTest#testSpatialId",
        "com.graphhopper.routing.util.DataFlagEncoderTest#testBridge",
        "com.graphhopper.routing.util.DataFlagEncoderTest#testTunnel",
        "com.graphhopper.routing.util.DataFlagEncoderTest#testFord",
        "com.graphhopper.routing.util.DataFlagEncoderTest#testLargeMaxspeed",
        "com.graphhopper.routing.util.DataFlagEncoderTest#testMaxspeed",
        "com.graphhopper.routing.util.DataFlagEncoderTest#testDestinationTag"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "Not supported. Edge is empty.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception: java.lang.IllegalArgumentException",
          "isError": false
        },
        {
          "failureName": "java.lang.ArrayIndexOutOfBoundsException",
          "failureDetail": "3",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "FlagEncoder generic requires the TagParser \u0027road_environment\u0027 and this must be created before adding the FlagEncoder",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[0.0, [100.0, 100.0, 90.0, 9]0.0, 90.0]\u003e but was:\u003c[0.0, [0.0, 0.0, 0.0, ]0.0, 90.0]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "Not supported. Edge is empty.",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "Not supported. Edge is empty.",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "Not supported. Edge is empty.",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "Not supported. Edge is empty.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c10.0\u003e but was:\u003c0.0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "Not supported. Edge is empty.",
          "isError": true
        }
      ],
      "nbFailures": 5,
      "nbErrors": 8
    },
    {
      "className": "com.graphhopper.storage.index.LocationIndexTreeTest",
      "failingMethods": [
        "com.graphhopper.storage.index.LocationIndexTreeTest#testSearchWithFilter_issue318",
        "com.graphhopper.storage.index.LocationIndexTreeTest#testDifferentVehicles"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.util.BikeFlagEncoderTest",
      "failingMethods": [
        "com.graphhopper.routing.util.BikeFlagEncoderTest#testPriority",
        "com.graphhopper.routing.util.BikeFlagEncoderTest#testHandleWayTagsCallsHandlePriority",
        "com.graphhopper.routing.util.BikeFlagEncoderTest#testHandleCommonWayTags",
        "com.graphhopper.routing.util.BikeFlagEncoderTest#testHandleWayTags",
        "com.graphhopper.routing.util.BikeFlagEncoderTest#testHandleWayTagsInfluencedByRelation",
        "com.graphhopper.routing.util.BikeFlagEncoderTest#testCalcPriority"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1.0\u003e but was:\u003c7.0\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[small way, unpaved]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[get off the bike, unpaved]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1.0\u003e but was:\u003c7.0\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[get off the bike]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0.8571428571428571\u003e but was:\u003c6.0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 6,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.QueryGraphTest",
      "failingMethods": [
        "com.graphhopper.routing.QueryGraphTest#testUnfavorVirtualEdgePair",
        "com.graphhopper.routing.QueryGraphTest#testOneWayLoop_Issue162",
        "com.graphhopper.routing.QueryGraphTest#testEnforceHeading"
      ],
      "erroringMethods": [
        "com.graphhopper.routing.QueryGraphTest#testIteration_Issue163"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003cfalse\u003e but was:\u003ctrue\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003cfalse\u003e but was:\u003ctrue\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "[2-\u003e0, 2-\u003e0]",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.routing.profiles.StringEncodedValueTest",
      "failingMethods": [
        "com.graphhopper.routing.profiles.StringEncodedValueTest#testInit"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.util.InstructionListTest",
      "failingMethods": [
        "com.graphhopper.util.InstructionListTest#testInstructionsWithTimeAndPlace"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1604120\u003e but was:\u003c1440000\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.util.GHUtilityTest",
      "failingMethods": [
        "com.graphhopper.util.GHUtilityTest#testCopy"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.util.RacingBikeFlagEncoderTest",
      "failingMethods": [
        "com.graphhopper.routing.util.RacingBikeFlagEncoderTest#testHandleWayTagsInfluencedByRelation",
        "com.graphhopper.routing.util.RacingBikeFlagEncoderTest#testHandleCommonWayTags",
        "com.graphhopper.routing.util.RacingBikeFlagEncoderTest#testPriority",
        "com.graphhopper.routing.util.RacingBikeFlagEncoderTest#testHandleWayTagsCallsHandlePriority"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[small way, unpaved]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1.0\u003e but was:\u003c7.0\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[get off the bike]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0.8571428571428571\u003e but was:\u003c6.0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.lm.PrepareLandmarksTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.graphhopper.routing.lm.PrepareLandmarksTest#testLandmarkStorageAndRouting"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testCalcPriority",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testGetSpeed",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testHandleWayTags",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testHandleWayTagsInfluencedByRelation",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testOneway",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testPreferenceForSlowSpeed",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testTramStations",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testSetSpeed0_issue367",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testPriority",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testMaxSpeed",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testHandleCommonWayTags",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testApplyWayTags",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testUnchangedForStepsBridgeAndTunnel",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testRoutingFailsWithInvalidGraph_issue665",
        "com.graphhopper.routing.util.Bike2WeightFlagEncoderTest#testHandleWayTagsCallsHandlePriority"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "com.graphhopper.routing.DijkstraBidirectionRefTest",
      "failingMethods": [
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testTwoWeightsPerEdge[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testViaEdges_SpecialCases[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testTwoWeightsPerEdge2[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testQueryGraphAndFastest[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testTwoWeightsPerEdge[NODE_BASED]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testQueryGraphAndFastest[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testViaEdges_SpecialCases[NODE_BASED]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testViaEdges_SpecialCases[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testTwoWeightsPerEdge[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testTwoWeightsPerEdge2[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testTwoWeightsPerEdge2[NODE_BASED]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testTwoWeightsPerEdge[EDGE_BASED_2DIR_UTURN]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testQueryGraphAndFastest[NODE_BASED]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testViaEdges_SpecialCases[EDGE_BASED_1DIR]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testTwoWeightsPerEdge2[EDGE_BASED_2DIR]",
        "com.graphhopper.routing.DijkstraBidirectionRefTest#testQueryGraphAndFastest[EDGE_BASED_1DIR]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 16,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.ch.DijkstraBidirectionCHTest",
      "failingMethods": [
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testBidirectional",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testQueryGraphAndFastest",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testDirectedGraphBug2",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testTwoWeightsPerEdge",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testBaseGraphMultipleVehicles",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testViaEdges_BiGraph",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testViaEdges_SpecialCases",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testMultipleVehicles_issue548",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testWithCoordinates",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testRekeyBugOfIntBinHeap",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testTwoWeightsPerEdge2",
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testCalcFastestPath"
      ],
      "erroringMethods": [
        "com.graphhopper.routing.ch.DijkstraBidirectionCHTest#testPathRecursiveUnpacking"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "bike2.average_speed value 60.0 too large for encoding. maxValue:30.0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[0, 4, 6, 7]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[0, 4, 6, 7, 5, 3]\u003e but was:\u003c[0, 1, 5, 3]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "distance:895.973, edges:4 expected:\u003c[0, 7, 6, 8, 3, 4]\u003e but was:\u003c[0, 7, 6, 5, 4]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[0, 1, 2, 3]\u003e but was:\u003c[0, 1, 3]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[0, 1, 5, 6, 7]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[8, 1, 5, 3, 9]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[5, 1, 2, 3, 6]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "distance:885.4188788045922, edges:5 expected:\u003c[10, 7, 6, 8, 3, 9]\u003e but was:\u003c[10, 7, 6, 5, 4, 9]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c(0.0,0.0), (1.0,0.6), (1.5,1.0), (1.0,1.5)\u003e but was:\u003c(0.0,0.0), (0.49999990686774043,0.0), (1.0,0.5999999254941923), (1.4999999068677405,1.0), (1.0,1.4999999068677405)\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[34, 35, 36]\u003e but was:\u003c[34, 44, 54, 55, 56, 46, 36]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[12, 0, 1, 2, 11, 7, 10, 13]\u003e but was:\u003c[]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 12,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest",
      "failingMethods": [
        "com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest#testClone",
        "com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest#testCreateDuplicateEdges"
      ],
      "erroringMethods": [
        "com.graphhopper.storage.GraphHopperStorageWithTurnCostsTest#test8BytesFlags"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c2\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Too few bytes reserved for EncodedValues data 8, requested integer index 2",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.routing.util.FootFlagEncoderTest",
      "failingMethods": [
        "com.graphhopper.routing.util.FootFlagEncoderTest#testAccess",
        "com.graphhopper.routing.util.FootFlagEncoderTest#testSlowHiking",
        "com.graphhopper.routing.util.FootFlagEncoderTest#handleWayTagsRoundabout",
        "com.graphhopper.routing.util.FootFlagEncoderTest#testMixSpeedAndSafe",
        "com.graphhopper.routing.util.FootFlagEncoderTest#testRailPlatformIssue366"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c[0 0]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c[0 0]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c5.0\u003e but was:\u003c0.0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.util.EncodingManagerTest",
      "failingMethods": [
        "com.graphhopper.routing.util.EncodingManagerTest#testCompatibilityBug",
        "com.graphhopper.routing.util.EncodingManagerTest#testCompatibility",
        "com.graphhopper.routing.util.EncodingManagerTest#testCombineRelations",
        "com.graphhopper.routing.util.EncodingManagerTest#testMixBikeTypesAndRelationCombination",
        "com.graphhopper.routing.util.EncodingManagerTest#testFullBitMask"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Values should be different. Actual: foot",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4.0\u003e but was:\u003c0.0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.subnetwork.PrepareRoutingSubnetworksTest",
      "failingMethods": [
        "com.graphhopper.routing.subnetwork.PrepareRoutingSubnetworksTest#testRemoveSubnetworkWhenMultipleVehicles"
      ],
      "erroringMethods": [
        "com.graphhopper.routing.subnetwork.PrepareRoutingSubnetworksTest#testRemoveNode"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c9\u003e but was:\u003c7\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "FlagEncoder car requires the TagParser \u0027roundabout\u0027 and this must be created before adding the FlagEncoder",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.storage.GraphStorageViaMMapTest",
      "failingMethods": [
        "com.graphhopper.storage.GraphStorageViaMMapTest#testCreateDuplicateEdges",
        "com.graphhopper.storage.GraphStorageViaMMapTest#testClone"
      ],
      "erroringMethods": [
        "com.graphhopper.storage.GraphStorageViaMMapTest#test8BytesFlags"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c2\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Too few bytes reserved for EncodedValues data 8, requested integer index 2",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.routing.weighting.GenericWeightingTest",
      "failingMethods": [
        "com.graphhopper.routing.weighting.GenericWeightingTest#testCalcTime",
        "com.graphhopper.routing.weighting.GenericWeightingTest#testRoadAttributeRestriction"
      ],
      "erroringMethods": [
        "com.graphhopper.routing.weighting.GenericWeightingTest#testDisabledRoadAttributes"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c566111.0\u003e but was:\u003cInfinity\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c566111.0\u003e but was:\u003c9.223372036854776E18\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "FlagEncoder generic requires the TagParser \u0027road_environment\u0027 and this must be created before adding the FlagEncoder",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "com.graphhopper.routing.util.MountainBikeFlagEncoderTest",
      "failingMethods": [
        "com.graphhopper.routing.util.MountainBikeFlagEncoderTest#testHandleWayTags",
        "com.graphhopper.routing.util.MountainBikeFlagEncoderTest#testPriority",
        "com.graphhopper.routing.util.MountainBikeFlagEncoderTest#testHandleWayTagsInfluencedByRelation",
        "com.graphhopper.routing.util.MountainBikeFlagEncoderTest#testHandleCommonWayTags",
        "com.graphhopper.routing.util.MountainBikeFlagEncoderTest#testHandleWayTagsCallsHandlePriority"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[small way, unpaved]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[small way, unpaved]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1.0\u003e but was:\u003c7.0\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[get off the bike]\u003e but was:\u003c[]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0.8571428571428571\u003e but was:\u003c6.0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.routing.DijkstraOneToManyTest",
      "failingMethods": [
        "com.graphhopper.routing.DijkstraOneToManyTest#testTwoWeightsPerEdge[NODE_BASED]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.graphhopper.storage.GraphHopperStorageLMTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.graphhopper.storage.GraphHopperStorageLMTest#testLoad"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "entry in encoder list not supported roundabout",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}