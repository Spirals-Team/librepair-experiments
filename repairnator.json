{
  "totalNumberSkippingTests": 3,
  "bugType": "only_fail",
  "totalNumberErroringTests": 32,
  "repo": "matsim-org/matsim",
  "metrics": {
    "FailureNames": [
      "junit.framework.AssertionFailedError",
      "java.lang.NumberFormatException",
      "java.lang.RuntimeException",
      "java.lang.AssertionError",
      "java.lang.Exception"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 0,
      "ComputeClasspath": 3,
      "ComputeTestDir": 0,
      "ResolveDependency": 38,
      "BuildProject": 1048,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 36,
      "CloneRepository": 187,
      "NopolRepair": 273,
      "CheckoutPatchedBuild": 0,
      "TestProject": 169,
      "GatherTestInformation": 1,
      "PushIncriminatedBuild": 19,
      "AstorRepair": 867,
      "CommitPatch": 41
    },
    "NbFailingTests": 57,
    "BugCommitUrl": "http://github.com/matsim-org/matsim/commit/74d36dbede8918e1d81589b0fe7d38c413316a42",
    "ReproductionDate": "Jan 22, 2018 4:33:39 PM",
    "BuggyBuildId": 331801816,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/matsim-org/matsim/builds/331801816",
    "BuggyBuildDate": "Jan 22, 2018 4:28:59 PM",
    "BugCommit": "74d36dbede8918e1d81589b0fe7d38c413316a42",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 1322,
    "NbLibraries": 34,
    "NbFileApp": 7010,
    "NbFileTests": 1290,
    "NbCPU": 8,
    "FreeMemory": 1632045152,
    "TotalMemory": 3385851904,
    "AngelicValuesByTest": {
      "org/matsim/core/mobsim/qsim/qnetsimengine/VehicleWaitingTest": 0,
      "org/matsim/core/mobsim/qsim/qnetsimengine/QLinkTest": 0,
      "org/matsim/pt/counts/OccupancyAnalyzerTest": 0,
      "org/matsim/core/mobsim/qsim/qnetsimengine/FlowCapacityVariationTest": 0,
      "org/matsim/core/mobsim/qsim/QSimTest": 0,
      "org/matsim/core/mobsim/qsim/pt/QSimIntegrationTest": 0,
      "org/matsim/core/mobsim/qsim/qnetsimengine/DeparturesOnSameLinkSameTimeTest": 0,
      "org/matsim/core/config/ConfigV2IOTest": 0,
      "org/matsim/pt/analysis/TransitLoadIntegrationTest": 0,
      "org/matsim/withinday/controller/ExperiencedPlansWriterTest": 0,
      "org/matsim/examples/EquilTest": 0,
      "org/matsim/core/mobsim/qsim/pt/TransitQueueSimulationTest": 0,
      "org/matsim/core/controler/TransitControlerIntegrationTest": 0,
      "org/matsim/core/mobsim/qsim/qnetsimengine/LinkSpeedCalculatorIntegrationTest": 0,
      "org/matsim/core/mobsim/qsim/VehicleSourceTest": 0,
      "org/matsim/core/mobsim/qsim/qnetsimengine/SeepageTest": 0,
      "org/matsim/integration/SimulateAndScoreTest": 0,
      "org/matsim/core/mobsim/qsim/qnetsimengine/PassingTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 186232976,
      "ComputeClasspath": 204283152,
      "ComputeTestDir": 125431792,
      "ResolveDependency": 167362344,
      "BuildProject": 180779552,
      "NPERepair": 205969616,
      "ComputeSourceDir": 204283152,
      "InitRepoToPush": 135977520,
      "CloneRepository": 158157880,
      "NopolRepair": 2072909632,
      "CheckoutPatchedBuild": 1632045152,
      "TestProject": 143322232,
      "GatherTestInformation": 140886040,
      "PushIncriminatedBuild": 205969616,
      "AstorRepair": 258323048,
      "CommitPatch": 1632045152
    }
  },
  "bugCommit": "https://github.com/matsim-org/matsim/compare/071edac55fb6...74d36dbede89",
  "failingModule": "/root/workspace/matsim-org/matsim/331801816/matsim",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 25,
  "error-types": [
    "junit.framework.AssertionFailedError",
    "java.lang.NumberFormatException",
    "java.lang.RuntimeException",
    "java.lang.AssertionError",
    "java.lang.Exception"
  ],
  "totalNumberRunningTests": 1322,
  "failing-test-cases": [
    {
      "className": "org.matsim.core.mobsim.qsim.pt.QSimIntegrationTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.core.mobsim.qsim.pt.QSimIntegrationTest#test_multipleStopsOnFirstLink_singleLinkRoute_withPassengersAtSecondStop",
        "org.matsim.core.mobsim.qsim.pt.QSimIntegrationTest#test_multipleStopsOnFirstLink_singleLinkRoute_withPassengersAtFirstStop"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.matsim.core.mobsim.qsim.qnetsimengine.FlowCapacityVariationTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.core.mobsim.qsim.qnetsimengine.FlowCapacityVariationTest#twoMotorbikesTravelTime",
        "org.matsim.core.mobsim.qsim.qnetsimengine.FlowCapacityVariationTest#twoBikesTravelTime"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.matsim.core.mobsim.qsim.pt.TransitQueueSimulationTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.core.mobsim.qsim.pt.TransitQueueSimulationTest#testAddAgentToStopWrongLink",
        "org.matsim.core.mobsim.qsim.pt.TransitQueueSimulationTest#testEvents"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003corg.matsim.core.mobsim.qsim.pt.TransitQSimEngine$TransitAgentTriesToTeleportException\u003e but was\u003cjava.lang.RuntimeException\u003e",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.matsim.core.mobsim.qsim.QSimTest",
      "failingMethods": [
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_WrongStartLink[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_WrongStartLink[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testCircleAsRoute[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testRouteWithEndLinkTwice[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testCircleAsRoute[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_WrongRoute[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_MissingRoute[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_WrongRoute[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_MissingRoute[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testRouteWithEndLinkTwice[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_WrongEndLink[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_WrongEndLink[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_ImpossibleRoute[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testConsistentRoutes_ImpossibleRoute[1: isUsingfastCapacityUpdate \u003d\u003d true]"
      ],
      "erroringMethods": [
        "org.matsim.core.mobsim.qsim.QSimTest#testAgentWithLastActWithEndtime[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testCleanupSim_EarlyEnd[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testTeleportationSingleAgent[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testVehicleTeleportationTrue[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testWaitingForCar[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testVehicleTeleportationTrue[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testWaitingForCar[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testCleanupSim_EarlyEnd[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testVehicleTeleportationFalse[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testAgentWithLastActWithEndtime[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testVehicleTeleportationFalse[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testStartAndEndTime[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.QSimTest#testTeleportationSingleAgent[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.QSimTest#testStartAndEndTime[0: isUsingfastCapacityUpdate \u003d\u003d false]"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "wrong number of events. expected:\u003c20\u003e but was:\u003c12\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "wrong number of events. expected:\u003c16\u003e but was:\u003c8\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "wrong number of events. expected:\u003c20\u003e but was:\u003c12\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "wrong number of events. expected:\u003c16\u003e but was:\u003c8\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 14,
      "nbErrors": 14
    },
    {
      "className": "org.matsim.core.mobsim.qsim.qnetsimengine.SeepageTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.core.mobsim.qsim.qnetsimengine.SeepageTest#seepageOfWalkInCongestedRegime[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.qnetsimengine.SeepageTest#seepageOfWalkInCongestedRegime[1: isUsingfastCapacityUpdate \u003d\u003d true]"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.matsim.integration.SimulateAndScoreTest",
      "failingMethods": [
        "org.matsim.integration.SimulateAndScoreTest#testTeleportationScore"
      ],
      "erroringMethods": [
        "org.matsim.integration.SimulateAndScoreTest#testRealPtScore"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "junit.framework.AssertionFailedError",
          "failureDetail": "Expecting -1.0 from travel time, -1.0 from travel distance. expected:\u003c-2.0\u003e but was:\u003c-2.0411111111111113\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "org.matsim.core.mobsim.qsim.qnetsimengine.DeparturesOnSameLinkSameTimeTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.core.mobsim.qsim.qnetsimengine.DeparturesOnSameLinkSameTimeTest#test4LinkEnterTimeOfCarAndBike"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.matsim.core.mobsim.qsim.qnetsimengine.VehicleWaitingTest",
      "failingMethods": [
        "org.matsim.core.mobsim.qsim.qnetsimengine.VehicleWaitingTest#testVehicleWaitingOneLapDoesntFailDummies",
        "org.matsim.core.mobsim.qsim.qnetsimengine.VehicleWaitingTest#testVehicleWaitingSeveralLapDoesntFailDummies"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "no arrivals for person A",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "no arrivals for person A",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.matsim.pt.analysis.TransitLoadIntegrationTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.pt.analysis.TransitLoadIntegrationTest#testIntegration"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.matsim.core.mobsim.qsim.qnetsimengine.QLinkTest",
      "failingMethods": [
        "org.matsim.core.mobsim.qsim.qnetsimengine.QLinkTest#testStuckEvents[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.core.mobsim.qsim.qnetsimengine.QLinkTest#testStuckEvents[1: isUsingfastCapacityUpdate \u003d\u003d true]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "junit.framework.AssertionFailedError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "junit.framework.AssertionFailedError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.matsim.withinday.controller.ExperiencedPlansWriterTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.withinday.controller.ExperiencedPlansWriterTest#testWriteFile"
      ],
      "failures": [
        {
          "failureName": "java.lang.NumberFormatException",
          "failureDetail": "For input string: \"9223372036854775807\"",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.matsim.examples.EquilTest",
      "failingMethods": [
        "org.matsim.examples.EquilTest#testEquil[0: isUsingfastCapacityUpdate \u003d\u003d false]",
        "org.matsim.examples.EquilTest#testEquil[1: isUsingfastCapacityUpdate \u003d\u003d true]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "junit.framework.AssertionFailedError",
          "failureDetail": "different event files. expected:\u003c-3\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "junit.framework.AssertionFailedError",
          "failureDetail": "different event files. expected:\u003c-3\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.matsim.core.controler.TransitControlerIntegrationTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.core.controler.TransitControlerIntegrationTest#testTransitRouteCopy"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.matsim.core.config.ConfigV2IOTest",
      "failingMethods": [
        "org.matsim.core.config.ConfigV2IOTest#testInputSameAsOutput"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "different parameters expected:\u003c{addEmptyActivityOption\u003dfalse, assigningLinksToFacilitiesIfMissing\u003dfalse, assigningOpeningTime\u003dfalse, facilitiesSource\u003donePerActivityLocationInPlansFile, idPrefix\u003d, inputCRS\u003dnull, inputFacilitiesFile\u003dnull, inputFacilityAttributesFile\u003dnull, oneFacilityPerLink\u003dtrue, removingLinksAndCoordinates\u003dtrue}\u003e but was:\u003c{addEmptyActivityOption\u003dfalse, assigningLinksToFacilitiesIfMissing\u003dfalse, assigningOpeningTime\u003dfalse, facilitiesSource\u003dfromFile, idPrefix\u003d, inputCRS\u003dnull, inputFacilitiesFile\u003dnull, inputFacilityAttributesFile\u003dnull, oneFacilityPerLink\u003dtrue, removingLinksAndCoordinates\u003dtrue}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.matsim.core.mobsim.qsim.qnetsimengine.LinkSpeedCalculatorIntegrationTest",
      "failingMethods": [
        "org.matsim.core.mobsim.qsim.qnetsimengine.LinkSpeedCalculatorIntegrationTest#testIntegration_Slow",
        "org.matsim.core.mobsim.qsim.qnetsimengine.LinkSpeedCalculatorIntegrationTest#testIntegration_Default",
        "org.matsim.core.mobsim.qsim.qnetsimengine.LinkSpeedCalculatorIntegrationTest#testIntegration_Fast"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "org.matsim.pt.counts.OccupancyAnalyzerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.pt.counts.OccupancyAnalyzerTest#test_SinglePersonOccupancy"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.matsim.core.mobsim.qsim.VehicleSourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.core.mobsim.qsim.VehicleSourceTest#main[1: vehicleSource \u003d\u003d modeVehicleTypesFromVehiclesData; isUsingPersonIdForMissionVehicleId \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.VehicleSourceTest#main[0: vehicleSource \u003d\u003d defaultVehicle; isUsingPersonIdForMissionVehicleId \u003d\u003d true]",
        "org.matsim.core.mobsim.qsim.VehicleSourceTest#main[2: vehicleSource \u003d\u003d fromVehiclesData; isUsingPersonIdForMissionVehicleId \u003d\u003d true]"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.matsim.core.mobsim.qsim.qnetsimengine.PassingTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.matsim.core.mobsim.qsim.qnetsimengine.PassingTest#test4PassingInFreeFlowState"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Exception while processing persons. Cannot guarantee that all persons have been fully processed.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}