{
  "totalNumberSkippingTests": 2,
  "bugType": "only_fail",
  "totalNumberErroringTests": 15,
  "repo": "matsim-org/matsim",
  "bugCommit": "https://github.com/matsim-org/matsim/compare/2e254a855dbb...62bf6245c30a",
  "failingModule": "/root/workspace/matsim-org/matsim/398913517/matsim",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 5,
  "error-types": [
    "com.google.inject.CreationException",
    "java.lang.AssertionError",
    "java.lang.RuntimeException",
    "java.lang.IllegalArgumentException"
  ],
  "totalNumberRunningTests": 1361,
  "failing-test-cases": [
    {
      "className": "org.matsim.facilities.ActivityFacilitiesSourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "facilitiesSourceTest(setInScenario, true) [2]",
        "facilitiesSourceTest(onePerActivityLocationInPlansFile, true) [4]",
        "facilitiesSourceTest(onePerActivityLocationInPlansFile, false) [5]",
        "facilitiesSourceTest(fromFile, true) [1]",
        "facilitiesSourceTest(none, true) [0]"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "assertion error; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "assertion error; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Facility with id\u003d0 already exists.",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalArgumentException",
          "failureDetail": "Facility with id\u003d0 already exists.",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "org.matsim.examples.simple.PtScoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "test_PtScoring_Wait[0]",
        "test_PtScoring_Wait[1]",
        "test_PtScoringLineswitchAndPtConstant[1]",
        "test_PtScoring[0]",
        "test_PtScoringLineswitchAndPtConstant[0]",
        "test_PtScoringLineswitch[0]",
        "test_PtScoring[1]",
        "test_PtScoringLineswitch[1]"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "org.matsim.population.algorithms.PersonPrepareForSimTest",
      "failingMethods": [
        "testRun_MultimodalNetwork",
        "testRun_MultimodalScenario"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c2\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c2\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.matsim.core.mobsim.qsim.QSimTest",
      "failingMethods": [
        "testSingleAgentWithEndOnLeg[1: isUsingfastCapacityUpdate \u003d\u003d true]",
        "testSingleAgentWithEndOnLeg[0: isUsingfastCapacityUpdate \u003d\u003d false]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "wrong number of link enter events. expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "wrong number of link enter events. expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.matsim.integration.EquilTwoAgentsTest",
      "failingMethods": [
        "testSingleIterationPlansV4"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0.0\u003e but was:\u003c-432.0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.matsim.integration.replanning.ChangeTripModeIntegrationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStrategyManagerConfigLoaderIntegration"
      ],
      "failures": [
        {
          "failureName": "com.google.inject.CreationException",
          "failureDetail": "Unable to create injector, see the following errors:\n\n1) Explicit bindings are required and org.matsim.core.controler.PrepareForMobsim is not explicitly bound.\n  while locating org.matsim.core.controler.PrepareForMobsim\n    for the 16th parameter of org.matsim.core.controler.NewControler.\u003cinit\u003e(NewControler.java:64)\n  at org.matsim.core.controler.NewControlerModule.install(NewControlerModule.java:8) (via modules: com.google.inject.util.Modules$CombinedModule -\u003e com.google.inject.util.Modules$CombinedModule -\u003e org.matsim.integration.replanning.ChangeTripModeIntegrationTest$1 -\u003e org.matsim.core.controler.NewControlerModule)\n\n2) Explicit bindings are required and org.matsim.core.controler.PrepareForSim is not explicitly bound.\n  while locating org.matsim.core.controler.PrepareForSim\n    for the 5th parameter of org.matsim.core.controler.NewControler.\u003cinit\u003e(NewControler.java:64)\n  at org.matsim.core.controler.NewControlerModule.install(NewControlerModule.java:8) (via modules: com.google.inject.util.Modules$CombinedModule -\u003e com.google.inject.util.Modules$CombinedModule -\u003e org.matsim.integration.replanning.ChangeTripModeIntegrationTest$1 -\u003e org.matsim.core.controler.NewControlerModule)\n\n2 errors",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.matsim.core.mobsim.qsim.TeleportationEngineWDistanceCheckTest",
      "failingMethods": [],
      "erroringMethods": [
        "test"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Object is null; follow stack trace",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}