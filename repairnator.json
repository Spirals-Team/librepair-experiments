{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 18,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/397241434",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 192,
  "error-types": [
    "java.lang.IndexOutOfBoundsException",
    "java.lang.UnsupportedOperationException",
    "java.lang.AssertionError",
    "java.lang.NullPointerException",
    "org.junit.ComparisonFailure",
    "spoon.compiler.ModelBuildingException"
  ],
  "totalNumberRunningTests": 1520,
  "failing-test-cases": [
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [
        "testExceptionJava7",
        "testCatchOrder"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.System.exi...\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException | Error e){System.exit(0);}}};;\n    }\n}]java.lang.System.exi...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.System.exi...\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException e){java.lang.System.exit(0);}      catch(Exception e){}}};;\n    }\n}]java.lang.System.exi...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.parent.NullParentTest",
      "failingMethods": [
        "testAssertNullExpression",
        "testReturnNullExpression",
        "testLocalVariableNullDefaultExpression",
        "testFieldNullDefaultExpression",
        "testForLoopNullChildren",
        "testIfNullBranches",
        "testTargetedAccessNullTarget",
        "testTargetedExpressionNullTarget"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cint i[]\u003e but was:\u003cint i[ \u003d 0int i]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]bar\u003e but was:\u003c[foo.bar]bar\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cint bar[];\u003e but was:\u003cint bar[ \u003d 0;int bar];\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003creturn[]\u003e but was:\u003creturn[ 0return]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cassert true[]\u003e but was:\u003cassert true[ : \"message\"assert true]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cfor(inti\u003d0;[];i++){}\u003e but was:\u003cfor(inti\u003d0;[i\u003c10;i++){}for(inti\u003d0;];i++){}\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cif(true)[];else{}\u003e but was:\u003cif(true)[{}else{}if(true)];else{}\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cfoo[]()\u003e but was:\u003cfoo[.foo()foo]()\u003e",
          "isError": false
        }
      ],
      "nbFailures": 8,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.field.FieldTest",
      "failingMethods": [
        "testFieldImplicitTarget"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]this.i\u003e but was:\u003c[i]this.i\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [
        "testNotImportExecutableType",
        "testStaticImportForInvocationInNoClasspath",
        "testImportOfAnInnerClassInASuperClassPackageAutoImport",
        "testImportOfAnInnerClassInASuperClassAvailableInLibrary",
        "testNestedAccessPathWithTypedParameterWithImports",
        "testNewInnerClassDefinesInItsClassAndSuperClass",
        "testImportOfAnInnerClassInASuperClassPackageFullQualified",
        "testNestedAccessPathWithTypedParameter",
        "testAccessType"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]spoon.test.imports.t...\u003e but was:\u003c[ChildClass.InnerClassProtected]spoon.test.imports.t...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]public class SubClas...\u003e but was:\u003c[new spoon.test.imports.testclasses.SubClass.Item(\"\")]public class SubClas...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]spoon.test.imports.t...\u003e but was:\u003c[package spoon.test.imports.testclasses.internal;\n\n\nclass SuperClass {\n    protected class InnerClassProtected {}\n\n    interface PackageProtectedInterface {\n        interface NestedOfPackageProtectedInterface {}\n\n        public interface NestedPublicInterface {}\n    }\n\n    protected interface ProtectedInterface {\n        interface NestedOfProtectedInterface {}\n\n        public interface NestedPublicInterface {}\n    }\n\n    public interface PublicInterface {\n        interface NestedOfPublicInterface {}\n\n        public interface NestedPublicInterface {}\n    }\n}\n\n]spoon.test.imports.t...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]spoon.test.imports.t...\u003e but was:\u003c[package spoon.test.imports.testclasses.internal;\n\n\nclass SuperClass {\n    protected class InnerClassProtected {}\n\n    interface PackageProtectedInterface {\n        interface NestedOfPackageProtectedInterface {}\n\n        public interface NestedPublicInterface {}\n    }\n\n    protected interface ProtectedInterface {\n        interface NestedOfProtectedInterface {}\n\n        public interface NestedPublicInterface {}\n    }\n\n    public interface PublicInterface {\n        interface NestedOfPublicInterface {}\n\n        public interface NestedPublicInterface {}\n    }\n}\n\n]spoon.test.imports.t...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cp[]rivate class Wrapped...\u003e but was:\u003cp[ackage spoon.test.imports.testclasses2;\n\n\nabstract class AbstractMapBasedMultimap\u003cK, V\u003e {\n    private class WrappedCollection {\n        class WrappedIterator {}\n    }\n\n    private class WrappedList extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap\u003cK, V\u003e.WrappedCollection {\n        private class WrappedListIterator extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap\u003cK, V\u003e.WrappedCollection.WrappedIterator {}\n    }\n\n    private class OtherWrappedList extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap\u003cK, V\u003e.WrappedCollection {\n        private class WrappedListIterator extends spoon.test.imports.testclasses2.AbstractMapBasedMultimap\u003cK, V\u003e.OtherWrappedList.WrappedIterator {}\n\n        class WrappedIterator {}\n    }\n}\n\np]rivate class Wrapped...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cp[]rivate class Wrapped...\u003e but was:\u003cp[ackage spoon.test.imports.testclasses2;\n\n\nabstract class AbstractMapBasedMultimap\u003cK, V\u003e {\n    private class WrappedCollection {\n        class WrappedIterator {}\n    }\n\n    private class WrappedList extends AbstractMapBasedMultimap\u003cK, V\u003e.WrappedCollection {\n        private class WrappedListIterator extends AbstractMapBasedMultimap\u003cK, V\u003e.WrappedCollection.WrappedIterator {}\n    }\n\n    private class OtherWrappedList extends AbstractMapBasedMultimap\u003cK, V\u003e.WrappedCollection {\n        private class WrappedListIterator extends AbstractMapBasedMultimap\u003cK, V\u003e.OtherWrappedList.WrappedIterator {}\n\n        class WrappedIterator {}\n    }\n}\n\np]rivate class Wrapped...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[java.io.File, spoon.test.imports.testclasses.internal3.Foo]\u003e but was:\u003c[spoon.test.imports.testclasses.internal3.Foojava.io.File, spoon.test.imports.testclasses.internal3.Foo]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]org.yaml.snakeyaml.r...\u003e but was:\u003c[visibility.YamlRepresenter.RepresentConfigurationSection]org.yaml.snakeyaml.r...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]pack1.A\u003e but was:\u003c[A]pack1.A\u003e",
          "isError": false
        }
      ],
      "nbFailures": 9,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.snippets.SnippetTest",
      "failingMethods": [
        "testCompileStatementWithReturn"
      ],
      "erroringMethods": [
        "testCompileSnippetSeveralTimes"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static java.lang.Object wrap() throws java.lang.Throwable {\n        return 1 \u003e 2;\n    }\n}class Wrapper {\n    static java.lang.Object wrap() throws java.lang.Throwable {\n        return 1 \u003e 2;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]return 3\u003e but was:\u003c[class Wrapper {\n    static java.lang.Integer wrap() throws java.lang.Throwable {\n        return 3;\n    }\n}]return 3\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.casts.CastTest",
      "failingMethods": [
        "testCast2",
        "testCast1",
        "testCast3"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.String x \u003d...\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { String x\u003d(String) new Object();}};;\n    }\n}]java.lang.String x \u003d...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.Class\u003cjava...\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class\u003cString\u003e x\u003d(Class\u003cString\u003e) new Object();}};;\n    }\n}]java.lang.Class\u003cjava...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]addConsumedAnnotatio...\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X\u003cA\u003e {void addConsumedAnnotationType(Class\u003c? extends A\u003e annotationType) {}\n        public void foo() { Class\u003c?\u003e x \u003d null; addConsumedAnnotationType((Class\u003cA\u003e) x);}};;\n    }\n}]addConsumedAnnotatio...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.initializers.InitializerTest",
      "failingMethods": [
        "testModelBuildingInitializer"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]x \u003d 3\u003e but was:\u003c[5]x \u003d 3\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.template.TemplateClassAccessTest",
      "failingMethods": [
        "testClassAccessTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]null.getName()\u003e but was:\u003c[java.lang.String.class.getName()]null.getName()\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [
        "testScannerGenericsInClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]? super E\u003e but was:\u003c[E extends java.lang.Comparable\u003c? super E\u003e]? super E\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [
        "testConstructorCallInNoClasspath",
        "testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics",
        "testPackageInNoClasspath",
        "testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath",
        "testTypeReferenceSpecifiedInClassDeclarationInNoClasspath",
        "testUnknownSuperClassWithSameNameInNoClasspath"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.lang.String[]\u003e but was:\u003cjava.lang.String[java.lang.String]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cA.B[]\u003cC\u003e\u003e but was:\u003cA.B[A.B\u003cC\u003eA.B\u003cC\u003eA.B\u003cC\u003eDDDA.B]\u003cC\u003e\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...o.android.omninotes.[]commons.models.Attac...\u003e but was:\u003c...o.android.omninotes.[models.Attachmentit.feio.android.omninotes.models.Attachmentandroid.os.Parcelable.Creator\u003cAttachment\u003eandroid.os.Parcelable.Creator\u003cAttachment\u003eandroid.os.Parcelable.Creator\u003cAttachment\u003eandroid.os.Parcelable.Creator\u003cAttachment\u003eit.feio.android.omninotes.models.Attachmentandroid.os.Parcelit.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.models.Attachment[]it.feio.android.omninotes.models.Attachmentit.feio.android.omninotes.]commons.models.Attac...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c... ? extends Tacos\u003c?\u003e\u003e[]\u003e but was:\u003c... ? extends Tacos\u003c?\u003e\u003e[example.FooBar\u003c?, ? extends Tacos\u003c?\u003e\u003e.Bar\u003c?, ? extends Tacos\u003c?\u003e\u003eexample.FooBar\u003c?, ? extends Tacos\u003c?\u003e\u003e.Bar\u003c?, ? extends Tacos\u003c?\u003e\u003e]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Reference to Demo is missing",
          "isError": false
        }
      ],
      "nbFailures": 6,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [
        "testTransformedInstanceofAfterATransformation"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]spoon.test.refactori...\u003e but was:\u003c[o]spoon.test.refactori...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.constructorcallnewclass.NewClassTest",
      "failingMethods": [
        "testCtNewClassInNoClasspath"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]org.apache.lucene.st...\u003e but was:\u003c[SegmentInfosorg.apache.lucene.store.RAMDirectoryorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.WithSegmentInfosorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.Withorg.apache.lucene.store.Lock.With]org.apache.lucene.st...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.strings.StringLiteralTest",
      "failingMethods": [
        "testSnippetFullClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.String f0 ...\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class StringValueUTF {\n         String f0 \u003d \"toto\";\n         String f1 \u003d \"\\n\";\n         char c1 \u003d \u0027\\n\u0027;\n         String f2 \u003d \"\\u20ac\";\n         char c2 \u003d \u0027\\u20ac\u0027;\n         String f3 \u003d \"€\";\n         char c3 \u003d \u0027€\u0027;\n         String f4 \u003d \"\\t\";\n         char c4 \u003d \u0027\\t\u0027;\n         String f5 \u003d \" \";\n         char c5 \u003d \u0027 \u0027;\n         String f6 \u003d \"€\\u20ac\";\n        };\n    }\n}]java.lang.String f0 ...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [
        "testModelBuildingAnnotationBoundUsage",
        "testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration",
        "testAnnotationWithDefaultArrayValue",
        "testUsageOfParametersInTypeAnnotation",
        "testUsageOfTypeAnnotationWithGenericTypesInStatements",
        "testFieldAndMethodInAnnotation",
        "testUsageOfTypeAnnotationInExtendsImplementsOfAClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]8\u003e but was:\u003c[10]8\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...alue() default {  };[]\u003e but was:\u003c...alue() default {  };[java.lang.Class\u003c?\u003e[] value() default {  };]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Type annotation on generic parameter declared in the method expected:\u003c[]java.util.List\u003c@spoo...\u003e but was:\u003c[@spoon.test.annotation.testclasses.TypeAnnotation\nT]java.util.List\u003c@spoo...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...va.lang.String value[]() default spoon.tes...\u003e but was:\u003c...va.lang.String value[ \u003d \"\";java.lang.String value]() default spoon.tes...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Second generic type must have type annotation expected:\u003c...sses.TypeAnnotation\n[]K\u003e but was:\u003c...sses.TypeAnnotation\n[T@spoon.test.annotation.testclasses.TypeAnnotation\n]K\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Extends with an type annotation must be well printed expected:\u003c...sses.TypeAnnotation\n[]BasicAnnotation\u003e but was:\u003c...sses.TypeAnnotation\n[AnnotArrayInnerClassspoon.test.annotation.testclasses.@spoon.test.annotation.testclasses.TypeAnnotation\n]BasicAnnotation\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "array of integers parameter in type annotation expected:\u003c...peAnnotation(integer[]s \u003d { 1 })\nT\u003e list2\u003e but was:\u003c...peAnnotation(integer[ \u003d 1)\nT\u003e listjava.util.List\u003c@spoon.test.annotation.testclasses.TypeAnnotation(integer]s \u003d { 1 })\nT\u003e list2\u003e",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [
        "testFieldAccessNameSubstitutionInInnerClass",
        "testTemplateInheritance",
        "testTemplateC1",
        "testTemplateArrayAccess",
        "testExtensionBlock",
        "testAnotherFieldAccessNameSubstitution",
        "testExpressionTemplate",
        "substituteTypeAccessReference",
        "testTemplateMatcher",
        "testFieldAccessNameSubstitution",
        "substituteSubString",
        "substituteStringLiteral"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.lang.String []p_A\u003e but was:\u003cjava.lang.String [m_A \u003d \"A is here more times: A\";java.lang.String ]p_A\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]value \u003d 7\u003e but was:\u003c[int value;]value \u003d 7\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...sses.logger.Logger.e[]nter(\"Logger\", \"ente...\u003e but was:\u003c...sses.logger.Logger.e[xit(\"enter\")spoon.test.template.testclasses.logger.Logger.e]nter(\"Logger\", \"ente...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ew java.lang.String([]\"Spoon is cool!\")\u003e but was:\u003c...ew java.lang.String([exp.S())new java.lang.String(]\"Spoon is cool!\")\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...mple\u003cjava.util.Date\u003e[]\u003e but was:\u003c...mple\u003cjava.util.Date\u003e[spoon.test.template.TypeReferenceClassAccess.Example\u003cjava.util.Date\u003e]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]l\u003e but was:\u003c[new java.util.ArrayList\u003c\u003e()]l\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]value \u003d 7\u003e but was:\u003c[int value;]value \u003d 7\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]int x\u003e but was:\u003c[super.toBeOverriden()]int x\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cint []m_x;\u003e but was:\u003cint [x;int ]m_x;\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]return \"testparam\"\u003e but was:\u003c[java.util.List\u003cjava.util.Date\u003e toBeInserted \u003d new java.util.ArrayList\u003cjava.util.Date\u003e();]return \"testparam\"\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...g.String stringField[]2 \u003d \"Substring value...\u003e but was:\u003c...g.String stringField[1 \u003d \"value1\";java.lang.String stringField]2 \u003d \"Substring value...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.String s \u003d...\u003e but was:\u003c[int i \u003d 0]java.lang.String s \u003d...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 12,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.prettyprinter.PrinterTest",
      "failingMethods": [
        "testChangeAutoImportModeWorks"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The result should now contain imports: package spoon.test.prettyprinter.testclasses;\n\n\npublic class AClass {\n    public java.util.List\u003c?\u003e aMethod() {\n        return new java.util.ArrayList\u003c\u003e();\n    }\n\n    public java.util.List\u003c? extends java.util.ArrayList\u003e aMethodWithGeneric() {\n        return new java.util.ArrayList\u003c\u003e();\n    }\n}\n\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.pkg.PackageTest",
      "failingMethods": [
        "testAddAnnotationToPackage"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c@[]GlobalAnnotation\u003e but was:\u003c@[spoon.test.annotation.testclasses.]GlobalAnnotation\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.varargs.VarArgsTest",
      "failingMethods": [
        "testModelBuildingInitializer"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.lang.String[]\u003e but was:\u003cjava.lang.String[[]java.lang.String]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceGenericTest",
      "failingMethods": [
        "testExecutableReferences"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.template.TemplateInvocationSubstitutionTest",
      "failingMethods": [
        "testInvocationSubstitutionByExpression"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...(\"abc\".substring(1))[]\u003e but was:\u003c...(\"abc\".substring(1))[java.lang.System.out.println(\"abc\".substring(1))]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.targeted.TargetedExpressionTest",
      "failingMethods": [
        "testCtThisAccess",
        "testTargetsOfInv",
        "testTargetsOfFieldAccess",
        "testNotTargetedExpression",
        "testTargetsOfFieldInAnonymousClass",
        "testStaticTargetsOfInv",
        "testTargetsOfStaticFieldAccess",
        "testCtSuperAccess",
        "testTargetsOfFieldAccessInInnerClass",
        "testClassDeclaredInALambda",
        "testStaticTargetsOfInvNoClasspath",
        "testStaticTargetsOfFieldAccessNoClasspath",
        "testTargetsOfInvInInnerClass",
        "testTargetsOfInvInAnonymousClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]foo.staticMethod()\u003e but was:\u003c[new spoon.test.targeted.testclasses.Foo(0, 0).staticMethod()]foo.staticMethod()\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]i\u003e but was:\u003c[this.i]i\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]foo.i\u003e but was:\u003c[new Foo().i]foo.i\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cthis.[]b \u003d b\u003e but was:\u003cthis.[method()this.]b \u003d b\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]return super.toStrin...\u003e but was:\u003c[spoon.test.targeted.testclasses.InternalSuperCall.super.toString()]return super.toStrin...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]i\u003e but was:\u003c[this.i]i\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]spoon.test.targeted....\u003e but was:\u003c[this.k]spoon.test.targeted....\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cthis.index[]\u003e but was:\u003cthis.index[this.index]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]i\u003e but was:\u003c[this.i]i\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cthis.i[]\u003e but was:\u003cthis.i[this.i]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]foo.method()\u003e but was:\u003c[new spoon.test.targeted.testclasses.Foo(0, 0).method()]foo.method()\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]this.inv()\u003e but was:\u003c[inv()]this.inv()\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cthis.invStatic()[]\u003e but was:\u003cthis.invStatic()[this.invStatic()]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]foo.staticMethod()\u003e but was:\u003c[new Foo(0, 0).staticMethod()]foo.staticMethod()\u003e",
          "isError": false
        }
      ],
      "nbFailures": 14,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [
        "testWithImportFromItf",
        "testWithStaticInheritedImport"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003cALL_STATIC_MEMBERS\u003e but was:\u003cTYPE\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c1\u003e but was:\u003c2\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.methodreference.MethodReferenceTest",
      "failingMethods": [
        "testReferenceToAStaticMethod"
      ],
      "erroringMethods": [
        "testReferenceToAJavaUtilClassConstructor",
        "testReferenceToAnInstanceMethodOfMultiParticularObject",
        "testReferenceToAClassParametrizedConstructor",
        "testReferenceToAConstructor",
        "testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType",
        "testReferenceToAnInstanceMethodOfAParticularObject"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Target reference correspond to the enclosing class. expected:\u003c...stclasses.Foo.Person[]\u003e but was:\u003c...stclasses.Foo.Person[::compareByAgetarzan.phone::compareByNumbersmyComparisonProvider::compareByNamejava.lang.String::compareToIgnoreCasejava.util.HashSet\u003cspoon.test.methodreference.testclasses.Foo.Person\u003e::newspoon.test.methodreference.testclasses.Foo.Person::newspoon.test.methodreference.testclasses.Foo.Type\u003cjava.lang.String\u003e::newspoon.test.methodreference.testclasses.Foo.Person]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [
        "testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "testCloneAnonymousClassInvocationWithAutoimports",
        "testCloneAnonymousClassInvocation"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...   return 0;\n    }\n}[]\u003e but was:\u003c...   return 0;\n    }\n}[new Comparator\u003cInteger\u003e() {\n    @Override\n    public int compare(Integer o1, Integer o2) {\n        return 0;\n    }\n}]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...   return 0;\n    }\n}[]\u003e but was:\u003c...   return 0;\n    }\n}[new java.util.Comparator\u003cjava.lang.Integer\u003e() {\n    @java.lang.Override\n    public int compare(java.lang.Integer o1, java.lang.Integer o2) {\n        return 0;\n    }\n}]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]final java.lang.Clas...\u003e but was:\u003c[public Cook() {\n}]final java.lang.Clas...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [
        "testClassAccessCreatedFromFactories"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...estclasses.Foo.class[]\u003e but was:\u003c...estclasses.Foo.class[spoon.test.factory.testclasses.Foo.class]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.filters.FilterTest",
      "failingMethods": [
        "testFilters",
        "testOverridingMethodFromAbstractClass"
      ],
      "erroringMethods": [
        "testOverridingMethodFromInterface"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c2\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ilters.testclasses.A[bstractTostada$1]\u003e but was:\u003c...ilters.testclasses.A[ntojito]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.control.ControlTest",
      "failingMethods": [
        "testModelBuildingFor"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003ci[] \u003c 2\u003e but was:\u003ci[nt i \u003d 0i] \u003c 2\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [
        "testCharLiteralInNoClasspath"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c:\u003e but was:\u003c,\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.support.compiler.jdt.JDTBatchCompilerTest",
      "failingMethods": [
        "testCompileGeneratedJavaFile"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.constructorcallnewclass.ConstructorCallTest",
      "failingMethods": [
        "testCoreConstructorCall",
        "testConstructorCallStringWithoutParameters",
        "testConstructorCallStringWithParameters",
        "testConstructorCallWithGenericArray",
        "testConstructorCallObjectWithoutParameters"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cnew []Bar()\u003e but was:\u003cnew [Foo()new ]Bar()\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Constructor call is typed by the class of the constructor expected:\u003cclass java.lang.String\u003e but was:\u003cinterface spoon.test.constructorcallnewclass.testclasses.Foo$Bar\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]\u003e but was:\u003c[new java.lang.String()new java.lang.String()new java.lang.String(\"\")new java.lang.String()new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.String()new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.String(\"\")new spoon.test.constructorcallnewclass.testclasses.Foo(42)new java.lang.String(\"\")new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.Object() {}new java.lang.String(\"\")new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo()new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new java.lang.String(\"\")new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos\u003cjava.lang.String\u003e() {}new java.lang.String(\"\")new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos\u003cjava.lang.String\u003e() {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos\u003cjava.lang.String\u003e() {}new java.lang.Object() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos\u003cjava.lang.String\u003e() {}new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new java.lang.String(\"\")new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo(42)new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo.Bar() {}new spoon.test.constructorcallnewclass.testclasses.Foo.BarImpl(1) {}new spoon.test.constructorcallnewclass.testclasses.Foo.Tacos\u003cjava.lang.String\u003e() {}]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Constructor call is typed by the class of the constructor expected:\u003cclass java.lang.String\u003e but was:\u003cinterface spoon.test.constructorcallnewclass.testclasses.Foo$Tacos\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Constructor call is typed by the class of the constructor expected:\u003cclass spoon.test.constructorcallnewclass.testclasses.Foo\u003e but was:\u003cclass java.lang.Object\u003e",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.comparison.EqualTest",
      "failingMethods": [
        "testEqualsEmptyException"
      ],
      "erroringMethods": [
        "testEqualsActualTypeRef"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        java.util.List\u003cString\u003e l ;\n    }\n}class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        java.util.List\u003cObject\u003e l ;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c\"\"[]\u003e but was:\u003c\"\"[\"\"]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.NoClasspathTest",
      "failingMethods": [
        "test"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cx.[]first().second().thi...\u003e but was:\u003cx.[method()x.]first().second().thi...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.ctType.CtTypeParameterTest",
      "failingMethods": [
        "testTypeErasure"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "TypeErasure of executable param spoon.test.ctType.testclasses.ErasureModelA#\u003cJ\u003e expected:\u003cjava.lang.[]Exception\u003e but was:\u003cjava.lang.[Objectjava.lang.]Exception\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.signature.SignatureTest",
      "failingMethods": [
        "testNullSignature",
        "testUnboundFieldSignature",
        "testMethodInvocationSignatureWithVariableAccess"
      ],
      "erroringMethods": [
        "testLiteralSignature",
        "testMethodInvocationSignatureStaticFieldsVariables"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        Integer.toBinaryString(Integer.MAX_VALUE);\n    }\n}class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        Integer.toBinaryString(Integer.MIN_VALUE);\n    }\n}",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cthis.mfield[] \u003d p\u003e but was:\u003cthis.mfield[this.mfield] \u003d p\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        System.out.println(\"hello\");\n    }\n}class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        String hello \u003d\"t1\"; System.out.println(hello);\n    }\n}",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cfoo([int])\u003e but was:\u003cfoo([java.lang.String])\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]null\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public Object foo() { return null;}};;\n    }\n}]null\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [
        "testRoleOnField"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.arrays.ArraysTest",
      "failingMethods": [
        "testInitializeWithNewArray",
        "testParameterizedVarargReference",
        "testParameterizedArrayReference",
        "testParameterizedArrayVarargReference"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]new java.lang.String...\u003e but was:\u003c[com.example.Bar.Inner\u003cType\u003ecom.example.Bar.Inner\u003cType\u003ecom.example.Bar.Inner\u003cType\u003ecom.example.Bar.Inner\u003cType\u003ejava.lang.OverrideList\u003cType\u003ecom.example.Typecom.example.Typecom.example.Type[]com.example.Type]new java.lang.String...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.util.List\u003c?\u003e[][]\u003e but was:\u003cjava.util.List\u003c?\u003e[][[]java.util.List\u003c?\u003e[]]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.util.List\u003c?\u003e[]\u003e but was:\u003cjava.util.List\u003c?\u003e[[]java.util.List\u003c?\u003e]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.util.List\u003c?\u003e[]\u003e but was:\u003cjava.util.List\u003c?\u003e[[]java.util.List\u003c?\u003e]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.intercession.insertBefore.InsertMethodsTest",
      "failingMethods": [
        "testInsertBefore",
        "testInsertAfter"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]int z \u003d x + y\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}]int z \u003d x + y\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]int z \u003d x + y\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}]int z \u003d x + y\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [
        "testTypeParameterReferenceAsActualTypeArgument",
        "testGenericMethodCallWithExtend",
        "testNewClassGenerics",
        "testGenericsInQualifiedNameInConstructorCall",
        "testConstructorCallGenerics",
        "testIsGenericTypeEqual",
        "testModelBuildingTree",
        "testInvocationGenerics",
        "testMethodsWithGenericsWhoExtendsObject",
        "testGenericsInConstructorCall",
        "testCtTypeReference_getSuperclass",
        "testGenericWithExtendsInDeclaration",
        "testDiamond1",
        "testBugCommonCollection",
        "testRecursiveTypeAdapting"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.util.List[] l2\u003e but was:\u003cjava.util.List[\u003cjava.lang.String\u003e l \u003d new java.util.ArrayList\u003c\u003e()java.util.List] l2\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...List\u003cjava.util.List\u003c[]P\u003e\u003e\u003e but was:\u003c...List\u003cjava.util.List\u003c[M\u003e\u003ejava.util.List\u003cjava.util.List\u003c]P\u003e\u003e\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...s.ACLass\u003c?\u003e INSTANCE[]2 \u003d new spoon.test.g...\u003e but was:\u003c...s.ACLass\u003c?\u003e INSTANCE[ \u003d new spoon.test.generics.ACLass();public static final spoon.test.generics.ACLass\u003c?\u003e INSTANCE]2 \u003d new spoon.test.g...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c? []extends java.lang.Lo...\u003e but was:\u003c? [super java.lang.Object? ]extends java.lang.Lo...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cnew []Burritos\u003cK, V\u003e()\u003e but was:\u003cnew [Pozole()new ]Burritos\u003cK, V\u003e()\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...java.lang.Void\u003e() {}[]\u003e but was:\u003c...java.lang.Void\u003e() {}[new javax.lang.model.util.SimpleTypeVisitor7\u003cspoon.test.generics.testclasses.Tacos, java.lang.Void\u003e() {}]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inesANewTypeArgument[]\u003cT\u003e\u003e but was:\u003c...inesANewTypeArgument[spoon.test.generics.ClassThatDefinesANewTypeArgument]\u003cT\u003e\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.lang.[]String\u003e but was:\u003cjava.lang.[Integerjava.lang.]String\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class Diamond {\n         java.util.List\u003cString\u003e f \u003d new java.util.ArrayList\u003c\u003e();\n        };\n    }\n}]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]this.\u003cjava.lang.Stri...\u003e but was:\u003c[\u003cjava.lang.String\u003ethis(1)]this.\u003cjava.lang.Stri...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...tclasses2.AnType\u003cT\u003e\u003e[]\u003e but was:\u003c...tclasses2.AnType\u003cT\u003e\u003e[java.util.Set\u003cspoon.test.generics.testclasses2.AnType\u003cT\u003e\u003e]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....Serializable, java.[]lang.Comparable\u003cV\u003e]\u003e but was:\u003c....Serializable, java.[io.Serializablejava.]lang.Comparable\u003cV\u003e]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...s.testclasses.Tacos.[]makeTacos()\u003e but was:\u003c...s.testclasses.Tacos.[\u003cV, C\u003emakeTacos()spoon.test.generics.testclasses.Tacos.]makeTacos()\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]A extends java.lang....\u003e but was:\u003c[E extends java.lang.Enum\u003cE\u003e]A extends java.lang....\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...es.CelebrationLunch\u003c[]spoon.test.generics....\u003e but was:\u003c...es.CelebrationLunch\u003c[java.lang.Integer, java.lang.Long, java.lang.Double\u003e.WeddingLunch\u003cspoon.test.generics.testclasses.Mole\u003espoon.test.generics.testclasses.CelebrationLunch\u003c]spoon.test.generics....\u003e",
          "isError": false
        }
      ],
      "nbFailures": 15,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.model.TypeTest",
      "failingMethods": [
        "testGetUsedTypesForTypeInRootPackage",
        "testGetUsedTypes"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c0\u003e but was:\u003c1\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c3\u003e but was:\u003c4\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.prettyprinter.QualifiedThisRefTest",
      "failingMethods": [
        "testCloneThisAccess"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cnotify()[]\u003e but was:\u003cnotify()[notify()]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.processing.ProcessingTest",
      "failingMethods": [
        "testInsertEnd",
        "testInsertBegin"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "insert failed for method method2 expected:\u003cint i \u003d 0;[]\u003e but was:\u003cint i \u003d 0;[int i \u003d 0;]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "insert failed for method method2 expected:\u003cint i \u003d 0[]\u003e but was:\u003cint i \u003d 0[int i \u003d 0]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.method.MethodTest",
      "failingMethods": [
        "testSearchMethodWithGeneric"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...T extends java.lang.[]String\u003e void method1...\u003e but was:\u003c...T extends java.lang.[Integer\u003e void method1(T t) {\n}public \u003cT extends java.lang.]String\u003e void method1...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.variable.AccessTest",
      "failingMethods": [
        "testAccessToStringOnPostIncrement",
        "testVariableAccessInNoClasspath"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.Class mcla...\u003e but was:\u003c[org.argouml.uml.ui.PropPanelModifiersorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseExtensionPointListModelorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseExtendListModelorg.argouml.uml.ui.behavior.use_cases.UMLUseCaseIncludeListModel]java.lang.Class mcla...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[](i++).toString()\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Integer i \u003d 1; (i++).toString(); int k \u003d 0; k++;}};;\n    }\n}](i++).toString()\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.constructor.ConstructorTest",
      "failingMethods": [
        "testConstructorCallFactory"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...java.util.ArrayList([]new java.util.ArrayL...\u003e but was:\u003c...java.util.ArrayList([)new java.util.ArrayList(]new java.util.ArrayL...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [
        "testPrintAMethodWithGeneric",
        "autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent",
        "testPrintAMethodWithImports",
        "testPrintAClassWithImports"
      ],
      "erroringMethods": [
        "testTernaryParenthesesOnLocalVariable",
        "importsFromMultipleTypesSupported"
      ],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...\n        return new [ArrayList\u003c\u003e();\n    }\n\n    public List\u003c? extends ArrayList\u003e aMethodWithGeneric() {\n        return new ]ArrayList\u003c\u003e();\n    }...\u003e but was:\u003c...\n        return new [java.util.ArrayList\u003c\u003e();\n    }\n\n    public List\u003c? extends ArrayList\u003e aMethodWithGeneric() {\n        return new java.util.]ArrayList\u003c\u003e();\n    }...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...() {\n    return new []ArrayList\u003c\u003e();\n}\u003e but was:\u003c...() {\n    return new [java.util.]ArrayList\u003c\u003e();\n}\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        final int foo \u003d (new Object() instanceof Object ? new Object().equals(null) : new Object().equals(new Object())) ? 0 : new Object().hashCode();;\n    }\n}final int foo \u003d ((new java.lang.Object()) instanceof java.lang.Object ? new java.lang.Object().equals(null) : new java.lang.Object().equals(new java.lang.Object())) ? 0 : new java.lang.Object().hashCode()class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class Wrapper {\n            static void wrap() throws java.lang.Throwable {\n                final int foo \u003d (new Object() instanceof Object ? new Object().equals(null) : new Object().equals(new Object())) ? 0 : new Object().hashCode();;\n            }\n        }final int foo \u003d ((new java.lang.Object()) instanceof java.lang.Object ? new java.lang.Object().equals(null) : new java.lang.Object().equals(new java.lang.Object())) ? 0 : new java.lang.Object().hashCode();\n    }\n}",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...() {\n    return new []ArrayList\u003c\u003e();\n}\u003e but was:\u003c...() {\n    return new [java.util.]ArrayList\u003c\u003e();\n}\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "We use FQN for E1 expected:\u003c... {\n    localField \u003d [spoon.test.prettyprinter.testclasses.sub.TypeIdentifierCollision.ENUM.]E1.ordinal();\n}\u003e but was:\u003c... {\n    localField \u003d []E1.ordinal();\n}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [
        "testJavaDocCommentOnUnix",
        "testAddCommentsToSnippet",
        "testInsertNewComment",
        "testJavaDocCommentOnMac",
        "testCoreFactory",
        "testBlockComment",
        "testCodeFactory",
        "testInLineComment"
      ],
      "erroringMethods": [
        "testDocumentationContract"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c-1\u003e but was:\u003c56\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c// My comment on my []expression\n\"Caenorha...\u003e but was:\u003c// My comment on my [statement\nSystem.out.println(\"Caenorhabditis\")// My comment on my ]expression\n\"Caenorha...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c-1\u003e but was:\u003c56\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...() {\n    // comment []local variable\n    i...\u003e but was:\u003c...() {\n    // comment [empty block\n}// comment method\nvoid newMethod() {\n    // comment ]local variable\n    i...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "// comment class\n// this comment 1 belongs to class too\n// this comment 2 belongs to class too\n// comment after class\npublic class InlineComment extends java.util.ArrayList\u003cjava.lang.String\u003e {\n    // Comment Field\n    // comment field 2\n    // comment in field\n    private int field \u003d 10;// after field\n\n\n    // comment static block\n    static {\n        // comment inside static\n    }\n\n    // comment constructor\n    public InlineComment() {\n        // Comment in constructor\n    }\n\n    // comment method\n    public void m() {\n        // comment empty method block\n    }\n\n    public void m1() {\n        // comment switch\n        switch (1) {\n            // before first case\n            case 0 :\n                // comment case 0: empty case\n            case 1 :\n                // comment case 1\n                int i \u003d 0;\n            default :\n                // comment default\n        }\n        // comment for\n        for (int i \u003d 0; i \u003c 10; i++) {\n            // comment for block\n        }\n        // comment if\n        if ((1 % 2) \u003d\u003d 0) {\n            // comment unary operator\n            (field)++;\n        }\n        // comment constructor call\n        new spoon.test.comment.testclasses.InlineComment();\n        // comment invocation\n        this.m();\n        // comment local variable\n        int i \u003d 0;\n        // comment multi assignments\n        int j \u003d 2;\n        // comment dowhile\n        do {\n            // comment in do while\n            i++;\n            // comment end do while\n        } while (i \u003c 10 );\n        // comment try\n        try {\n            // comment in try\n            i++;\n        }// between\n        // try/catch\n         catch (java.lang.Exception e) {\n            // comment in catch\n        }\n        // comment synchronized\n        synchronized(this) {\n            // comment in synchronized\n        }\n        java.lang.Double dou \u003d (i \u003d\u003d 1// comment after condition CtConditional\n        ) ? // comment before then CtConditional\n        null// comment after then CtConditional\n         : // comment before else CtConditional\n        new java.lang.Double((j / ((double) (i - 1))));// comment after else CtConditional\n\n        int[] arr \u003d // last comment at the end of array\n        new int[]{ // comment before array value\n        1// comment after array value\n        , 2, 3 }// last comment at the end of array\n        ;\n        java.lang.String m \u003d \"\" + (\"\"// comment multi line string\n         + \"\");// after statement\n\n        boolean c \u003d (i \u003d\u003d 1) ? // comment before then boolean CtConditional\n        i \u003d\u003d 1// comment after then boolean CtConditional\n         : i \u003d\u003d 2;\n        // comment return\n        return;\n    }\n\n    // comment before type\n    // comment after parameter\n    // comment before throws\n    // comment before exception 1\n    // comment before exception 2\n    // comment before block\n    public void m2(// comment before name\n    // comment before parameters\n    // comment before type parameter\n    // comment before name parameter\n    int i) throws java.lang.Error, java.lang.Exception {\n    }\n\n    public void m3() {\n        if (true) {\n            // comment empty if\n        }else // comment before else\n        {\n            // comment empty else\n        }\n        // comment if without block\n        // comment then if without block\n        if (true)\n            m3();\n        else// comment else without block\n        // comment else if without block\n\n            m3();\n\n    }\n}// Comment Field:// comment class\n// this comment 1 belongs to class too\n// this comment 2 belongs to class too\n// comment after class\npublic class InlineComment extends java.util.ArrayList\u003cjava.lang.String\u003e {\n    // Comment Field\n    // comment field 2\n    // comment in field\n    private int field \u003d 10;// after field\n\n\n    // comment static block\n    static {\n        // comment inside static\n    }\n\n    // comment constructor\n    public InlineComment() {\n        // Comment in constructor\n    }\n\n    // comment method\n    public void m() {\n        // comment empty method block\n    }\n\n    public void m1() {\n        // comment switch\n        switch (1) {\n            // before first case\n            case 0 :\n                // comment case 0: empty case\n            case 1 :\n                // comment case 1\n                int i \u003d 0;\n            default :\n                // comment default\n        }\n        // comment for\n        for (int i \u003d 0; i \u003c 10; i++) {\n            // comment for block\n        }\n        // comment if\n        if ((1 % 2) \u003d\u003d 0) {\n            // comment unary operator\n            (field)++;\n        }\n        // comment constructor call\n        new spoon.test.comment.testclasses.InlineComment();\n        // comment invocation\n        this.m();\n        // comment local variable\n        int i \u003d 0;\n        // comment multi assignments\n        int j \u003d 2;\n        // comment dowhile\n        do {\n            // comment in do while\n            i++;\n            // comment end do while\n        } while (i \u003c 10 );\n        // comment try\n        try {\n            // comment in try\n            i++;\n        }// between\n        // try/catch\n         catch (java.lang.Exception e) {\n            // comment in catch\n        }\n        // comment synchronized\n        synchronized(this) {\n            // comment in synchronized\n        }\n        java.lang.Double dou \u003d (i \u003d\u003d 1// comment after condition CtConditional\n        ) ? // comment before then CtConditional\n        null// comment after then CtConditional\n         : // comment before else CtConditional\n        new java.lang.Double((j / ((double) (i - 1))));// comment after else CtConditional\n\n        int[] arr \u003d // last comment at the end of array\n        new int[]{ // comment before array value\n        1// comment after array value\n        , 2, 3 }// last comment at the end of array\n        ;\n        java.lang.String m \u003d \"\" + (\"\"// comment multi line string\n         + \"\");// after statement\n\n        boolean c \u003d (i \u003d\u003d 1) ? // comment before then boolean CtConditional\n        i \u003d\u003d 1// comment after then boolean CtConditional\n         : i \u003d\u003d 2;\n        // comment return\n        return;\n    }\n\n    // comment before type\n    // comment after parameter\n    // comment before throws\n    // comment before exception 1\n    // comment before exception 2\n    // comment before block\n    public void m2(// comment before name\n    // comment before parameters\n    // comment before type parameter\n    // comment before name parameter\n    int i) throws java.lang.Error, java.lang.Exception {\n    }\n\n    public void m3() {\n        if (true) {\n            // comment empty if\n        }else // comment before else\n        {\n            // comment empty else\n        }\n        // comment if without block\n        // comment then if without block\n        if (true)\n            m3();\n        else// comment else without block\n        // comment else if without block\n\n            m3();\n\n    }\n}// Comment Field// Comment Field\n// comment field 2\n// comment in field\nprivate int field \u003d 10;// after field\n is not printed",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "/* comment class */\n/**\n * JavaDoc class\n */\n/* comment after class */\npublic class BlockComment {\n    /* Comment Field */\n    /* comment in field */\n    private int field \u003d 10;\n\n    /* comment static block */\n    static {\n        /* comment inside static */\n    }\n\n    /* comment constructor */\n    public BlockComment() {\n        /* Comment in constructor */\n    }\n\n    /* comment method */\n    public void m() {\n        /* comment empty method block */\n    }\n\n    public void m1() {\n        /* comment switch */\n        switch (1) {\n            /* before first case */\n            case 0 :\n                /* comment case 0: empty case */\n            case 1 :\n                /* comment case 1 */\n                int i \u003d 0;\n            default :\n                /* comment default */\n        }\n        /* comment for */\n        for (int i \u003d 0; i \u003c 10; i++) {\n            /* comment for block */\n        }\n        /* comment if */\n        if ((1 % 2) \u003d\u003d 0) {\n            /* comment unary operator */\n            (field)++;\n        }\n        /* comment constructor call */\n        new spoon.test.comment.testclasses.BlockComment();\n        /* comment invocation */\n        this.m();\n        /* comment local variable */\n        int i \u003d 0;\n        /* comment multi assignments */\n        int j \u003d 2;\n        /* comment dowhile */\n        do {\n            /* comment in do while */\n            i++;\n            /* comment end do while */\n        } while (i \u003c 10 );\n        /* comment try */\n        try {\n            /* comment in try */\n            i++;\n        } catch (java.lang.Exception e) {\n            /* comment in catch */\n        }\n        /* comment synchronized */\n        synchronized(this) {\n            /* comment in synchronized */\n        }\n        /* comment return */\n        return;\n    }\n\n    /* comment before type */\n    /* comment after parameter */\n    /* comment before throws */\n    /* comment before exception 1 */\n    /* comment before exception 2 */\n    /* comment before block */\n    public void m2(/* comment before name */\n    /* comment before parameters */\n    /* comment before type parameter */\n    /* comment before name parameter */\n    int i) throws java.lang.Error, java.lang.Exception {\n    }\n\n    public void m3() {\n        if (true) {\n            /* comment empty if */\n        }else /* comment before else */\n        {\n            /* comment empty else */\n        }\n        /* comment if without block */\n        /* comment then if without block */\n        if (true)\n            m3();\n        else/* comment else without block */\n        /* comment else if without block */\n\n            m3();\n\n    }\n}/* Comment Field */:/* comment class */\n/**\n * JavaDoc class\n */\n/* comment after class */\npublic class BlockComment {\n    /* Comment Field */\n    /* comment in field */\n    private int field \u003d 10;\n\n    /* comment static block */\n    static {\n        /* comment inside static */\n    }\n\n    /* comment constructor */\n    public BlockComment() {\n        /* Comment in constructor */\n    }\n\n    /* comment method */\n    public void m() {\n        /* comment empty method block */\n    }\n\n    public void m1() {\n        /* comment switch */\n        switch (1) {\n            /* before first case */\n            case 0 :\n                /* comment case 0: empty case */\n            case 1 :\n                /* comment case 1 */\n                int i \u003d 0;\n            default :\n                /* comment default */\n        }\n        /* comment for */\n        for (int i \u003d 0; i \u003c 10; i++) {\n            /* comment for block */\n        }\n        /* comment if */\n        if ((1 % 2) \u003d\u003d 0) {\n            /* comment unary operator */\n            (field)++;\n        }\n        /* comment constructor call */\n        new spoon.test.comment.testclasses.BlockComment();\n        /* comment invocation */\n        this.m();\n        /* comment local variable */\n        int i \u003d 0;\n        /* comment multi assignments */\n        int j \u003d 2;\n        /* comment dowhile */\n        do {\n            /* comment in do while */\n            i++;\n            /* comment end do while */\n        } while (i \u003c 10 );\n        /* comment try */\n        try {\n            /* comment in try */\n            i++;\n        } catch (java.lang.Exception e) {\n            /* comment in catch */\n        }\n        /* comment synchronized */\n        synchronized(this) {\n            /* comment in synchronized */\n        }\n        /* comment return */\n        return;\n    }\n\n    /* comment before type */\n    /* comment after parameter */\n    /* comment before throws */\n    /* comment before exception 1 */\n    /* comment before exception 2 */\n    /* comment before block */\n    public void m2(/* comment before name */\n    /* comment before parameters */\n    /* comment before type parameter */\n    /* comment before name parameter */\n    int i) throws java.lang.Error, java.lang.Exception {\n    }\n\n    public void m3() {\n        if (true) {\n            /* comment empty if */\n        }else /* comment before else */\n        {\n            /* comment empty else */\n        }\n        /* comment if without block */\n        /* comment then if without block */\n        if (true)\n            m3();\n        else/* comment else without block */\n        /* comment else if without block */\n\n            m3();\n\n    }\n}/* Comment Field *//* Comment Field */\n/* comment in field */\nprivate int field \u003d 10; is not printed",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c// comment[]\u003e but was:\u003c// comment[// comment]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c/* []comment */\u003e but was:\u003c/* [ *//* ]comment */\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n\n            int[] array \u003d new int[10];\n            System.out.println(\n            array[0] // \u003c-- array read\n            );\n        ;\n    }\n}class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n\n            Object[] array \u003d new Object[10];\n            // array write\n            array[0] \u003d \"new value\";\n        ;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 8,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [
        "testImportOnSpoon"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Import scanner missed 5 imports expected:\u003c0\u003e but was:\u003c5\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.visibility.VisibilityTest",
      "failingMethods": [
        "testFullyQualifiedNameOfTypeReferenceWithGeneric",
        "testInvocationVisibilityInFieldDeclaration"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]spoon.test.visibilit...\u003e but was:\u003c[(spoon.test.visibility.testclasses.A.B.i)]spoon.test.visibilit...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]bound()\u003e but was:\u003c[Vec\u003cConstr\u003eVec\u003cConstr\u003eorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ActivityComparatororg.sat4j.minisat.core.SolverStatsorg.sat4j.core.VecIntorg.sat4j.minisat.core.VoidTracingorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.minisat.core.ISimplifierorg.sat4j.core.VecIntorg.sat4j.core.VecIntVec\u003cPropagatable\u003eorg.sat4j.minisat.core.Pairorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.SearchParamsorg.sat4j.core.VecIntorg.sat4j.core.ConstrGrouporg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.minisat.core.LearnedConstraintsDeletionStrategyorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.minisat.core.LearnedConstraintsDeletionStrategyorg.sat4j.minisat.core.ConflictTimerContainerorg.sat4j.minisat.core.ConflictTimerAdapterorg.sat4j.specs.TimeoutExceptionorg.sat4j.specs.TimeoutExceptionorg.sat4j.minisat.core.Counterorg.sat4j.minisat.core.Counterorg.sat4j.minisat.core.Counterorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecIntorg.sat4j.core.VecInt]bound()\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.ctType.CtTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testHasMethodNotHasMethod"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class Y { public void foo2() {} };\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.replace.ReplaceTest",
      "failingMethods": [
        "testReplaceAPackageReferenceByAnotherOne",
        "testReplaceExecutableReferenceByAnotherOne",
        "testReplaceAParameterReferenceToFieldReference",
        "testReplaceBlock"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003ccom.awesome[].Burritos\u003e but was:\u003ccom.awesome[com.awesome].Burritos\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.io.PrintStream\u003e but was:\u003c[print(java.lang.String)]java.io.PrintStream\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....System.err.println([]field)\u003e but was:\u003c....System.err.println([param)java.lang.System.err.println(]field)\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]x + 1\u003e but was:\u003c[z \u003d x + 1]x + 1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.type.TypeTest",
      "failingMethods": [
        "testTypeAccessForTypeAccessInInstanceOf",
        "testIntersectionTypeReferenceInGenericsAndCasts",
        "testTypeAccessOfArrayObjectInFullyQualifiedName",
        "testTypeReferenceInGenericsAndCasts"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003ca instanceof java.[]util.Collection\u003c?\u003e\u003e but was:\u003ca instanceof java.[lang.Stringa instanceof java.]util.Collection\u003c?\u003e\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cjava.lang.Runnable[]\u003e but was:\u003cjava.lang.Runnable[java.lang.Runnable]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...java.io.Serializable[]\u003e but was:\u003c...java.io.Serializable[java.lang.Runnable \u0026 java.io.Serializable]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...nstanceof java.lang.[]Object[]\u003e but was:\u003c...nstanceof java.lang.[@spoon.test.annotation.testclasses.TypeAnnotation(integer \u003d 1)\nObject[]a instanceof java.lang.]Object[]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.serializable.SerializableTest",
      "failingMethods": [
        "testSerialCtStatement"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...m.out.println(hello)[]\u003e but was:\u003c...m.out.println(hello)[java.lang.System.out.println(hello)]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.eval.EvalTest",
      "failingMethods": [
        "testVisitorPartialEvaluator_if",
        "testVisitorPartialEvaluator_binary",
        "testDoNotSimplifyToExpressionWhenStatementIsExpected"
      ],
      "erroringMethods": [
        "testDoNotSimplifyCasts",
        "testVisitorPartialEvaluatorScanner"
      ],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]1\u003e but was:\u003c[class Wrapper {\n    static java.lang.Object wrap() throws java.lang.Throwable {\n        return 0+1;\n    }\n}]1\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]{\n    java.lang.Syst...\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        if (false) {System.out.println(\"foo\");} else {System.out.println(\"bar\");} ;\n    }\n}]{\n    java.lang.Syst...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.System.out...\u003e but was:\u003c[spoon.test.eval.ToEvaluate.class.getName()]java.lang.System.out...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "PartialSourcePosition only contains a CompilationUnit",
          "isError": true
        },
        {
          "failureName": "java.lang.UnsupportedOperationException",
          "failureDetail": "PartialSourcePosition only contains a CompilationUnit",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [
        "testEqualConstructor",
        "testInsertIfIntercession",
        "testInsertAfter"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]if (1 \u003d\u003d 0)\n    retu...\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public int bar() {if (1 \u003d\u003d 0)\n            return 1;\n        else\n            return 0;\n        }};;\n    }\n}]if (1 \u003d\u003d 0)\n    retu...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]int z \u003d x + y\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0; int y\u003d0; int z\u003dx+y;}};;\n    }\n}]int z \u003d x + y\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]super()\u003e but was:\u003c[class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public X() {} };;\n    }\n}]super()\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceTest",
      "failingMethods": [
        "testCallMethodOfClassNotPresent"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]m()\u003e but was:\u003c[BarBarBar]m()\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.parameters.ParameterTest",
      "failingMethods": [
        "testParameterInNoClasspath"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...se.swt.graphics.Font[] font\u003e but was:\u003c...se.swt.graphics.Font[org.eclipse.swt.graphics.Font] font\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.fieldaccesses.FieldAccessTest",
      "failingMethods": [
        "testFieldAccessInAnonymousClass",
        "testBCUBug20140402",
        "testFieldAccessDeclaredInADefaultClass",
        "testFieldAccessNoClasspath",
        "testGetReference",
        "testFieldWriteWithPlusEqualsOperation",
        "testIncrementationOnAVarIsAUnaryOperator"
      ],
      "erroringMethods": [
        "testFieldAccessAutoExplicit"
      ],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[](game.board.width)\u003e but was:\u003c[Gamefr.inria.internal.Abcd](game.board.width)\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: ageclass Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        int age \u003d 1;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...sses.internal.Foo.i)[]\u003e but was:\u003c...sses.internal.Foo.i)[inv(spoon.test.fieldaccesses.testclasses.internal.Foo.i)]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003ci[]\u003e but was:\u003ci[ +\u003d 0i]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]finalField\u003e but was:\u003c[A.myField]finalField\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]++(i)\u003e but was:\u003c[(i)++]++(i)\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cingredient[].next\u003e but was:\u003cingredient[ingredient].next\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]data\u003e but was:\u003c[length]data\u003e",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.PatternTest",
      "failingMethods": [
        "testMatchForeachWithOuterSubstitution",
        "testMatchOfMapAttribute",
        "testPatternToString",
        "testMatchParameterValue",
        "testMatchOfAttribute",
        "testPatternMatchOfMultipleElements",
        "testMatchParameterValueType",
        "testExtensionDecoupledSubstitutionVisitor",
        "testMatchSample1",
        "testMatchInSet",
        "testMatchParameterCondition",
        "testMatchReluctantMultivalueMinCount1",
        "testMatchReluctantMultivalue",
        "testMatchGreedyMultiValueUnlimited",
        "testMatchOfMapKeySubstring",
        "testMatchGreedyMultiValueMaxCountLimit",
        "testGenerateMultiValues",
        "testGenerateIfElse",
        "testMatchForeach",
        "testMatchOfMapAttributeAndOtherAnnotations",
        "testMatchReluctantMultivalueExactly2",
        "testMatchIfElse",
        "testMatchPossesiveMultiValueMaxCount4"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[int foo \u003d 0, foo++, java.lang.System.out.println(\"does it work?\")]\u003e but was:\u003c[int foo \u003d 0, int foo \u003d 0foo++, java.lang.System.out.println(\"does it work?\")]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[int i \u003d 0, i++, java.lang.System.out.println(i), java.lang.System.out.println(\"Xxxx\")]\u003e but was:\u003c[int i \u003d 0, int i \u003d 0i++, int i \u003d 0i++java.lang.System.out.println(i), int i \u003d 0i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\")]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[i++, java.lang.System.out.println(i), java.lang.System.out.println(\"Xxxx\")]\u003e but was:\u003c[i++, i++java.lang.System.out.println(i), i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\")]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[int cc \u003d 0, java.lang.System.out.println(\"Xxxx\"), cc++, java.lang.System.out.println(((java.lang.String) (null))), cc++]\u003e but was:\u003c[int var \u003d 0int cc \u003d 0, int var \u003d 0int cc \u003d 0java.lang.System.out.println(\"Xxxx\"), int var \u003d 0int cc \u003d 0java.lang.System.out.println(\"Xxxx\")cc++, int var \u003d 0int cc \u003d 0java.lang.System.out.println(\"Xxxx\")cc++java.lang.System.out.println(((java.lang.String) (null))), int var \u003d 0int cc \u003d 0java.lang.System.out.println(\"Xxxx\")cc++java.lang.System.out.println(((java.lang.String) (null)))cc++]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c\"[]abc\"\u003e but was:\u003c\"[xyz\"\"]abc\"\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[int i \u003d 0, i++, java.lang.System.out.println(i), java.lang.System.out.println(\"Xxxx\")]\u003e but was:\u003c[int i \u003d 0, int i \u003d 0i++, int i \u003d 0i++java.lang.System.out.println(i), int i \u003d 0i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\")]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]@java.lang.Deprecate...\u003e but was:\u003c[4567]@java.lang.Deprecate...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c\"[]b\"\u003e but was:\u003c\"[a\"\"]b\"\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...lue\n}\n----------\n1) []java.lang.System.out...\u003e but was:\u003c...lue\n}\n----------\n1) [value]java.lang.System.out...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]false\u003e but was:\u003c[\"extends\"]false\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[int i \u003d 0, i++, java.lang.System.out.println(i), java.lang.System.out.println(\"Xxxx\"), java.lang.System.out.println(((java.lang.String) (null)))]\u003e but was:\u003c[int i \u003d 0, int i \u003d 0i++, int i \u003d 0i++java.lang.System.out.println(i), int i \u003d 0i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\"), int i \u003d 0i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\")java.lang.System.out.println(((java.lang.String) (null)))]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...sses.logger.Logger.e[]nter(\"Logger\", \"ente...\u003e but was:\u003c...sses.logger.Logger.e[xit(\"enter\")spoon.test.template.testclasses.logger.Logger.e]nter(\"Logger\", \"ente...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ang.System.out.print[]ln(2.1)\u003e but was:\u003c...ang.System.out.print[(\"spoon\")java.lang.System.out.print]ln(2.1)\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[int i \u003d 0, i++, java.lang.System.out.println(i), java.lang.System.out.println(\"Xxxx\"), java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println(\"last one\")]\u003e but was:\u003c[int i \u003d 0, int i \u003d 0i++, int i \u003d 0i++java.lang.System.out.println(i), int i \u003d 0i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\"), int i \u003d 0i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\")java.lang.System.out.println(((java.lang.String) (null))), int i \u003d 0i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\")java.lang.System.out.println(((java.lang.String) (null)))java.lang.System.out.println(\"last one\")]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]\"a\"\u003e but was:\u003c[java.lang.System.out.println(\"a\")]\"a\"\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]4567\u003e but was:\u003c[\"xyz\"]4567\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...()).writeSpace();\n}\n[]try (final spoon.ref...\u003e but was:\u003c...()).writeSpace();\n}\n[if (/* CtInvocation\n    / \u003c\u003d ${useStartKeyword}\n */\nuseStartKeyword()) {\n    /* CtInvocation\n        /argument/ \u003c\u003d ${startKeyword}\n     */\n    /* CtInvocation\n        /target/ \u003c\u003d ${printer}\n     */\n    /* CtInvocation\n        / \u003c\u003d ${printer}\n     */\n    printer().writeSpace().writeKeyword(/* CtInvocation\n        / \u003c\u003d ${startKeyword}\n     */\n    startKeyword()).writeSpace();\n}]try (final spoon.ref...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[java.lang.UnsupportedOperationException, java.lang.IllegalArgumentException]\u003e but was:\u003c[java.lang.IllegalArgumentExceptionjava.lang.UnsupportedOperationException, java.lang.IllegalArgumentException]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]java.lang.System.out...\u003e but was:\u003c[this.getClass()]java.lang.System.out...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[int i \u003d 0, i++, java.lang.System.out.println(i), java.lang.System.out.println(\"Xxxx\")]\u003e but was:\u003c[int i \u003d 0, int i \u003d 0i++, int i \u003d 0i++java.lang.System.out.println(i), int i \u003d 0i++java.lang.System.out.println(i)java.lang.System.out.println(\"Xxxx\")]\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[java.lang.System.out.println(\"a\"), java.lang.System.out.println(\"Xxxx\"), java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println(java.lang.Long.class.toString())]\u003e but was:\u003c[java.lang.System.out.println(value)java.lang.System.out.println(\"a\"), java.lang.System.out.println(value)java.lang.System.out.println(\"a\")java.lang.System.out.println(\"Xxxx\"), java.lang.System.out.println(value)java.lang.System.out.println(\"a\")java.lang.System.out.println(\"Xxxx\")java.lang.System.out.println(((java.lang.String) (null))), java.lang.System.out.println(value)java.lang.System.out.println(\"a\")java.lang.System.out.println(\"Xxxx\")java.lang.System.out.println(((java.lang.String) (null)))java.lang.System.out.println(java.lang.Long.class.toString())]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]\"a\"\u003e but was:\u003c[java.lang.System.out.println(\"a\")]\"a\"\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]\"a\"\u003e but was:\u003c[java.lang.System.out.println(\"a\")]\"a\"\u003e",
          "isError": false
        }
      ],
      "nbFailures": 23,
      "nbErrors": 0
    }
  ]
}