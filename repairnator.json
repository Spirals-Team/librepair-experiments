{
  "totalNumberSkippingTests": 109,
  "bugType": "only_fail",
  "totalNumberErroringTests": 4,
  "repo": "julianhyde/calcite",
  "bugCommit": "https://github.com/julianhyde/calcite/compare/3c1cb9cc03da...7c4799ac8dc0",
  "failingModule": "/root/workspace/julianhyde/calcite/360401368/core",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 13,
  "error-types": [
    "java.lang.AssertionError",
    "java.lang.RuntimeException",
    "org.junit.ComparisonFailure",
    "java.lang.reflect.InvocationTargetException"
  ],
  "totalNumberRunningTests": 4657,
  "failing-test-cases": [
    {
      "className": "org.apache.calcite.test.SqlToRelConverterTest",
      "failingMethods": [
        "org.apache.calcite.test.SqlToRelConverterTest#testJoinUsing",
        "org.apache.calcite.test.SqlToRelConverterTest#testJoinUsingThreeWay",
        "org.apache.calcite.test.SqlToRelConverterTest#testJoinUsingCompound",
        "org.apache.calcite.test.SqlToRelConverterTest#testCorrelatedSubQueryInJoin",
        "org.apache.calcite.test.SqlToRelConverterTest#testJoinNatural",
        "org.apache.calcite.test.SqlToRelConverterTest#testJoinNaturalMultipleCommonColumn",
        "org.apache.calcite.test.SqlToRelConverterTest#testArrayOfRecord"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c\nLogicalProject([EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], DEPTNO\u003d[$7], SLACKER\u003d[$8], DEPTNO0\u003d[$9]], NAME\u003d[$10])\n  Log...\u003e but was:\u003c\nLogicalProject([DEPTNO0\u003d[$9], EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8]], NAME\u003d[$10])\n  Log...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Conversion to relational algebra failed to preserve datatypes:\nvalidated type:\nRecordType(VARCHAR(20) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL ENAME, INTEGER NOT NULL DEPTNO, INTEGER NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL JOB, INTEGER MGR, TIMESTAMP(0) NOT NULL HIREDATE, INTEGER NOT NULL SAL, INTEGER NOT NULL COMM, BOOLEAN NOT NULL SLACKER) NOT NULL\nconverted type:\nRecordType(VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL ENAME0, INTEGER NOT NULL DEPTNO0, INTEGER NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL JOB, INTEGER MGR, TIMESTAMP(0) NOT NULL HIREDATE, INTEGER NOT NULL SAL, INTEGER NOT NULL COMM, BOOLEAN NOT NULL SLACKER) NOT NULL\nrel:\nLogicalProject(ENAME0\u003d[$10], DEPTNO0\u003d[$9], EMPNO\u003d[$0], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8])\n  LogicalJoin(condition\u003d[AND(\u003d($1, $10), \u003d($7, $9))], joinType\u003d[inner])\n    LogicalTableScan(table\u003d[[CATALOG, SALES, EMP]])\n    LogicalProject(DEPTNO\u003d[$0], ENAME\u003d[$1])\n      LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT]])\n",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c\nLogicalProject([EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], DEPTNO\u003d[$7], SLACKER\u003d[$8], DEPTNO0\u003d[$9]], NAME\u003d[$10])\n  Log...\u003e but was:\u003c\nLogicalProject([DEPTNO0\u003d[$9], EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8]], NAME\u003d[$10])\n  Log...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Conversion to relational algebra failed to preserve datatypes:\nvalidated type:\nRecordType(INTEGER NOT NULL DEPTNO, INTEGER EMPNO0, VARCHAR(20) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL ENAME, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL JOB, INTEGER MGR, TIMESTAMP(0) NOT NULL HIREDATE, INTEGER NOT NULL SAL, INTEGER NOT NULL COMM, BOOLEAN NOT NULL SLACKER, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NAME) NOT NULL\nconverted type:\nRecordType(INTEGER DEPTNO0, INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL ENAME, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL JOB, INTEGER MGR, TIMESTAMP(0) NOT NULL HIREDATE, INTEGER NOT NULL SAL, INTEGER NOT NULL COMM, BOOLEAN NOT NULL SLACKER, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NAME) NOT NULL\nrel:\nLogicalProject(DEPTNO0\u003d[$9], EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8], NAME\u003d[$10])\n  LogicalJoin(condition\u003d[AND(\u003d($7, $9), \u003d($0, $11))], joinType\u003d[left])\n    LogicalTableScan(table\u003d[[CATALOG, SALES, EMP]])\n    LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], EMPNO\u003d[*($0, 5)])\n      LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT]])\n",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c...(ITEM(DOT(DOT(ITEM($[2, 1), \u0027DETAIL\u0027), \u0027SKILLS\u0027), +(2, 3)), \u0027DESC\u0027)])\n  LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], TYPE\u003d[$2.TYPE], DESC\u003d[$2.DESC]], EMPLOYEES\u003d[$3])\n ...\u003e but was:\u003c...(ITEM(DOT(DOT(ITEM($[6, 1), \u0027DETAIL\u0027), \u0027SKILLS\u0027), +(2, 3)), \u0027DESC\u0027)])\n  LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], TYPE\u003d[$2.TYPE], DESC\u003d[$2.DESC], A\u003d[$2.OTHERS.A], B\u003d[$2.OTHERS.B]], EMPLOYEES\u003d[$3])\n ...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c\nLogicalProject([EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], DEPTNO\u003d[$7], SLACKER\u003d[$8], DEPTNO0\u003d[$9]], NAME\u003d[$10])\n  Log...\u003e but was:\u003c\nLogicalProject([DEPTNO0\u003d[$9], EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8]], NAME\u003d[$10])\n  Log...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c...LogicalProject(EMPNO[\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], DEPTNO\u003d[$7], SLACKER\u003d[$8], DEPTNO0\u003d[$9], NAME\u003d[$10], EMPNO0\u003d[$11]], ENAME0\u003d[$12], JOB...\u003e but was:\u003c...LogicalProject(EMPNO[0\u003d[$11], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8], NAME\u003d[$10]], ENAME0\u003d[$12], JOB...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.SqlToRelConverterExtendedTest",
      "failingMethods": [
        "org.apache.calcite.test.SqlToRelConverterExtendedTest#testJoinNaturalMultipleCommonColumn",
        "org.apache.calcite.test.SqlToRelConverterExtendedTest#testJoinUsingCompound"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Conversion to relational algebra failed to preserve datatypes:\nvalidated type:\nRecordType(VARCHAR(20) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL ENAME, INTEGER NOT NULL DEPTNO, INTEGER NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL JOB, INTEGER MGR, TIMESTAMP(0) NOT NULL HIREDATE, INTEGER NOT NULL SAL, INTEGER NOT NULL COMM, BOOLEAN NOT NULL SLACKER) NOT NULL\nconverted type:\nRecordType(VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL ENAME0, INTEGER NOT NULL DEPTNO0, INTEGER NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL JOB, INTEGER MGR, TIMESTAMP(0) NOT NULL HIREDATE, INTEGER NOT NULL SAL, INTEGER NOT NULL COMM, BOOLEAN NOT NULL SLACKER) NOT NULL\nrel:\nLogicalProject(ENAME0\u003d[$10], DEPTNO0\u003d[$9], EMPNO\u003d[$0], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8])\n  LogicalJoin(condition\u003d[AND(\u003d($1, $10), \u003d($7, $9))], joinType\u003d[inner])\n    LogicalTableScan(table\u003d[[CATALOG, SALES, EMP]])\n    LogicalProject(DEPTNO\u003d[$0], ENAME\u003d[$1])\n      LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT]])\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Conversion to relational algebra failed to preserve datatypes:\nvalidated type:\nRecordType(INTEGER NOT NULL DEPTNO, INTEGER EMPNO0, VARCHAR(20) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL ENAME, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL JOB, INTEGER MGR, TIMESTAMP(0) NOT NULL HIREDATE, INTEGER NOT NULL SAL, INTEGER NOT NULL COMM, BOOLEAN NOT NULL SLACKER, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NAME) NOT NULL\nconverted type:\nRecordType(INTEGER DEPTNO0, INTEGER NOT NULL EMPNO, VARCHAR(20) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL ENAME, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NOT NULL JOB, INTEGER MGR, TIMESTAMP(0) NOT NULL HIREDATE, INTEGER NOT NULL SAL, INTEGER NOT NULL COMM, BOOLEAN NOT NULL SLACKER, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" NAME) NOT NULL\nrel:\nLogicalProject(DEPTNO0\u003d[$9], EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], SLACKER\u003d[$8], NAME\u003d[$10])\n  LogicalJoin(condition\u003d[AND(\u003d($7, $9), \u003d($0, $11))], joinType\u003d[left])\n    LogicalTableScan(table\u003d[[CATALOG, SALES, EMP]])\n    LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], EMPNO\u003d[*($0, 5)])\n      LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT]])\n",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.LatticeTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.apache.calcite.test.LatticeTest#testTileAlgorithm2",
        "org.apache.calcite.test.LatticeTest#testTileAlgorithm",
        "org.apache.calcite.test.LatticeTest#testTwoLattices"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while preparing [select s.\"unit_sales\", p.\"brand_name\"\nfrom \"foodmart\".\"sales_fact_1997\" as s\njoin \"foodmart\".\"product\" as p using (\"product_id\")\n]",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while executing [explain plan for select distinct t.\"the_year\", t.\"quarter\"\nfrom \"foodmart\".\"sales_fact_1997\" as s\njoin \"foodmart\".\"time_by_day\" as t using (\"time_id\")\n]",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while executing [explain plan for select distinct t.\"the_year\", t.\"quarter\"\nfrom \"foodmart\".\"sales_fact_1997\" as s\njoin \"foodmart\".\"time_by_day\" as t using (\"time_id\")\n]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "org.apache.calcite.rel.rel2sql.RelToSqlConverterTest",
      "failingMethods": [
        "org.apache.calcite.rel.rel2sql.RelToSqlConverterTest#testSimpleJoinUsing"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "\nExpected: is \"SELECT *\\nFROM \\\"foodmart\\\".\\\"sales_fact_1997\\\"\\nINNER JOIN \\\"foodmart\\\".\\\"customer\\\" ON \\\"sales_fact_1997\\\".\\\"customer_id\\\" \u003d \\\"customer\\\".\\\"customer_id\\\"\\nINNER JOIN \\\"foodmart\\\".\\\"product\\\" ON \\\"sales_fact_1997\\\".\\\"product_id\\\" \u003d \\\"product\\\".\\\"product_id\\\"\\nINNER JOIN \\\"foodmart\\\".\\\"product_class\\\" ON \\\"product\\\".\\\"product_class_id\\\" \u003d \\\"product_class\\\".\\\"product_class_id\\\"\\nWHERE \\\"customer\\\".\\\"city\\\" \u003d \u0027San Francisco\u0027 AND \\\"product_class\\\".\\\"product_department\\\" \u003d \u0027Snacks\u0027\"\n     but: was \"SELECT \\\"product_class\\\".\\\"product_class_id\\\" AS \\\"product_class_id0\\\", \\\"sales_fact_1997\\\".\\\"time_id\\\", \\\"sales_fact_1997\\\".\\\"promotion_id\\\", \\\"sales_fact_1997\\\".\\\"store_id\\\", \\\"sales_fact_1997\\\".\\\"store_sales\\\", \\\"sales_fact_1997\\\".\\\"store_cost\\\", \\\"sales_fact_1997\\\".\\\"unit_sales\\\", \\\"customer\\\".\\\"account_num\\\", \\\"customer\\\".\\\"lname\\\", \\\"customer\\\".\\\"fname\\\", \\\"customer\\\".\\\"mi\\\", \\\"customer\\\".\\\"address1\\\", \\\"customer\\\".\\\"address2\\\", \\\"customer\\\".\\\"address3\\\", \\\"customer\\\".\\\"address4\\\", \\\"customer\\\".\\\"city\\\", \\\"customer\\\".\\\"state_province\\\", \\\"customer\\\".\\\"postal_code\\\", \\\"customer\\\".\\\"country\\\", \\\"customer\\\".\\\"customer_region_id\\\", \\\"customer\\\".\\\"phone1\\\", \\\"customer\\\".\\\"phone2\\\", \\\"customer\\\".\\\"birthdate\\\", \\\"customer\\\".\\\"marital_status\\\", \\\"customer\\\".\\\"yearly_income\\\", \\\"customer\\\".\\\"gender\\\", \\\"customer\\\".\\\"total_children\\\", \\\"customer\\\".\\\"num_children_at_home\\\", \\\"customer\\\".\\\"education\\\", \\\"customer\\\".\\\"date_accnt_opened\\\", \\\"customer\\\".\\\"member_card\\\", \\\"customer\\\".\\\"occupation\\\", \\\"customer\\\".\\\"houseowner\\\", \\\"customer\\\".\\\"num_cars_owned\\\", \\\"customer\\\".\\\"fullname\\\", \\\"product\\\".\\\"brand_name\\\", \\\"product\\\".\\\"product_name\\\", \\\"product\\\".\\\"SKU\\\", \\\"product\\\".\\\"SRP\\\", \\\"product\\\".\\\"gross_weight\\\", \\\"product\\\".\\\"net_weight\\\", \\\"product\\\".\\\"recyclable_package\\\", \\\"product\\\".\\\"low_fat\\\", \\\"product\\\".\\\"units_per_case\\\", \\\"product\\\".\\\"cases_per_pallet\\\", \\\"product\\\".\\\"shelf_width\\\", \\\"product\\\".\\\"shelf_height\\\", \\\"product\\\".\\\"shelf_depth\\\", \\\"product_class\\\".\\\"product_subcategory\\\", \\\"product_class\\\".\\\"product_category\\\", \\\"product_class\\\".\\\"product_department\\\", \\\"product_class\\\".\\\"product_family\\\"\\nFROM \\\"foodmart\\\".\\\"sales_fact_1997\\\"\\nINNER JOIN \\\"foodmart\\\".\\\"customer\\\" ON \\\"sales_fact_1997\\\".\\\"customer_id\\\" \u003d \\\"customer\\\".\\\"customer_id\\\"\\nINNER JOIN \\\"foodmart\\\".\\\"product\\\" ON \\\"sales_fact_1997\\\".\\\"product_id\\\" \u003d \\\"product\\\".\\\"product_id\\\"\\nINNER JOIN \\\"foodmart\\\".\\\"product_class\\\" ON \\\"product\\\".\\\"product_class_id\\\" \u003d \\\"product_class\\\".\\\"product_class_id\\\"\\nWHERE \\\"customer\\\".\\\"city\\\" \u003d \u0027San Francisco\u0027 AND \\\"product_class\\\".\\\"product_department\\\" \u003d \u0027Snacks\u0027\"",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.CoreQuidemTest",
      "failingMethods": [
        "org.apache.calcite.test.CoreQuidemTest#test[15: quidem(sql/lateral.iq)]",
        "org.apache.calcite.test.CoreQuidemTest#test[5: quidem(sql/sub-query.iq)]",
        "org.apache.calcite.test.CoreQuidemTest#test[4: quidem(sql/join.iq)]"
      ],
      "erroringMethods": [
        "org.apache.calcite.test.CoreQuidemTest#test[1: quidem(sql/misc.iq)]"
      ],
      "failures": [
        {
          "failureName": "java.lang.reflect.InvocationTargetException",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Files differ: /root/workspace/julianhyde/calcite/360401368/core/target/surefire/sql/join.iq /root/workspace/julianhyde/calcite/360401368/core/target/test-classes/sql/join.iq\n250,256c250,256\n\u003c +-------+-----------+--------+---------+-------------+\n\u003c | EMPID | NAME      | DEPTNO | DEPTNO0 | NAME0       |\n\u003c +-------+-----------+--------+---------+-------------+\n\u003c |   100 | Bill      |      1 |       1 | LeaderShip  |\n\u003c |   150 | Sebastian |      3 |       3 | Development |\n\u003c |   200 | Eric      |      1 |       1 | LeaderShip  |\n\u003c +-------+-----------+--------+---------+-------------+\n---\n\u003e +--------+-------+-----------+-------------+\n\u003e | DEPTNO | EMPID | NAME      | NAME0       |\n\u003e +--------+-------+-----------+-------------+\n\u003e |      1 |   100 | Bill      | LeaderShip  |\n\u003e |      1 |   200 | Eric      | LeaderShip  |\n\u003e |      3 |   150 | Sebastian | Development |\n\u003e +--------+-------+-----------+-------------+\n265,278c265,278\n\u003c +-------+--------+-----------+------+------------+---------+---------+--------+---------+------------+----------+\n\u003c | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO | DEPTNO0 | DNAME      | LOC      |\n\u003c +-------+--------+-----------+------+------------+---------+---------+--------+---------+------------+----------+\n\u003c |  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c |  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c |  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |      30 | SALES      | CHICAGO  |\n\u003c +-------+--------+-----------+------+------------+---------+---------+--------+---------+------------+----------+\n---\n\u003e +--------+-------+--------+-----------+------+------------+---------+---------+------------+----------+\n\u003e | DEPTNO | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DNAME      | LOC      |\n\u003e +--------+-------+--------+-----------+------+------------+---------+---------+------------+----------+\n\u003e |     20 |  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         | RESEARCH   | DALLAS   |\n\u003e |     30 |  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 | SALES      | CHICAGO  |\n\u003e |     30 |  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 | SALES      | CHICAGO  |\n\u003e |     20 |  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         | RESEARCH   | DALLAS   |\n\u003e |     30 |  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 | SALES      | CHICAGO  |\n\u003e |     30 |  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         | SALES      | CHICAGO  |\n\u003e |     10 |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         | ACCOUNTING | NEW YORK |\n\u003e |     20 |  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         | RESEARCH   | DALLAS   |\n\u003e |     10 |  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         | ACCOUNTING | NEW YORK |\n\u003e |     30 |  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 | SALES      | CHICAGO  |\n\u003e +--------+-------+--------+-----------+------+------------+---------+---------+------------+----------+\n282,287c282,288\n\u003c EnumerableLimit(fetch\u003d[10])\n\u003c   EnumerableSort(sort0\u003d[$0], dir0\u003d[ASC])\n\u003c     EnumerableJoin(condition\u003d[\u003d($7, $8)], joinType\u003d[left])\n\u003c       EnumerableLimit(fetch\u003d[10])\n\u003c         EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003c       EnumerableTableScan(table\u003d[[scott, DEPT]])\n---\n\u003e EnumerableCalc(expr#0..10\u003d[{inputs}], DEPTNO0\u003d[$t8], EMPNO\u003d[$t0], ENAME\u003d[$t1], JOB\u003d[$t2], MGR\u003d[$t3], HIREDATE\u003d[$t4], SAL\u003d[$t5], COMM\u003d[$t6], DNAME\u003d[$t9], LOC\u003d[$t10])\n\u003e   EnumerableLimit(fetch\u003d[10])\n\u003e     EnumerableSort(sort0\u003d[$0], dir0\u003d[ASC])\n\u003e       EnumerableJoin(condition\u003d[\u003d($7, $8)], joinType\u003d[left])\n\u003e         EnumerableLimit(fetch\u003d[10])\n\u003e           EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Files differ: /root/workspace/julianhyde/calcite/360401368/core/target/surefire/sql/sub-query.iq /root/workspace/julianhyde/calcite/360401368/core/target/test-classes/sql/sub-query.iq\n490,498c490,507\n\u003c +-------+-------+-----------+------+------------+---------+------+--------+---------+------------+----------+\n\u003c | EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO | DEPTNO0 | DNAME      | LOC      |\n\u003c +-------+-------+-----------+------+------------+---------+------+--------+---------+------------+----------+\n\u003c |  7698 | BLAKE | MANAGER   | 7839 | 1981-01-05 | 2850.00 |      |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7788 | SCOTT | ANALYST   | 7566 | 1987-04-19 | 3000.00 |      |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7839 | KING  | PRESIDENT |      | 1981-11-17 | 5000.00 |      |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c |  7902 | FORD  | ANALYST   | 7566 | 1981-12-03 | 3000.00 |      |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c +-------+-------+-----------+------+------------+---------+------+--------+---------+------------+----------+\n\u003c (4 rows)\n---\n\u003e java.lang.AssertionError: Conversion to relational algebra failed to preserve datatypes:\n\u003e validated type:\n\u003e RecordType(TINYINT DEPTNO, SMALLINT NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" ENAME, VARCHAR(9) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" JOB, SMALLINT MGR, DATE HIREDATE, DECIMAL(7, 2) SAL, DECIMAL(7, 2) COMM, VARCHAR(14) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" DNAME, VARCHAR(13) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" LOC) NOT NULL\n\u003e converted type:\n\u003e RecordType(TINYINT NOT NULL DEPTNO0, SMALLINT NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" ENAME, VARCHAR(9) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" JOB, SMALLINT MGR, DATE HIREDATE, DECIMAL(7, 2) SAL, DECIMAL(7, 2) COMM, VARCHAR(14) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" DNAME, VARCHAR(13) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" LOC) NOT NULL\n\u003e rel:\n\u003e LogicalProject(DEPTNO0\u003d[$8], EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], DNAME\u003d[$9], LOC\u003d[$10])\n\u003e   LogicalFilter(condition\u003d[\u003d($5, $SCALAR_QUERY({\n\u003e LogicalAggregate(group\u003d[{}], EXPR$0\u003d[MAX($0)])\n\u003e   LogicalProject(SAL\u003d[$5])\n\u003e     LogicalFilter(condition\u003d[\u003d($8, $cor0.DEPTNO0)])\n\u003e       LogicalJoin(condition\u003d[\u003d($7, $8)], joinType\u003d[inner])\n\u003e         EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003e }))], variablesSet\u003d[[$cor0]])\n\u003e     LogicalJoin(condition\u003d[\u003d($7, $8)], joinType\u003d[inner])\n\u003e       EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n499a509,543\n\u003e  at org.apache.calcite.sql2rel.SqlToRelConverter.checkConvertedType(SqlToRelConverter.java:454)\n\u003e  at org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:571)\n\u003e  at org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:264)\n\u003e  at org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:230)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:781)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:640)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:610)\n\u003e  at org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:221)\n\u003e  at org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:603)\n\u003e  at org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:638)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:149)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:218)\n\u003e  at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:830)\n\u003e  at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1450)\n\u003e  at net.hydromatic.quidem.Quidem.execute(Quidem.java:197)\n\u003e  at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:152)\n\u003e  at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:209)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\u003e  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\u003e  at java.lang.reflect.Method.invoke(Method.java:498)\n\u003e  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\u003e  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\u003e  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\u003e  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\u003e  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\u003e  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\u003e  at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)\n\u003e  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\u003e  at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\u003e  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\u003e  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\u003e  at java.lang.Thread.run(Thread.java:745)\n530,548c574,589\n\u003c +-------+--------+-----------+------+------------+---------+---------+--------+---------+------------+----------+\n\u003c | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO | DEPTNO0 | DNAME      | LOC      |\n\u003c +-------+--------+-----------+------+------------+---------+---------+--------+---------+------------+----------+\n\u003c |  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |         |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7566 | JONES  | MANAGER   | 7839 | 1981-02-04 | 2975.00 |         |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7698 | BLAKE  | MANAGER   | 7839 | 1981-01-05 | 2850.00 |         |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |         |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c |  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |         |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |         |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c |  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |         |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |         |     30 |      30 | SALES      | CHICAGO  |\n\u003c |  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |         |     20 |      20 | RESEARCH   | DALLAS   |\n\u003c |  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |         |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c +-------+--------+-----------+------+------------+---------+---------+--------+---------+------------+----------+\n\u003c (14 rows)\n---\n\u003e java.lang.AssertionError: Conversion to relational algebra failed to preserve datatypes:\n\u003e validated type:\n\u003e RecordType(TINYINT DEPTNO, SMALLINT NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" ENAME, VARCHAR(9) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" JOB, SMALLINT MGR, DATE HIREDATE, DECIMAL(7, 2) SAL, DECIMAL(7, 2) COMM, VARCHAR(14) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" DNAME, VARCHAR(13) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" LOC) NOT NULL\n\u003e converted type:\n\u003e RecordType(TINYINT NOT NULL DEPTNO0, SMALLINT NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" ENAME, VARCHAR(9) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" JOB, SMALLINT MGR, DATE HIREDATE, DECIMAL(7, 2) SAL, DECIMAL(7, 2) COMM, VARCHAR(14) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" DNAME, VARCHAR(13) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" LOC) NOT NULL\n\u003e rel:\n\u003e LogicalProject(DEPTNO0\u003d[$8], EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], DNAME\u003d[$9], LOC\u003d[$10])\n\u003e   LogicalFilter(condition\u003d[\u003d($9, $SCALAR_QUERY({\n\u003e LogicalAggregate(group\u003d[{}], EXPR$0\u003d[MAX($0)])\n\u003e   LogicalProject(DNAME\u003d[$1])\n\u003e     LogicalFilter(condition\u003d[\u003d($0, $cor0.DEPTNO0)])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n\u003e }))], variablesSet\u003d[[$cor0]])\n\u003e     LogicalJoin(condition\u003d[\u003d($7, $8)], joinType\u003d[inner])\n\u003e       EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e       EnumerableTableScan(table\u003d[[scott, DEPT]])\n549a591,625\n\u003e  at org.apache.calcite.sql2rel.SqlToRelConverter.checkConvertedType(SqlToRelConverter.java:454)\n\u003e  at org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:571)\n\u003e  at org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:264)\n\u003e  at org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:230)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:781)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:640)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:610)\n\u003e  at org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:221)\n\u003e  at org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:603)\n\u003e  at org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:638)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:149)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:218)\n\u003e  at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:830)\n\u003e  at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1450)\n\u003e  at net.hydromatic.quidem.Quidem.execute(Quidem.java:197)\n\u003e  at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:152)\n\u003e  at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:209)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\u003e  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\u003e  at java.lang.reflect.Method.invoke(Method.java:498)\n\u003e  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\u003e  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\u003e  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\u003e  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\u003e  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\u003e  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\u003e  at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)\n\u003e  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\u003e  at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\u003e  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\u003e  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\u003e  at java.lang.Thread.run(Thread.java:745)\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Files differ: /root/workspace/julianhyde/calcite/360401368/core/target/surefire/sql/lateral.iq /root/workspace/julianhyde/calcite/360401368/core/target/test-classes/sql/lateral.iq\n100,107c100,112\n\u003c +-------+--------+-----------+------+------------+---------+------+--------+---------+------------+----------+\n\u003c | EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO | DEPTNO0 | DNAME      | LOC      |\n\u003c +-------+--------+-----------+------+------------+---------+------+--------+---------+------------+----------+\n\u003c |  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |      |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c |  7839 | KING   | PRESIDENT |      | 1981-11-17 | 5000.00 |      |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c |  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |      |     10 |      10 | ACCOUNTING | NEW YORK |\n\u003c +-------+--------+-----------+------+------------+---------+------+--------+---------+------------+----------+\n\u003c (3 rows)\n---\n\u003e java.lang.AssertionError: Conversion to relational algebra failed to preserve datatypes:\n\u003e validated type:\n\u003e RecordType(TINYINT DEPTNO, SMALLINT NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" ENAME, VARCHAR(9) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" JOB, SMALLINT MGR, DATE HIREDATE, DECIMAL(7, 2) SAL, DECIMAL(7, 2) COMM, VARCHAR(14) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" DNAME, VARCHAR(13) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" LOC) NOT NULL\n\u003e converted type:\n\u003e RecordType(TINYINT NOT NULL DEPTNO0, SMALLINT NOT NULL EMPNO, VARCHAR(10) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" ENAME, VARCHAR(9) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" JOB, SMALLINT MGR, DATE HIREDATE, DECIMAL(7, 2) SAL, DECIMAL(7, 2) COMM, VARCHAR(14) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" DNAME, VARCHAR(13) CHARACTER SET \"ISO-8859-1\" COLLATE \"ISO-8859-1$en_US$primary\" LOC) NOT NULL\n\u003e rel:\n\u003e LogicalProject(DEPTNO0\u003d[$8], EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], DNAME\u003d[$9], LOC\u003d[$10])\n\u003e   LogicalFilter(condition\u003d[\u003d(CAST($7):INTEGER, 10)])\n\u003e     LogicalJoin(condition\u003d[\u003d($7, $8)], joinType\u003d[inner])\n\u003e       LogicalProject(EMPNO\u003d[$0], ENAME\u003d[$1], JOB\u003d[$2], MGR\u003d[$3], HIREDATE\u003d[$4], SAL\u003d[$5], COMM\u003d[$6], DEPTNO\u003d[$7])\n\u003e         EnumerableTableScan(table\u003d[[scott, EMP]])\n\u003e       LogicalProject(DEPTNO\u003d[$0], DNAME\u003d[$1], LOC\u003d[$2])\n\u003e         EnumerableTableScan(table\u003d[[scott, DEPT]])\n108a114,148\n\u003e  at org.apache.calcite.sql2rel.SqlToRelConverter.checkConvertedType(SqlToRelConverter.java:454)\n\u003e  at org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:571)\n\u003e  at org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:264)\n\u003e  at org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:230)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:781)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:640)\n\u003e  at org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:610)\n\u003e  at org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:221)\n\u003e  at org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:603)\n\u003e  at org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:638)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:149)\n\u003e  at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:218)\n\u003e  at net.hydromatic.quidem.Quidem$CheckResultCommand.execute(Quidem.java:830)\n\u003e  at net.hydromatic.quidem.Quidem$CompositeCommand.execute(Quidem.java:1450)\n\u003e  at net.hydromatic.quidem.Quidem.execute(Quidem.java:197)\n\u003e  at org.apache.calcite.test.QuidemTest.checkRun(QuidemTest.java:152)\n\u003e  at org.apache.calcite.test.QuidemTest.test(QuidemTest.java:209)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\u003e  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\u003e  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\u003e  at java.lang.reflect.Method.invoke(Method.java:498)\n\u003e  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\u003e  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\u003e  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\u003e  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\u003e  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\u003e  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\u003e  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\u003e  at org.apache.maven.surefire.junitcore.pc.Scheduler$1.run(Scheduler.java:410)\n\u003e  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\u003e  at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\u003e  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\u003e  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\u003e  at java.lang.Thread.run(Thread.java:745)\n",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 1
    }
  ]
}