{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 328,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/360710399",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 7,
  "error-types": [
    "java.lang.StackOverflowError",
    "spoon.SpoonException",
    "java.lang.StringIndexOutOfBoundsException",
    "java.lang.RuntimeException",
    "java.lang.AssertionError",
    "java.lang.NoClassDefFoundError",
    "java.lang.ExceptionInInitializerError",
    "java.lang.Exception",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1070,
  "failing-test-cases": [
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.trycatch.TryCatchTest#testCatchWithExplicitFinalVariable",
        "spoon.test.trycatch.TryCatchTest#testMultiTryCatchWithCustomExceptions",
        "spoon.test.trycatch.TryCatchTest#testCompileMultiTryCatchWithCustomExceptions"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.parent.NullParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.NullParentTest#testAssertNullExpression",
        "spoon.test.parent.NullParentTest#testIfNullBranches",
        "spoon.test.parent.NullParentTest#testFieldNullDefaultExpression",
        "spoon.test.parent.NullParentTest#testReturnNullExpression",
        "spoon.test.parent.NullParentTest#testTargetedAccessNullTarget",
        "spoon.test.parent.NullParentTest#testForLoopNullChildren",
        "spoon.test.parent.NullParentTest#testLocalVariableNullDefaultExpression",
        "spoon.test.parent.NullParentTest#testTargetedExpressionNullTarget"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "spoon.MavenLauncherTest#spoonMavenLauncherTest",
        "spoon.MavenLauncherTest#mavenLauncherTestMultiModulesAndVariables"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.imports.ImportTest#testSortingOfImports"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [14757, 14778] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.initializers.InitializerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.initializers.InitializerTest#testModelBuildingInitializer"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [
        "spoon.test.reference.TypeReferenceTest#testInvocationWithFieldAccessInNoClasspath"
      ],
      "erroringMethods": [
        "spoon.test.reference.TypeReferenceTest#testConstructorCallInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testIgnoreEnclosingClassInActualTypes",
        "spoon.test.reference.TypeReferenceTest#testSubTypeAnonymous",
        "spoon.test.reference.TypeReferenceTest#testRecursiveTypeReferenceInGenericType",
        "spoon.test.reference.TypeReferenceTest#testToStringEqualityBetweenTwoGenericTypeDifferent",
        "spoon.test.reference.TypeReferenceTest#testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics",
        "spoon.test.reference.TypeReferenceTest#testUnknownSuperClassWithSameNameInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [122, 140] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [122, 140] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [2839, 2871] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [104, 117] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [76, 90] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile TestBot.java because Cannot compare this: [28212, 28227] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.parent.ParentContractTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.ParentContractTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.loop.LoopTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.loop.LoopTest#testForeachShouldHaveAlwaysABlockInItsBody"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [981, 1001] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.annotation.AnnotationValuesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationValuesTest#testValuesOnJava7Annotation",
        "spoon.test.annotation.AnnotationValuesTest#testValuesOnJava8Annotation"
      ],
      "failures": [
        {
          "failureName": "java.lang.StringIndexOutOfBoundsException",
          "failureDetail": "String index out of range: -1",
          "isError": true
        },
        {
          "failureName": "java.lang.StringIndexOutOfBoundsException",
          "failureDetail": "String index out of range: -1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.annotation.AnnotationLoopTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationLoopTest#testAnnotationDeclaredInForInit"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [95, 145] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateReplaceReturnTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateReplaceReturnTest#testNoReturnReplaceTemplate",
        "spoon.test.template.TemplateReplaceReturnTest#testReturnReplaceTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Invalid source position",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Invalid source position",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.constructorcallnewclass.NewClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructorcallnewclass.NewClassTest#testMoreThan9NewClass",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithObjectClass",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassInterfaceWithParameters",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassInEnumeration",
        "spoon.test.constructorcallnewclass.NewClassTest#testCtNewClassInNoClasspath",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithInterface",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithInterfaceGeneric"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.api.APITest#testPrintNotAllSourcesWithFilter",
        "spoon.test.api.APITest#testSetterInNodes",
        "spoon.test.api.APITest#testOneLinerIntro",
        "spoon.test.api.APITest#testPrintNotAllSourcesInCommandLine",
        "spoon.test.api.APITest#testPrintNotAllSourcesWithNames",
        "spoon.test.api.APITest#testOutputDestinationHandlerWithCUFactory"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "java.io.FileNotFoundException: virtual_file (No such file or directory)",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1328, 1352] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [837, 861] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Invalid source position",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1328, 1352] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.prettyprinter.PrintChangesTest",
      "failingMethods": [
        "spoon.test.prettyprinter.PrintChangesTest#testPrintUnchaged",
        "spoon.test.prettyprinter.PrintChangesTest#testPrintChanged"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inter.testclasses;\n\n[import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? ]\u003e but was:\u003c...inter.testclasses;\n\n[\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inter.testclasses;\n\n[import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? ]\u003e but was:\u003c...inter.testclasses;\n\n[\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n    /**/\n final\n //\n private String modified \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n\n    //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n\n    List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [
        "spoon.test.annotation.AnnotationTest#testSpoonSpoonResult"
      ],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationTest#testRepeatSameAnnotationOnPackage",
        "spoon.test.annotation.AnnotationTest#testAnnotatedElementTypes",
        "spoon.test.annotation.AnnotationTest#testAbstractAllAnnotationProcessorWithGlobalAnnotation",
        "spoon.test.annotation.AnnotationTest#annotationOverrideFQNIsOK"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [547, 567] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Number of annotation for return type of method getPort should be 1 expected:\u003c1\u003e but was:\u003c0\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [0, 0] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "java.lang.StringIndexOutOfBoundsException",
          "failureDetail": "String index out of range: -1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [0, 0] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateTest#testTemplateMatcher",
        "spoon.test.template.TemplateTest#substituteTypeAccessReference",
        "spoon.test.template.TemplateTest#testSubstitutionInsertAllNtoN",
        "spoon.test.template.TemplateTest#testCheckBoundTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Invalid source position",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [271, 299] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [437, 461] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [372, 400] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.invocations.InvocationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.invocations.InvocationTest#testIssue1753"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [5226, 5238] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.query_function.VariableReferencesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.query_function.VariableReferencesTest#testPotentialVariableAccessFromStaticMethod",
        "spoon.test.query_function.VariableReferencesTest#testVariableReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testCheckModelConsistency",
        "spoon.test.query_function.VariableReferencesTest#testLocalVariableReferenceDeclarationFunction",
        "spoon.test.query_function.VariableReferencesTest#testCatchVariableReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testParameterReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testVariableScopeFunction",
        "spoon.test.query_function.VariableReferencesTest#testLocalVariableReferenceFunction"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [725, 725] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [725, 725] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [725, 725] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [725, 725] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [725, 725] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [725, 725] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [725, 725] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [725, 725] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.support.ResourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.support.ResourceTest#testFilteringFolder"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [6076, 6097] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.jar.JarTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.jar.JarTest#testJar"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "java.io.FileNotFoundException: spoon/test/strings/Main.java (No such file or directory)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.PrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.PrinterTest#testPrinterTokenListener",
        "spoon.test.prettyprinter.PrinterTest#testFQNModeWriteFQNConstructorInCtVisitor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [0, 0] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [67465, 67488] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.pkg.PackageTest",
      "failingMethods": [
        "spoon.test.pkg.PackageTest#testAddAnnotationToPackage"
      ],
      "erroringMethods": [
        "spoon.test.pkg.PackageTest#testPrintPackageInfoWhenNothingInPackage",
        "spoon.test.pkg.PackageTest#testAnnotationInPackageInfoWhenTemplatesCompiled",
        "spoon.test.pkg.PackageTest#testAnnotationOnPackage",
        "spoon.test.pkg.PackageTest#testGetFQNInNoClassPath",
        "spoon.test.pkg.PackageTest#testPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [0, 0] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [0, 0] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [0, 0] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [0, 0] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile package-info.java because Cannot compare this: [0, 0] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 5
    },
    {
      "className": "spoon.reflect.visitor.CtVisitorTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtVisitorTest#testMethodsInVisitor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.targeted.TargetedExpressionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.targeted.TargetedExpressionTest#testStaticTargetsOfInv",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldAccessInInnerClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInv",
        "spoon.test.targeted.TargetedExpressionTest#testClassDeclaredInALambda",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInvInInnerClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldAccess",
        "spoon.test.targeted.TargetedExpressionTest#testNotTargetedExpression",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldInAnonymousClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInvInAnonymousClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfStaticFieldAccess",
        "spoon.test.targeted.TargetedExpressionTest#testTargetOfFieldAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [925, 950] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 11
    },
    {
      "className": "spoon.test.intercession.IntercessionContractTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.IntercessionContractTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateEnumAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateEnumAccessTest#testEnumAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Invalid source position",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.jdtimportbuilder.ImportBuilderTest#testInternalImportWhenNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.methodreference.MethodReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAClassParametrizedConstructor",
        "spoon.test.methodreference.MethodReferenceTest#testNoClasspathSuperExecutable",
        "spoon.test.methodreference.MethodReferenceTest#testNoClasspathExecutableReferenceExpression",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAnInstanceMethodOfMultiParticularObject",
        "spoon.test.methodreference.MethodReferenceTest#testGetGenericMethodFromReference",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceBuilderWithComplexGenerics",
        "spoon.test.methodreference.MethodReferenceTest#testCompileMethodReferenceGeneratedBySpoon",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAnInstanceMethodOfAParticularObject",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAJavaUtilClassConstructor",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAStaticMethod",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType",
        "spoon.test.methodreference.MethodReferenceTest#testReferenceToAConstructor",
        "spoon.test.methodreference.MethodReferenceTest#testGetGenericExecutableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [260, 284] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctClass.CtClassTest#testSpoonShouldInferImplicitPackageInNoClasspath",
        "spoon.test.ctClass.CtClassTest#testNoClasspathWithSuperClassOfAClassInAnInterface",
        "spoon.test.ctClass.CtClassTest#testParentOfTheEnclosingClassOfStaticClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [86209, 86222] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testGenericsWithAmbiguousStaticFieldAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testGenericsWithAmbiguousStaticField",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testGenericsWithAmbiguousMemberFieldAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testChildOfGenericsWithAmbiguousStaticFieldAutoImport",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testChildOfGenericsWithAmbiguousStaticField",
        "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest#testGenericsWithAmbiguousMemberField"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [167, 190] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [157, 180] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [167, 190] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [160, 183] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [157, 180] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [160, 183] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.FactoryTest#specificationCoreFactoryCreate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.filters.FilterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.filters.FilterTest#testOverriddenMethodFromInterface",
        "spoon.test.filters.FilterTest#testInvalidQueryStep",
        "spoon.test.filters.FilterTest#testClassCastExceptionOnForEach",
        "spoon.test.filters.FilterTest#testQueryWithOptionalNumberOfInputs",
        "spoon.test.filters.FilterTest#testSubInheritanceHierarchyResolver",
        "spoon.test.filters.FilterTest#testQueryStepScannWithConsumer",
        "spoon.test.filters.FilterTest#testEarlyTerminatingQuery",
        "spoon.test.filters.FilterTest#testgetTopDefinitions",
        "spoon.test.filters.FilterTest#testQueryBuilderWithFilterChain",
        "spoon.test.filters.FilterTest#testReflectionBasedTypeFilter",
        "spoon.test.filters.FilterTest#testOverriddenMethodsFromSubClassOfAbstractClass",
        "spoon.test.filters.FilterTest#testElementMapConsumableFunction",
        "spoon.test.filters.FilterTest#testReuseOfBaseQuery",
        "spoon.test.filters.FilterTest#testOverridingMethodFromInterface",
        "spoon.test.filters.FilterTest#testOverridingMethodFromAbstractClass",
        "spoon.test.filters.FilterTest#testQueryInQuery",
        "spoon.test.filters.FilterTest#testFilterQueryStep",
        "spoon.test.filters.FilterTest#testElementMapFunction",
        "spoon.test.filters.FilterTest#testOverriddenMethodFromSubClassOfInterface",
        "spoon.test.filters.FilterTest#testReuseOfQuery",
        "spoon.test.filters.FilterTest#testFilterChildrenWithoutFilterQueryStep",
        "spoon.test.filters.FilterTest#testOverridingMethodFromSubClassOfAbstractClass",
        "spoon.test.filters.FilterTest#testCtScannerListener",
        "spoon.test.filters.FilterTest#testParentFunction",
        "spoon.test.filters.FilterTest#testInvalidQueryStepFailurePolicyIgnore",
        "spoon.test.filters.FilterTest#testOverriddenMethodFromAbstractClass",
        "spoon.test.filters.FilterTest#testFunctionQueryStep",
        "spoon.test.filters.FilterTest#testOverridingMethodFromSubClassOfInterface",
        "spoon.test.filters.FilterTest#testInvocationFilterWithExecutableInLibrary"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 29
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.literal.LiteralTest#testCharLiteralInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [17072, 17083] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.constructorcallnewclass.ConstructorCallTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallWithGenericArray",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallObjectWithoutParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallStringWithParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testCoreConstructorCall",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallStringWithoutParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallObjectWithParameters"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [333, 333] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilationunit.TestCompilationUnit#testNewlyCreatedCUWouldGetAPartialPosition"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Invalid source position",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.TopLevelTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.TopLevelTypeTest#testTopLevelType"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.replace.ReplaceParametrizedTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.ctType.CtTypeParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctType.CtTypeParameterTest#testTypeSame",
        "spoon.test.ctType.CtTypeParameterTest#testTypeErasure"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [162, 175] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [162, 175] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.signature.SignatureTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.signature.SignatureTest#testBugSignature"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [4432, 4452] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.api.MetamodelTest#testGetterSetterFroRole",
        "spoon.test.api.MetamodelTest#testRoleOnField",
        "spoon.test.api.MetamodelTest#testGetAllMetamodelInterfacess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1081, 1102] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.arrays.ArraysTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.arrays.ArraysTest#testInitializeWithNewArray"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.AstCheckerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.ast.AstCheckerTest#testAvoidSetCollectionSavedOnAST",
        "spoon.reflect.ast.AstCheckerTest#testPushToStackChanges"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [837, 861] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1282, 1302] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.insertBefore.InsertMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBeforeWithBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfterWithoutBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBefore",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfterWithBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfterSwitchCase",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBeforeWithoutBrace",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertAfter",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#testInsertBeforeSwitchCase",
        "spoon.test.intercession.insertBefore.InsertMethodsTest#insertBeforeAndUpdateParent"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [405, 405] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.factory.FieldFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.FieldFactoryTest#testCreateFromSource"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1303, 1303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.ElasticsearchStackoverflowTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.ElasticsearchStackoverflowTest#testStackOverflow"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [2313, 2344] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.generics.GenericsTest#testInvocationGenerics",
        "spoon.test.generics.GenericsTest#testClassTypingContextMethodSignature",
        "spoon.test.generics.GenericsTest#testClassTypingContext",
        "spoon.test.generics.GenericsTest#testGenericTypeReference",
        "spoon.test.generics.GenericsTest#testConstructorCallGenerics",
        "spoon.test.generics.GenericsTest#testWildcard",
        "spoon.test.generics.GenericsTest#testCannotAdaptTypeOfNonTypeScope",
        "spoon.test.generics.GenericsTest#testCtTypeReference_getSuperclass",
        "spoon.test.generics.GenericsTest#testDiamondComplexGenericsRxJava",
        "spoon.test.generics.GenericsTest#testModelBuildingTree",
        "spoon.test.generics.GenericsTest#testBugComparableComparator",
        "spoon.test.generics.GenericsTest#testisGeneric",
        "spoon.test.generics.GenericsTest#testName",
        "spoon.test.generics.GenericsTest#testGenericsInQualifiedNameInConstructorCall",
        "spoon.test.generics.GenericsTest#testGenericMethodCallWithExtend",
        "spoon.test.generics.GenericsTest#testMethodTypingContext",
        "spoon.test.generics.GenericsTest#testIsGenericTypeEqual",
        "spoon.test.generics.GenericsTest#testIsGenericsMethod",
        "spoon.test.generics.GenericsTest#testMethodsWithGenericsWhoExtendsObject",
        "spoon.test.generics.GenericsTest#testRecursiveTypeAdapting",
        "spoon.test.generics.GenericsTest#testDeclarationOfTypeParameterReference",
        "spoon.test.generics.GenericsTest#testGetDeclarationOfTypeParameterReference",
        "spoon.test.generics.GenericsTest#testTypeAdapted",
        "spoon.test.generics.GenericsTest#testMethodTypingContextAdaptMethod",
        "spoon.test.generics.GenericsTest#testBugCommonCollection",
        "spoon.test.generics.GenericsTest#testNewClassGenerics",
        "spoon.test.generics.GenericsTest#testInstanceOfMapEntryGeneric"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [140, 149] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [615, 633] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [162, 175] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [92, 111] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [141, 162] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [193, 206] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [891, 901] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [122, 156] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [140, 163] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1806, 1825] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [286, 303] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 27
    },
    {
      "className": "spoon.test.prettyprinter.QualifiedThisRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.QualifiedThisRefTest#testCloneThisAccess"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtScannerTest#testScannerCallsAllProperties",
        "spoon.reflect.visitor.CtScannerTest#testScan",
        "spoon.reflect.visitor.CtScannerTest#testScannerContract"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.refactoring.MethodsRefactoringTest#testExecutableReferenceFilter",
        "spoon.test.refactoring.MethodsRefactoringTest#testSubInheritanceHierarchyFunction",
        "spoon.test.refactoring.MethodsRefactoringTest#testAllMethodsSameSignatureFunction",
        "spoon.test.refactoring.MethodsRefactoringTest#testCtParameterRemoveRefactoringValidationCheck",
        "spoon.test.refactoring.MethodsRefactoringTest#testCtParameterRemoveRefactoring"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.reference.VariableAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.VariableAccessTest#testVariableAccessDeclarationInAnonymousClass",
        "spoon.test.reference.VariableAccessTest#testDeclarationOfVariableReference"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.method_overriding.MethodOverriddingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.method_overriding.MethodOverriddingTest#testMethodOverride",
        "spoon.test.method_overriding.MethodOverriddingTest#testMethodOverrideByReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [164, 174] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [164, 174] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.method.MethodTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.method.MethodTest#testClone"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.variable.AccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.variable.AccessTest#testFieldWriteDeclaredInTheSuperclass"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.SetParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.SetParentTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class spoon.test.parent.ParentContractTest",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.constructor.ConstructorTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructor.ConstructorTest#testTransformationOnConstructorWithInsertBegin",
        "spoon.test.constructor.ConstructorTest#testTypeAnnotationWithConstructorsOnFormalType",
        "spoon.test.constructor.ConstructorTest#testConstructorCallFactory",
        "spoon.test.constructor.ConstructorTest#testTransformationOnConstructorWithInsertBefore",
        "spoon.test.constructor.ConstructorTest#callParamConstructor",
        "spoon.test.constructor.ConstructorTest#testTypeAnnotationOnExceptionDeclaredInConstructors"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.parent.ParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.ParentTest#testParentSet",
        "spoon.test.parent.ParentTest#testParentPackage",
        "spoon.test.parent.ParentTest#testParent",
        "spoon.test.parent.ParentTest#testParentOfGenericInTypeReference",
        "spoon.test.parent.ParentTest#testParentOfCtPackageReference",
        "spoon.test.parent.ParentTest#testParentOfPrimitiveReference",
        "spoon.test.parent.ParentTest#testHasParent",
        "spoon.test.parent.ParentTest#testGetParentWithFilter",
        "spoon.test.parent.ParentTest#testParentOfCtVariableReference",
        "spoon.test.parent.ParentTest#testParentOfCtExecutableReference"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.secondaryclasses.ClassesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.secondaryclasses.ClassesTest#testInnerClassContruction",
        "spoon.test.secondaryclasses.ClassesTest#testAnonymousClassInStaticField"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [162, 178] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#metamodelPackageRule",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testSpecPackage",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testSrcMainJava",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testStaticClasses",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#statelessFactory",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testInterfacesAreCtScannable",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testFactorySubFactory",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testGoodTestClassNames"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1081, 1102] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [837, 861] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [837, 861] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [3559, 3576] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [6140, 6159] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [6140, 6159] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [837, 861] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.processing.CtGenerationTest#testGenerateReplacementVisitor",
        "spoon.processing.CtGenerationTest#testGenerateCloneVisitor",
        "spoon.processing.CtGenerationTest#testGenerateRoleHandler",
        "spoon.processing.CtGenerationTest#testGenerateCtBiScanner"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testIssue1501",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#printClassCreatedWithSpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Invalid source position",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.comment.CommentTest#testCommentsInComment1And2",
        "spoon.test.comment.CommentTest#testCombinedPackageInfoComment",
        "spoon.test.comment.CommentTest#testCodeFactory",
        "spoon.test.comment.CommentTest#testWildComments",
        "spoon.test.comment.CommentTest#testJavaDocEmptyCommentAndTag",
        "spoon.test.comment.CommentTest#testDocumentationContract",
        "spoon.test.comment.CommentTest#testInsertNewComment",
        "spoon.test.comment.CommentTest#testJavadocShortAndLongComment",
        "spoon.test.comment.CommentTest#testBlockComment",
        "spoon.test.comment.CommentTest#testInLineComment",
        "spoon.test.comment.CommentTest#testJavaDocCommentOnUnix",
        "spoon.test.comment.CommentTest#testCoreFactory",
        "spoon.test.comment.CommentTest#testRemoveComment"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [968, 968] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "spoon.test.visibility.VisibilityTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.visibility.VisibilityTest#testInvocationVisibilityInFieldDeclaration"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.ctType.CtTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctType.CtTypeTest#testIsSubTypeOfonTypeParameters",
        "spoon.test.ctType.CtTypeTest#testHasMethodInSuperClass",
        "spoon.test.ctType.CtTypeTest#testIsSubTypeOf",
        "spoon.test.ctType.CtTypeTest#testIsSubTypeOfonTypeReferences",
        "spoon.test.ctType.CtTypeTest#testHasMethodInDefaultMethod"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [788, 805] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [347, 360] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [347, 360] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [347, 360] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [347, 360] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.testing.CtElementAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.testing.CtElementAssertTest#testEqualityBetweenACtElementAndAString",
        "spoon.testing.CtElementAssertTest#testEqualityBetweenTwoCtElementWithTheSameSignatureButNotTheSameContent",
        "spoon.testing.CtElementAssertTest#testEqualityBetweenTwoDifferentCtElement",
        "spoon.testing.CtElementAssertTest#testEqualityBetweenTwoCtElement"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [2038, 2057] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [2038, 2057] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.type.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.type.TypeTest#testIntersectionTypeOnTopLevelType",
        "spoon.test.type.TypeTest#testTypeAccessForTypeAccessInInstanceOf",
        "spoon.test.type.TypeTest#testTypeReferenceInGenericsAndCasts",
        "spoon.test.type.TypeTest#test",
        "spoon.test.type.TypeTest#testTypeAccessForDotClass",
        "spoon.test.type.TypeTest#testTypeAccessOfArrayObjectInFullyQualifiedName",
        "spoon.test.type.TypeTest#testIntersectionTypeReferenceInGenericsAndCasts"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [56, 89] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [56, 89] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [56, 89] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [56, 89] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [56, 89] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [56, 89] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.model.AnonymousExecutableTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.model.AnonymousExecutableTest#testStatements"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePositionImpl#addNextSibling must not be called twice for the same SourcePosition",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtInheritanceScannerMethodsTest#testMethodsInInheritanceScanner"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.CloneTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.ast.CloneTest#testCloneListener",
        "spoon.reflect.ast.CloneTest#testCloneMethodsDeclaredInAST",
        "spoon.reflect.ast.CloneTest#testCopyType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [14757, 14778] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [14757, 14778] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.processing.ProcessingTest#testSpoonTagger",
        "spoon.processing.ProcessingTest#testInterruptAProcessor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [10519, 10532] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: Invalid source position",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.IntercessionTest#testSettersAreAllGood"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.ExecutableReferenceTest#testSuperClassInGetAllExecutables",
        "spoon.test.reference.ExecutableReferenceTest#testLambdaNoClasspath",
        "spoon.test.reference.ExecutableReferenceTest#testHashcodeWorksWithReference",
        "spoon.test.reference.ExecutableReferenceTest#testSpecifyGetAllExecutablesMethod"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [5229, 5246] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [104, 117] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [104, 117] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [104, 117] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.parameters.ParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parameters.ParameterTest#testParameterInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [7586, 7586] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.fieldaccesses.FieldAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.fieldaccesses.FieldAccessTest#testTypeDeclaredInAnonymousClass",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessInAnonymousClass",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldWriteWithPlusEqualsOperation",
        "spoon.test.fieldaccesses.FieldAccessTest#testGetReference",
        "spoon.test.fieldaccesses.FieldAccessTest#testIncrementationOnAVarIsAUnaryOperator",
        "spoon.test.fieldaccesses.FieldAccessTest#testTypeOfFieldAccess"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest#spoon.test.main.MainTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [837, 861] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.delete.DeleteTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.delete.DeleteTest#testDeleteMethod",
        "spoon.test.delete.DeleteTest#testDeleteConditionInACondition",
        "spoon.test.delete.DeleteTest#testDeleteParameterOfMethod",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInConstructor",
        "spoon.test.delete.DeleteTest#testDeleteChainOfAssignment",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInMethod",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInAnonymousExecutable",
        "spoon.test.delete.DeleteTest#testDeleteAnnotationOnAClass",
        "spoon.test.delete.DeleteTest#testDeleteACaseOfASwitch",
        "spoon.test.delete.DeleteTest#testDeleteStatementInCase",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInStaticAnonymousExecutable",
        "spoon.test.delete.DeleteTest#testDeleteAClassTopLevel",
        "spoon.test.delete.DeleteTest#testDeleteBodyOfAMethod",
        "spoon.test.delete.DeleteTest#testDeleteReturn"
      ],
      "failures": [
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        },
        {
          "failureName": "java.lang.StackOverflowError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 14
    },
    {
      "className": "spoon.test.reflect.meta.MetaModelTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reflect.meta.MetaModelTest#spoonMetaModelTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [1516, 1533] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.lambda.LambdaTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.lambda.LambdaTest#testLambdaMethod",
        "spoon.test.lambda.LambdaTest#testFieldAccessInLambdaNoClassPathExternal1Example",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithParameterTyped",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithStatementBodyAndWithoutParameters",
        "spoon.test.lambda.LambdaTest#testEqualsLambdaParameterRef",
        "spoon.test.lambda.LambdaTest#testGetOverriddenMethodWithFunction",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithMultiParametersTyped",
        "spoon.test.lambda.LambdaTest#testLambdaFilter",
        "spoon.test.lambda.LambdaTest#testTypeParameterWithImplicitArrayType",
        "spoon.test.lambda.LambdaTest#testTypeParameterOfLambdaWithoutType2",
        "spoon.test.lambda.LambdaTest#testGetDeclarationOnTypeParameterFromLambda",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithoutTypeForParameter",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithoutParameter",
        "spoon.test.lambda.LambdaTest#testFieldAccessInLambdaNoClassPath",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionInIfConditional",
        "spoon.test.lambda.LambdaTest#testBuildExecutableReferenceFromLambda",
        "spoon.test.lambda.LambdaTest#testCompileLambdaGeneratedBySpoon",
        "spoon.test.lambda.LambdaTest#testTypeAccessInLambdaNoClassPath",
        "spoon.test.lambda.LambdaTest#testLambdaWithPrimitiveParameter",
        "spoon.test.lambda.LambdaTest#testTypeParameterOfLambdaWithoutType",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithStatementBodyAndWithParameter",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithExpressionBodyAndWithMultiParameters"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [492, 517] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 22
    },
    {
      "className": "spoon.testing.AbstractAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.testing.AbstractAssertTest#testTransformationFromCtElementWithProcessor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [2038, 2057] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilation.CompilationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilation.CompilationTest#testFilterResourcesDir",
        "spoon.test.compilation.CompilationTest#testPrecompile"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [266, 290] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "Cannot compare this: [104, 117] with other: [\" + other.getSourceStart() + \", \" + other.getSourceEnd() + \"]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    }
  ]
}