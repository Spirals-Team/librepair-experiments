{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "INRIA/spoon",
  "metrics": {
    "BugCommit": "993436e0e33aa5fb2ed9236b9d62ca982c3f5b57",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 14,
    "NbFileApp": 1122,
    "NbFileTests": 665,
    "NbCPU": 32,
    "FreeMemory": 1532548368,
    "TotalMemory": 3538944000,
    "AngelicValuesByTest": {
      "spoon/test/parent/CollectionsContractTest": 0,
      "spoon/MavenLauncherTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 404673152,
      "ComputeClasspath": 762811576,
      "ComputeTestDir": 392605992,
      "BuildProject": 382055320,
      "ComputeSourceDir": 762811576,
      "InitRepoToPush": 768332176,
      "AstorJMut": 1657272224,
      "CloneRepository": 503654904,
      "CheckoutPatchedBuild": 1532548368,
      "Nopol": 1925134416,
      "NPEFix": 1925134416,
      "TestProject": 367544256,
      "GatherTestInformation": 556350544,
      "CommitPatch": 1532548368
    },
    "NbSucceedingTests": 1430,
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/993436e0e33aa5fb2ed9236b9d62ca982c3f5b57",
    "NbFailingTests": 81,
    "NbErroringTests": 0,
    "NbSkippingTests": 4,
    "NbRunningTests": 1511,
    "ReproductionDate": "May 24, 2018 11:17:16 PM",
    "BuggyBuildId": 383402152,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/383402152",
    "BuggyBuildDate": "May 24, 2018 11:16:46 PM",
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 3,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "BuildProject": 39,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 8,
      "AstorJMut": 13,
      "CloneRepository": 6,
      "CheckoutPatchedBuild": 0,
      "Nopol": 34,
      "NPEFix": 0,
      "TestProject": 410,
      "GatherTestInformation": 0,
      "CommitPatch": 5
    }
  },
  "failingModule": "/root/workspace/INRIA/spoon/383402152",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 81,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 1511,
  "failing-test-cases": [
    {
      "className": "spoon.test.parent.CollectionsContractTest",
      "failingMethods": [
        "testContract[CtModuleRequirement]",
        "testContract[CtEnum]",
        "testContract[CtField]",
        "testContract[CtArrayTypeReference]",
        "testContract[CtAssert]",
        "testContract[CtWildcardReference]",
        "testContract[CtVariableWrite]",
        "testContract[CtLocalVariable]",
        "testContract[CtUsedService]",
        "testContract[CtBreak]",
        "testContract[CtAnonymousExecutable]",
        "testContract[CtAnnotationFieldAccess]",
        "testContract[CtAssignment]",
        "testContract[CtLocalVariableReference]",
        "testContract[CtModule]",
        "testContract[CtArrayRead]",
        "testContract[CtPackage]",
        "testContract[CtJavaDoc]",
        "testContract[CtModuleReference]",
        "testContract[CtAnnotation]",
        "testContract[CtPackageReference]",
        "testContract[CtNewClass]",
        "testContract[CtSynchronized]",
        "testContract[CtInterface]",
        "testContract[CtTypeParameterReference]",
        "testContract[CtCatch]",
        "testContract[CtMethod]",
        "testContract[CtVariableRead]",
        "testContract[CtLiteral]",
        "testContract[CtTypeParameter]",
        "testContract[CtForEach]",
        "testContract[CtDo]",
        "testContract[CtProvidedService]",
        "testContract[CtCodeSnippetExpression]",
        "testContract[CtConstructor]",
        "testContract[CtExecutableReferenceExpression]",
        "testContract[CtThrow]",
        "testContract[CtEnumValue]",
        "testContract[CtConstructorCall]",
        "testContract[CtConditional]",
        "testContract[CtIf]",
        "testContract[CtStatementList]",
        "testContract[CtImport]",
        "testContract[CtTypeAccess]",
        "testContract[CtSuperAccess]",
        "testContract[CtWhile]",
        "testContract[CtExecutableReference]",
        "testContract[CtArrayWrite]",
        "testContract[CtParameterReference]",
        "testContract[CtOperatorAssignment]",
        "testContract[CtJavaDocTag]",
        "testContract[CtParameter]",
        "testContract[CtCatchVariableReference]",
        "testContract[CtFor]",
        "testContract[CtIntersectionTypeReference]",
        "testContract[CtFieldReference]",
        "testContract[CtThisAccess]",
        "testContract[CtPackageExport]",
        "testContract[CtCatchVariable]",
        "testContract[CtClass]",
        "testContract[CtUnaryOperator]",
        "testContract[CtBinaryOperator]",
        "testContract[CtInvocation]",
        "testContract[CtFieldWrite]",
        "testContract[CtTypeReference]",
        "testContract[CtSwitch]",
        "testContract[CtTryWithResource]",
        "testContract[CtFieldRead]",
        "testContract[CtReturn]",
        "testContract[CtTry]",
        "testContract[CtNewArray]",
        "testContract[CtComment]",
        "testContract[CtLambda]",
        "testContract[CtCodeSnippetStatement]",
        "testContract[CtCase]",
        "testContract[CtAnnotationType]",
        "testContract[CtContinue]",
        "testContract[CtAnnotationMethod]",
        "testContract[CtBlock]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtConditional\nnormal;[READ_ONLY, READ_ONLY]annotation of CtConditional\nnormal;[READ_ONLY, READ_ONLY]comment of CtConditional",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]implementationType of CtProvidedService\nnormal;[READ_ONLY, READ_ONLY]annotation of CtProvidedService\nnormal;[READ_ONLY, READ_ONLY]comment of CtProvidedService",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtParameter\nnormal;[READ_ONLY, READ_ONLY]comment of CtParameter",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtWhile\nnormal;[READ_ONLY, READ_ONLY]comment of CtWhile",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]typeArgument of CtTypeReference\nFailed check of;CtTypeReference#interface. SpoonException : Setting of CtRole.INTERFACE is not supported for CtTypeReferenceImpl\nnormal;[READ_ONLY, READ_ONLY]annotation of CtTypeReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtCatchVariableReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtContinue\nnormal;[READ_ONLY, READ_ONLY]comment of CtContinue",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]typeMember of CtInterface\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]interface of CtInterface\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]typeParameter of CtInterface\nnormal;[READ_ONLY, READ_ONLY]annotation of CtInterface\nnormal;[READ_ONLY, READ_ONLY]comment of CtInterface",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtAssignment\nnormal;[READ_ONLY, READ_ONLY]annotation of CtAssignment\nnormal;[READ_ONLY, READ_ONLY]comment of CtAssignment",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtBinaryOperator\nnormal;[READ_ONLY, READ_ONLY]annotation of CtBinaryOperator\nnormal;[READ_ONLY, READ_ONLY]comment of CtBinaryOperator",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtEnumValue\nnormal;[READ_ONLY, READ_ONLY]comment of CtEnumValue",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtModuleRequirement\nnormal;[READ_ONLY, READ_ONLY]comment of CtModuleRequirement",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtForEach\nnormal;[READ_ONLY, READ_ONLY]comment of CtForEach",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]typeParameter of CtConstructor\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]parameter of CtConstructor\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]thrown of CtConstructor\nnormal;[READ_ONLY, READ_ONLY]annotation of CtConstructor\nnormal;[READ_ONLY, READ_ONLY]comment of CtConstructor",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtSuperAccess\nnormal;[READ_ONLY, READ_ONLY]annotation of CtSuperAccess\nnormal;[READ_ONLY, READ_ONLY]comment of CtSuperAccess",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtAnonymousExecutable\nnormal;[READ_ONLY, READ_ONLY]comment of CtAnonymousExecutable",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtComment\nnormal;[READ_ONLY, READ_ONLY]comment of CtComment",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Failed check of;CtWildcardReference#interface. SpoonException : Setting of CtRole.INTERFACE is not supported for CtWildcardReferenceImpl\nnormal;[READ_ONLY, READ_ONLY]annotation of CtWildcardReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtThisAccess\nnormal;[READ_ONLY, READ_ONLY]annotation of CtThisAccess\nnormal;[READ_ONLY, READ_ONLY]comment of CtThisAccess",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtArrayWrite\nnormal;[READ_ONLY, READ_ONLY]annotation of CtArrayWrite\nnormal;[READ_ONLY, READ_ONLY]comment of CtArrayWrite",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtPackageReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtJavaDoc\nnormal;[READ_ONLY, READ_ONLY]comment of CtJavaDoc",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtArrayRead\nnormal;[READ_ONLY, READ_ONLY]annotation of CtArrayRead\nnormal;[READ_ONLY, READ_ONLY]comment of CtArrayRead",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]statement of CtStatementList\nnormal;[READ_ONLY, READ_ONLY]annotation of CtStatementList\nnormal;[READ_ONLY, READ_ONLY]comment of CtStatementList",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtVariableWrite\nnormal;[READ_ONLY, READ_ONLY]annotation of CtVariableWrite\nnormal;[READ_ONLY, READ_ONLY]comment of CtVariableWrite",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtParameterReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtOperatorAssignment\nnormal;[READ_ONLY, READ_ONLY]annotation of CtOperatorAssignment\nnormal;[READ_ONLY, READ_ONLY]comment of CtOperatorAssignment",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtAnnotationFieldAccess\nnormal;[READ_ONLY, READ_ONLY]annotation of CtAnnotationFieldAccess\nnormal;[READ_ONLY, READ_ONLY]comment of CtAnnotationFieldAccess",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtAnnotationMethod\nnormal;[READ_ONLY, READ_ONLY]comment of CtAnnotationMethod",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]typeMember of CtClass\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]interface of CtClass\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]typeParameter of CtClass\nnormal;[READ_ONLY, READ_ONLY]annotation of CtClass\nnormal;[READ_ONLY, READ_ONLY]comment of CtClass",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtBlock\nnormal;[READ_ONLY, READ_ONLY]comment of CtBlock",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtPackage\nnormal;[READ_ONLY, READ_ONLY]comment of CtPackage",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]tryResource of CtTryWithResource\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]catch of CtTryWithResource\nnormal;[READ_ONLY, READ_ONLY]annotation of CtTryWithResource\nnormal;[READ_ONLY, READ_ONLY]comment of CtTryWithResource",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtAssert\nnormal;[READ_ONLY, READ_ONLY]comment of CtAssert",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]case of CtSwitch\nnormal;[READ_ONLY, READ_ONLY]annotation of CtSwitch\nnormal;[READ_ONLY, READ_ONLY]comment of CtSwitch",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]catch of CtTry\nnormal;[READ_ONLY, READ_ONLY]annotation of CtTry\nnormal;[READ_ONLY, READ_ONLY]comment of CtTry",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtSynchronized\nnormal;[READ_ONLY, READ_ONLY]comment of CtSynchronized",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtImport\nnormal;[READ_ONLY, READ_ONLY]comment of CtImport",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Failed check of;CtTypeParameterReference#interface. SpoonException : Cannot resolve type erasure of the type parameter reference, which is not able to found it\u0027s declaration.\nnormal;[READ_ONLY, READ_ONLY]annotation of CtTypeParameterReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]argument of CtInvocation\nFailed check of;CtInvocation#typeArgument. AssertionError : null\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtInvocation\nnormal;[READ_ONLY, READ_ONLY]annotation of CtInvocation\nnormal;[READ_ONLY, READ_ONLY]comment of CtInvocation",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtCodeSnippetExpression\nnormal;[READ_ONLY, READ_ONLY]annotation of CtCodeSnippetExpression\nnormal;[READ_ONLY, READ_ONLY]comment of CtCodeSnippetExpression",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtFieldWrite\nnormal;[READ_ONLY, READ_ONLY]annotation of CtFieldWrite\nnormal;[READ_ONLY, READ_ONLY]comment of CtFieldWrite",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtUnaryOperator\nnormal;[READ_ONLY, READ_ONLY]annotation of CtUnaryOperator\nnormal;[READ_ONLY, READ_ONLY]comment of CtUnaryOperator",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]typeArgument of CtExecutableReference\nnormal;[READ_ONLY, READ_ONLY]argumentType of CtExecutableReference\nnormal;[READ_ONLY, READ_ONLY]annotation of CtExecutableReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]forInit of CtFor\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]forUpdate of CtFor\nnormal;[READ_ONLY, READ_ONLY]annotation of CtFor\nnormal;[READ_ONLY, READ_ONLY]comment of CtFor",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtVariableRead\nnormal;[READ_ONLY, READ_ONLY]annotation of CtVariableRead\nnormal;[READ_ONLY, READ_ONLY]comment of CtVariableRead",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtTypeParameter\nnormal;[READ_ONLY, READ_ONLY]comment of CtTypeParameter",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtLocalVariable\nnormal;[READ_ONLY, READ_ONLY]comment of CtLocalVariable",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtIf\nnormal;[READ_ONLY, READ_ONLY]comment of CtIf",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]moduleDirective of CtModule\nnormal;[READ_ONLY, READ_ONLY]annotation of CtModule\nnormal;[READ_ONLY, READ_ONLY]comment of CtModule",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]moduleRef of CtPackageExport\nnormal;[READ_ONLY, READ_ONLY]annotation of CtPackageExport\nnormal;[READ_ONLY, READ_ONLY]comment of CtPackageExport",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]argument of CtConstructorCall\nFailed check of;CtConstructorCall#typeArgument. AssertionError : null\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtConstructorCall\nnormal;[READ_ONLY, READ_ONLY]annotation of CtConstructorCall\nnormal;[READ_ONLY, READ_ONLY]comment of CtConstructorCall",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]statement of CtCase\nnormal;[READ_ONLY, READ_ONLY]annotation of CtCase\nnormal;[READ_ONLY, READ_ONLY]comment of CtCase",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtModuleReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtCatch\nnormal;[READ_ONLY, READ_ONLY]comment of CtCatch",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]typeArgument of CtArrayTypeReference\nFailed check of;CtArrayTypeReference#interface. SpoonException : Setting of CtRole.INTERFACE is not supported for CtArrayTypeReferenceImpl\nnormal;[READ_ONLY, READ_ONLY]annotation of CtArrayTypeReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]typeParameter of CtMethod\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]parameter of CtMethod\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]thrown of CtMethod\nnormal;[READ_ONLY, READ_ONLY]annotation of CtMethod\nnormal;[READ_ONLY, READ_ONLY]comment of CtMethod",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]parameter of CtLambda\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtLambda\nnormal;[READ_ONLY, READ_ONLY]annotation of CtLambda\nnormal;[READ_ONLY, READ_ONLY]comment of CtLambda",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]dimension of CtNewArray\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]expression of CtNewArray\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtNewArray\nnormal;[READ_ONLY, READ_ONLY]annotation of CtNewArray\nnormal;[READ_ONLY, READ_ONLY]comment of CtNewArray",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtUsedService\nnormal;[READ_ONLY, READ_ONLY]comment of CtUsedService",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]bound of CtIntersectionTypeReference\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]typeArgument of CtIntersectionTypeReference\nFailed check of;CtIntersectionTypeReference#interface. SpoonClassNotFoundException : cannot load class: \nnormal;[READ_ONLY, READ_ONLY]annotation of CtIntersectionTypeReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtThrow\nnormal;[READ_ONLY, READ_ONLY]comment of CtThrow",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtLiteral\nnormal;[READ_ONLY, READ_ONLY]annotation of CtLiteral\nnormal;[READ_ONLY, READ_ONLY]comment of CtLiteral",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtReturn\nnormal;[READ_ONLY, READ_ONLY]comment of CtReturn",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtJavaDocTag\nnormal;[READ_ONLY, READ_ONLY]comment of CtJavaDocTag",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtField\nnormal;[READ_ONLY, READ_ONLY]comment of CtField",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtTypeAccess\nnormal;[READ_ONLY, READ_ONLY]annotation of CtTypeAccess\nnormal;[READ_ONLY, READ_ONLY]comment of CtTypeAccess",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtCodeSnippetStatement\nnormal;[READ_ONLY, READ_ONLY]comment of CtCodeSnippetStatement",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtDo\nnormal;[READ_ONLY, READ_ONLY]comment of CtDo",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]value of CtAnnotation\nnormal;[READ_ONLY, READ_ONLY]annotation of CtAnnotation\nnormal;[READ_ONLY, READ_ONLY]comment of CtAnnotation",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtFieldRead\nnormal;[READ_ONLY, READ_ONLY]annotation of CtFieldRead\nnormal;[READ_ONLY, READ_ONLY]comment of CtFieldRead",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtBreak\nnormal;[READ_ONLY, READ_ONLY]comment of CtBreak",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtFieldReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]value of CtEnum\nnormal;[READ_ONLY, READ_ONLY]typeMember of CtEnum\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]interface of CtEnum\nnormal;[READ_ONLY, READ_ONLY]annotation of CtEnum\nnormal;[READ_ONLY, READ_ONLY]comment of CtEnum",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]argument of CtNewClass\nFailed check of;CtNewClass#typeArgument. AssertionError : null\nnormal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtNewClass\nnormal;[READ_ONLY, READ_ONLY]annotation of CtNewClass\nnormal;[READ_ONLY, READ_ONLY]comment of CtNewClass",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]annotation of CtLocalVariableReference",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, READ_ONLY]typeMember of CtAnnotationType\nnormal;[READ_ONLY, READ_ONLY]annotation of CtAnnotationType\nnormal;[READ_ONLY, READ_ONLY]comment of CtAnnotationType",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]multiType of CtCatchVariable\nnormal;[READ_ONLY, READ_ONLY]annotation of CtCatchVariable\nnormal;[READ_ONLY, READ_ONLY]comment of CtCatchVariable",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "normal;[READ_ONLY, MUTABLE_ATTACHED_INCORRECT]cast of CtExecutableReferenceExpression\nnormal;[READ_ONLY, READ_ONLY]annotation of CtExecutableReferenceExpression\nnormal;[READ_ONLY, READ_ONLY]comment of CtExecutableReferenceExpression",
          "isError": false
        }
      ],
      "nbFailures": 79,
      "nbErrors": 0
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    }
  ]
}