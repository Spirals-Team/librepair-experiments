{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 7,
      "ComputeClasspath": 5,
      "ComputeTestDir": 0,
      "ResolveDependency": 142,
      "BuildProject": 745,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 57,
      "CloneRepository": 38,
      "NopolRepair": 229,
      "CheckoutPatchedBuild": 0,
      "TestProject": 581,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 11,
      "AstorRepair": 6,
      "CommitPatch": 22
    },
    "NbFailingTests": 4,
    "BugCommitUrl": "http://github.com/prestodb/presto/commit/d3c6fa763c457f19739555cf5039a7e456b27b26",
    "ReproductionDate": "Mar 22, 2018 1:25:02 AM",
    "BuggyBuildId": 356631363,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/prestodb/presto/builds/356631363",
    "BuggyBuildDate": "Mar 22, 2018 1:24:39 AM",
    "BugCommit": "d3c6fa763c457f19739555cf5039a7e456b27b26",
    "PatchChangedFiles": 2,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 4305,
    "NbLibraries": 156,
    "NbFileApp": 0,
    "NbFileTests": 0,
    "NbCPU": 32,
    "FreeMemory": 1300614392,
    "TotalMemory": 6638010368,
    "AngelicValuesByTest": {
      "com/facebook/presto/sql/analyzer/TestAnalyzer": 0,
      "com/facebook/presto/sql/planner/TestLogicalPlanner": 0,
      "com/facebook/presto/sql/planner/optimizations/TestUnionWithReplicatedJoin": 0,
      "com/facebook/presto/sql/planner/optimizations/TestUnion": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 1021071656,
      "ComputeClasspath": 431349080,
      "ComputeTestDir": 978775160,
      "ResolveDependency": 1380944048,
      "BuildProject": 1005147016,
      "NPERepair": 442102528,
      "ComputeSourceDir": 431349080,
      "InitRepoToPush": 443159472,
      "CloneRepository": 566831920,
      "NopolRepair": 1722891824,
      "CheckoutPatchedBuild": 1300614392,
      "TestProject": 989185360,
      "GatherTestInformation": 960093576,
      "PushIncriminatedBuild": 442102528,
      "AstorRepair": 1112990568,
      "CommitPatch": 1300614392
    }
  },
  "failingModule": "/root/workspace/prestodb/presto/356631363/presto-main",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 4,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 4305,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.sql.analyzer.TestAnalyzer",
      "failingMethods": [
        "com.facebook.presto.sql.analyzer.TestAnalyzer#testInvalidAggregationFilter"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected error NOT_SUPPORTED, but analysis succeeded",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.TestLogicalPlanner",
      "failingMethods": [
        "com.facebook.presto.sql.planner.TestLogicalPlanner#testCorrelatedScalarAggregationRewriteToLeftOuterJoin"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(FilterNode)\n        FilterMatcher{predicate\u003d(\"FINAL_COUNT\" \u003e BIGINT \u00270\u0027)}\n        - node\n            - node(AggregationNode)\n                bind FINAL_COUNT -\u003e count (PARTIAL_COUNT) \n                - node\n                    - node(AggregationNode)\n                        bind PARTIAL_COUNT -\u003e count (NON_NULL) \n                        - node\n                            - node(JoinNode)\n                                JoinMatcher{equiCriteria\u003d[], filter\u003d(BIGINT \u00273\u0027 \u003d \"ORDERKEY\")}\n                                - node\n                                    - node(TableScanNode)\n                                        TableScanMatcher{expectedTableName\u003dorders}\n                                        bind ORDERKEY -\u003e Column orders:orderkey\n                                - node(ProjectNode)\n                                    bind NON_NULL -\u003e true\n                                    - node(ValuesNode)\n\n] but found [\n\n- Output[orderkey] \u003d\u003e [orderkey:bigint]\n    - FilterProject[filterPredicate \u003d (\"count\" \u003e BIGINT \u00270\u0027)] \u003d\u003e [orderkey:bigint]\n        - Project[] \u003d\u003e [orderkey:bigint, unique:bigint, count:bigint]\n            - Aggregate[orderkey, unique][$hashvalue] \u003d\u003e [orderkey:bigint, unique:bigint, $hashvalue:bigint, count:bigint]\n                    count :\u003d \"count\"(\"non_null\")\n                - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, unique:bigint, non_null:boolean, $hashvalue:bigint\n                    - Project[] \u003d\u003e [orderkey:bigint, unique:bigint, non_null:boolean, $hashvalue_8:bigint]\n                            $hashvalue_8 :\u003d \"combine_hash\"(\"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0)), COALESCE(\"$operator$hash_code\"(\"unique\"), 0))\n                        - LeftJoin[(BIGINT \u00273\u0027 \u003d \"orderkey\")] \u003d\u003e [orderkey:bigint, unique:bigint, non_null:boolean]\n                            - AssignUniqueId \u003d\u003e [orderkey:bigint, unique:bigint]\n                                - TableScan[local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint]\n                                        Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}\n                                        orderkey :\u003d tpch:orderkey\n                                        tpch:orderstatus\n                                            :: [[F], [O], [P]]\n                            - Project[] \u003d\u003e [non_null:boolean]\n                                    Cost: {rows: 1 (10B), cpu: ?, memory: ?, network: ?}\n                                    non_null :\u003d true\n                                - Values \u003d\u003e []\n                                        Cost: {rows: 1 (0B), cpu: ?, memory: ?, network: ?}\n                                        ()\n\n] which resolves to [\n\n- Output[orderkey] \u003d\u003e [orderkey:bigint]\n    - FilterProject[filterPredicate \u003d (\"count\" \u003e BIGINT \u00270\u0027)] \u003d\u003e [orderkey:bigint]\n        - Project[] \u003d\u003e [orderkey:bigint, unique:bigint, count:bigint]\n            - Aggregate[orderkey, unique][$hashvalue] \u003d\u003e [orderkey:bigint, unique:bigint, $hashvalue:bigint, count:bigint]\n                    count :\u003d \"count\"(\"non_null\")\n                - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, unique:bigint, non_null:boolean, $hashvalue:bigint\n                    - Project[] \u003d\u003e [orderkey:bigint, unique:bigint, non_null:boolean, $hashvalue_8:bigint]\n                            $hashvalue_8 :\u003d \"combine_hash\"(\"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0)), COALESCE(\"$operator$hash_code\"(\"unique\"), 0))\n                        - LeftJoin[(BIGINT \u00273\u0027 \u003d \"orderkey\")] \u003d\u003e [orderkey:bigint, unique:bigint, non_null:boolean]\n                            - AssignUniqueId \u003d\u003e [orderkey:bigint, unique:bigint]\n                                - TableScan[local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint]\n                                        Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}\n                                        orderkey :\u003d tpch:orderkey\n                                        tpch:orderstatus\n                                            :: [[F], [O], [P]]\n                            - Project[] \u003d\u003e [non_null:boolean]\n                                    Cost: {rows: 1 (10B), cpu: ?, memory: ?, network: ?}\n                                    non_null :\u003d true\n                                - Values \u003d\u003e []\n                                        Cost: {rows: 1 (0B), cpu: ?, memory: ?, network: ?}\n                                        ()\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.optimizations.TestUnion",
      "failingMethods": [
        "com.facebook.presto.sql.planner.optimizations.TestUnion#testPartialRollupAggregationsWithUnion"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "There is a node that should be distributed between output and first REMOTE GATHER ExchangeNode expected [true] but found [false]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.optimizations.TestUnionWithReplicatedJoin",
      "failingMethods": [
        "com.facebook.presto.sql.planner.optimizations.TestUnionWithReplicatedJoin#testPartialRollupAggregationsWithUnion"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "There is a node that should be distributed between output and first REMOTE GATHER ExchangeNode expected [true] but found [false]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}