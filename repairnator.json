{
  "totalNumberSkippingTests": 88,
  "bugType": "only_fail",
  "totalNumberErroringTests": 1,
  "repo": "druid-io/druid",
  "failingModule": "/root/workspace/druid-io/druid/365447711/server",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 6,
  "error-types": [
    "org.skife.jdbi.v2.exceptions.CallbackFailedException",
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 85400,
  "failing-test-cases": [
    {
      "className": "io.druid.segment.loading.SegmentLoaderLocalCacheManagerTest",
      "failingMethods": [
        "io.druid.segment.loading.SegmentLoaderLocalCacheManagerTest#testRetryAllFail[1]",
        "io.druid.segment.loading.SegmentLoaderLocalCacheManagerTest#testRetryAllFail[0]",
        "io.druid.segment.loading.SegmentLoaderLocalCacheManagerTest#testRetrySuccessAtSecondLocation[0]",
        "io.druid.segment.loading.SegmentLoaderLocalCacheManagerTest#testRetrySuccessAtSecondLocation[1]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "io.druid.metadata.SQLMetadataRuleManagerTest",
      "failingMethods": [],
      "erroringMethods": [
        "io.druid.metadata.SQLMetadataRuleManagerTest#testMultipleStopAndStart"
      ],
      "failures": [
        {
          "failureName": "org.skife.jdbi.v2.exceptions.CallbackFailedException",
          "failureDetail": "org.skife.jdbi.v2.exceptions.UnableToExecuteStatementException: java.sql.SQLTransactionRollbackException: A lock could not be obtained due to a deadlock, cycle of locks and waiters is:\nLock : ROW, SYSCOLUMNS, (5,12)\n  Waiting XID : {234, X} , APP, DROP TABLE druidTestae05a44c77b1466e8aff4f9ca7eb4d3f_rules\n  Granted XID : {217, S} \nLock : TABLE, DRUIDTESTAE05A44C77B1466E8AFF4F9CA7EB4D3F_RULES, Tablelock\n  Waiting XID : {217, IS} , APP, SELECT r.dataSource, r.payload FROM druidTestae05a44c77b1466e8aff4f9ca7eb4d3f_rules r INNER JOIN(SELECT dataSource, max(version) as version FROM druidTestae05a44c77b1466e8aff4f9ca7eb4d3f_rules GROUP BY dataSource) ds ON r.datasource \u003d ds.datasource and r.version \u003d ds.version\n  Granted XID : {234, X} \n. The selected victim is XID : 234. [statement:\"DROP TABLE druidTestae05a44c77b1466e8aff4f9ca7eb4d3f_rules\", located:\"DROP TABLE druidTestae05a44c77b1466e8aff4f9ca7eb4d3f_rules\", rewritten:\"DROP TABLE druidTestae05a44c77b1466e8aff4f9ca7eb4d3f_rules\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "io.druid.query.lookup.LookupSnapshotTakerTest",
      "failingMethods": [
        "io.druid.query.lookup.LookupSnapshotTakerTest#testIOExceptionDuringLookupPersist"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.ISE and exception with message a string containing \"Exception during serialization of lookups\")",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "io.druid.segment.loading.LocalDataSegmentPusherTest",
      "failingMethods": [
        "io.druid.segment.loading.LocalDataSegmentPusherTest#testPushCannotCreateDirectory"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of java.io.IOException and exception with message a string containing \"Unable to create directory\")",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}