{
  "totalNumberSkippingTests": 2,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "INRIA/spoon",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 3,
      "ComputeClasspath": 9,
      "ComputeTestDir": 0,
      "ResolveDependency": 26,
      "BuildProject": 70,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 11,
      "CloneRepository": 12,
      "NopolRepair": 430,
      "CheckoutPatchedBuild": 0,
      "TestProject": 348,
      "GatherTestInformation": 1,
      "PushIncriminatedBuild": 8,
      "CommitPatch": 20
    },
    "FailureNames": [
      "java.lang.AssertionError",
      "org.junit.ComparisonFailure",
      "skipped"
    ],
    "NbFailingTests": 28,
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/0ffcf54fa450f83997277f637b0e7da6ca215305",
    "ReproductionDate": "Sep 29, 2017 10:06:11 PM",
    "BuggyBuildId": 281431042,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/281431042",
    "BuggyBuildDate": "Sep 29, 2017 9:47:31 PM",
    "BugCommit": "0ffcf54fa450f83997277f637b0e7da6ca215305",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 1184,
    "NbLibraries": 11,
    "NbFileApp": 1032,
    "NbFileTests": 1192,
    "NbCPU": 8,
    "FreeMemory": 1840418776,
    "TotalMemory": 3218079744,
    "AngelicValuesByTest": {
      "spoon/test/annotation/AnnotationTest": 0,
      "spoon/test/loop/LoopTest": 0,
      "spoon/test/javadoc/JavaDocTest": 0,
      "spoon/test/comment/CommentTest": 0,
      "spoon/test/template/TemplateReplaceReturnTest": 0,
      "spoon/test/fieldaccesses/FieldAccessTest": 0,
      "spoon/test/condition/ConditionalTest": 0,
      "spoon/test/eval/EvalTest": 0,
      "spoon/MavenLauncherTest": 0,
      "spoon/test/imports/ImportTest": 0,
      "spoon/test/variable/AccessFullyQualifiedFieldTest": 0,
      "spoon/test/lambda/LambdaTest": 0,
      "spoon/test/intercession/IntercessionTest": 0,
      "spoon/test/prettyprinter/DefaultPrettyPrinterTest": 0,
      "spoon/test/constructor/ConstructorTest": 0,
      "spoon/test/interfaces/InterfaceTest": 0,
      "spoon/test/enums/EnumsTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 284412848,
      "ComputeClasspath": 200976808,
      "ComputeTestDir": 267860648,
      "ResolveDependency": 255530104,
      "BuildProject": 243194736,
      "NPERepair": 202422432,
      "ComputeSourceDir": 200976808,
      "InitRepoToPush": 286740416,
      "CloneRepository": 231654584,
      "NopolRepair": 1964941528,
      "CheckoutPatchedBuild": 1840418776,
      "TestProject": 222927832,
      "GatherTestInformation": 198773776,
      "PushIncriminatedBuild": 202422432,
      "CommitPatch": 1840418776
    }
  },
  "failingModule": "/root/workspace/INRIA/spoon/281431042",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 28,
  "error-types": [
    "java.lang.AssertionError",
    "org.junit.ComparisonFailure",
    "skipped"
  ],
  "totalNumberRunningTests": 1184,
  "failing-test-cases": [
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "spoon.MavenLauncherTest#spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c5\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [
        "spoon.test.imports.ImportTest#testFullQualifiedNameImport",
        "spoon.test.imports.ImportTest#testNewInnerClassDefinesInItsClassAndSuperClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...lasses.SuperClass {\n[    public static class Item extends spoon.test.imports.testclasses.SuperClass.Item {\n        public Item(java.lang.String s) {\n            super(1, s);\n        }\n    }\n\n    public void aMethod() {\n        new spoon.test.imports.testclasses.SubClass.Item(\"\");\n    ]}\n}\u003e but was:\u003c...lasses.SuperClass {\n[public static class Item extends spoon.test.imports.testclasses.SuperClass.Item {\npublic Item(java.lang.String s) {\nsuper(1, s);\n}\n}\n\npublic void aMethod() {\nnew spoon.test.imports.testclasses.SubClass.Item(\"\");\n]}\n}\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cpublic class A {\n[    public class ArrayList extends java.util.ArrayList {    ]}\n}\u003e but was:\u003cpublic class A {\n[public class ArrayList extends java.util.ArrayList {]}\n}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#useFullyQualifiedNamesInCtElementImpl_toString",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAClassWithImports",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAMethodWithGeneric",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAMethodWithImports",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...blic class AClass {\n[    public List\u003c?\u003e aMethod() {\n        return new ArrayList\u003c\u003e();\n    }\n\n    public List\u003c? extends ArrayList\u003e aMethodWithGeneric() {\n        return new ArrayList\u003c\u003e();\n    ]}\n}\u003e but was:\u003c...blic class AClass {\n[public List\u003c?\u003e aMethod() {\nreturn new ArrayList\u003c\u003e();\n}\n\npublic List\u003c? extends ArrayList\u003e aMethodWithGeneric() {\nreturn new ArrayList\u003c\u003e();\n]}\n}\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...thodWithGeneric() {\n[    ]return new ArrayList...\u003e but was:\u003c...thodWithGeneric() {\n[]return new ArrayList...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "the toString method of CtElementImpl should not shorten type names as it has no context or import statements expected:\u003c...List\u003c?\u003e aMethod() {\n[    ]return new java.util...\u003e but was:\u003c...List\u003c?\u003e aMethod() {\n[]return new java.util...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...List\u003c?\u003e aMethod() {\n[    ]return new ArrayList...\u003e but was:\u003c...List\u003c?\u003e aMethod() {\n[]return new ArrayList...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "E1 is statically imported then we can call it directly expected:\u003c...SameNameAsLocal() {\n[    ]localField \u003d E1.ordi...\u003e but was:\u003c...SameNameAsLocal() {\n[]localField \u003d E1.ordi...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [
        "spoon.test.comment.CommentTest#testBlockComment",
        "spoon.test.comment.CommentTest#testInLineComment",
        "spoon.test.comment.CommentTest#testInsertNewComment"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...\nvoid newMethod() {\n[    ]// comment empty blo...\u003e but was:\u003c...\nvoid newMethod() {\n[]// comment empty blo...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...atic block\nstatic {\n[    ]// comment inside st...\u003e but was:\u003c...atic block\nstatic {\n[]// comment inside st...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...c block */\nstatic {\n[    ]/* comment inside st...\u003e but was:\u003c...c block */\nstatic {\n[]/* comment inside st...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.variable.AccessFullyQualifiedFieldTest",
      "failingMethods": [
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The inner class should contain call using import",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.enums.EnumsTest",
      "failingMethods": [
        "spoon.test.enums.EnumsTest#testAnnotationsOnEnum",
        "spoon.test.enums.EnumsTest#testEnumWithoutField"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...lic enum Burritos {\n[    ;\n\n    public static void m() {\n    ]}\n}\u003e but was:\u003c...lic enum Burritos {\n[;\n\npublic static void m() {\n]}\n}\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ava.lang.Deprecated\n[    ]Bar;}\u003e but was:\u003c...ava.lang.Deprecated\n[]Bar;}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.eval.EvalTest",
      "failingMethods": [
        "spoon.test.eval.EvalTest#testVisitorPartialEvaluator_if"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c{\n[    ]java.lang.System.out...\u003e but was:\u003c{\n[]java.lang.System.out...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [
        "spoon.test.intercession.IntercessionTest#testInsertIfIntercession",
        "spoon.test.intercession.IntercessionTest#testResetCollectionInSetters"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cif (1 \u003d\u003d 0)\n[    return 1;\nelse\n    ]return 0;\n\u003e but was:\u003cif (1 \u003d\u003d 0)\n[return 1;\nelse\n]return 0;\n\u003e",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.loop.LoopTest",
      "failingMethods": [
        "spoon.test.loop.LoopTest#testForeachShouldHaveAlwaysABlockInItsBody"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ition : conditions)\n[    ]this.conditions.add(...\u003e but was:\u003c...ition : conditions)\n[]this.conditions.add(...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.template.TemplateReplaceReturnTest",
      "failingMethods": [
        "spoon.test.template.TemplateReplaceReturnTest#testReturnReplaceTemplate"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c{[ if (((java.lang.System.currentTimeMillis()) % 2L) \u003d\u003d 0) { return \"Panna\"; }else { return \"Orel\"; ]}}\u003e but was:\u003c{[if (((java.lang.System.currentTimeMillis()) % 2L) \u003d\u003d 0) {return \"Panna\";}else {return \"Orel\";]}}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.fieldaccesses.FieldAccessTest",
      "failingMethods": [
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessInLambda"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c() -\u003e {\n[    ]spoon.test.fieldacce...\u003e but was:\u003c() -\u003e {\n[]spoon.test.fieldacce...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.condition.ConditionalTest",
      "failingMethods": [
        "spoon.test.condition.ConditionalTest#testNoBlockInConditionAndLoop"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cif (true)\n[    java.lang.System.out.println();\nelse if (true)\n    java.lang.System.out.println();\nelse\n    ]java.lang.System.out...\u003e but was:\u003cif (true)\n[java.lang.System.out.println();\nelse if (true)\njava.lang.System.out.println();\nelse\n]java.lang.System.out...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationInExtendsImplementsOfAClass",
        "spoon.test.annotation.AnnotationTest#testUsageOfTypeAnnotationInReturnTypeInMethod"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Return type with an type annotation must be well printed expected:\u003c...ation\nString m3() {\n[    ]return \"\";\n}\u003e but was:\u003c...ation\nString m3() {\n[]return \"\";\n}\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Implements in a enum with an type annotation must be well printed expected:\u003c...n\nBasicAnnotation {\n[    ];\n}\u003e but was:\u003c...n\nBasicAnnotation {\n[];\n}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.interfaces.InterfaceTest",
      "failingMethods": [
        "spoon.test.interfaces.InterfaceTest#testDefaultMethodInInterface"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "The default method must to be well printed expected:\u003c...tring zoneString) {\n[    ]return java.time.Zon...\u003e but was:\u003c...tring zoneString) {\n[]return java.time.Zon...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.lambda.LambdaTest",
      "failingMethods": [
        "spoon.test.lambda.LambdaTest#testLambdaExpressionInIfConditional",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithStatementBodyAndWithoutParameters",
        "spoon.test.lambda.LambdaTest#testLambdaExpressionWithStatementBodyAndWithParameter"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Lambda must be well printed expected:\u003c...Foo.Check) (() -\u003e {\n[    java.lang.System.err.println(\"\");\n    ]return false;\n}))\u003e but was:\u003c...Foo.Check) (() -\u003e {\n[java.lang.System.err.println(\"\");\n]return false;\n}))\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Condition must be well printed expected:\u003c....Foo.Person(10))) {\n[    ]java.lang.System.err...\u003e but was:\u003c....Foo.Person(10))) {\n[]java.lang.System.err...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "Lambda must be well printed expected:\u003c...Person\u003e) (( p) -\u003e {\n[    p.doSomething();\n    ]return (p.age) \u003e 10;...\u003e but was:\u003c...Person\u003e) (( p) -\u003e {\n[p.doSomething();\n]return (p.age) \u003e 10;...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.constructor.ConstructorTest",
      "failingMethods": [
        "spoon.test.constructor.ConstructorTest#callParamConstructor"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c{\n[    ]enclosingInstance.su...\u003e but was:\u003c{\n[]enclosingInstance.su...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.javadoc.JavaDocTest",
      "failingMethods": [
        "spoon.test.javadoc.JavaDocTest#testJavaDocReprint"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cpublic class Bar {\n[    /**\n     * Creates an annotation type.\n     *\n     * @param owner\n     *   the package of the annotation type\n     * @param simpleName\n     *   the name of annotation\n     */\n    public \u003cT\u003e CtAnnotationType\u003c?\u003e create(CtPackage owner, String simpleName) {\n        return null;\n    ]}\n}\u003e but was:\u003cpublic class Bar {\n[/**\n * Creates an annotation type.\n *\n * @param owner\n *   the package of the annotation type\n * @param simpleName\n *   the name of annotation\n */\npublic \u003cT\u003e CtAnnotationType\u003c?\u003e create(CtPackage owner, String simpleName) {\nreturn null;\n]}\n}\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}