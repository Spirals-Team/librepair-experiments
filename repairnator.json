{
  "bugType": "only_fail",
  "hostname": "spirals-repairnator",
  "repo": "INRIA/spoon",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 11,
      "ComputeClasspath": 6,
      "ComputeTestDir": 0,
      "BuildProject": 137,
      "InitRepoToPush": 6,
      "ComputeSourceDir": 0,
      "ComputeModules": 0,
      "AstorJMut": 29,
      "CloneRepository": 17,
      "CheckoutPatchedBuild": 0,
      "NopolAllTests": 47,
      "NPEFix": 0,
      "TestProject": 499,
      "GatherTestInformation": 1,
      "CommitPatch": 6
    },
    "FailureNames": [
      "spoon.SpoonException",
      "java.lang.AssertionError",
      "java.lang.Exception",
      "spoon.compiler.ModelBuildingException"
    ],
    "NbFailingTests": 6,
    "NbErroringTests": 178,
    "NbSkippingTests": 4,
    "NbRunningTests": 1403,
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/43f9c81f85bb5e38a9fbaa7aa2ca79431b324dbc",
    "ReproductionDate": "Jul 18, 2018 2:08:53 PM",
    "BuggyBuildId": 405322036,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/405322036",
    "BuggyBuildDate": "Jul 18, 2018 2:08:26 PM",
    "BugCommit": "43f9c81f85bb5e38a9fbaa7aa2ca79431b324dbc",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 30,
    "NbFileApp": 616,
    "NbFileTests": 695,
    "NbCPU": 4,
    "FreeMemory": 1052964496,
    "TotalMemory": 1687158784,
    "AngelicValuesByTest": {
      "spoon/test/trycatch/TryCatchTest:spoon/test/parent/NullParentTest:spoon/MavenLauncherTest:spoon/test/imports/ImportTest:spoon/test/snippets/SnippetTest:spoon/test/casts/CastTest:spoon/support/visitor/java/JavaReflectionTreeBuilderTest:spoon/test/reference/TypeReferenceTest:spoon/test/model/BlockTest:spoon/test/refactoring/RefactoringTest:spoon/test/constructorcallnewclass/NewClassTest:spoon/test/strings/StringLiteralTest:spoon/test/template/TemplateTest:spoon/test/api/APITest:spoon/test/annotation/AnnotationTest:spoon/test/invocations/InvocationTest:spoon/test/intercession/RemoveTest:spoon/test/support/ResourceTest:spoon/test/query_function/VariableReferencesTest:spoon/reflect/visitor/CtVisitorTest:spoon/test/parent/ContractOnSettersParametrizedTest:spoon/test/targeted/TargetedExpressionTest:spoon/test/jdtimportbuilder/ImportBuilderTest:spoon/test/ctClass/CtClassTest:spoon/test/executable/ExecutableRefTest:spoon/test/literal/LiteralTest:spoon/test/compilationunit/TestCompilationUnit:spoon/test/intercession/OneCanCallSetterWithNullParameterizedTest:spoon/test/parent/TopLevelTypeTest:spoon/test/replace/ReplaceParametrizedTest:spoon/test/signature/SignatureTest:spoon/test/api/MetamodelTest:spoon/test/arrays/ArraysTest:spoon/testing/CtPackageAssertTest:spoon/reflect/ast/AstCheckerTest:spoon/test/intercession/insertBefore/InsertMethodsTest:spoon/test/factory/FieldFactoryTest:spoon/test/position/PositionTest:spoon/test/generics/GenericsTest:spoon/test/model/TypeTest:spoon/test/model/SwitchCaseTest:spoon/reflect/visitor/CtScannerTest:spoon/test/refactoring/MethodsRefactoringTest:spoon/test/variable/AccessTest:spoon/test/parent/ParentTest:spoon/test/architecture/SpoonArchitectureEnforcerTest:spoon/processing/CtGenerationTest:spoon/test/prettyprinter/DefaultPrettyPrinterTest:spoon/test/comment/CommentTest:spoon/testing/CtElementAssertTest:spoon/test/visibility/VisibilityTest:spoon/test/ctType/CtTypeTest:spoon/test/imports/ImportScannerTest:spoon/test/exceptions/ExceptionTest:spoon/test/executable/ExecutableTest:spoon/test/type/TypeTest:spoon/reflect/visitor/CtInheritanceScannerMethodsTest:spoon/reflect/ast/CloneTest:spoon/test/parameters/ParameterTest:spoon/test/intercession/IntercessionTest:spoon/test/main/MainTest:spoon/test/module/TestModule:spoon/testing/AbstractAssertTest:spoon/test/compilation/CompilationTest:spoon/test/template/PatternTest:": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 212425136,
      "ComputeClasspath": 47798864,
      "ComputeTestDir": 439329064,
      "BuildProject": 201434568,
      "InitRepoToPush": 51667472,
      "ComputeSourceDir": 1051211112,
      "ComputeModules": 1051211112,
      "AstorJMut": 1112637200,
      "CloneRepository": 209067888,
      "CheckoutPatchedBuild": 1052964496,
      "NopolAllTests": 324697856,
      "NPEFix": 324697856,
      "TestProject": 184200376,
      "GatherTestInformation": 161643136,
      "CommitPatch": 1052964496
    },
    "NbSucceedingTests": 1219
  },
  "failing-test-cases": [
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFullyQualifiedException",
        "testExceptionJava7",
        "testTryCatchVariableGetType",
        "testCatchOrder"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(java.lang.RuntimeException e){}}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException | Error e){System.exit(0);}}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException e){java.lang.System.exit(0);}      catch(Exception e){}}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { try{}catch(RuntimeException e){System.exit(0);}}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.parent.NullParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAssertNullExpression",
        "testReturnNullExpression",
        "testLocalVariableNullDefaultExpression",
        "testFieldNullDefaultExpression",
        "testForLoopNullChildren",
        "testIfNullBranches",
        "testTargetedAccessNullTarget",
        "testTargetedExpressionNullTarget"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "testImportWithGenerics"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.snippets.SnippetTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSnippetFullClass"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.casts.CastTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCast2",
        "testCast1",
        "testCast3"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { String x\u003d(String) new Object();}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class\u003cString\u003e x\u003d(Class\u003cString\u003e) new Object();}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X\u003cA\u003e {void addConsumedAnnotationType(Class\u003c? extends A\u003e annotationType) {}\n        public void foo() { Class\u003c?\u003e x \u003d null; addConsumedAnnotationType((Class\u003cA\u003e) x);}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testShadowModelEqualsNormalModel"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [
        "testInvocationWithFieldAccessInNoClasspath"
      ],
      "erroringMethods": [
        "testConstructorCallInNoClasspath",
        "testTypeReferenceWithGenerics",
        "testUnknownSuperClassWithSameNameInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile TestBot.java because The given identifier does not respect Java definition of an identifier: null",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.model.BlockTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIterationStatements",
        "testAddEmptyBlock"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;int y\u003d0;}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "testThisInConstructorAfterATransformation",
        "testTransformedInstanceofAfterATransformation"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1X",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1X",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1X",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.constructorcallnewclass.NewClassTest",
      "failingMethods": [
        "testCtNewClassInNoClasspath"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile new-class because The given identifier does not respect Java definition of an identifier: org.apache.lucene",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.strings.StringLiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSnippetFullClass"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class StringValueUTF {\n         String f0 \u003d \"toto\";\n         String f1 \u003d \"\\n\";\n         char c1 \u003d \u0027\\n\u0027;\n         String f2 \u003d \"\\u20ac\";\n         char c2 \u003d \u0027\\u20ac\u0027;\n         String f3 \u003d \"€\";\n         char c3 \u003d \u0027€\u0027;\n         String f4 \u003d \"\\t\";\n         char c4 \u003d \u0027\\t\u0027;\n         String f5 \u003d \" \";\n         char c5 \u003d \u0027 \u0027;\n         String f6 \u003d \"€\\u20ac\";\n        };\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSimpleTemplate",
        "createTypeFromTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Hello world",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [],
      "erroringMethods": [
        "testSetterInNodes",
        "testPrintNotAllSourcesInCommandLine"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Result",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [],
      "erroringMethods": [
        "annotationOverrideFQNIsOK",
        "testGetAnnotationFromParameter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Cache.Entry\u003cK",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: this",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.invocations.InvocationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIssue1753"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: HashMap\u003c\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.intercession.RemoveTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRemoveAllStatements"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;int y\u003d0;}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.support.ResourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFilteringFolder"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1D",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.query_function.VariableReferencesTest",
      "failingMethods": [],
      "erroringMethods": [
        "testParameterReferenceFunction",
        "testLocalVariableReferenceFunction",
        "testLocalVariableReferenceDeclarationFunction",
        "testCatchVariableReferenceFunction",
        "testCheckModelConsistency",
        "testPotentialVariableAccessFromStaticMethod",
        "testVariableReferenceFunction",
        "testVariableScopeFunction"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.reflect.visitor.CtVisitorTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMethodsInVisitor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.ContractOnSettersParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtModuleReference getReference();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getRootPackage();\n\n    @spoon.support.DerivedProperty\n    boolean isUnnamedModule();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setIsOpenModule(boolean arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setModuleDirectives(java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirectiveAt(int arg0, spoon.reflect.declaration.CtModuleDirective arg1);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setUsedServices(java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setExportedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setOpenedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRequiredModules(java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setProvidedServices(java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRootPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e getModuleDirectives();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e getRequiredModules();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getExportedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getOpenedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e getUsedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e getProvidedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    boolean isOpenModule();\n\n    spoon.reflect.declaration.CtModule clone();\n\n    static final java.lang.String TOP_LEVEL_MODULE_NAME;\n}]",
        "testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtPackageReference getReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    java.lang.String getQualifiedName();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    void removeType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e getTypes();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setPackages(java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtModule getDeclaringModule();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtPackage getDeclaringPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    boolean removePackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setTypes(java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e arg0);\n\n    boolean isUnnamedPackage();\n\n    spoon.reflect.declaration.CtPackage clone();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getPackage(java.lang.String arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e getPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtType\u003c?\u003e\u003e T getType(java.lang.String arg0);\n\n    static final java.lang.String PACKAGE_SEPARATOR;\n\n    static final char PACKAGE_SEPARATOR_CHAR;\n\n    static final java.lang.String TOP_LEVEL_PACKAGE_NAME;\n}]"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.targeted.TargetedExpressionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTargetOfFieldAccess",
        "testCtThisAccess",
        "testTargetsOfInv",
        "testTargetsOfFieldAccess",
        "testTargetsOfFieldAccessInInnerClass",
        "testClassDeclaredInALambda",
        "testNotTargetedExpression",
        "testTargetsOfFieldInAnonymousClass",
        "testTargetsOfInvInInnerClass",
        "testStaticTargetsOfInv",
        "testTargetsOfStaticFieldAccess",
        "testTargetsOfInvInAnonymousClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1InnerClass",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 3InnerSubscriber",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInternalImportWhenNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [
        "testNoClasspathWithSuperClassOfAClassInAnInterface"
      ],
      "erroringMethods": [
        "testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "testParentOfTheEnclosingClassOfStaticClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: daikon.Runtime",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile draw2d because The given identifier does not respect Java definition of an identifier: org.eclipse.draw2d.MouseEvent",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.executable.ExecutableRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCharLiteralInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: IndexTransaction.Type.UPDATE",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [],
      "erroringMethods": [
        "testNewlyCreatedCUWouldGetAPartialPosition",
        "testGetUnitTypeWorksWithCreatedObjects"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: new",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: package",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.TopLevelTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTopLevelType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[CtModule]",
        "testContract[CtPackage]"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.signature.SignatureTest",
      "failingMethods": [],
      "erroringMethods": [
        "testNullSignature",
        "testArgumentNotNullForExecutableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public Object foo() { return null;}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRoleOnField",
        "testMetamodelWithoutSources"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.arrays.ArraysTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInitializeWithNewArray"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.testing.CtPackageAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAddTypeToPackage",
        "testEqualityBetweenTwoDifferentCtPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: package",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.reflect.ast.AstCheckerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPushToStackChanges",
        "testAvoidSetCollectionSavedOnAST"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Result",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.insertBefore.InsertMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInsertBeforeWithoutBrace",
        "testInsertAfterSwitchCase",
        "testInsertBefore",
        "insertBeforeAndUpdateParent",
        "testInsertAfterWithBrace",
        "testInsertAfterWithoutBrace",
        "testInsertBeforeSwitchCase",
        "testInsertBeforeWithBrace",
        "testInsertAfter"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() {  int x\u003d0;  int y\u003d0;  int z\u003dx+y; }};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.factory.FieldFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCreateFromSource"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1NestedTypeScanner",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.position.PositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPositionTryCatch"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testClassTypingContext",
        "testNewClassGenerics",
        "testClassTypingContextMethodSignature",
        "testMethodTypingContext",
        "testGenericsInQualifiedNameInConstructorCall",
        "testConstructorCallGenerics",
        "testMethodTypingContextAdaptMethod",
        "testInvocationGenerics",
        "testMethodsWithGenericsWhoExtendsObject",
        "testGenericsInConstructorCall",
        "testisGeneric",
        "testCtTypeReference_getSuperclass",
        "testGenericsOnLocalType",
        "testDiamond1",
        "testName"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class Diamond {\n         java.util.List\u003cString\u003e f \u003d new java.util.ArrayList\u003c\u003e();\n        };\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Cook",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "spoon.test.model.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetUsedTypesForTypeInRootPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { X x; };\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.model.SwitchCaseTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIterationStatements"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;switch(x) {case 0: x\u003dx+1;break;case 1: x\u003d0;default: x\u003d-1;}}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testScannerCallsAllProperties",
        "testScannerContract"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAllMethodsSameSignatureFunction",
        "testExecutableReferenceFilter",
        "testSubInheritanceHierarchyFunction",
        "testCtParameterRemoveRefactoring",
        "testCtParameterRemoveRefactoringValidationCheck"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Local",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.variable.AccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAccessToStringOnPostIncrement",
        "testVariableAccessInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Integer i \u003d 1; (i++).toString(); int k \u003d 0; k++;}};;\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.parent.ParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "testParentOfCtPackageReference",
        "testParentOfCtVariableReference",
        "testHasParent",
        "testGetParentWithFilter",
        "testParentOfGenericInTypeReference",
        "testParentSet",
        "testParent",
        "testParentOfPrimitiveReference",
        "testParentPackage",
        "testParentOfCtExecutableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSrcMainJava",
        "testInterfacesAreCtScannable",
        "testSpecPackage",
        "testStaticClasses",
        "metamodelPackageRule",
        "testGoodTestClassNames",
        "testFactorySubFactory",
        "statelessFactory"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1FindCommentParentScanner",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Result",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Result",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1CloneListener",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Result",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateCloneVisitor",
        "testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIssue1501",
        "testIssue2130"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: \u003cunknown\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [],
      "erroringMethods": [
        "testDocumentationContract"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.testing.CtElementAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEqualityBetweenTwoCtElement",
        "testEqualityBetweenTwoCtElementWithTheSameSignatureButNotTheSameContent",
        "testEqualityBetweenTwoDifferentCtElement",
        "testEqualityBetweenACtElementAndAString"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1String",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1String",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.visibility.VisibilityTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFullyQualifiedNameOfTypeReferenceWithGeneric",
        "testInvocationVisibilityInFieldDeclaration",
        "testVisibilityOfClassesNamedByClassesInJavaLangPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1D",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1D",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.ctType.CtTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testHasMethodInDirectMethod",
        "testHasMethodNotHasMethod",
        "testHasMethodOnNull"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public void foo() {} };\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testImportOnSpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Result",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.exceptions.ExceptionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testUnionCatchExceptionInsideLambdaInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: System.out",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.executable.ExecutableTest",
      "failingMethods": [
        "testShadowValueOf"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.type.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTypeAccessForTypeAccessInInstanceOf",
        "testTypeAccessForDotClass",
        "testTypeAccessOnPrimitive",
        "testIntersectionTypeReferenceInGenericsAndCasts",
        "testTypeAccessOfArrayObjectInFullyQualifiedName",
        "testTypeReferenceInGenericsAndCasts"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Test",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class klass\u003dnull;  boolean x\u003d (klass \u003d\u003d short.class);}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Test",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Test",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Test",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Test",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMethodsInInheritanceScanner"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.CloneTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCloneMethodsDeclaredInAST"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1AnnotationInvocationHandler",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parameters.ParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetParameterReferenceInLambdaNoClasspath",
        "testMultiParameterLambdaTypeReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: System.out",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.lang.HashMap",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInsertEnd",
        "testEqualConstructor",
        "testInsertBegin",
        "testSettersAreAllGood",
        "testInsertIfIntercession",
        "testInsertAfter"
      ],
      "failures": [
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public int bar() {if (1 \u003d\u003d 0)\n            return 1;\n        else\n            return 0;\n        }};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0; int y\u003d0; int z\u003dx+y;}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0;}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { int x\u003d0; String foo\u003d\"toto\";}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X { public X() {} };;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Visitor",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Result",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.module.TestModule",
      "failingMethods": [],
      "erroringMethods": [
        "testModuleInfoWithComments",
        "testCompleteModuleInfoContentNoClasspath",
        "testModuleInfoShouldBeCorrectlyPrettyPrinted",
        "testDirectiveOrders"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.testing.AbstractAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTransformationFromCtElementWithProcessor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1String",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilation.CompilationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testNewInstance",
        "testFilterResourcesDir"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1CtLocalVariableReferenceScanner",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X implements spoon.test.compilation.testclasses.Ifoo { public int foo() {int i\u003d0; return i;} };\n    }\n}",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.template.PatternTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateMethodWithSelfReferences",
        "testGenerateClassWithSelfReferences",
        "testAddGeneratedBy"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1Bar",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    }
  ],
  "failingModule": "/root/workspace/INRIA/spoon/405322036"
}