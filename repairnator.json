{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/388836284",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 79,
  "error-types": [
    "java.lang.AssertionError",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1444,
  "failing-test-cases": [
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [
        "testScannerCallsAllProperties"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "CtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:353) calls unexpected methods: [getAnnotations(), getType()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:956) calls unexpected methods: [getComments()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:661) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:821) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:278) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:289) calls unexpected methods: [getTypeCasts(), getAnnotations(), getType()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:947) calls unexpected methods: [getComments()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:472) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:365) calls unexpected methods: [getParameters(), getAnnotations(), getThrownTypes()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:875) calls unexpected methods: [getTypeCasts(), getComments(), getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:894) calls unexpected methods: [getComments(), getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:684) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:566) calls unexpected methods: [getAnnotations(), getType()]\nno getAnonymousExecutables() in public \u003cT\u003e void visitCtClass(final spoon.reflect.declaration.CtClass\u003cT\u003e ctClass) {\n    enter(ctClass);\n    scan(spoon.reflect.path.CtRole.ANNOTATION, ctClass.getAnnotations());\n    scan(spoon.reflect.path.CtRole.SUPER_TYPE, ctClass.getSuperclass());\n    scan(spoon.reflect.path.CtRole.INTERFACE, ctClass.getSuperInterfaces());\n    scan(spoon.reflect.path.CtRole.TYPE_PARAMETER, ctClass.getFormalCtTypeParameters());\n    scan(spoon.reflect.path.CtRole.TYPE_MEMBER, ctClass.getTypeMembers());\n    scan(spoon.reflect.path.CtRole.COMMENT, ctClass.getComments());\n    exit(ctClass);\n}\nno getConstructors() in public \u003cT\u003e void visitCtClass(final spoon.reflect.declaration.CtClass\u003cT\u003e ctClass) {\n    enter(ctClass);\n    scan(spoon.reflect.path.CtRole.ANNOTATION, ctClass.getAnnotations());\n    scan(spoon.reflect.path.CtRole.SUPER_TYPE, ctClass.getSuperclass());\n    scan(spoon.reflect.path.CtRole.INTERFACE, ctClass.getSuperInterfaces());\n    scan(spoon.reflect.path.CtRole.TYPE_PARAMETER, ctClass.getFormalCtTypeParameters());\n    scan(spoon.reflect.path.CtRole.TYPE_MEMBER, ctClass.getTypeMembers());\n    scan(spoon.reflect.path.CtRole.COMMENT, ctClass.getComments());\n    exit(ctClass);\n}\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:333) calls unexpected methods: [getFormalCtTypeParameters(), getSuperInterfaces(), getComments(), getAnnotations(), getTypeMembers()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:300) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:646) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:729) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:269) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:692) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:718) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:701) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:740) calls unexpected methods: [getAnnotations(), getDeclaringType(), getPackage()]\nno getActualTypeArguments() in public \u003cT\u003e void visitCtInvocation(final spoon.reflect.code.CtInvocation\u003cT\u003e invocation) {\n    enter(invocation);\n    scan(spoon.reflect.path.CtRole.ANNOTATION, invocation.getAnnotations());\n    scan(spoon.reflect.path.CtRole.CAST, invocation.getTypeCasts());\n    scan(spoon.reflect.path.CtRole.TARGET, invocation.getTarget());\n    scan(spoon.reflect.path.CtRole.EXECUTABLE_REF, invocation.getExecutable());\n    scan(spoon.reflect.path.CtRole.ARGUMENT, invocation.getArguments());\n    scan(spoon.reflect.path.CtRole.COMMENT, invocation.getComments());\n    exit(invocation);\n}\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:502) calls unexpected methods: [getTypeCasts(), getComments(), getAnnotations(), getTarget()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:791) calls unexpected methods: [getTypeCasts(), getAnnotations(), getType()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:461) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:345) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:522) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:482) calls unexpected methods: [getAnnotations()]\nno getRequiredModules() in @java.lang.Override\npublic void visitCtModule(spoon.reflect.declaration.CtModule module) {\n    enter(module);\n    scan(spoon.reflect.path.CtRole.COMMENT, module.getComments());\n    scan(spoon.reflect.path.CtRole.ANNOTATION, module.getAnnotations());\n    scan(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, module.getModuleDirectives());\n    scan(spoon.reflect.path.CtRole.SUB_PACKAGE, module.getRootPackage());\n    exit(module);\n}\nno getExportedPackages() in @java.lang.Override\npublic void visitCtModule(spoon.reflect.declaration.CtModule module) {\n    enter(module);\n    scan(spoon.reflect.path.CtRole.COMMENT, module.getComments());\n    scan(spoon.reflect.path.CtRole.ANNOTATION, module.getAnnotations());\n    scan(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, module.getModuleDirectives());\n    scan(spoon.reflect.path.CtRole.SUB_PACKAGE, module.getRootPackage());\n    exit(module);\n}\nno getOpenedPackages() in @java.lang.Override\npublic void visitCtModule(spoon.reflect.declaration.CtModule module) {\n    enter(module);\n    scan(spoon.reflect.path.CtRole.COMMENT, module.getComments());\n    scan(spoon.reflect.path.CtRole.ANNOTATION, module.getAnnotations());\n    scan(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, module.getModuleDirectives());\n    scan(spoon.reflect.path.CtRole.SUB_PACKAGE, module.getRootPackage());\n    exit(module);\n}\nno getUsedServices() in @java.lang.Override\npublic void visitCtModule(spoon.reflect.declaration.CtModule module) {\n    enter(module);\n    scan(spoon.reflect.path.CtRole.COMMENT, module.getComments());\n    scan(spoon.reflect.path.CtRole.ANNOTATION, module.getAnnotations());\n    scan(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, module.getModuleDirectives());\n    scan(spoon.reflect.path.CtRole.SUB_PACKAGE, module.getRootPackage());\n    exit(module);\n}\nno getProvidedServices() in @java.lang.Override\npublic void visitCtModule(spoon.reflect.declaration.CtModule module) {\n    enter(module);\n    scan(spoon.reflect.path.CtRole.COMMENT, module.getComments());\n    scan(spoon.reflect.path.CtRole.ANNOTATION, module.getAnnotations());\n    scan(spoon.reflect.path.CtRole.MODULE_DIRECTIVE, module.getModuleDirectives());\n    scan(spoon.reflect.path.CtRole.SUB_PACKAGE, module.getRootPackage());\n    exit(module);\n}\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:920) calls unexpected methods: [getComments(), getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:937) calls unexpected methods: [getComments()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:587) calls unexpected methods: [getTypeCasts(), getAnnotations(), getTarget()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:315) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:324) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:259) calls unexpected methods: [getDeclaringType(), getPackage()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:553) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:611) calls unexpected methods: [getTypeCasts(), getAnnotations(), getType()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:575) calls unexpected methods: [getTypeCasts(), getAnnotations(), getType()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:760) calls unexpected methods: [getAnnotations(), getDeclaringType(), getPackage(), getActualTypeArguments()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:966) calls unexpected methods: [getComments()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:710) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:676) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:413) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:782) calls unexpected methods: [getTypeCasts(), getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:383) calls unexpected methods: [getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:186) calls unexpected methods: [getComments(), getAnnotations(), getType()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:392) calls unexpected methods: [getSuperInterfaces(), getAnnotations(), getTypeMembers()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:598) calls unexpected methods: [getTypeCasts(), getAnnotations(), getExecutable(), getArguments(), getTarget()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:538) calls unexpected methods: [getComments(), getAnnotations()]\nCtScanner (/root/workspace/INRIA/spoon/388836284/src/main/java/spoon/reflect/visitor/CtScanner.java:624) calls unexpected methods: [getTypeCasts(), getComments(), getAnnotations(), getType()]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [
        "testGenerateRoleHandler"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "ModelRoleHandlers different expected:\u003c...\n    static class Ct[VariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference\u003c?\u003e\u003e {\n        private CtVariableAccess_VARIABLE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setVariable(castValue(value));\n        }\n    }\n\n    private ModelRoleHandlers() {\n    }\n\n    static final spoon.reflect.meta.RoleHandler[] roleHandlers \u003d new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_IS_UPPER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLabelledFlowBreak_TARGET_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_THEN_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_THEN_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_THROWN_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTryWithResource_TRY_RESOURCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayTypeReference_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypedElement_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariableReference_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_TYPE_MEMBER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtEnum_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLiteral_VALU]E_RoleHandler(), new...\u003e but was:\u003c...\n    static class Ct[FieldAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtFieldAccess, spoon.reflect.reference.CtFieldReference\u003c?\u003e\u003e {\n        private CtFieldAccess_VARIABLE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtFieldAccess.class, spoon.reflect.reference.CtFieldReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));\n        }\n    }\n\n    static class CtVariableAccess_VARIABLE_RoleHandler extends spoon.reflect.meta.impl.SingleHandler\u003cspoon.reflect.code.CtVariableAccess, spoon.reflect.reference.CtVariableReference\u003c?\u003e\u003e {\n        private CtVariableAccess_VARIABLE_RoleHandler() {\n            super(spoon.reflect.path.CtRole.VARIABLE, spoon.reflect.code.CtVariableAccess.class, spoon.reflect.reference.CtVariableReference.class);\n        }\n\n        @java.lang.SuppressWarnings(\"unchecked\")\n        @java.lang.Override\n        public \u003cT, U\u003e U getValue(T element) {\n            return ((U) ((java.lang.Object) (castTarget(element).getVariable())));\n        }\n\n        @java.lang.Override\n        public \u003cT, U\u003e void setValue(T element, U value) {\n            castTarget(element).setVariable(castValue(value));\n        }\n    }\n\n    private ModelRoleHandlers() {\n    }\n\n    static final spoon.reflect.meta.RoleHandler[] roleHandlers \u003d new spoon.reflect.meta.RoleHandler[]{ new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeAccess_ACCESSED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_ANNOTATION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_ANNOTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_ARGUMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssignment_ASSIGNED_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtRHSReceiver_ASSIGNMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBodyHolder_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_BODY_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIntersectionTypeReference_BOUND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_BOUNDING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_CASE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExpression_CAST_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_CATCH_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_COMMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_COMMENT_CONTENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDoc_COMMENT_TAG_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtComment_COMMENT_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_CONDITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtClass_CONSTRUCTOR_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_CONTAINED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_DECLARING_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariable_DEFAULT_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_DIMENSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_ELSE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAbstractInvocation_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_EXPORTED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayAccess_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAssert_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCase_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtDo_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLambda_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewArray_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReturn_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSwitch_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtSynchronized_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtThrow_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtWhile_EXPRESSION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_FIELD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTry_FINALIZER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtForEach_FOREACH_VARIABLE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_INIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFor_FOR_UPDATE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtImport_IMPORT_REFERENCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_INTERFACE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMethod_IS_DEFAULT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_FINAL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_IS_IMPLICIT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtShadowable_IS_SHADOW_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldReference_IS_STATIC_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeParameterReference_IS_UPPER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtParameter_IS_VARARGS_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatement_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_LEFT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_METHOD_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModifiable_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_MODIFIER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_MODULE_DIRECTIVE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModuleRequirement_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_MODULE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtMultiTypedElement_MULTI_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNamedElement_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtReference_NAME_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtNewClass_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_NESTED_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_OPENED_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtOperatorAssignment_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUnaryOperator_OPERATOR_KIND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackageExport_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeReference_PACKAGE_REF_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCatch_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtElement_POSITION_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_PROVIDED_SERVICE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_REQUIRED_MODULE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtBinaryOperator_RIGHT_OPERAND_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtProvidedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtUsedService_SERVICE_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtCodeSnippet_SNIPPET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtStatementList_STATEMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtModule_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtPackage_SUB_PACKAGE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypeInformation_SUPER_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTargetedExpression_TARGET_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLabelledFlowBreak_TARGET_LABEL_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtConditional_THEN_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtIf_THEN_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutable_THROWN_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTryWithResource_TRY_RESOURCE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtArrayTypeReference_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtExecutableReference_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtTypedElement_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtVariableReference_TYPE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtType_TYPE_MEMBER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtAnnotation_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtEnum_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtLiteral_VALUE_RoleHandler(), new spoon.reflect.meta.impl.ModelRoleHandlers.CtFieldAccess_VARIABL]E_RoleHandler(), new...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [
        "testContract[CtModuleRequirement]",
        "testContract[CtEnum]",
        "testContract[CtField]",
        "testContract[CtUnboundVariableReference]",
        "testContract[CtAssert]",
        "testContract[CtVariableWrite]",
        "testContract[CtLocalVariable]",
        "testContract[CtUsedService]",
        "testContract[CtBreak]",
        "testContract[CtAnonymousExecutable]",
        "testContract[CtAnnotationFieldAccess]",
        "testContract[CtAssignment]",
        "testContract[CtLocalVariableReference]",
        "testContract[CtModule]",
        "testContract[CtArrayRead]",
        "testContract[CtPackage]",
        "testContract[CtJavaDoc]",
        "testContract[CtModuleReference]",
        "testContract[CtAnnotation]",
        "testContract[CtPackageReference]",
        "testContract[CtNewClass]",
        "testContract[CtSynchronized]",
        "testContract[CtInterface]",
        "testContract[CtCatch]",
        "testContract[CtMethod]",
        "testContract[CtVariableRead]",
        "testContract[CtLiteral]",
        "testContract[CtTypeParameter]",
        "testContract[CtForEach]",
        "testContract[CtDo]",
        "testContract[CtProvidedService]",
        "testContract[CtCodeSnippetExpression]",
        "testContract[CtConstructor]",
        "testContract[CtExecutableReferenceExpression]",
        "testContract[CtThrow]",
        "testContract[CtEnumValue]",
        "testContract[CtConstructorCall]",
        "testContract[CtConditional]",
        "testContract[CtIf]",
        "testContract[CtStatementList]",
        "testContract[CtImport]",
        "testContract[CtTypeAccess]",
        "testContract[CtSuperAccess]",
        "testContract[CtWhile]",
        "testContract[CtExecutableReference]",
        "testContract[CtArrayWrite]",
        "testContract[CtParameterReference]",
        "testContract[CtOperatorAssignment]",
        "testContract[CtJavaDocTag]",
        "testContract[CtParameter]",
        "testContract[CtCatchVariableReference]",
        "testContract[CtFor]",
        "testContract[CtFieldReference]",
        "testContract[CtThisAccess]",
        "testContract[CtPackageExport]",
        "testContract[CtCatchVariable]",
        "testContract[CtClass]",
        "testContract[CtUnaryOperator]",
        "testContract[CtBinaryOperator]",
        "testContract[CtInvocation]",
        "testContract[CtFieldWrite]",
        "testContract[CtSwitch]",
        "testContract[CtTryWithResource]",
        "testContract[CtFieldRead]",
        "testContract[CtReturn]",
        "testContract[CtTry]",
        "testContract[CtNewArray]",
        "testContract[CtComment]",
        "testContract[CtLambda]",
        "testContract[CtCodeSnippetStatement]",
        "testContract[CtCase]",
        "testContract[CtAnnotationType]",
        "testContract[CtContinue]",
        "testContract[CtAnnotationMethod]",
        "testContract[CtBlock]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtConditional have problems:\nUnsettableProperty CtConditional#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtConditional#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtConditional#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtConditional#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtProvidedService have problems:\nUnsettableProperty CtProvidedService#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtProvidedService#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtParameter have problems:\nUnsettableProperty CtParameter#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtParameter#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtWhile have problems:\nUnsettableProperty CtWhile#body\u003cspoon.reflect.code.CtStatement\u003e sets the value\nUnsettableProperty CtWhile#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtWhile#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtCatchVariableReference have problems:\nUnsettableProperty CtCatchVariableReference#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtCatchVariableReference#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtContinue have problems:\nUnsettableProperty CtContinue#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtContinue#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtInterface have problems:\nUnsettableProperty CtInterface#typeMember\u003cjava.util.List\u003cspoon.reflect.declaration.CtTypeMember\u003e\u003e sets the value\nUnsettableProperty CtInterface#interface\u003cjava.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtInterface#typeParameter\u003cjava.util.List\u003cspoon.reflect.declaration.CtTypeParameter\u003e\u003e sets the value\nUnsettableProperty CtInterface#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtInterface#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtAssignment have problems:\nUnsettableProperty CtAssignment#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtAssignment#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtBinaryOperator have problems:\nUnsettableProperty CtBinaryOperator#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtBinaryOperator#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtBinaryOperator#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtBinaryOperator#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtEnumValue have problems:\nUnsettableProperty CtEnumValue#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtEnumValue#defaultExpression\u003cspoon.reflect.code.CtExpression\u003cT\u003e\u003e sets the value\nUnsettableProperty CtEnumValue#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtEnumValue#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtModuleRequirement have problems:\nUnsettableProperty CtModuleRequirement#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtModuleRequirement#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtForEach have problems:\nUnsettableProperty CtForEach#body\u003cspoon.reflect.code.CtStatement\u003e sets the value\nUnsettableProperty CtForEach#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtForEach#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtConstructor have problems:\nUnsettableProperty CtConstructor#parameter\u003cjava.util.List\u003cspoon.reflect.declaration.CtParameter\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtConstructor#body\u003cspoon.reflect.code.CtStatement\u003e sets the value\nUnsettableProperty CtConstructor#thrown\u003cjava.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e\u003e sets the value\nUnsettableProperty CtConstructor#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtConstructor#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtSuperAccess have problems:\nUnsettableProperty CtSuperAccess#variable\u003cspoon.reflect.reference.CtVariableReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtSuperAccess#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtSuperAccess#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtSuperAccess#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtSuperAccess#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Settable field CtAnonymousExecutable#thrown\u003cjava.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e\u003e should set value.\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtComment have problems:\nUnsettableProperty CtComment#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtComment#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtThisAccess have problems:\nUnsettableProperty CtThisAccess#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtThisAccess#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtThisAccess#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtThisAccess#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtThisAccess#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtArrayWrite have problems:\nUnsettableProperty CtArrayWrite#expression\u003cspoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e\u003e sets the value\nUnsettableProperty CtArrayWrite#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtArrayWrite#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtArrayWrite#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtArrayWrite#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtArrayWrite#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtPackageReference have problems:\nUnsettableProperty CtPackageReference#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtJavaDoc have problems:\nUnsettableProperty CtJavaDoc#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtJavaDoc#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtArrayRead have problems:\nUnsettableProperty CtArrayRead#expression\u003cspoon.reflect.code.CtExpression\u003cjava.lang.Integer\u003e\u003e sets the value\nUnsettableProperty CtArrayRead#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtArrayRead#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtArrayRead#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtArrayRead#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtArrayRead#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtStatementList have problems:\nUnsettableProperty CtStatementList#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtStatementList#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtVariableWrite have problems:\nUnsettableProperty CtVariableWrite#variable\u003cspoon.reflect.reference.CtVariableReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtVariableWrite#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtVariableWrite#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtVariableWrite#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtVariableWrite#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtParameterReference have problems:\nUnsettableProperty CtParameterReference#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtParameterReference#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtOperatorAssignment have problems:\nUnsettableProperty CtOperatorAssignment#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtOperatorAssignment#assignment\u003cspoon.reflect.code.CtExpression\u003cA\u003e\u003e sets the value\nUnsettableProperty CtOperatorAssignment#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtOperatorAssignment#assigned\u003cspoon.reflect.code.CtExpression\u003cT\u003e\u003e sets the value\nUnsettableProperty CtOperatorAssignment#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtOperatorAssignment#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtAnnotationFieldAccess have problems:\nUnsettableProperty CtAnnotationFieldAccess#variable\u003cspoon.reflect.reference.CtFieldReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtAnnotationFieldAccess#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtAnnotationFieldAccess#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtAnnotationFieldAccess#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtAnnotationFieldAccess#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtAnnotationFieldAccess#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtUnboundVariableReference have problems:\nUnsettableProperty CtUnboundVariableReference#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtAnnotationMethod have problems:\nUnsettableProperty CtAnnotationMethod#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtAnnotationMethod#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtAnnotationMethod#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtClass have problems:\nUnsettableProperty CtClass#typeMember\u003cjava.util.List\u003cspoon.reflect.declaration.CtTypeMember\u003e\u003e sets the value\nUnsettableProperty CtClass#interface\u003cjava.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtClass#typeParameter\u003cjava.util.List\u003cspoon.reflect.declaration.CtTypeParameter\u003e\u003e sets the value\nUnsettableProperty CtClass#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtClass#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtBlock have problems:\nUnsettableProperty CtBlock#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtBlock#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtPackage have problems:\nUnsettableProperty CtPackage#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtPackage#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtTryWithResource have problems:\nUnsettableProperty CtTryWithResource#body\u003cspoon.reflect.code.CtStatement\u003e sets the value\nUnsettableProperty CtTryWithResource#finalizer\u003cspoon.reflect.code.CtBlock\u003c?\u003e\u003e sets the value\nUnsettableProperty CtTryWithResource#catch\u003cjava.util.List\u003cspoon.reflect.code.CtCatch\u003e\u003e sets the value\nUnsettableProperty CtTryWithResource#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtTryWithResource#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtAssert have problems:\nUnsettableProperty CtAssert#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtAssert#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtSwitch have problems:\nUnsettableProperty CtSwitch#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtSwitch#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtTry have problems:\nUnsettableProperty CtTry#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtTry#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtSynchronized have problems:\nUnsettableProperty CtSynchronized#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtSynchronized#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtImport have problems:\nUnsettableProperty CtImport#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtImport#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtInvocation have problems:\nUnsettableProperty CtInvocation#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtInvocation#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtInvocation#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtInvocation#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtCodeSnippetExpression have problems:\nUnsettableProperty CtCodeSnippetExpression#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtCodeSnippetExpression#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtCodeSnippetExpression#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtCodeSnippetExpression#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtFieldWrite have problems:\nUnsettableProperty CtFieldWrite#variable\u003cspoon.reflect.reference.CtFieldReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtFieldWrite#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtFieldWrite#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtFieldWrite#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtFieldWrite#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtFieldWrite#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtUnaryOperator have problems:\nUnsettableProperty CtUnaryOperator#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtUnaryOperator#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtUnaryOperator#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtUnaryOperator#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtExecutableReference have problems:\nUnsettableProperty CtExecutableReference#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtFor have problems:\nUnsettableProperty CtFor#body\u003cspoon.reflect.code.CtStatement\u003e sets the value\nUnsettableProperty CtFor#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtFor#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtVariableRead have problems:\nUnsettableProperty CtVariableRead#variable\u003cspoon.reflect.reference.CtVariableReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtVariableRead#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtVariableRead#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtVariableRead#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtVariableRead#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtTypeParameter have problems:\nUnsettableProperty CtTypeParameter#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtTypeParameter#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtLocalVariable have problems:\nUnsettableProperty CtLocalVariable#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtLocalVariable#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtIf have problems:\nUnsettableProperty CtIf#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtIf#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtModule have problems:\nUnsettableProperty CtModule#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtModule#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtPackageExport have problems:\nUnsettableProperty CtPackageExport#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtPackageExport#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtConstructorCall have problems:\nUnsettableProperty CtConstructorCall#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtConstructorCall#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtConstructorCall#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtConstructorCall#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtCase have problems:\nUnsettableProperty CtCase#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtCase#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtModuleReference have problems:\nUnsettableProperty CtModuleReference#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtCatch have problems:\nUnsettableProperty CtCatch#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtCatch#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtMethod have problems:\nUnsettableProperty CtMethod#parameter\u003cjava.util.List\u003cspoon.reflect.declaration.CtParameter\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtMethod#body\u003cspoon.reflect.code.CtStatement\u003e sets the value\nUnsettableProperty CtMethod#thrown\u003cjava.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c? extends java.lang.Throwable\u003e\u003e\u003e sets the value\nUnsettableProperty CtMethod#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtMethod#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtLambda have problems:\nUnsettableProperty CtLambda#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtLambda#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtLambda#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtLambda#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtNewArray have problems:\nUnsettableProperty CtNewArray#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtNewArray#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtNewArray#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtNewArray#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtUsedService have problems:\nUnsettableProperty CtUsedService#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtUsedService#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtThrow have problems:\nUnsettableProperty CtThrow#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtThrow#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtLiteral have problems:\nUnsettableProperty CtLiteral#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtLiteral#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtLiteral#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtLiteral#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtReturn have problems:\nUnsettableProperty CtReturn#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtReturn#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtField have problems:\nUnsettableProperty CtField#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtField#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtJavaDocTag have problems:\nUnsettableProperty CtJavaDocTag#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtJavaDocTag#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtTypeAccess have problems:\nUnsettableProperty CtTypeAccess#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtTypeAccess#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtTypeAccess#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtCodeSnippetStatement have problems:\nUnsettableProperty CtCodeSnippetStatement#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtCodeSnippetStatement#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtDo have problems:\nUnsettableProperty CtDo#body\u003cspoon.reflect.code.CtStatement\u003e sets the value\nUnsettableProperty CtDo#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtDo#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtAnnotation have problems:\nUnsettableProperty CtAnnotation#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtAnnotation#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtAnnotation#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtFieldRead have problems:\nUnsettableProperty CtFieldRead#variable\u003cspoon.reflect.reference.CtFieldReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtFieldRead#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtFieldRead#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtFieldRead#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtFieldRead#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtFieldRead#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtBreak have problems:\nUnsettableProperty CtBreak#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtBreak#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtFieldReference have problems:\nUnsettableProperty CtFieldReference#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtFieldReference#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtEnum have problems:\nUnsettableProperty CtEnum#typeMember\u003cjava.util.List\u003cspoon.reflect.declaration.CtTypeMember\u003e\u003e sets the value\nUnsettableProperty CtEnum#interface\u003cjava.util.Set\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtEnum#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtEnum#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtNewClass have problems:\nUnsettableProperty CtNewClass#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtNewClass#executableRef\u003cspoon.reflect.reference.CtExecutableReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtNewClass#argument\u003cjava.util.List\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtNewClass#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtNewClass#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtNewClass#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtNewClass#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtLocalVariableReference have problems:\nUnsettableProperty CtLocalVariableReference#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtLocalVariableReference#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtAnnotationType have problems:\nUnsettableProperty CtAnnotationType#typeMember\u003cjava.util.List\u003cspoon.reflect.declaration.CtTypeMember\u003e\u003e sets the value\nUnsettableProperty CtAnnotationType#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtAnnotationType#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtCatchVariable have problems:\nUnsettableProperty CtCatchVariable#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtCatchVariable#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "The accessors of CtExecutableReferenceExpression have problems:\nUnsettableProperty CtExecutableReferenceExpression#target\u003cspoon.reflect.code.CtExpression\u003c?\u003e\u003e sets the value\nUnsettableProperty CtExecutableReferenceExpression#type\u003cspoon.reflect.reference.CtTypeReference\u003cT\u003e\u003e sets the value\nUnsettableProperty CtExecutableReferenceExpression#cast\u003cjava.util.List\u003cspoon.reflect.reference.CtTypeReference\u003c?\u003e\u003e\u003e sets the value\nUnsettableProperty CtExecutableReferenceExpression#annotation\u003cjava.util.List\u003cspoon.reflect.declaration.CtAnnotation\u003c? extends java.lang.annotation.Annotation\u003e\u003e\u003e sets the value\nUnsettableProperty CtExecutableReferenceExpression#comment\u003cjava.util.List\u003cspoon.reflect.code.CtComment\u003e\u003e sets the value",
          "isError": false
        }
      ],
      "nbFailures": 75,
      "nbErrors": 0
    }
  ]
}