{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 1,
  "repo": "INRIA/spoon",
  "metrics": {
    "FailureNames": [
      "java.lang.IndexOutOfBoundsException",
      "java.lang.AssertionError",
      "org.junit.ComparisonFailure"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 7,
      "ComputeClasspath": 18,
      "ComputeTestDir": 0,
      "BuildProject": 189,
      "InitRepoToPush": 25,
      "ComputeSourceDir": 0,
      "AstorJMut": 58,
      "CloneRepository": 17,
      "CheckoutPatchedBuild": 0,
      "Nopol": 263,
      "NPEFix": 0,
      "TestProject": 923,
      "GatherTestInformation": 6,
      "CommitPatch": 28
    },
    "NbFailingTests": 7,
    "NbErroringTests": 1,
    "NbSkippingTests": 4,
    "NbRunningTests": 1544,
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/2ebc6b6120f55eb033652ad27c0ec27438da7a2b",
    "ReproductionDate": "Jul 2, 2018 11:18:20 PM",
    "BuggyBuildId": 399312478,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/399312478",
    "BuggyBuildDate": "Jul 2, 2018 11:17:00 PM",
    "BugCommit": "2ebc6b6120f55eb033652ad27c0ec27438da7a2b",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 1,
    "NbLibraries": 30,
    "NbFileApp": 0,
    "NbFileTests": 701,
    "NbCPU": 32,
    "FreeMemory": 5757613656,
    "TotalMemory": 6126305280,
    "AngelicValuesByTest": {
      "spoon/test/architecture/SpoonArchitectureEnforcerTest": 0,
      "spoon/test/prettyprinter/PrintChangesTest": 0,
      "spoon/test/compilationunit/TestCompilationUnit": 0,
      "spoon/test/prettyprinter/LinesTest": 0,
      "spoon/MavenLauncherTest": 0,
      "spoon/test/imports/ImportTest": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 386513776,
      "ComputeClasspath": 581762328,
      "ComputeTestDir": 581762328,
      "BuildProject": 371738208,
      "InitRepoToPush": 585798040,
      "ComputeSourceDir": 581762328,
      "AstorJMut": 5846524504,
      "CloneRepository": 502574928,
      "CheckoutPatchedBuild": 5757613656,
      "Nopol": 549446928,
      "NPEFix": 549446928,
      "TestProject": 359604888,
      "GatherTestInformation": 726337296,
      "CommitPatch": 5757613656
    },
    "NbSucceedingTests": 1536
  },
  "failingModule": "/root/workspace/INRIA/spoon/399312478",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 7,
  "error-types": [
    "java.lang.IndexOutOfBoundsException",
    "java.lang.AssertionError",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1544,
  "failing-test-cases": [
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [
        "testSpecPackage"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "you have created a new package or removed an existing one, please declare it explicitly in SpoonArchitectureEnforcerTest#testSpecPackage\n\nDetails: Package spoon.experimental.modelobs presents in computed but not expected set.",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [
        "testAddDeclaredTypeInCU"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.prettyprinter.PrintChangesTest",
      "failingMethods": [
        "testPrintChanged",
        "testPrintUnchaged"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inter.testclasses;\n\n[import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? ]\u003e but was:\u003c...inter.testclasses;\n\n[\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inter.testclasses;\n\n[import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? ]\u003e but was:\u003c...inter.testclasses;\n\n[\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String modified \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? \n]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [
        "testmportInCu"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.prettyprinter.LinesTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIdenticalPrettyPrinter"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 2, Size: 2",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}