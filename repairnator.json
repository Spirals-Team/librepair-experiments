{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 68,
      "ComputeClasspath": 6,
      "ComputeTestDir": 0,
      "ResolveDependency": 229,
      "BuildProject": 804,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 38,
      "CloneRepository": 39,
      "NopolRepair": 1477,
      "CheckoutPatchedBuild": 0,
      "TestProject": 711,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 10,
      "CommitPatch": 58
    },
    "BugCommitUrl": "http://github.com/prestodb/presto/commit/11a2f082c97f2ca6b18e93bfa0b0f3381931a33e",
    "NbFailingTests": 41,
    "ReproductionDate": "Aug 8, 2017 4:37:50 PM",
    "BuggyBuildId": 262238336,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/prestodb/presto/builds/262238336",
    "BuggyBuildDate": "Aug 8, 2017 3:33:26 PM",
    "BugCommit": "11a2f082c97f2ca6b18e93bfa0b0f3381931a33e",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 3791,
    "NbLibraries": 144,
    "NbFileApp": 6632,
    "NbFileTests": 2142,
    "NbCPU": 8,
    "FreeMemory": 1040961352,
    "TotalMemory": 4811915264,
    "AngelicValuesByTest": {
      "com/facebook/presto/sql/planner/iterative/rule/TestPushProjectionThroughUnion": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneValuesColumns": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPushAggregationThroughOuterJoin": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestSwapAdjacentWindowsBySpecifications": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPushTableWriteThroughUnion": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestInlineProjections": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestMergeFilters": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneFilterColumns": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneProjectColumns": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestRemoveEmptyDelete": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneTopNColumns": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPushProjectionThroughExchange": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneMarkDistinctColumns": 0,
      "com/facebook/presto/sql/planner/optimizations/TestUnionWithReplicatedJoin": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneCrossJoinColumns": 0,
      "com/facebook/presto/sql/planner/optimizations/TestMergeWindows": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestMergeAdjacentWindows": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPushLimitThroughMarkDistinct": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneIndexSourceColumns": 0,
      "com/facebook/presto/sql/planner/optimizations/TestReorderWindows": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneTableScanColumns": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneSemiJoinColumns": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneJoinColumns": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestPruneAggregationColumns": 0,
      "com/facebook/presto/sql/planner/optimizations/TestUnion": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 164462816,
      "ComputeClasspath": 267751232,
      "ComputeTestDir": 454803672,
      "ResolveDependency": 367537928,
      "BuildProject": 296658584,
      "NPERepair": 273748208,
      "ComputeSourceDir": 267751232,
      "InitRepoToPush": 175126176,
      "CloneRepository": 632277144,
      "NopolRepair": 1431128920,
      "CheckoutPatchedBuild": 1040961352,
      "TestProject": 266499168,
      "GatherTestInformation": 233675304,
      "PushIncriminatedBuild": 273748208,
      "CommitPatch": 1040961352
    }
  },
  "failingModule": "/root/workspace/prestodb/presto/262238336/presto-main",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 41,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 3791,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPushTableWriteThroughUnion",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPushTableWriteThroughUnion#testPushThroughUnion"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PushTableWriteThroughUnion did not fire for:\n        - TableWriter \u003d\u003e [partialrows:bigint, fragment:varbinary]\n                a :\u003d A\n                b :\u003d B\n            - Union \u003d\u003e [A:bigint, B:bigint]\n                - Values \u003d\u003e [A1:bigint, B1:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [A2:bigint, B2:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPushLimitThroughMarkDistinct",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPushLimitThroughMarkDistinct#test"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PushLimitThroughMarkDistinct did not fire for:\n        - Limit[1] \u003d\u003e [foo:bigint]\n                Cost: {rows: 1, bytes: ?}\n            - MarkDistinct[distinct\u003d marker\u003dfoo] \u003d\u003e [foo:bigint]\n                - Values \u003d\u003e []\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPushProjectionThroughUnion",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPushProjectionThroughUnion#test"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PushProjectionThroughUnion did not fire for:\n        - Project[] \u003d\u003e [c_times_3:bigint]\n                c_times_3 :\u003d (\"c\" * 3)\n            - Union \u003d\u003e [c:bigint]\n                - Values \u003d\u003e [a:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [b:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneAggregationColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneAggregationColumns#testNotAllInputsReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneAggregationColumns did not fire for:\n        - Project[] \u003d\u003e [b:bigint]\n            - Aggregate[key] \u003d\u003e [key:bigint, a:bigint, b:bigint]\n                    a :\u003d \"count\"(*)\n                    b :\u003d \"count\"(*)\n                - Values \u003d\u003e [key:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestMergeAdjacentWindows",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestMergeAdjacentWindows#testIdenticalAdjacentWindowSpecifications"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.MergeAdjacentWindows did not fire for:\n        - Window[partition by (a)] \u003d\u003e [a:bigint, sum_1:bigint, avg_1:bigint]\n                avg_1 :\u003d avg(\"a\") \n            - Window[partition by (a)] \u003d\u003e [a:bigint, sum_1:bigint]\n                    sum_1 :\u003d sum(\"a\") \n                - Values \u003d\u003e [a:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneTopNColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneTopNColumns#testNotAllInputsReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneTopNColumns did not fire for:\n        - Project[] \u003d\u003e [b:bigint]\n            - TopN[10 by (b ASC_NULLS_FIRST)] \u003d\u003e [a:bigint, b:bigint]\n                - Values \u003d\u003e [a:bigint, b:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneIndexSourceColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneIndexSourceColumns#testNotAllOutputsReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneIndexSourceColumns did not fire for:\n        - Project[] \u003d\u003e [orderkey:integer]\n            - IndexSource[local:INSTANCE:INSTANCE, lookup \u003d [orderkey, custkey]] \u003d\u003e [orderkey:integer, custkey:integer, totalprice:double]\n                    orderkey :\u003d tpch:orderkey\n                    custkey :\u003d tpch:custkey\n                    totalprice :\u003d tpch:totalprice\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneMarkDistinctColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneMarkDistinctColumns#testMarkerSymbolNotReferenced",
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneMarkDistinctColumns#testSourceSymbolNotReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneMarkDistinctColumns did not fire for:\n        - Project[] \u003d\u003e [key2:bigint]\n                key2 :\u003d \"key\"\n            - MarkDistinct[distinct\u003dkey:bigint marker\u003dmark] \u003d\u003e [key:bigint, unused:bigint, mark:bigint]\n                - Values \u003d\u003e [key:bigint, unused:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneMarkDistinctColumns did not fire for:\n        - Project[] \u003d\u003e [mark:bigint]\n            - MarkDistinct[distinct\u003dkey:bigint marker\u003dmark][hash] \u003d\u003e [key:bigint, hash:bigint, unused:bigint, mark:bigint]\n                - Values \u003d\u003e [key:bigint, hash:bigint, unused:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestInlineProjections",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestInlineProjections#test"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.InlineProjections did not fire for:\n        - Project[] \u003d\u003e [identity:bigint, multi_complex_1:bigint, multi_complex_2:bigint, multi_literal_1:bigint, multi_literal_2:bigint, single_complex:bigint, try:bigint]\n                Cost: {rows: 0, bytes: ?}\n                identity :\u003d \"symbol\"\n                multi_complex_1 :\u003d (\"complex\" + 1)\n                multi_complex_2 :\u003d (\"complex\" + 2)\n                multi_literal_1 :\u003d (\"literal\" + 1)\n                multi_literal_2 :\u003d (\"literal\" + 2)\n                single_complex :\u003d (\"complex_2\" + 2)\n                try :\u003d TRY((\"complex\" / \"literal\"))\n            - Project[] \u003d\u003e [symbol:bigint, complex:bigint, literal:bigint, complex_2:bigint]\n                    Cost: {rows: 0, bytes: ?}\n                    symbol :\u003d \"x\"\n                    complex :\u003d (\"x\" * 2)\n                    literal :\u003d 1\n                    complex_2 :\u003d (\"x\" - 1)\n                - Values \u003d\u003e [x:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPushAggregationThroughOuterJoin",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPushAggregationThroughOuterJoin#testPushesAggregationThroughLeftJoin",
        "com.facebook.presto.sql.planner.iterative.rule.TestPushAggregationThroughOuterJoin#testPushesAggregationThroughRightJoin"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PushAggregationThroughOuterJoin did not fire for:\n        - Aggregate[COL1] \u003d\u003e [COL1:bigint, AVG:double]\n                AVG :\u003d \"avg\"(\"COL2\")\n            - LeftJoin[(\"COL1\" \u003d \"COL2\")] \u003d\u003e [COL1:bigint, COL2:bigint]\n                    Cost: {rows: 2, bytes: ?}\n                - Values \u003d\u003e [COL1:bigint]\n                        Cost: {rows: 1, bytes: ?}\n                        (10)\n                - Values \u003d\u003e [COL2:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PushAggregationThroughOuterJoin did not fire for:\n        - Aggregate[COL1] \u003d\u003e [COL1:bigint, AVG:double]\n                AVG :\u003d \"avg\"(\"COL2\")\n            - RightJoin[(\"COL2\" \u003d \"COL1\")] \u003d\u003e [COL2:bigint, COL1:bigint]\n                    Cost: {rows: 2, bytes: ?}\n                - Values \u003d\u003e [COL2:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [COL1:bigint]\n                        Cost: {rows: 1, bytes: ?}\n                        (10)\n",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPushProjectionThroughExchange",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPushProjectionThroughExchange#testSimpleMultipleInputs",
        "com.facebook.presto.sql.planner.iterative.rule.TestPushProjectionThroughExchange#testPartitioningColumnAndHashWithoutIdentityMappingInProjection"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PushProjectionThroughExchange did not fire for:\n        - Project[] \u003d\u003e [a_times_5:bigint, b_times_5:bigint, h_times_5:bigint]\n                Cost: {rows: 0, bytes: ?}\n                a_times_5 :\u003d (\"a\" * 5)\n                b_times_5 :\u003d (\"b\" * 5)\n                h_times_5 :\u003d (\"h\" * 5)\n            - RemoteExchange[GATHER][h] \u003d\u003e a:bigint, b:bigint, h:bigint\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [a:bigint, b:bigint, h:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PushProjectionThroughExchange did not fire for:\n        - Project[] \u003d\u003e [x:bigint, c2:bigint]\n                Cost: {rows: 0, bytes: ?}\n                x :\u003d 3\n                c2 :\u003d \"c\"\n            - RemoteExchange[GATHER] \u003d\u003e c:bigint\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [a:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [b:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestSwapAdjacentWindowsBySpecifications",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestSwapAdjacentWindowsBySpecifications#subsetComesFirst"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.SwapAdjacentWindowsBySpecifications did not fire for:\n        - Window[partition by (a)] \u003d\u003e [a:bigint, b:bigint, avg_2:double, avg_1:double]\n                avg_1 :\u003d avg(\"a\") \n            - Window[partition by (a, b)] \u003d\u003e [a:bigint, b:bigint, avg_2:double]\n                    avg_2 :\u003d avg(\"b\") \n                - Values \u003d\u003e [a:bigint, b:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneValuesColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneValuesColumns#testNotAllOutputsReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneValuesColumns did not fire for:\n        - Project[] \u003d\u003e [y:bigint]\n                Cost: {rows: 2, bytes: ?}\n                y :\u003d \"x\"\n            - Values \u003d\u003e [unused:bigint, x:bigint]\n                    Cost: {rows: 2, bytes: ?}\n                    (1, 2)\n                    (3, 4)\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.optimizations.TestUnion",
      "failingMethods": [
        "com.facebook.presto.sql.planner.optimizations.TestUnion#testUnionUnderTopN"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "There should be exactly one RemoteExchange expected [1] but found [2]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneSemiJoinColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneSemiJoinColumns#testSemiJoinNotNeeded",
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneSemiJoinColumns#testValueNotNeeded"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneSemiJoinColumns did not fire for:\n        - Project[] \u003d\u003e [leftValue:bigint]\n                Cost: {rows: 0, bytes: ?}\n            - SemiJoin[leftKey \u003d rightKey][leftKeyHash] \u003d\u003e [leftKey:bigint, leftKeyHash:bigint, leftValue:bigint, match:bigint]\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [leftKey:bigint, leftKeyHash:bigint, leftValue:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [rightKey:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneSemiJoinColumns did not fire for:\n        - Project[] \u003d\u003e [match:bigint]\n                Cost: {rows: 0, bytes: ?}\n            - SemiJoin[leftKey \u003d rightKey][leftKeyHash] \u003d\u003e [leftKey:bigint, leftKeyHash:bigint, leftValue:bigint, match:bigint]\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [leftKey:bigint, leftKeyHash:bigint, leftValue:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [rightKey:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneCrossJoinColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneCrossJoinColumns#testLeftInputNotReferenced",
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneCrossJoinColumns#testRightInputNotReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneCrossJoinColumns did not fire for:\n        - Project[] \u003d\u003e [rightValue:bigint]\n                Cost: {rows: 0, bytes: ?}\n            - CrossJoin \u003d\u003e [leftValue:bigint, rightValue:bigint]\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [leftValue:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [rightValue:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneCrossJoinColumns did not fire for:\n        - Project[] \u003d\u003e [leftValue:bigint]\n                Cost: {rows: 0, bytes: ?}\n            - CrossJoin \u003d\u003e [leftValue:bigint, rightValue:bigint]\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [leftValue:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [rightValue:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneProjectColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneProjectColumns#testNotAllOutputsReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneProjectColumns did not fire for:\n        - Project[] \u003d\u003e [b:bigint]\n                Cost: {rows: 0, bytes: ?}\n            - Project[] \u003d\u003e [a:bigint, b:bigint]\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [a:bigint, b:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneTableScanColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneTableScanColumns#testNotAllOutputsReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneTableScanColumns did not fire for:\n        - ScanProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d null] \u003d\u003e [x:bigint]\n                Cost: {rows: 15000, bytes: ?}/{rows: 15000, bytes: ?}\n                x :\u003d \"totalprice\"\n                orderdate :\u003d tpch:orderdate\n                totalprice :\u003d tpch:totalprice\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestMergeFilters",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestMergeFilters#test"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.MergeFilters did not fire for:\n        - Filter[filterPredicate \u003d (\"b\" \u003e 44)] \u003d\u003e [a:bigint, b:bigint]\n                Cost: {rows: 0, bytes: ?}\n            - Filter[filterPredicate \u003d (\"a\" \u003c 42)] \u003d\u003e [a:bigint, b:bigint]\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [a:bigint, b:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.optimizations.TestReorderWindows",
      "failingMethods": [
        "com.facebook.presto.sql.planner.optimizations.TestReorderWindows#testPrefixOfPartitionComesFirstRegardlessOfTheirOrderInSQL",
        "com.facebook.presto.sql.planner.optimizations.TestReorderWindows#testNonMergeableABAReordersToAABAllOptimizers",
        "com.facebook.presto.sql.planner.optimizations.TestReorderWindows#testReorderBDAC",
        "com.facebook.presto.sql.planner.optimizations.TestReorderWindows#testNonMergeableABAReordersToAAB"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[SHIPDATE], orderings\u003d{SHIPDATE\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dmin (TAX) }\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) }\n            - node(WindowNode)\n                WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[PARTKEY], orderBy\u003d[RECEIPTDATE], orderings\u003d{RECEIPTDATE\u003dASC_NULLS_LAST}}}\n                bind WindowFunctionMatcher{callMaker\u003davg (DISCOUNT) }\n                - node(TableScanNode)\n                    TableScanMatcher{expectedTableName\u003dlineitem}\n                    bind DISCOUNT -\u003e Column lineitem:discount\n                    bind ORDERKEY -\u003e Column lineitem:orderkey\n                    bind QUANTITY -\u003e Column lineitem:quantity\n                    bind PARTKEY -\u003e Column lineitem:partkey\n                    bind RECEIPTDATE -\u003e Column lineitem:receiptdate\n                    bind SHIPDATE -\u003e Column lineitem:shipdate\n                    bind SUPPKEY -\u003e Column lineitem:suppkey\n                    bind TAX -\u003e Column lineitem:tax\n\n] but found [\n\n- Output[sum_quantity_A, avg_discount_B, min_tax_A] \u003d\u003e [sum:double, avg:double, min:double]\n        sum_quantity_A :\u003d sum\n        avg_discount_B :\u003d avg\n        min_tax_A :\u003d min\n    - Project[] \u003d\u003e [sum:double, avg:double, min:double]\n        - Window[partition by (suppkey), order by (shipdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, avg:double, min:double]\n                min :\u003d min(\"tax\") \n            - Window[partition by (partkey), order by (receiptdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, avg:double]\n                    avg :\u003d avg(\"discount\") \n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double]\n                        sum :\u003d sum(\"quantity\") \n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            partkey :\u003d tpch:partkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n                            tax :\u003d tpch:tax\n                            shipdate :\u003d tpch:shipdate\n                            receiptdate :\u003d tpch:receiptdate\n\n] which resolves to [\n\n- Output[sum_quantity_A, avg_discount_B, min_tax_A] \u003d\u003e [sum:double, avg:double, min:double]\n        sum_quantity_A :\u003d sum\n        avg_discount_B :\u003d avg\n        min_tax_A :\u003d min\n    - Project[] \u003d\u003e [sum:double, avg:double, min:double]\n        - Window[partition by (suppkey), order by (shipdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, avg:double, min:double]\n                min :\u003d min(\"tax\") \n            - Window[partition by (partkey), order by (receiptdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, avg:double]\n                    avg :\u003d avg(\"discount\") \n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double]\n                        sum :\u003d sum(\"quantity\") \n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            partkey :\u003d tpch:partkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n                            tax :\u003d tpch:tax\n                            shipdate :\u003d tpch:shipdate\n                            receiptdate :\u003d tpch:receiptdate\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[SHIPDATE], orderings\u003d{SHIPDATE\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dmin (TAX) }\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) }\n            - anyTree\n                - node(WindowNode)\n                    WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[PARTKEY], orderBy\u003d[RECEIPTDATE], orderings\u003d{RECEIPTDATE\u003dASC_NULLS_LAST}}}\n                    bind WindowFunctionMatcher{callMaker\u003davg (DISCOUNT) }\n                    - anyTree\n                        - node(TableScanNode)\n                            TableScanMatcher{expectedTableName\u003dlineitem}\n                            bind DISCOUNT -\u003e Column lineitem:discount\n                            bind ORDERKEY -\u003e Column lineitem:orderkey\n                            bind QUANTITY -\u003e Column lineitem:quantity\n                            bind PARTKEY -\u003e Column lineitem:partkey\n                            bind RECEIPTDATE -\u003e Column lineitem:receiptdate\n                            bind SHIPDATE -\u003e Column lineitem:shipdate\n                            bind SUPPKEY -\u003e Column lineitem:suppkey\n                            bind TAX -\u003e Column lineitem:tax\n\n] but found [\n\n- Output[sum_quantity_A, avg_discount_B, min_tax_A] \u003d\u003e [sum:double, avg:double, min:double]\n        sum_quantity_A :\u003d sum\n        avg_discount_B :\u003d avg\n        min_tax_A :\u003d min\n    - Project[] \u003d\u003e [sum:double, avg:double, min:double]\n        - Window[partition by (suppkey), order by (shipdate ASC_NULLS_LAST)][$hashvalue_24] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, avg:double, $hashvalue_24:bigint, min:double]\n                min :\u003d min(\"tax\") \n            - Project[] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, avg:double, $hashvalue_24:bigint]\n                    $hashvalue_24 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"suppkey\"), 0))\n                - Window[partition by (partkey), order by (receiptdate ASC_NULLS_LAST)][$hashvalue_23] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, $hashvalue_23:bigint, avg:double]\n                        avg :\u003d avg(\"discount\") \n                    - Project[] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, $hashvalue_23:bigint]\n                            $hashvalue_23 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"partkey\"), 0))\n                        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)][$hashvalue] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, $hashvalue:bigint, sum:double]\n                                sum :\u003d sum(\"quantity\") \n                            - Project[] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, $hashvalue:bigint]\n                                    Cost: {rows: 60000, bytes: ?}\n                                - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, $hashvalue:bigint, $hashvalue_20:bigint\n                                        Cost: {rows: 60000, bytes: ?}\n                                    - ScanProject[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, $hashvalue_21:bigint, $hashvalue_22:bigint]\n                                            Cost: {rows: 60000, bytes: ?}/{rows: 60000, bytes: ?}\n                                            $hashvalue_21 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"suppkey\"), 0))\n                                            $hashvalue_22 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"partkey\"), 0))\n                                            orderkey :\u003d tpch:orderkey\n                                            partkey :\u003d tpch:partkey\n                                            suppkey :\u003d tpch:suppkey\n                                            quantity :\u003d tpch:quantity\n                                            discount :\u003d tpch:discount\n                                            tax :\u003d tpch:tax\n                                            shipdate :\u003d tpch:shipdate\n                                            receiptdate :\u003d tpch:receiptdate\n\n] which resolves to [\n\n- Output[sum_quantity_A, avg_discount_B, min_tax_A] \u003d\u003e [sum:double, avg:double, min:double]\n        sum_quantity_A :\u003d sum\n        avg_discount_B :\u003d avg\n        min_tax_A :\u003d min\n    - Project[] \u003d\u003e [sum:double, avg:double, min:double]\n        - Window[partition by (suppkey), order by (shipdate ASC_NULLS_LAST)][$hashvalue_24] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, avg:double, $hashvalue_24:bigint, min:double]\n                min :\u003d min(\"tax\") \n            - Project[] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, avg:double, $hashvalue_24:bigint]\n                    $hashvalue_24 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"suppkey\"), 0))\n                - Window[partition by (partkey), order by (receiptdate ASC_NULLS_LAST)][$hashvalue_23] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, $hashvalue_23:bigint, avg:double]\n                        avg :\u003d avg(\"discount\") \n                    - Project[] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, sum:double, $hashvalue_23:bigint]\n                            $hashvalue_23 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"partkey\"), 0))\n                        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)][$hashvalue] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, $hashvalue:bigint, sum:double]\n                                sum :\u003d sum(\"quantity\") \n                            - Project[] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, $hashvalue:bigint]\n                                    Cost: {rows: 60000, bytes: ?}\n                                - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, $hashvalue:bigint, $hashvalue_20:bigint\n                                        Cost: {rows: 60000, bytes: ?}\n                                    - ScanProject[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint, partkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, shipdate:date, receiptdate:date, $hashvalue_21:bigint, $hashvalue_22:bigint]\n                                            Cost: {rows: 60000, bytes: ?}/{rows: 60000, bytes: ?}\n                                            $hashvalue_21 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"suppkey\"), 0))\n                                            $hashvalue_22 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"partkey\"), 0))\n                                            orderkey :\u003d tpch:orderkey\n                                            partkey :\u003d tpch:partkey\n                                            suppkey :\u003d tpch:suppkey\n                                            quantity :\u003d tpch:quantity\n                                            discount :\u003d tpch:discount\n                                            tax :\u003d tpch:tax\n                                            shipdate :\u003d tpch:shipdate\n                                            receiptdate :\u003d tpch:receiptdate\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY, TAX], orderBy\u003d[RECEIPTDATE], orderings\u003d{RECEIPTDATE\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003davg (DISCOUNT) }\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) }\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dlineitem}\n                bind DISCOUNT -\u003e Column lineitem:discount\n                bind ORDERKEY -\u003e Column lineitem:orderkey\n                bind QUANTITY -\u003e Column lineitem:quantity\n                bind RECEIPTDATE -\u003e Column lineitem:receiptdate\n                bind SUPPKEY -\u003e Column lineitem:suppkey\n                bind TAX -\u003e Column lineitem:tax\n\n] but found [\n\n- Output[avg_discount_A, sum_quantity_A] \u003d\u003e [avg:double, sum:double]\n        avg_discount_A :\u003d avg\n        sum_quantity_A :\u003d sum\n    - Project[] \u003d\u003e [avg:double, sum:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double, sum:double]\n                sum :\u003d sum(\"quantity\") \n            - Window[partition by (suppkey, tax), order by (receiptdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double]\n                    avg :\u003d avg(\"discount\") \n                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date]\n                        Cost: {rows: 60000, bytes: ?}\n                        orderkey :\u003d tpch:orderkey\n                        suppkey :\u003d tpch:suppkey\n                        quantity :\u003d tpch:quantity\n                        discount :\u003d tpch:discount\n                        tax :\u003d tpch:tax\n                        receiptdate :\u003d tpch:receiptdate\n\n] which resolves to [\n\n- Output[avg_discount_A, sum_quantity_A] \u003d\u003e [avg:double, sum:double]\n        avg_discount_A :\u003d avg\n        sum_quantity_A :\u003d sum\n    - Project[] \u003d\u003e [avg:double, sum:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double, sum:double]\n                sum :\u003d sum(\"quantity\") \n            - Window[partition by (suppkey, tax), order by (receiptdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double]\n                    avg :\u003d avg(\"discount\") \n                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date]\n                        Cost: {rows: 60000, bytes: ?}\n                        orderkey :\u003d tpch:orderkey\n                        suppkey :\u003d tpch:suppkey\n                        quantity :\u003d tpch:quantity\n                        discount :\u003d tpch:discount\n                        tax :\u003d tpch:tax\n                        receiptdate :\u003d tpch:receiptdate\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[TAX], orderBy\u003d[RECEIPTDATE], orderings\u003d{RECEIPTDATE\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003davg (QUANTITY) }\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n            bind WindowFunctionMatcher{callMaker\u003davg (DISCOUNT) }\n            - node(WindowNode)\n                WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[RECEIPTDATE], orderBy\u003d[SUPPKEY], orderings\u003d{SUPPKEY\u003dASC_NULLS_LAST}}}\n                bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) }\n                - node(WindowNode)\n                    WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[QUANTITY], orderBy\u003d[RECEIPTDATE], orderings\u003d{RECEIPTDATE\u003dASC_NULLS_LAST}}}\n                    bind WindowFunctionMatcher{callMaker\u003dsum (TAX) }\n                    - node(TableScanNode)\n                        TableScanMatcher{expectedTableName\u003dlineitem}\n                        bind DISCOUNT -\u003e Column lineitem:discount\n                        bind ORDERKEY -\u003e Column lineitem:orderkey\n                        bind QUANTITY -\u003e Column lineitem:quantity\n                        bind RECEIPTDATE -\u003e Column lineitem:receiptdate\n                        bind SUPPKEY -\u003e Column lineitem:suppkey\n                        bind TAX -\u003e Column lineitem:tax\n\n] but found [\n\n- Output[avg_discount_A, sum_tax_E, avg_quantity_D, sum_discount_C] \u003d\u003e [avg:double, sum:double, avg_9:double, sum_13:double]\n        avg_discount_A :\u003d avg\n        sum_tax_E :\u003d sum\n        avg_quantity_D :\u003d avg_9\n        sum_discount_C :\u003d sum_13\n    - Project[] \u003d\u003e [avg:double, sum:double, avg_9:double, sum_13:double]\n        - Window[partition by (receiptdate), order by (suppkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double, sum:double, avg_9:double, sum_13:double]\n                sum_13 :\u003d sum(\"discount\") \n            - Window[partition by (tax), order by (receiptdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double, sum:double, avg_9:double]\n                    avg_9 :\u003d avg(\"quantity\") \n                - Window[partition by (quantity), order by (receiptdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double, sum:double]\n                        sum :\u003d sum(\"tax\") \n                    - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double]\n                            avg :\u003d avg(\"discount\") \n                        - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date]\n                                Cost: {rows: 60000, bytes: ?}\n                                orderkey :\u003d tpch:orderkey\n                                suppkey :\u003d tpch:suppkey\n                                quantity :\u003d tpch:quantity\n                                discount :\u003d tpch:discount\n                                tax :\u003d tpch:tax\n                                receiptdate :\u003d tpch:receiptdate\n\n] which resolves to [\n\n- Output[avg_discount_A, sum_tax_E, avg_quantity_D, sum_discount_C] \u003d\u003e [avg:double, sum:double, avg_9:double, sum_13:double]\n        avg_discount_A :\u003d avg\n        sum_tax_E :\u003d sum\n        avg_quantity_D :\u003d avg_9\n        sum_discount_C :\u003d sum_13\n    - Project[] \u003d\u003e [avg:double, sum:double, avg_9:double, sum_13:double]\n        - Window[partition by (receiptdate), order by (suppkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double, sum:double, avg_9:double, sum_13:double]\n                sum_13 :\u003d sum(\"discount\") \n            - Window[partition by (tax), order by (receiptdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double, sum:double, avg_9:double]\n                    avg_9 :\u003d avg(\"quantity\") \n                - Window[partition by (quantity), order by (receiptdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double, sum:double]\n                        sum :\u003d sum(\"tax\") \n                    - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date, avg:double]\n                            avg :\u003d avg(\"discount\") \n                        - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, tax:double, receiptdate:date]\n                                Cost: {rows: 60000, bytes: ?}\n                                orderkey :\u003d tpch:orderkey\n                                suppkey :\u003d tpch:suppkey\n                                quantity :\u003d tpch:quantity\n                                discount :\u003d tpch:discount\n                                tax :\u003d tpch:tax\n                                receiptdate :\u003d tpch:receiptdate\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestRemoveEmptyDelete",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestRemoveEmptyDelete#test"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.RemoveEmptyDelete did not fire for:\n        - TableCommit[testConnector:com.facebook.presto.testing.TestingMetadata$TestingTableHandle@4ff61627] \u003d\u003e [a:bigint]\n            - RemoteExchange[GATHER] \u003d\u003e a:bigint\n                - Delete[testConnector:com.facebook.presto.testing.TestingMetadata$TestingTableHandle@4ff61627] \u003d\u003e [a:bigint]\n                    - Values \u003d\u003e []\n                            Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneFilterColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneFilterColumns#testNotAllInputsReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneFilterColumns did not fire for:\n        - FilterProject[filterPredicate \u003d (\"b\" \u003e 5)] \u003d\u003e [b:bigint]\n                Cost: {rows: 0, bytes: ?}/{rows: 0, bytes: ?}\n            - Values \u003d\u003e [a:bigint, b:bigint]\n                    Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.optimizations.TestMergeWindows",
      "failingMethods": [
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testMergeDifferentFramesWithDefault",
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testIdenticalWindowSpecificationsAAcpA",
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testIdenticalWindowSpecificationsABA",
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testMergeDifferentFrames",
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testMergeableWindowsAllOptimizers",
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testIdenticalWindowSpecificationsDefaultFrame",
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testNotMergeDifferentPartition",
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testNotMergeDifferentNullOrdering",
        "com.facebook.presto.sql.planner.optimizations.TestMergeWindows#testNotMergeDifferentOrdering"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        bind WindowFunctionMatcher{callMaker\u003dlag (QUANTITY, ONE, ZERO) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        - node(ProjectNode)\n            bind ONE -\u003e CAST(1 AS bigint)\n            bind ZERO -\u003e 0.0\n            - node(WindowNode)\n                WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n                bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n                - node(TableScanNode)\n                    TableScanMatcher{expectedTableName\u003dlineitem}\n                    bind QUANTITY -\u003e Column lineitem:quantity\n                    bind DISCOUNT -\u003e Column lineitem:discount\n                    bind SUPPKEY -\u003e Column lineitem:suppkey\n                    bind ORDERKEY -\u003e Column lineitem:orderkey\n\n] but found [\n\n- Output[sum_quantity_A, sum_quantity_B, sum_discount_A] \u003d\u003e [sum:double, lag:double, sum_10:double]\n        sum_quantity_A :\u003d sum\n        sum_quantity_B :\u003d lag\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, lag:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, expr:bigint, expr_4:double, lag:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, expr:bigint, expr_4:double, lag:double]\n                    lag :\u003d lag(\"quantity\", \"expr\", \"expr_4\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - Project[] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, expr:bigint, expr_4:double]\n                        expr :\u003d CAST(1 AS bigint)\n                        expr_4 :\u003d 0.0\n                    - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double]\n                            sum :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                        - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double]\n                                Cost: {rows: 60000, bytes: ?}\n                                orderkey :\u003d tpch:orderkey\n                                suppkey :\u003d tpch:suppkey\n                                quantity :\u003d tpch:quantity\n                                discount :\u003d tpch:discount\n\n] which resolves to [\n\n- Output[sum_quantity_A, sum_quantity_B, sum_discount_A] \u003d\u003e [sum:double, lag:double, sum_10:double]\n        sum_quantity_A :\u003d sum\n        sum_quantity_B :\u003d lag\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, lag:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, expr:bigint, expr_4:double, lag:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, expr:bigint, expr_4:double, lag:double]\n                    lag :\u003d lag(\"quantity\", \"expr\", \"expr_4\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - Project[] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, expr:bigint, expr_4:double]\n                        expr :\u003d CAST(1 AS bigint)\n                        expr_4 :\u003d 0.0\n                    - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double]\n                            sum :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                        - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double]\n                                Cost: {rows: 60000, bytes: ?}\n                                orderkey :\u003d tpch:orderkey\n                                suppkey :\u003d tpch:suppkey\n                                quantity :\u003d tpch:quantity\n                                discount :\u003d tpch:discount\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[ORDERKEY], orderBy\u003d[SHIPDATE], orderings\u003d{SHIPDATE\u003dASC_NULLS_LAST}}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dlineitem}\n                bind QUANTITY -\u003e Column lineitem:quantity\n                bind DISCOUNT -\u003e Column lineitem:discount\n                bind SUPPKEY -\u003e Column lineitem:suppkey\n                bind ORDERKEY -\u003e Column lineitem:orderkey\n                bind SHIPDATE -\u003e Column lineitem:shipdate\n\n] but found [\n\n- Output[sum_quantity_A, sum_quantity_B, sum_discount_A] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        sum_quantity_A :\u003d sum\n        sum_quantity_B :\u003d sum_6\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (orderkey), order by (shipdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double]\n                    sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double]\n                        sum :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n                            shipdate :\u003d tpch:shipdate\n\n] which resolves to [\n\n- Output[sum_quantity_A, sum_quantity_B, sum_discount_A] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        sum_quantity_A :\u003d sum\n        sum_quantity_B :\u003d sum_6\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (orderkey), order by (shipdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double]\n                    sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double]\n                        sum :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n                            shipdate :\u003d tpch:shipdate\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) }\n        bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) }\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[ORDERKEY], orderBy\u003d[SHIPDATE], orderings\u003d{SHIPDATE\u003dASC_NULLS_LAST}}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) }\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dlineitem}\n                bind QUANTITY -\u003e Column lineitem:quantity\n                bind DISCOUNT -\u003e Column lineitem:discount\n                bind SUPPKEY -\u003e Column lineitem:suppkey\n                bind ORDERKEY -\u003e Column lineitem:orderkey\n                bind SHIPDATE -\u003e Column lineitem:shipdate\n\n] but found [\n\n- Output[_col0, _col1, _col2] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        _col0 :\u003d sum\n        _col1 :\u003d sum_6\n        _col2 :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") \n            - Window[partition by (orderkey), order by (shipdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double]\n                    sum_6 :\u003d sum(\"quantity\") \n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double]\n                        sum :\u003d sum(\"quantity\") \n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n                            shipdate :\u003d tpch:shipdate\n\n] which resolves to [\n\n- Output[_col0, _col1, _col2] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        _col0 :\u003d sum\n        _col1 :\u003d sum_6\n        _col2 :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") \n            - Window[partition by (orderkey), order by (shipdate ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double]\n                    sum_6 :\u003d sum(\"quantity\") \n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double]\n                        sum :\u003d sum(\"quantity\") \n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n                            shipdate :\u003d tpch:shipdate\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003davg (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dUNBOUNDED_FOLLOWING, value\u003dOptional.empty}]}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        - node(TableScanNode)\n            TableScanMatcher{expectedTableName\u003dlineitem}\n            bind QUANTITY -\u003e Column lineitem:quantity\n            bind DISCOUNT -\u003e Column lineitem:discount\n            bind SUPPKEY -\u003e Column lineitem:suppkey\n            bind ORDERKEY -\u003e Column lineitem:orderkey\n\n] but found [\n\n- Output[sum_quantity_C, avg_quantity_D, sum_discount_C] \u003d\u003e [sum:double, avg:double, sum_9:double]\n        sum_quantity_C :\u003d sum\n        avg_quantity_D :\u003d avg\n        sum_discount_C :\u003d sum_9\n    - Project[] \u003d\u003e [sum:double, avg:double, sum_9:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, avg:double, sum_9:double]\n                sum_9 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, avg:double]\n                    avg :\u003d avg(\"quantity\") ROWS CURRENT_ROW UNBOUNDED_FOLLOWING\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double]\n                        sum :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n\n] which resolves to [\n\n- Output[sum_quantity_C, avg_quantity_D, sum_discount_C] \u003d\u003e [sum:double, avg:double, sum_9:double]\n        sum_quantity_C :\u003d sum\n        avg_quantity_D :\u003d avg\n        sum_discount_C :\u003d sum_9\n    - Project[] \u003d\u003e [sum:double, avg:double, sum_9:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, avg:double, sum_9:double]\n                sum_9 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, avg:double]\n                    avg :\u003d avg(\"quantity\") ROWS CURRENT_ROW UNBOUNDED_FOLLOWING\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double]\n                        sum :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003davg (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dUNBOUNDED_FOLLOWING, value\u003dOptional.empty}]}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) }\n        bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) }\n        - node(TableScanNode)\n            TableScanMatcher{expectedTableName\u003dlineitem}\n            bind QUANTITY -\u003e Column lineitem:quantity\n            bind DISCOUNT -\u003e Column lineitem:discount\n            bind SUPPKEY -\u003e Column lineitem:suppkey\n            bind ORDERKEY -\u003e Column lineitem:orderkey\n\n] but found [\n\n- Output[sum_quantity_C, avg_quantity_D, sum_discount_C] \u003d\u003e [sum:double, avg:double, sum_9:double]\n        sum_quantity_C :\u003d sum\n        avg_quantity_D :\u003d avg\n        sum_discount_C :\u003d sum_9\n    - Project[] \u003d\u003e [sum:double, avg:double, sum_9:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, avg:double, sum_9:double]\n                sum_9 :\u003d sum(\"discount\") \n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, avg:double]\n                    avg :\u003d avg(\"quantity\") ROWS CURRENT_ROW UNBOUNDED_FOLLOWING\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double]\n                        sum :\u003d sum(\"quantity\") \n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n\n] which resolves to [\n\n- Output[sum_quantity_C, avg_quantity_D, sum_discount_C] \u003d\u003e [sum:double, avg:double, sum_9:double]\n        sum_quantity_C :\u003d sum\n        avg_quantity_D :\u003d avg\n        sum_discount_C :\u003d sum_9\n    - Project[] \u003d\u003e [sum:double, avg:double, sum_9:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, avg:double, sum_9:double]\n                sum_9 :\u003d sum(\"discount\") \n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, avg:double]\n                    avg :\u003d avg(\"quantity\") ROWS CURRENT_ROW UNBOUNDED_FOLLOWING\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double]\n                        sum :\u003d sum(\"quantity\") \n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            discount :\u003d tpch:discount\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        - anyTree\n            - node(WindowNode)\n                WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[ORDERKEY], orderBy\u003d[SHIPDATE], orderings\u003d{SHIPDATE\u003dASC_NULLS_LAST}}}\n                bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n                - node\n                    NotPlanNodeMatcher{excludedNodeClass\u003dclass com.facebook.presto.sql.planner.plan.WindowNode}\n                    - node(TableScanNode)\n                        TableScanMatcher{expectedTableName\u003dlineitem}\n                        bind QUANTITY -\u003e Column lineitem:quantity\n                        bind DISCOUNT -\u003e Column lineitem:discount\n                        bind SUPPKEY -\u003e Column lineitem:suppkey\n                        bind ORDERKEY -\u003e Column lineitem:orderkey\n                        bind SHIPDATE -\u003e Column lineitem:shipdate\n\n] but found [\n\n- Output[sum_quantity_A, sum_quantity_B, sum_discount_A] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        sum_quantity_A :\u003d sum\n        sum_quantity_B :\u003d sum_6\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)][$hashvalue_26] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double, $hashvalue_26:bigint, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Project[] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double, $hashvalue_26:bigint]\n                    $hashvalue_26 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"suppkey\"), 0))\n                - Window[partition by (orderkey), order by (shipdate ASC_NULLS_LAST)][$hashvalue_25] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, $hashvalue_25:bigint, sum_6:double]\n                        sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - Project[] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, $hashvalue_25:bigint]\n                            $hashvalue_25 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)][$hashvalue] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, $hashvalue:bigint, sum:double]\n                                sum :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                            - Project[] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, $hashvalue:bigint]\n                                    Cost: {rows: 60000, bytes: ?}\n                                - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, $hashvalue:bigint, $hashvalue_22:bigint\n                                        Cost: {rows: 60000, bytes: ?}\n                                    - ScanProject[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, $hashvalue_23:bigint, $hashvalue_24:bigint]\n                                            Cost: {rows: 60000, bytes: ?}/{rows: 60000, bytes: ?}\n                                            $hashvalue_23 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"suppkey\"), 0))\n                                            $hashvalue_24 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                                            orderkey :\u003d tpch:orderkey\n                                            suppkey :\u003d tpch:suppkey\n                                            quantity :\u003d tpch:quantity\n                                            discount :\u003d tpch:discount\n                                            shipdate :\u003d tpch:shipdate\n\n] which resolves to [\n\n- Output[sum_quantity_A, sum_quantity_B, sum_discount_A] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        sum_quantity_A :\u003d sum\n        sum_quantity_B :\u003d sum_6\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)][$hashvalue_26] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double, $hashvalue_26:bigint, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Project[] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, sum_6:double, $hashvalue_26:bigint]\n                    $hashvalue_26 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"suppkey\"), 0))\n                - Window[partition by (orderkey), order by (shipdate ASC_NULLS_LAST)][$hashvalue_25] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, $hashvalue_25:bigint, sum_6:double]\n                        sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - Project[] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, sum:double, $hashvalue_25:bigint]\n                            $hashvalue_25 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)][$hashvalue] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, $hashvalue:bigint, sum:double]\n                                sum :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                            - Project[] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, $hashvalue:bigint]\n                                    Cost: {rows: 60000, bytes: ?}\n                                - LocalExchange[SINGLE] () \u003d\u003e orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, $hashvalue:bigint, $hashvalue_22:bigint\n                                        Cost: {rows: 60000, bytes: ?}\n                                    - ScanProject[table \u003d local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, shipdate:date, $hashvalue_23:bigint, $hashvalue_24:bigint]\n                                            Cost: {rows: 60000, bytes: ?}/{rows: 60000, bytes: ?}\n                                            $hashvalue_23 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"suppkey\"), 0))\n                                            $hashvalue_24 :\u003d \"combine_hash\"(BIGINT \u00270\u0027, COALESCE(\"$operator$hash_code\"(\"orderkey\"), 0))\n                                            orderkey :\u003d tpch:orderkey\n                                            suppkey :\u003d tpch:suppkey\n                                            quantity :\u003d tpch:quantity\n                                            discount :\u003d tpch:discount\n                                            shipdate :\u003d tpch:shipdate\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (EXTENDEDPRICE) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_FIRST}}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dlineitem}\n                bind QUANTITY -\u003e Column lineitem:quantity\n                bind SUPPKEY -\u003e Column lineitem:suppkey\n                bind ORDERKEY -\u003e Column lineitem:orderkey\n                bind DISCOUNT -\u003e Column lineitem:discount\n                bind EXTENDEDPRICE -\u003e Column lineitem:extendedprice\n\n] but found [\n\n- Output[sum_extendedprice_A, sum_quantity_C, sum_discount_A] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        sum_extendedprice_A :\u003d sum\n        sum_quantity_C :\u003d sum_6\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double, sum_6:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_FIRST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double, sum_6:double]\n                    sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double]\n                        sum :\u003d sum(\"extendedprice\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            extendedprice :\u003d tpch:extendedprice\n                            discount :\u003d tpch:discount\n\n] which resolves to [\n\n- Output[sum_extendedprice_A, sum_quantity_C, sum_discount_A] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        sum_extendedprice_A :\u003d sum\n        sum_quantity_C :\u003d sum_6\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double, sum_6:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_FIRST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double, sum_6:double]\n                    sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double]\n                        sum :\u003d sum(\"extendedprice\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            extendedprice :\u003d tpch:extendedprice\n                            discount :\u003d tpch:discount\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dDESC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (EXTENDEDPRICE) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dlineitem}\n                bind QUANTITY -\u003e Column lineitem:quantity\n                bind SUPPKEY -\u003e Column lineitem:suppkey\n                bind ORDERKEY -\u003e Column lineitem:orderkey\n                bind DISCOUNT -\u003e Column lineitem:discount\n                bind EXTENDEDPRICE -\u003e Column lineitem:extendedprice\n\n] but found [\n\n- Output[sum_extendedprice_A, sum_quantity_C, sum_discount_A] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        sum_extendedprice_A :\u003d sum\n        sum_quantity_C :\u003d sum_6\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double, sum_6:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey DESC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double, sum_6:double]\n                    sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double]\n                        sum :\u003d sum(\"extendedprice\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            extendedprice :\u003d tpch:extendedprice\n                            discount :\u003d tpch:discount\n\n] which resolves to [\n\n- Output[sum_extendedprice_A, sum_quantity_C, sum_discount_A] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        sum_extendedprice_A :\u003d sum\n        sum_quantity_C :\u003d sum_6\n        sum_discount_A :\u003d sum_10\n    - Project[] \u003d\u003e [sum:double, sum_6:double, sum_10:double]\n        - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double, sum_6:double, sum_10:double]\n                sum_10 :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey DESC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double, sum_6:double]\n                    sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double, sum:double]\n                        sum :\u003d sum(\"extendedprice\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                    - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, extendedprice:double, discount:double]\n                            Cost: {rows: 60000, bytes: ?}\n                            orderkey :\u003d tpch:orderkey\n                            suppkey :\u003d tpch:suppkey\n                            quantity :\u003d tpch:quantity\n                            extendedprice :\u003d tpch:extendedprice\n                            discount :\u003d tpch:discount\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(WindowNode)\n        WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[SUPPKEY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n        bind WindowFunctionMatcher{callMaker\u003dsum (DISCOUNT) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n        - node(WindowNode)\n            WindowMatcher{specification\u003dSpecificationProvider{partitionBy\u003d[QUANTITY], orderBy\u003d[ORDERKEY], orderings\u003d{ORDERKEY\u003dASC_NULLS_LAST}}}\n            bind WindowFunctionMatcher{callMaker\u003dsum (QUANTITY) WindowFrame{type\u003dROWS, start\u003dFrameBound{type\u003dUNBOUNDED_PRECEDING, value\u003dOptional.empty}, end\u003dOptional[FrameBound{type\u003dCURRENT_ROW, value\u003dOptional.empty}]}}\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dlineitem}\n                bind QUANTITY -\u003e Column lineitem:quantity\n                bind DISCOUNT -\u003e Column lineitem:discount\n                bind SUPPKEY -\u003e Column lineitem:suppkey\n                bind ORDERKEY -\u003e Column lineitem:orderkey\n\n] but found [\n\n- Output[sum_extendedprice_A, sum_quantity_C] \u003d\u003e [sum:double, sum_6:double]\n        sum_extendedprice_A :\u003d sum\n        sum_quantity_C :\u003d sum_6\n    - Project[] \u003d\u003e [sum:double, sum_6:double]\n        - Window[partition by (quantity), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, sum_6:double]\n                sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double]\n                    sum :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double]\n                        Cost: {rows: 60000, bytes: ?}\n                        orderkey :\u003d tpch:orderkey\n                        suppkey :\u003d tpch:suppkey\n                        quantity :\u003d tpch:quantity\n                        discount :\u003d tpch:discount\n\n] which resolves to [\n\n- Output[sum_extendedprice_A, sum_quantity_C] \u003d\u003e [sum:double, sum_6:double]\n        sum_extendedprice_A :\u003d sum\n        sum_quantity_C :\u003d sum_6\n    - Project[] \u003d\u003e [sum:double, sum_6:double]\n        - Window[partition by (quantity), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double, sum_6:double]\n                sum_6 :\u003d sum(\"quantity\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n            - Window[partition by (suppkey), order by (orderkey ASC_NULLS_LAST)] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double, sum:double]\n                    sum :\u003d sum(\"discount\") ROWS UNBOUNDED_PRECEDING CURRENT_ROW\n                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d null] \u003d\u003e [orderkey:bigint, suppkey:bigint, quantity:double, discount:double]\n                        Cost: {rows: 60000, bytes: ?}\n                        orderkey :\u003d tpch:orderkey\n                        suppkey :\u003d tpch:suppkey\n                        quantity :\u003d tpch:quantity\n                        discount :\u003d tpch:discount\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 9,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestPruneJoinColumns",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestPruneJoinColumns#testNotAllOutputsReferenced"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "com.facebook.presto.sql.planner.iterative.rule.PruneJoinColumns did not fire for:\n        - Project[] \u003d\u003e [rightValue:bigint]\n                Cost: {rows: 0, bytes: ?}\n            - InnerJoin[(\"leftKey\" \u003d \"rightKey\")] \u003d\u003e [leftKey:bigint, leftValue:bigint, rightKey:bigint, rightValue:bigint]\n                    Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [leftKey:bigint, leftValue:bigint]\n                        Cost: {rows: 0, bytes: ?}\n                - Values \u003d\u003e [rightKey:bigint, rightValue:bigint]\n                        Cost: {rows: 0, bytes: ?}\n",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.optimizations.TestUnionWithReplicatedJoin",
      "failingMethods": [
        "com.facebook.presto.sql.planner.optimizations.TestUnionWithReplicatedJoin#testUnionUnderTopN"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "There should be exactly one RemoteExchange expected [1] but found [2]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}