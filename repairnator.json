{
  "totalNumberSkippingTests": 59,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "druid-io/druid",
  "metrics": {
    "FailureNames": [
      "java.lang.AssertionError",
      "skipped"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 6,
      "ComputeClasspath": 5,
      "ComputeTestDir": 0,
      "ResolveDependency": 17,
      "BuildProject": 493,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 41,
      "CloneRepository": 57,
      "NopolRepair": 195,
      "CheckoutPatchedBuild": 0,
      "TestProject": 1045,
      "GatherTestInformation": 1,
      "PushIncriminatedBuild": 11,
      "CommitPatch": 18
    },
    "NbFailingTests": 25,
    "BugCommitUrl": "http://github.com/druid-io/druid/commit/03b32c80c9a06b6d96351bae94f6f03bc86c9360",
    "ReproductionDate": "Sep 29, 2017 7:06:28 PM",
    "BuggyBuildId": 281359996,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/druid-io/druid/builds/281359996",
    "BuggyBuildDate": "Sep 29, 2017 6:48:40 PM",
    "BugCommit": "03b32c80c9a06b6d96351bae94f6f03bc86c9360",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 77356,
    "NbLibraries": 84,
    "NbFileApp": 4484,
    "NbFileTests": 1640,
    "NbCPU": 8,
    "FreeMemory": 548611152,
    "TotalMemory": 1611137024,
    "AngelicValuesByTest": {
      "io/druid/query/groupby/GroupByQueryRunnerTest": 17
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 226598440,
      "ComputeClasspath": 219939736,
      "ComputeTestDir": 188833496,
      "ResolveDependency": 178420416,
      "BuildProject": 198450104,
      "NPERepair": 223697760,
      "ComputeSourceDir": 219939736,
      "InitRepoToPush": 194654048,
      "CloneRepository": 197729048,
      "NopolRepair": 796272152,
      "CheckoutPatchedBuild": 548611152,
      "TestProject": 185284144,
      "GatherTestInformation": 140031568,
      "PushIncriminatedBuild": 223697760,
      "CommitPatch": 548611152
    }
  },
  "failingModule": "/root/workspace/druid-io/druid/281359996/processing",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 25,
  "error-types": [
    "java.lang.AssertionError",
    "skipped"
  ],
  "totalNumberRunningTests": 77356,
  "failing-test-cases": [
    {
      "className": "io.druid.query.groupby.GroupByQueryRunnerTest",
      "failingMethods": [
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallDictionary, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallBuffer, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallDictionary, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv1SingleThreaded, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv1SingleThreaded, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003dmergedRealtimeIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2SmallBuffer, runner\u003dmMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testLimitPerGrouping[config\u003dv2SmallBuffer, runner\u003dnoRollupMMappedTestIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv1SingleThreaded, runner\u003dnoRollupRtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithHavingOnHyperUnique[config\u003dv2SmallDictionary, runner\u003drtIndex]",
        "io.druid.query.groupby.GroupByQueryRunnerTest#testGroupByWithEmptyStringProducingDimExtractionFn[config\u003dv2, runner\u003dmMappedTestIndex]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected test to throw (an instance of io.druid.java.util.common.parsers.ParseException and exception with message a string containing \"Unknown type[class io.druid.hll.HLLCV1]\")",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 75,
      "nbErrors": 0
    }
  ]
}