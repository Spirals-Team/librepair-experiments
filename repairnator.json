{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 31,
  "repo": "spring-projects/spring-security-oauth",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 2,
      "ComputeClasspath": 3,
      "ComputeTestDir": 0,
      "ResolveDependency": 118,
      "BuildProject": 101,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 5,
      "CloneRepository": 4,
      "NopolRepair": 71,
      "CheckoutPatchedBuild": 0,
      "TestProject": 24,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 5,
      "AstorRepair": 539,
      "CommitPatch": 6
    },
    "FailureNames": [
      "org.springframework.data.redis.RedisConnectionFailureException"
    ],
    "NbFailingTests": 31,
    "BugCommitUrl": "http://github.com/spring-projects/spring-security-oauth/commit/f76122b96ab2d384e1c1a76410ccd62b80b225c8",
    "ReproductionDate": "Apr 29, 2018 12:32:09 PM",
    "BuggyBuildId": 372722228,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/spring-projects/spring-security-oauth/builds/372722228",
    "BuggyBuildDate": "Apr 29, 2018 12:32:03 PM",
    "BugCommit": "f76122b96ab2d384e1c1a76410ccd62b80b225c8",
    "PatchChangedFiles": 1,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 736,
    "NbLibraries": 48,
    "NbFileApp": 872,
    "NbFileTests": 582,
    "NbCPU": 32,
    "FreeMemory": 1611190392,
    "TotalMemory": 5986844672,
    "AngelicValuesByTest": {
      "org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreTests": 0,
      "org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStorePrefixTests": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 559147008,
      "ComputeClasspath": 660268576,
      "ComputeTestDir": 551307912,
      "ResolveDependency": 438913048,
      "BuildProject": 399342048,
      "NPERepair": 667702024,
      "ComputeSourceDir": 660268576,
      "InitRepoToPush": 544936296,
      "CloneRepository": 621010016,
      "NopolRepair": 1740435104,
      "CheckoutPatchedBuild": 1611190392,
      "TestProject": 748066152,
      "GatherTestInformation": 716374968,
      "PushIncriminatedBuild": 667702024,
      "AstorRepair": 1961751448,
      "CommitPatch": 1611190392
    }
  },
  "failingModule": "/root/workspace/spring-projects/spring-security-oauth/372722228/spring-security-oauth2",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 0,
  "error-types": [
    "org.springframework.data.redis.RedisConnectionFailureException"
  ],
  "totalNumberRunningTests": 736,
  "failing-test-cases": [
    {
      "className": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testExpiringRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingAuthenticationForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRefreshTokenIsNotStoredDuringAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingRefreshTokenForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testFindAccessTokensByClientIdAndUserName",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testReadingAccessTokenForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testFindAccessTokensByClientId",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testGetAccessTokenForDeletedUser",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRetrieveAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRemovedTokenCannotBeFoundByUsername",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreAccessTokenTwice",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testStoreAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testExpiringAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStorePrefixTests#testRemoveRefreshToken"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRefreshTokenIsNotStoredDuringAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRemoveRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#storeAccessTokenWithoutRefreshTokenRemoveAccessTokenVerifyTokenRemoved",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testFindAccessTokensByClientIdAndUserName",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreAccessTokenTwice",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testStoreRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testFindAccessTokensByClientId",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingAccessTokenForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRemovedTokenCannotBeFoundByUsername",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingAuthenticationForTokenThatDoesNotExist",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testExpiringAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testRetrieveAccessToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testGetAccessTokenForDeletedUser",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testExpiringRefreshToken",
        "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests#testReadingRefreshTokenForTokenThatDoesNotExist"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused (Connection refused)",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 16
    }
  ]
}