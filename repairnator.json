{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 4,
  "repo": "Brest-Java-Course-2018/Kavaliuk-Pavel",
  "bugCommit": "https://github.com/Brest-Java-Course-2018/Kavaliuk-Pavel/compare/32250ad4f89e...a2b05a9abf6f",
  "failingModule": "/root/workspace/Brest-Java-Course-2018/Kavaliuk-Pavel/366744992/dao",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 1,
  "error-types": [
    "java.lang.AssertionError:",
    "org.springframework.dao.DataIntegrityViolationException",
    "org.springframework.dao.EmptyResultDataAccessException"
  ],
  "totalNumberRunningTests": 12,
  "failing-test-cases": [
    {
      "className": "com.epam.brest.course.dao.MeetingDaoImplTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.epam.brest.course.dao.MeetingDaoImplTest#addMeetingTest",
        "com.epam.brest.course.dao.MeetingDaoImplTest#deleteMeetingTest"
      ],
      "failures": [
        {
          "failureName": "org.springframework.dao.DataIntegrityViolationException",
          "failureDetail": "PreparedStatementCallback; SQL [INSERT INTO meetings (first_team, second_team, meeting_date) VALUES (?, ?, ?)]; Referential integrity constraint violation: \"CONSTRAINT_FB: PUBLIC.MEETINGS FOREIGN KEY(FIRST_TEAM) REFERENCES PUBLIC.TEAMS(TEAM_ID) (1)\"; SQL statement:\nINSERT INTO meetings (first_team, second_team, meeting_date) VALUES (?, ?, ?) [23506-196]; nested exception is org.h2.jdbc.JdbcSQLException: Referential integrity constraint violation: \"CONSTRAINT_FB: PUBLIC.MEETINGS FOREIGN KEY(FIRST_TEAM) REFERENCES PUBLIC.TEAMS(TEAM_ID) (1)\"; SQL statement:\nINSERT INTO meetings (first_team, second_team, meeting_date) VALUES (?, ?, ?) [23506-196]",
          "isError": true
        },
        {
          "failureName": "org.springframework.dao.DataIntegrityViolationException",
          "failureDetail": "PreparedStatementCallback; SQL [INSERT INTO meetings (first_team, second_team, meeting_date) VALUES (?, ?, ?)]; Referential integrity constraint violation: \"CONSTRAINT_FB: PUBLIC.MEETINGS FOREIGN KEY(FIRST_TEAM) REFERENCES PUBLIC.TEAMS(TEAM_ID) (1)\"; SQL statement:\nINSERT INTO meetings (first_team, second_team, meeting_date) VALUES (?, ?, ?) [23506-196]; nested exception is org.h2.jdbc.JdbcSQLException: Referential integrity constraint violation: \"CONSTRAINT_FB: PUBLIC.MEETINGS FOREIGN KEY(FIRST_TEAM) REFERENCES PUBLIC.TEAMS(TEAM_ID) (1)\"; SQL statement:\nINSERT INTO meetings (first_team, second_team, meeting_date) VALUES (?, ?, ?) [23506-196]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "com.epam.brest.course.dao.PlayerDaoImplTest",
      "failingMethods": [
        "com.epam.brest.course.dao.PlayerDaoImplTest#deletePlayerByIdTest"
      ],
      "erroringMethods": [
        "com.epam.brest.course.dao.PlayerDaoImplTest#addPlayerTest",
        "com.epam.brest.course.dao.PlayerDaoImplTest#updatePlayerTest"
      ],
      "failures": [
        {
          "failureName": "org.springframework.dao.EmptyResultDataAccessException",
          "failureDetail": "Incorrect result size: expected 1, actual 0",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError:",
          "isError": false
        },
        {
          "failureName": "org.springframework.dao.DataIntegrityViolationException",
          "failureDetail": "PreparedStatementCallback; SQL [INSERT INTO players (player_name, player_number, player_age, player_cost, player_team_id) VALUES (?, ?, ?, ?, ?)]; Referential integrity constraint violation: \"CONSTRAINT_D6: PUBLIC.PLAYERS FOREIGN KEY(PLAYER_TEAM_ID) REFERENCES PUBLIC.TEAMS(TEAM_ID) (1)\"; SQL statement:\nINSERT INTO players (player_name, player_number, player_age, player_cost, player_team_id) VALUES (?, ?, ?, ?, ?) [23506-196]; nested exception is org.h2.jdbc.JdbcSQLException: Referential integrity constraint violation: \"CONSTRAINT_D6: PUBLIC.PLAYERS FOREIGN KEY(PLAYER_TEAM_ID) REFERENCES PUBLIC.TEAMS(TEAM_ID) (1)\"; SQL statement:\nINSERT INTO players (player_name, player_number, player_age, player_cost, player_team_id) VALUES (?, ?, ?, ?, ?) [23506-196]",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 2
    }
  ]
}