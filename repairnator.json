{
  "totalNumberSkippingTests": 0,
  "bugType": "failing_passing",
  "pr-remote-repo": "nezihyigitbasi/presto",
  "pr-head-commit-id": "0b06dab98a6df1dbc19a4224b938bdf1d3292490",
  "totalNumberErroringTests": 0,
  "pr-id": 9346,
  "repo": "prestodb/presto",
  "pr-head-commit-id-url": "https://github.com/prestodb/presto/commit/0b06dab98a6df1dbc19a4224b938bdf1d3292490",
  "is-pr": "true",
  "failingModule": "/root/workspace/prestodb/presto/309289447/presto-tests",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 7,
  "error-types": [
    "com.facebook.presto.client.FailureInfo$FailureException",
    "java.lang.AssertionError"
  ],
  "pr-base-commit-id-url": "https://github.com/prestodb/presto/commit/8cf12717d37addc0922524afb6ac3917487c795f",
  "pr-base-commit-id": "8cf12717d37addc0922524afb6ac3917487c795f",
  "totalNumberRunningTests": 6578,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.tests.TestDistributedSpilledQueries",
      "failingMethods": [
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinOnDecimalColumn",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testExtractDistinctAggregationOptimizer",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingCombinationsAll",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testGroupingCombinationsDistinct",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testJoinWithMultipleLessThanPredicatesDifferentOrders",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testDistinctHaving",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testApproxSetBigintGroupBy"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.client.FailureInfo$FailureException",
          "failureDetail": "Exception while running the listener",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(DISTINCT clerk) AS count FROM orders GROUP BY orderdate HAVING COUNT(DISTINCT clerk) \u003e 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT max(orderstatus), COUNT(orderkey), sum(DISTINCT orderkey) FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, partkey, suppkey, linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY orderkey, partkey, ROLLUP (suppkey, linenumber), CUBE (linenumber)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, partkey, suppkey, linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY DISTINCT orderkey, partkey, ROLLUP (suppkey, linenumber), CUBE (linenumber)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (VALUES (1.0, 2.0)) x (a, b) JOIN (VALUES (1.0, 3.0)) y (a, b) USING(a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM lineitem l JOIN nation n ON l.suppkey % 5 \u003d n.nationkey % 5 AND l.partkey % 3 + 2 \u003c n.regionkey AND l.partkey % 3 + 1 \u003c n.regionkey AND l.partkey % 3 \u003c n.regionkey",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 0
    }
  ]
}