{
  "totalNumberSkippingTests": 109,
  "bugType": "only_fail",
  "totalNumberErroringTests": 3,
  "repo": "apache/calcite",
  "failingModule": "/root/workspace/apache/calcite/373259956/core",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 5,
  "error-types": [
    "java.lang.AssertionError",
    "java.lang.RuntimeException",
    "org.junit.ComparisonFailure",
    "java.lang.reflect.InvocationTargetException"
  ],
  "totalNumberRunningTests": 4680,
  "failing-test-cases": [
    {
      "className": "org.apache.calcite.test.SqlToRelConverterTest",
      "failingMethods": [
        "org.apache.calcite.test.SqlToRelConverterTest#testUnnestArrayPlanAs",
        "org.apache.calcite.test.SqlToRelConverterTest#testUnnestArrayPlan",
        "org.apache.calcite.test.SqlToRelConverterTest#testUnnestArrayAggPlan"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c...EPTNO\u003d[$0], EMPNO\u003d[$[3])\n  LogicalCorrelate(correlation\u003d[$cor0], joinType\u003d[inner], requiredColumns\u003d[{2}])\n    LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT_NESTED]])\n    Uncollect\n      LogicalProject(EMPLOYEES\u003d[$cor0.EMPLOYEES_2]])\n        LogicalVa...\u003e but was:\u003c...EPTNO\u003d[$0], EMPNO\u003d[$[7])\n  LogicalCorrelate(correlation\u003d[$cor0], joinType\u003d[inner], requiredColumns\u003d[{6}])\n    LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], TYPE\u003d[$2.TYPE], DESC\u003d[$2.DESC], A\u003d[$2.OTHERS.A], B\u003d[$2.OTHERS.B], EMPLOYEES\u003d[$3])\n      LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT_NESTED]])\n    Uncollect\n      LogicalProject(EMPLOYEES\u003d[$cor0.EMPLOYEES_6]])\n        LogicalVa...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c...EPTNO\u003d[$0], EMPNO\u003d[$[3])\n  LogicalCorrelate(correlation\u003d[$cor0], joinType\u003d[inner], requiredColumns\u003d[{2}])\n    LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT_NESTED]])\n    Uncollect\n      LogicalProject(EMPLOYEES\u003d[$cor0.EMPLOYEES_2]])\n        LogicalVa...\u003e but was:\u003c...EPTNO\u003d[$0], EMPNO\u003d[$[7])\n  LogicalCorrelate(correlation\u003d[$cor0], joinType\u003d[inner], requiredColumns\u003d[{6}])\n    LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], TYPE\u003d[$2.TYPE], DESC\u003d[$2.DESC], A\u003d[$2.OTHERS.A], B\u003d[$2.OTHERS.B], EMPLOYEES\u003d[$3])\n      LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT_NESTED]])\n    Uncollect\n      LogicalProject(EMPLOYEES\u003d[$cor0.EMPLOYEES_6]])\n        LogicalVa...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "plan expected:\u003c...O\u003d[$0], EMPNO_AVG\u003d[$[3])\n  LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], EMPLOYEES\u003d[$2], EMPNO_AVG\u003d[$3])\n    LogicalCorrelate(correlation\u003d[$cor0], joinType\u003d[left], requiredColumns\u003d[{2}])\n      LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT_NESTED]])\n      LogicalAggregate(group\u003d[{}], EMPNO_AVG\u003d[AVG($0)])\n        LogicalProject(EMPNO\u003d[$0])\n          Uncollect\n            LogicalProject(EMPLOYEES\u003d[$cor0.EMPLOYEES_2]])\n              Log...\u003e but was:\u003c...O\u003d[$0], EMPNO_AVG\u003d[$[7])\n  LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], TYPE\u003d[$2], DESC\u003d[$3], A\u003d[$4], B\u003d[$5], EMPLOYEES\u003d[$6], EMPNO_AVG\u003d[$7])\n    LogicalCorrelate(correlation\u003d[$cor0], joinType\u003d[left], requiredColumns\u003d[{6}])\n      LogicalProject(DEPTNO\u003d[$0], NAME\u003d[$1], TYPE\u003d[$2.TYPE], DESC\u003d[$2.DESC], A\u003d[$2.OTHERS.A], B\u003d[$2.OTHERS.B], EMPLOYEES\u003d[$3])\n        LogicalTableScan(table\u003d[[CATALOG, SALES, DEPT_NESTED]])\n      LogicalAggregate(group\u003d[{}], EMPNO_AVG\u003d[AVG($0)])\n        LogicalProject(EMPNO\u003d[$0])\n          Uncollect\n            LogicalProject(EMPLOYEES\u003d[$cor0.EMPLOYEES_6]])\n              Log...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.JdbcTest",
      "failingMethods": [
        "org.apache.calcite.test.JdbcTest#testUnnestItemsInMapWithOrdinality",
        "org.apache.calcite.test.JdbcTest#testUnnestItemsInMap"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Field ordinal 1 is invalid for  type \u0027RecordType(ANY **)\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Field ordinal 1 is invalid for  type \u0027RecordType(ANY **)\u0027",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "org.apache.calcite.test.LatticeTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.apache.calcite.test.LatticeTest#testTileAlgorithm2",
        "org.apache.calcite.test.LatticeTest#testTileAlgorithm"
      ],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while executing [explain plan for select distinct t.\"the_year\", t.\"quarter\"\nfrom \"foodmart\".\"sales_fact_1997\" as s\njoin \"foodmart\".\"time_by_day\" as t using (\"time_id\")\n]",
          "isError": true
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "exception while executing [explain plan for select distinct t.\"the_year\", t.\"quarter\"\nfrom \"foodmart\".\"sales_fact_1997\" as s\njoin \"foodmart\".\"time_by_day\" as t using (\"time_id\")\n]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.apache.calcite.test.CoreQuidemTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.apache.calcite.test.CoreQuidemTest#test[1: quidem(sql/misc.iq)]"
      ],
      "failures": [
        {
          "failureName": "java.lang.reflect.InvocationTargetException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}