{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 32,
  "repo": "testcontainers/testcontainers-java",
  "bugCommit": "https://github.com/testcontainers/testcontainers-java/commit/22bca35d8b7a",
  "failingModule": "/root/workspace/testcontainers/testcontainers-java/239278587/core",
  "hostname": "repairnator",
  "totalNumberFailingTests": 4,
  "error-types": [
    "org.testcontainers.containers.ContainerFetchException",
    "java.lang.IllegalStateException",
    "java.lang.AssertionError",
    "skipped"
  ],
  "totalNumberRunningTests": 68,
  "failing-test-cases": [
    {
      "className": "org.testcontainers.junit.DockerComposeV2WithNetworkTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeV2WithNetworkTest#org.testcontainers.junit.DockerComposeV2WithNetworkTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.WorkingDirectoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.WorkingDirectoryTest#org.testcontainers.junit.WorkingDirectoryTest"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@eda25e5",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.ParameterizedDockerfileContainerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.ParameterizedDockerfileContainerTest#simpleTest[alpine:3.3]",
        "org.testcontainers.junit.ParameterizedDockerfileContainerTest#simpleTest[alpine:3.2]"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.builder.ImageFromDockerfile@3eeb318f",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.builder.ImageFromDockerfile@4189d70b",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.junit.DockerComposePassthroughTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposePassthroughTest#org.testcontainers.junit.DockerComposePassthroughTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeContainerScalingTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeContainerScalingTest#org.testcontainers.junit.DockerComposeContainerScalingTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.wait.HttpWaitStrategyTest",
      "failingMethods": [
        "org.testcontainers.junit.wait.HttpWaitStrategyTest#testWaitUntilReady_Timeout"
      ],
      "erroringMethods": [
        "org.testcontainers.junit.wait.HttpWaitStrategyTest#testWaitUntilReady_Success"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@3b0c9195",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "an exception is thrown when timeout occurs (3000ms): ContainerFetchException was thrown instead of ContainerLaunchException",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.OutputStreamTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.OutputStreamTest#testFetchStdoutWithTimeout",
        "org.testcontainers.junit.OutputStreamTest#testFetchStdoutWithNoLimit",
        "org.testcontainers.junit.OutputStreamTest#testToStringConsumer",
        "org.testcontainers.junit.OutputStreamTest#testLogConsumer",
        "org.testcontainers.junit.OutputStreamTest#testFetchStdout"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@58fb7731",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@7ac2e39b",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@54d18072",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@f478a81",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@25bc0606",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "org.testcontainers.junit.DockerNetworkModeTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerNetworkModeTest#org.testcontainers.junit.DockerNetworkModeTest"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@61f05988",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeOverrideTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeOverrideTest#org.testcontainers.junit.DockerComposeOverrideTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.utility.DirectoryTarResourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.utility.DirectoryTarResourceTest#simpleRecursiveFileTest",
        "org.testcontainers.utility.DirectoryTarResourceTest#simpleRecursiveClasspathResourceTest"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.builder.ImageFromDockerfile@238d68ff",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.builder.ImageFromDockerfile@2ca26d77",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.junit.NonExistentImagePullTest",
      "failingMethods": [
        "org.testcontainers.junit.NonExistentImagePullTest#pullingNonExistentImageFailsGracefully"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Pulling a nonexistent container will cause an exception to be thrown: No exception was thrown (expected ContainerFetchException but \u0027GenericContainer(exposedPorts\u003d[], portBindings\u003d[], extraHosts\u003d[], networkMode\u003dnull, image\u003dorg.testcontainers.images.RemoteDockerImage@5e2b5506, env\u003d[], commandParts\u003d[], binds\u003d[], privilegedMode\u003dfalse, volumesFroms\u003d[], linkedContainers\u003d{}, startupCheckStrategy\u003dorg.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy@5a14ca1b, startupAttempts\u003d1, workingDirectory\u003dnull, dockerClient\u003dnull, dockerDaemonInfo\u003dnull, containerId\u003dnull, containerName\u003dnull, waitStrategy\u003dorg.testcontainers.containers.wait.HostPortWaitStrategy@1f165f3d, containerInfo\u003dnull, logConsumers\u003d[], createContainerCmdModifiers\u003d[])\u0027 was returned instead)",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.testcontainers.junit.DockerfileContainerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerfileContainerTest#simpleDslTest"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.builder.ImageFromDockerfile@4fad9bb2",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeV2FormatTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeV2FormatTest#org.testcontainers.junit.DockerComposeV2FormatTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.FixedHostPortContainerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.FixedHostPortContainerTest#testFixedHostPortMapping"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@2a640157",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.wait.LogMessageWaitStrategyTest",
      "failingMethods": [
        "org.testcontainers.junit.wait.LogMessageWaitStrategyTest#testWaitUntilReady_Timeout"
      ],
      "erroringMethods": [
        "org.testcontainers.junit.wait.LogMessageWaitStrategyTest#testWaitUntilReady_Success"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@49872d67",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "an exception is thrown when timeout occurs (3000ms): ContainerFetchException was thrown instead of ContainerLaunchException",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeContainerTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeContainerTest#org.testcontainers.junit.DockerComposeContainerTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.GenericContainerRuleTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.GenericContainerRuleTest#org.testcontainers.junit.GenericContainerRuleTest"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@2a898881",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerfileTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerfileTest#filePermissions",
        "org.testcontainers.junit.DockerfileTest#simpleDockerfileWorks",
        "org.testcontainers.junit.DockerfileTest#customizableImage",
        "org.testcontainers.junit.DockerfileTest#dockerfileBuilderWorks"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.builder.ImageFromDockerfile@7c209437",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.builder.ImageFromDockerfile@792bbc74",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.junit.DockerfileTest$1@75d0911a",
          "isError": true
        },
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.builder.ImageFromDockerfile@12bcd0c0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.testcontainers.junit.wait.HostPortWaitStrategyTest",
      "failingMethods": [
        "org.testcontainers.junit.wait.HostPortWaitStrategyTest#testWaitUntilReady_Timeout"
      ],
      "erroringMethods": [
        "org.testcontainers.junit.wait.HostPortWaitStrategyTest#testWaitUntilReady_Success"
      ],
      "failures": [
        {
          "failureName": "org.testcontainers.containers.ContainerFetchException",
          "failureDetail": "Can\u0027t get Docker image name from org.testcontainers.images.RemoteDockerImage@24d09c1",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "an exception is thrown when timeout occurs (3000ms): ContainerFetchException was thrown instead of ContainerLaunchException",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.dockerclient.DockerClientConfigUtilsTest",
      "failingMethods": [
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnDockerHostIpWhenHttpsUri",
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnNullWhenUnsupportedUriScheme",
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnDockerHostIpWhenHttpUri"
      ],
      "erroringMethods": [
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnLocalhostWhenUnixSocket",
        "org.testcontainers.dockerclient.DockerClientConfigUtilsTest#getDockerHostIpAddressShouldReturnDockerHostIpWhenTcpUri"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 3,
      "nbErrors": 2
    },
    {
      "className": "org.testcontainers.junit.DockerComposeDoNotOverrideTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeDoNotOverrideTest#org.testcontainers.junit.DockerComposeDoNotOverrideTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.DockerClientFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.DockerClientFactoryTest#runCommandInsideDockerShouldNotFailIfImageDoesNotExistsLocally"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.testcontainers.junit.DockerComposeErrorHandlingTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.testcontainers.junit.DockerComposeErrorHandlingTest#simpleTest"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Could not find a valid Docker environment. Please see logs and check configuration",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}