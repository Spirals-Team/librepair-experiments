{
  "bugType": "only_fail",
  "hostname": "spirals-repairnator",
  "repo": "INRIA/spoon",
  "metrics": {
    "FailureNames": [
      "java.lang.IndexOutOfBoundsException",
      "spoon.SpoonException",
      "java.lang.AssertionError",
      "java.lang.Exception",
      "java.lang.NullPointerException",
      "org.junit.ComparisonFailure",
      "spoon.compiler.ModelBuildingException"
    ],
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 9,
      "ComputeClasspath": 14,
      "ComputeTestDir": 0,
      "BuildProject": 116,
      "InitRepoToPush": 12,
      "ComputeSourceDir": 2,
      "ComputeModules": 0,
      "AstorJMut": 42,
      "CloneRepository": 19,
      "CheckoutPatchedBuild": 0,
      "NopolAllTests": 56,
      "NPEFix": 40,
      "TestProject": 258,
      "GatherTestInformation": 2,
      "CommitPatch": 33
    },
    "BugCommitUrl": "http://github.com/INRIA/spoon/commit/237e8348347f26346ac99d2ae21437d85eca15c5",
    "NbFailingTests": 20,
    "NbErroringTests": 323,
    "NbSkippingTests": 4,
    "NbRunningTests": 1403,
    "ReproductionDate": "Jul 18, 2018 11:50:17 AM",
    "BuggyBuildId": 405276650,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/INRIA/spoon/builds/405276650",
    "BuggyBuildDate": "Jul 18, 2018 11:49:40 AM",
    "BugCommit": "237e8348347f26346ac99d2ae21437d85eca15c5",
    "PatchChangedFiles": 0,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbLibraries": 30,
    "NbFileApp": 616,
    "NbFileTests": 695,
    "NbCPU": 4,
    "FreeMemory": 1063776944,
    "TotalMemory": 1552941056,
    "AngelicValuesByTest": {
      "spoon/test/trycatch/TryCatchTest:spoon/test/staticFieldAccess/StaticAccessTest:spoon/test/modifiers/TestModifiers:spoon/MavenLauncherTest:spoon/test/imports/ImportTest:spoon/test/imports/ImportAndExtendWithPackageNameTest:spoon/test/refactoring/CtRenameLocalVariableRefactoringTest:spoon/test/template/TemplateClassAccessTest:spoon/support/visitor/java/JavaReflectionTreeBuilderTest:spoon/test/reference/TypeReferenceTest:spoon/test/refactoring/RefactoringTest:spoon/test/annotation/AnnotationValuesTest:spoon/test/loop/LoopTest:spoon/test/constructorcallnewclass/NewClassTest:spoon/test/template/TemplateTest:spoon/test/api/APITest:spoon/test/annotation/AnnotationTest:spoon/test/invocations/InvocationTest:spoon/test/support/ResourceTest:spoon/test/strings/StringTest:spoon/test/jar/JarTest:spoon/test/prettyprinter/PrinterTest:spoon/reflect/visitor/CtVisitorTest:spoon/test/pkg/PackageTest:spoon/test/varargs/VarArgsTest:spoon/test/parent/ContractOnSettersParametrizedTest:spoon/test/targeted/TargetedExpressionTest:spoon/test/methodreference/MethodReferenceTest:spoon/test/jdtimportbuilder/ImportBuilderTest:spoon/test/ctClass/CtClassTest:spoon/test/executable/ExecutableRefTest:spoon/test/variable/AccessFullyQualifiedFieldTest:spoon/test/staticFieldAccess2/ImplicitStaticFieldReferenceTest:spoon/test/factory/FactoryTest:spoon/test/filters/FilterTest:spoon/test/template/TemplateArrayAccessTest:spoon/test/literal/LiteralTest:spoon/test/constructorcallnewclass/ConstructorCallTest:spoon/reflect/declaration/UnknownDeclarationTest:spoon/test/compilationunit/TestCompilationUnit:spoon/test/intercession/OneCanCallSetterWithNullParameterizedTest:spoon/test/labels/TestLabels:spoon/test/prettyprinter/LinesTest:spoon/test/replace/ReplaceParametrizedTest:spoon/test/signature/SignatureTest:spoon/test/api/MetamodelTest:spoon/test/arrays/ArraysTest:spoon/testing/CtPackageAssertTest:spoon/reflect/ast/AstCheckerTest:spoon/test/enums/EnumsTest:spoon/test/position/PositionTest:spoon/test/reference/ElasticsearchStackoverflowTest:spoon/test/generics/GenericsTest:spoon/test/model/TypeTest:spoon/test/reference/CloneReferenceTest:spoon/test/prettyprinter/QualifiedThisRefTest:spoon/reflect/visitor/CtScannerTest:spoon/test/refactoring/MethodsRefactoringTest:spoon/test/processing/ProcessingTest:spoon/test/reference/VariableAccessTest:spoon/test/variable/AccessTest:spoon/test/secondaryclasses/ClassesTest:spoon/test/architecture/SpoonArchitectureEnforcerTest:spoon/processing/CtGenerationTest:spoon/test/prettyprinter/DefaultPrettyPrinterTest:spoon/test/comment/CommentTest:spoon/testing/CtElementAssertTest:spoon/test/visibility/VisibilityTest:spoon/test/imports/ImportScannerTest:spoon/test/exceptions/ExceptionTest:spoon/test/compilationunit/GetBinaryFilesTest:spoon/test/type/TypeTest:spoon/reflect/visitor/CtInheritanceScannerMethodsTest:spoon/reflect/ast/CloneTest:spoon/processing/ProcessingTest:spoon/test/eval/EvalTest:spoon/test/parameters/ParameterTest:spoon/test/intercession/IntercessionTest:spoon/test/reference/ExecutableReferenceTest:spoon/test/fieldaccesses/FieldAccessTest:spoon/test/main/MainTest:spoon/test/module/TestModule:spoon/testing/AbstractAssertTest:spoon/test/lambda/LambdaTest:spoon/test/compilation/CompilationTest:spoon/test/template/PatternTest:": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 216821088,
      "ComputeClasspath": 58232680,
      "ComputeTestDir": 345859352,
      "BuildProject": 206958568,
      "InitRepoToPush": 62882640,
      "ComputeSourceDir": 1062364344,
      "ComputeModules": 1062364344,
      "AstorJMut": 280062904,
      "CloneRepository": 250617040,
      "CheckoutPatchedBuild": 1063776944,
      "NopolAllTests": 545002744,
      "NPEFix": 532962168,
      "TestProject": 193302176,
      "GatherTestInformation": 169624776,
      "CommitPatch": 1063776944
    },
    "NbSucceedingTests": 1060
  },
  "failing-test-cases": [
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCompileMultiTryCatchWithCustomExceptions"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.staticFieldAccess.StaticAccessTest",
      "failingMethods": [
        "testProcessAndCompile"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.modifiers.TestModifiers",
      "failingMethods": [],
      "erroringMethods": [
        "testMethodWithVarargsDoesNotBecomeTransient",
        "testCtModifiableAddRemoveReturnCtModifiable",
        "testGetModifiersHelpers"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "mavenLauncherTestMultiModulesAndVariables",
        "spoonMavenLauncherTest"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c23\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStaticMethodWithDifferentClassSameNameJava7NoCollision",
        "testStaticMethodWithDifferentClassSameNameCollision",
        "testAccessToNestedClass",
        "testShouldNotCreateAutoreference",
        "testSpoonWithImports",
        "testImportWithGenerics",
        "testWithInnerEnumDoesNotImportStaticInnerMethods",
        "testAnotherMissingImport",
        "testStaticMethodWithDifferentClassSameNameJava3NoCollision",
        "testSortingOfImports",
        "testAccessType",
        "testCanAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: T[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: DataElement[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "spoon.test.imports.ImportAndExtendWithPackageNameTest",
      "failingMethods": [],
      "erroringMethods": [
        "testBuildModel"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRenameAllLocalVariablesOfRenameTestSubject",
        "testRefactorWrongUsage",
        "testRenameLocalVariableToSameName"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Method[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Method[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Method[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.template.TemplateClassAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testClassAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.support.visitor.java.JavaReflectionTreeBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testShadowModelEqualsNormalModel"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [
        "testInvocationWithFieldAccessInNoClasspath",
        "testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath"
      ],
      "erroringMethods": [
        "testArgumentOfAInvocationIsNotATypeAccess",
        "testToStringEqualityBetweenTwoGenericTypeDifferent",
        "testTypeReferenceWithGenerics",
        "testPackageInNoClasspath",
        "testTypeReferenceSpecifiedInClassDeclarationInNoClasspath",
        "testUnknownSuperClassWithSameNameInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]1\u003e but was:\u003c[\u003canonymous\u003e]1\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.test.imports.testclasses.withgenerics",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: char[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile TestBot.java because The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "testThisInConstructorAfterATransformation",
        "testTransformedInstanceofAfterATransformation",
        "testThisInConstructor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Method[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Method[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Method[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Method[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.annotation.AnnotationValuesTest",
      "failingMethods": [],
      "erroringMethods": [
        "testValuesOnJava8Annotation",
        "testCtAnnotationAPI",
        "testValuesOnJava7Annotation",
        "testAnnotationPrintAnnotation"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: char[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.loop.LoopTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAnnotationInForLoop"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.constructorcallnewclass.NewClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCtNewClassInNoClasspath",
        "testMoreThan9NewClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: double[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Directory[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTemplateInheritance",
        "testTemplateC1",
        "testTemplateArrayAccess",
        "testSubstitutionInsertAllNtoN",
        "testTemplateWithWrongUsedStringParam",
        "testSimpleTemplate",
        "testTemplateInterfaces",
        "substituteTypeAccessReference",
        "substituteStringLiteral"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Hello world",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [],
      "erroringMethods": [
        "testPrintNotAllSourcesWithFilter",
        "testSetterInNodes",
        "testPrintNotAllSourcesWithNames",
        "testPrintNotAllSourcesInCommandLine"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod",
        "testUsageOfTypeAnnotationOnLocalVariableInMethod",
        "testRepeatableAnnotationAreManagedWithArrays",
        "testUsageOfTypeAnnotationWithGenericTypesInStatements",
        "testGetAnnotationFromParameter",
        "testUsageOfTypeAnnotationInExtendsImplementsOfAClass",
        "testReplaceAnnotationValue",
        "testOutputGeneratedByTypeAnnotation",
        "testUsageOfTypeAnnotationInReturnTypeInMethod",
        "testUsageOfParametersInTypeAnnotation",
        "testAbstractAllAnnotationProcessor",
        "testAnnotationArray",
        "testUsageOfTypeAnnotationInCast",
        "testRepeatableAnnotationAreManaged",
        "testModelBuildingAnnotationBoundUsage",
        "testAnnotationAndShadowDefaultRetentionPolicy",
        "testAccessAnnotationValue",
        "testGetAnnotationOuter",
        "testAbstractAllAnnotationProcessorWithGlobalAnnotation",
        "annotationOverrideFQNIsOK",
        "testAnnotationAndShadowClassRetentionPolicy",
        "testCreateRepeatableAnnotation",
        "testUsageOfTypeAnnotationOnParameterInMethod",
        "testUsageOfTypeAnnotationInNewInstance",
        "testCreateRepeatableAnnotationWithArrays",
        "testAnnotationParameterTypes",
        "testAnnotationAndShadowRuntimeRetentionPolicy",
        "testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration",
        "testAnnotationIntrospection",
        "testAnnotatedElementTypes",
        "testInnerAnnotationsWithArray"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Cache.Entry\u003cK",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: MiddleAnnotation[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: MiddleAnnotation[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: this",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: InnerAnnot[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 31
    },
    {
      "className": "spoon.test.invocations.InvocationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIssue1753"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: HashMap\u003c\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.support.ResourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFilteringFolder"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.strings.StringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testModelBuildingInitializer"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.jar.JarTest",
      "failingMethods": [],
      "erroringMethods": [
        "testJar"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.PrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testFQNModeWriteFQNConstructorInCtVisitor",
        "testAutoimportModeDontImportUselessStatic",
        "testPrettyPrinter",
        "testRuleCanBeBuild",
        "testPrinterTokenListener",
        "testJDTBatchCompilerCanBeBuild"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: T[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: CtElement[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: CompilationUnit[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.reflect.visitor.CtVisitorTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMethodsInVisitor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.pkg.PackageTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRenamePackageAndPrettyPrintNoclasspath",
        "testRenameRootPackageWithNullOrEmpty",
        "testRenamePackageAndPrettyPrintWithProcessor",
        "testRenameRootPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.varargs.VarArgsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testModelBuildingInitializer"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.ContractOnSettersParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtModuleReference getReference();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getRootPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRootPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e getModuleDirectives();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e getRequiredModules();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getExportedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e getOpenedPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e getUsedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e getProvidedServices();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    boolean isOpenModule();\n\n    @spoon.support.DerivedProperty\n    boolean isUnnamedModule();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODIFIER)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setIsOpenModule(boolean arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setModuleDirectives(java.util.List\u003cspoon.reflect.declaration.CtModuleDirective\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addModuleDirectiveAt(int arg0, spoon.reflect.declaration.CtModuleDirective arg1);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.MODULE_DIRECTIVE)\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setUsedServices(java.util.List\u003cspoon.reflect.declaration.CtUsedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SERVICE_TYPE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeUsedService(spoon.reflect.declaration.CtUsedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setExportedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.EXPORTED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeExportedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setOpenedPackages(java.util.List\u003cspoon.reflect.declaration.CtPackageExport\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.OPENED_PACKAGE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setRequiredModules(java.util.List\u003cspoon.reflect.declaration.CtModuleRequirement\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.REQUIRED_MODULE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T setProvidedServices(java.util.List\u003cspoon.reflect.declaration.CtProvidedService\u003e arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T addProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.PROVIDED_SERVICE)\n    @spoon.support.DerivedProperty\n    \u003cT extends spoon.reflect.declaration.CtModule\u003e T removeProvidedService(spoon.reflect.declaration.CtProvidedService arg0);\n\n    spoon.reflect.declaration.CtModule clone();\n\n    static final java.lang.String TOP_LEVEL_MODULE_NAME;\n}]",
        "testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {\n    @spoon.support.DerivedProperty\n    spoon.reflect.reference.CtPackageReference getReference();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    java.lang.String getQualifiedName();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    void removeType(spoon.reflect.declaration.CtType\u003c?\u003e arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e getTypes();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setPackages(java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e arg0);\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtModule getDeclaringModule();\n\n    @spoon.support.DerivedProperty\n    spoon.reflect.declaration.CtPackage getDeclaringPackage();\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T addPackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    boolean removePackage(spoon.reflect.declaration.CtPackage arg0);\n\n    @spoon.reflect.annotations.PropertySetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtPackage\u003e T setTypes(java.util.Set\u003cspoon.reflect.declaration.CtType\u003c?\u003e\u003e arg0);\n\n    boolean isUnnamedPackage();\n\n    spoon.reflect.declaration.CtPackage clone();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    spoon.reflect.declaration.CtPackage getPackage(java.lang.String arg0);\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.SUB_PACKAGE)\n    java.util.Set\u003cspoon.reflect.declaration.CtPackage\u003e getPackages();\n\n    @spoon.reflect.annotations.PropertyGetter(role \u003d spoon.reflect.path.CtRole.CONTAINED_TYPE)\n    \u003cT extends spoon.reflect.declaration.CtType\u003c?\u003e\u003e T getType(java.lang.String arg0);\n\n    static final java.lang.String PACKAGE_SEPARATOR;\n\n    static final char PACKAGE_SEPARATOR_CHAR;\n\n    static final java.lang.String TOP_LEVEL_PACKAGE_NAME;\n}]"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.targeted.TargetedExpressionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCtThisAccess",
        "testCastWriteWithGenerics",
        "testTargetsOfFieldAccessInInnerClass",
        "testClassDeclaredInALambda",
        "testTargetsOfFieldInAnonymousClass",
        "testTargetsOfInvInInnerClass",
        "testTargetsOfInvInAnonymousClass"
      ],
      "failures": [
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: 1",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: T[]",
          "isError": true
        },
        {
          "failureName": "java.lang.IndexOutOfBoundsException",
          "failureDetail": "Index: 0, Size: 0",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.methodreference.MethodReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testNoClasspathSuperExecutable",
        "testReferenceToAJavaUtilClassConstructor",
        "testReferenceBuilderWithComplexGenerics",
        "testReferenceToAConstructor",
        "testReferenceToAnInstanceMethodOfAParticularObject",
        "testGetGenericMethodFromReference",
        "testNoClasspathExecutableReferenceExpression",
        "testReferenceToAnInstanceMethodOfMultiParticularObject",
        "testReferenceToAStaticMethod",
        "testReferenceToAClassParametrizedConstructor",
        "testReferenceToAnInstanceMethodOfAnArbitraryObjectOfAParticularType",
        "testGetGenericExecutableReference",
        "testCompileMethodReferenceGeneratedBySpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Person[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "testWithSimpleImportNoAutoimport",
        "testInternalImportWhenNoClasspath",
        "testWithSimpleImport"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: it.feio.android.omninotes.commons",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [
        "testNoClasspathWithSuperClassOfAClassInAnInterface"
      ],
      "erroringMethods": [
        "testAllTypeReferencesToALocalTypeShouldNotStartWithNumber",
        "getConstructor",
        "testParentOfTheEnclosingClassOfStaticClass",
        "testDefaultConstructorAreOk"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: boolean[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile draw2d because The given identifier does not respect Java definition of an identifier: org.eclipse.draw2d.MouseEvent",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.executable.ExecutableRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSameTypeInConstructorCallBetweenItsObjectAndItsExecutable"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.variable.AccessFullyQualifiedFieldTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPrivateStaticImportShouldNotBeImportedInSameClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: byte[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testImplicitStaticClassAccessAutoImport",
        "testImplicitStaticClassAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCtModel",
        "testClassAccessCreatedFromFactories"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.filters.FilterTest",
      "failingMethods": [
        "testOverridingMethodFromSubClassOfAbstractClass",
        "testOverridingMethodFromSubClassOfInterface",
        "testOverridingMethodFromAbstractClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ses.AbstractTostada$[]1\u003e but was:\u003c...ses.AbstractTostada$[\u003canonymous\u003e]1\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ses.AbstractTostada$[]1\u003e but was:\u003c...ses.AbstractTostada$[\u003canonymous\u003e]1\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ses.AbstractTostada$[]1\u003e but was:\u003c...ses.AbstractTostada$[\u003canonymous\u003e]1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.template.TemplateArrayAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testArrayAccess",
        "testArrayLengthAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCharLiteralInNoClasspath",
        "testLiteralInForEachWithNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Index[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.constructorcallnewclass.ConstructorCallTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCoreConstructorCall",
        "testConstructorCallStringWithoutParameters",
        "testConstructorCallObjectWithParameters",
        "testConstructorCallStringWithParameters",
        "testConstructorCallWithGenericArray",
        "testConstructorCallObjectWithoutParameters"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: AtomicLong[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.reflect.declaration.UnknownDeclarationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testUnknownCalls"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [],
      "erroringMethods": [
        "testNewlyCreatedCUWouldGetAPartialPosition",
        "testGetUnitTypeWorksWithCreatedObjects"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: new",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: package",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.OneCanCallSetterWithNullParameterizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.labels.TestLabels",
      "failingMethods": [],
      "erroringMethods": [
        "testLabelsAreDetected"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.LinesTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIdenticalPrettyPrinter",
        "testPrettyPrinterWithLines",
        "testCompileWhenUsingLinesArgument"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "testContract[CtArrayTypeReference]",
        "testContract[CtModule]",
        "testContract[CtPackage]"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: spoon.support.reflect.declaration.CtPackageImpl@1",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.signature.SignatureTest",
      "failingMethods": [],
      "erroringMethods": [
        "testBugSignature",
        "testArgumentNotNullForExecutableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: InputType[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "testRoleOnField",
        "testMetamodelWithoutSources"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.arrays.ArraysTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInitializeWithNewArray",
        "testCtNewArrayWitComments",
        "testCtNewArrayInnerCtNewArray",
        "testArrayReferences"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.testing.CtPackageAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAddTypeToPackage",
        "testEqualityBetweenTwoDifferentCtPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: package",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.reflect.ast.AstCheckerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPushToStackChanges",
        "testAvoidSetCollectionSavedOnAST"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.enums.EnumsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAnnotationsOnEnum",
        "testModelBuildingEnum"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.position.PositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testArrayArgParameter",
        "testPositionInterface",
        "testPositionAnnotation",
        "testPositionClass",
        "testPositionClassWithComments"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.reference.ElasticsearchStackoverflowTest",
      "failingMethods": [],
      "erroringMethods": [
        "testStackOverflow"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [
        "testInvocationGenerics",
        "testNewClassGenerics",
        "testGenericsOnLocalType",
        "testConstructorCallGenerics"
      ],
      "erroringMethods": [
        "testTypeParameterReference",
        "testGenericMethodCallWithExtend",
        "testBugCommonCollection"
      ],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile testclasses because Syntax error, insert \"enum Identifier\" to complete EnumHeaderName at /root/workspace/INRIA/spoon/405276650/target/spooned/spoon/test/generics/testclasses/Mole.java:7",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile testclasses because Syntax error, insert \"enum Identifier\" to complete EnumHeaderName at /root/workspace/INRIA/spoon/405276650/target/spooned/spoon/test/generics/testclasses/Mole.java:7",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003cnew []Cook\u003cjava.lang.Strin...\u003e but was:\u003cnew [\u003canonymous\u003e1]Cook\u003cjava.lang.Strin...\u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile testclasses because Syntax error, insert \"enum Identifier\" to complete EnumHeaderName at /root/workspace/INRIA/spoon/405276650/target/spooned/spoon/test/generics/testclasses/Mole.java:7",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: E[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 4,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.model.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetDeclaredOrIheritedFieldByReflection",
        "testTypeInfoIsInterface"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: byte[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: byte[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.reference.CloneReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetDeclarationOfFieldAfterClone",
        "testGetDeclarationAfterClone"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: char[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: char[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.prettyprinter.QualifiedThisRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "testPrintCtFieldAccessWorkEvenWhenParentNotInitialized"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testScannerCallsAllProperties",
        "testScannerContract"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "testAllMethodsSameSignatureFunction",
        "testExecutableReferenceFilter",
        "testSubInheritanceHierarchyFunction",
        "testCtParameterRemoveRefactoring",
        "testCtParameterRemoveRefactoringValidationCheck"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "testProcessorWithGenericType",
        "testCallProcessorWithMultipleTypes"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.reference.VariableAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testDeclarationArray",
        "testMultipleDeclarationsOfLocalVariable",
        "testParameterReferenceInConstructorNoClasspath",
        "testGetDeclarationAfterClone"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: double[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: char[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Path[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.variable.AccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "testVariableAccessInNoClasspath",
        "testCanVisitArrayAccessAndSubClasses"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.secondaryclasses.ClassesTest",
      "failingMethods": [
        "testAnonymousClass",
        "testIsAnonymousMethodInCtClass"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...sses.AnonymousClass$[]1\u003e but was:\u003c...sses.AnonymousClass$[\u003canonymous\u003e]1\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c[]1\u003e but was:\u003c[\u003canonymous\u003e]1\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSrcMainJava",
        "testInterfacesAreCtScannable",
        "testSpecPackage",
        "testStaticClasses",
        "metamodelPackageRule",
        "testGoodTestClassNames",
        "testFactorySubFactory",
        "statelessFactory"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGenerateCloneVisitor",
        "testGenerateReplacementVisitor",
        "testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: CtElement[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testIssue1501",
        "testPrintAMethodWithGeneric",
        "testPrintAMethodWithImports",
        "testIssue2130",
        "testPrintAClassWithImports"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: FooCasper[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: FooCasper[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: null",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Void[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: FooCasper[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInsertNewComment",
        "testJavaDocEmptyCommentAndTag",
        "testCommentsInComment1And2",
        "testCombinedPackageInfoComment",
        "testWildComments",
        "testJavaDocCommentOnUnix",
        "testRemoveComment",
        "testJavadocShortAndLongComment",
        "testCoreFactory",
        "testBlockComment",
        "testCodeFactory",
        "testInLineComment",
        "testDocumentationContract"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "spoon.testing.CtElementAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testEqualityBetweenTwoCtElement",
        "testEqualityBetweenTwoCtElementWithTheSameSignatureButNotTheSameContent",
        "testEqualityBetweenTwoDifferentCtElement",
        "testEqualityBetweenACtElementAndAString"
      ],
      "failures": [
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003cjava.lang.AssertionError\u003e but was\u003cspoon.SpoonException\u003e",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.visibility.VisibilityTest",
      "failingMethods": [
        "testFullyQualifiedNameOfTypeReferenceWithGeneric"
      ],
      "erroringMethods": [
        "testInvocationVisibilityInFieldDeclaration",
        "testName",
        "testVisibilityOfClassesNamedByClassesInJavaLangPackage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Can\u0027t compile testclasses because Syntax error on token \"1D\", invalid Type at /root/workspace/INRIA/spoon/405276650/target/spooned/spoon/test/visibility_generics/testclasses/spoon/test/visibility/testclasses/A2.java:45",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "testComputeImportsInClassWithSameName",
        "testImportOnSpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.exceptions.ExceptionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testUnionCatchExceptionInsideLambdaInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: System.out",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilationunit.GetBinaryFilesTest",
      "failingMethods": [
        "testAnonymousClasses"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c4\u003e but was:\u003c2\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.type.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTypeAccessForTypeAccessInInstanceOf",
        "testTypeAccessForDotClass",
        "testTypeAccessOnPrimitive",
        "testIntersectionTypeReferenceInGenericsAndCasts",
        "testTypeAccessOfArrayObjectInFullyQualifiedName",
        "testPolyTypBindingInTernaryExpression",
        "testTypeReferenceInGenericsAndCasts"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.compiler.ModelBuildingException",
          "failureDetail": "snippet compilation error while compiling: class Wrapper {\n    static void wrap() throws java.lang.Throwable {\n        class X {public void foo() { Class klass\u003dnull;  boolean x\u003d (klass \u003d\u003d short.class);}};;\n    }\n}",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "testMethodsInInheritanceScanner"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.CloneTest",
      "failingMethods": [],
      "erroringMethods": [
        "testCloneMethodsDeclaredInAST",
        "testCloneCastConditional",
        "testCopyType",
        "testCloneListener"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: byte[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "testInterruptAProcessor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.eval.EvalTest",
      "failingMethods": [],
      "erroringMethods": [
        "testDoNotSimplify",
        "testArrayLength",
        "testStringConcatenation",
        "testScanAPartiallyEvaluatedElement",
        "testDoNotSimplifyToExpressionWhenStatementIsExpected",
        "testDoNotSimplifyCasts",
        "testTryCatchAndStatement"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.parameters.ParameterTest",
      "failingMethods": [],
      "erroringMethods": [
        "testGetParameterReferenceInLambdaNoClasspath",
        "testMultiParameterLambdaTypeReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: System.out",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.lang.HashMap",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [],
      "erroringMethods": [
        "testSettersAreAllGood"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "testLambdaNoClasspath",
        "testPbWithStream",
        "testSpecifyGetAllExecutablesMethod",
        "testSuperClassInGetAllExecutables"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Bar[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: double[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: double[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.fieldaccesses.FieldAccessTest",
      "failingMethods": [
        "testTypeDeclaredInAnonymousClass"
      ],
      "erroringMethods": [
        "testFieldAccessAutoExplicit",
        "testFieldAccessInAnonymousClass",
        "testBCUBug20140402",
        "testFieldAccessNoClasspath",
        "testGetReference",
        "testFieldAccessOnUnknownType",
        "testFieldWriteWithPlusEqualsOperation",
        "testIncrementationOnAVarIsAUnaryOperator",
        "testModelBuildingFieldAccesses",
        "testTypeOfFieldAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: A[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: int[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: String[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.module.TestModule",
      "failingMethods": [],
      "erroringMethods": [
        "testModuleInfoWithComments",
        "testCompleteModuleInfoContentNoClasspath",
        "testModuleInfoShouldBeCorrectlyPrettyPrinted",
        "testDirectiveOrders"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: java.logging",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.testing.AbstractAssertTest",
      "failingMethods": [],
      "erroringMethods": [
        "testTransformationFromCtElementWithProcessor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.lambda.LambdaTest",
      "failingMethods": [],
      "erroringMethods": [
        "testLambdaExpressionWithExpressionBodyAndWithMultiParametersTyped",
        "testInterfaceWithObjectMethods",
        "testLambdaExpressionWithExpressionBodyAndWithMultiParameters",
        "testFieldAccessInLambdaNoClassPathExternal1Example",
        "testLambdaExpressionWithExpressionBodyAndWithParameterTyped",
        "testGetDeclarationOnTypeParameterFromLambda",
        "testLambdaWithPrimitiveParameter",
        "testTypeParameterOfLambdaWithoutType",
        "testTypeParameterWithImplicitArrayType",
        "testEqualsLambdaParameterRef",
        "testLambdaExpressionWithStatementBodyAndWithoutParameters",
        "testLambdaExpressionWithExpressionBodyAndWithoutTypeForParameter",
        "testGetOverriddenMethodWithFunction",
        "testTypeParameterOfLambdaWithoutType2",
        "testLambdaFilter",
        "testTypeAccessInLambdaNoClassPath",
        "testLambdaMethod",
        "testLambdaExpressionInIfConditional",
        "testCompileLambdaGeneratedBySpoon",
        "testBuildExecutableReferenceFromLambda",
        "testFieldAccessInLambdaNoClassPath",
        "testLambdaExpressionWithExpressionBodyAndWithoutParameter",
        "testLambdaExpressionWithStatementBodyAndWithParameter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: Object[]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 23
    },
    {
      "className": "spoon.test.compilation.CompilationTest",
      "failingMethods": [],
      "erroringMethods": [
        "testNewInstance",
        "testFilterResourcesDir",
        "testPrecompile"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: The given identifier does not respect Java definition of an identifier: char[]",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "java.lang.ClassNotFoundException: \u003canonymous\u003e1X",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.template.PatternTest",
      "failingMethods": [
        "testGenerateMethodWithSelfReferences",
        "testGenerateClassWithSelfReferences"
      ],
      "erroringMethods": [
        "testMatchForeachWithOuterSubstitution",
        "testPatternToString",
        "testMatchParameterValue",
        "testPatternParameters",
        "testMatchParameterValueType",
        "testMatchSample1",
        "testMatchParameterCondition",
        "testMatchReluctantMultivalueMinCount1",
        "testMatchPossesiveMultiValueUnlimited",
        "testMatchReluctantMultivalue",
        "testMatchGreedyMultiValueUnlimited",
        "testMatchGreedyMultiValueMaxCountLimit",
        "testGenerateMultiValues",
        "testMatchForeach",
        "testMatchReluctantMultivalueExactly2",
        "testMatchIfElse",
        "testMatchPossesiveMultiValueMaxCount4"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, boolean, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar, java.lang.Object, int, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e but was:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, boolean, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$\u003canonymous\u003e1Bar, java.lang.Object, int, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e",
          "isError": false
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "The given identifier does not respect Java definition of an identifier: class",
          "isError": true
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$1Bar, java.lang.Object, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e but was:\u003c[spoon.test.generated.ACloneOfAClassWithMethodsAndRefs, void, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$\u003canonymous\u003e1Bar, java.lang.Object, spoon.test.generated.ACloneOfAClassWithMethodsAndRefs$Local]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 17
    }
  ],
  "failingModule": "/root/workspace/INRIA/spoon/405276650"
}