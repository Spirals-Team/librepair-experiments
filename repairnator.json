{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "metrics": {
    "StepsDurationsInSeconds": {
      "CheckoutBuggyBuild": 10,
      "ComputeClasspath": 4,
      "ComputeTestDir": 0,
      "ResolveDependency": 118,
      "BuildProject": 665,
      "NPERepair": 0,
      "ComputeSourceDir": 0,
      "InitRepoToPush": 21,
      "CloneRepository": 33,
      "NopolRepair": 203,
      "CheckoutPatchedBuild": 0,
      "TestProject": 555,
      "GatherTestInformation": 0,
      "PushIncriminatedBuild": 11,
      "AstorRepair": 5,
      "CommitPatch": 29
    },
    "FailureNames": [
      "java.lang.RuntimeException",
      "java.lang.AssertionError",
      "com.facebook.presto.spi.PrestoException"
    ],
    "NbFailingTests": 9,
    "BugCommitUrl": "http://github.com/prestodb/presto/commit/446b1dca4eb16e5fd14f8bcbd02e7d70f462188e",
    "ReproductionDate": "Apr 24, 2018 9:38:32 AM",
    "BuggyBuildId": 370435565,
    "PatchedBuilId": 0,
    "BuggyBuildURL": "http://travis-ci.org/prestodb/presto/builds/370435565",
    "BuggyBuildDate": "Apr 24, 2018 9:38:16 AM",
    "BugCommit": "446b1dca4eb16e5fd14f8bcbd02e7d70f462188e",
    "PatchChangedFiles": 2,
    "PatchAddedLines": 0,
    "PatchDeletedLines": 0,
    "NbRunningTests": 4400,
    "NbLibraries": 160,
    "NbFileApp": 0,
    "NbFileTests": 0,
    "NbCPU": 32,
    "FreeMemory": 2225756632,
    "TotalMemory": 6276775936,
    "AngelicValuesByTest": {
      "com/facebook/presto/sql/planner/TestLogicalPlanner": 0,
      "com/facebook/presto/sql/gen/TestExpressionCompiler": 0,
      "com/facebook/presto/sql/planner/iterative/rule/TestTransformCorrelatedNoAggregationScalarToJoin": 0,
      "com/facebook/presto/type/TestMapOperators": 0
    },
    "FreeMemoryByStep": {
      "CheckoutBuggyBuild": 485097640,
      "ComputeClasspath": 942458984,
      "ComputeTestDir": 465121320,
      "ResolveDependency": 1207914824,
      "BuildProject": 845042520,
      "NPERepair": 949268480,
      "ComputeSourceDir": 942458984,
      "InitRepoToPush": 1130891840,
      "CloneRepository": 407027616,
      "NopolRepair": 2633795520,
      "CheckoutPatchedBuild": 2225756632,
      "TestProject": 823829272,
      "GatherTestInformation": 795111840,
      "PushIncriminatedBuild": 949268480,
      "AstorRepair": 835897272,
      "CommitPatch": 2225756632
    }
  },
  "failingModule": "/root/workspace/prestodb/presto/370435565/presto-main",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 9,
  "error-types": [
    "java.lang.RuntimeException",
    "java.lang.AssertionError",
    "com.facebook.presto.spi.PrestoException"
  ],
  "totalNumberRunningTests": 4400,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.sql.gen.TestExpressionCompiler",
      "failingMethods": [
        "com.facebook.presto.sql.gen.TestExpressionCompiler#testNullif"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "Error processing nullif(map(array[1], array[smallint \u00271\u0027]), map(array[1], array[integer \u00271\u0027]))",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin",
      "failingMethods": [
        "com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin#rewritesOnSubqueryWithoutProjection",
        "com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin#rewritesOnSubqueryWithProjection",
        "com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin#rewritesWithValuesAndLiteral",
        "com.facebook.presto.sql.planner.iterative.rule.TestTransformCorrelatedNoAggregationScalarToJoin#doesNotRewritesWhenCorrelationIsUsedInTwoFilters"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "Unknown transaction ID: 2e9531c9-71b5-43a5-a7d6-dff9cb3d0490. Possibly expired? Commands ignored until end of transaction block",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "Unknown transaction ID: a07093b9-0c1d-4180-bf2d-7e7b73f2aa89. Possibly expired? Commands ignored until end of transaction block",
          "isError": false
        },
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "Unknown transaction ID: ae63aaa1-ac78-4ad3-a869-5242f5aeb174. Possibly expired? Commands ignored until end of transaction block",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- node(ProjectNode)\n    bind corr -\u003e corr\n    bind a -\u003e a\n    - node(FilterNode)\n        FilterMatcher{predicate\u003d(CASE \"is_distinct\" WHEN true THEN true ELSE CAST(\"fail\"(28, \u0027Scalar sub-query has returned multiple rows\u0027) AS boolean) END)}\n        - node(MarkDistinctNode)\n            MarkDistinctMatcher{markerSymbol\u003dis_distinct, distinctSymbols\u003d[corr, unique], hashSymbol\u003dOptional.empty}\n            - node(JoinNode)\n                JoinMatcher{equiCriteria\u003d[], filter\u003d(\"corr\" \u003d 1)}\n                - node(AssignUniqueId)\n                    bind unique -\u003e AssignUniqueIdMatcher{}\n                    - node(ValuesNode)\n                        ValuesMatcher{outputSymbolAliases\u003d{corr\u003d0}, expectedOutputSymbolCount\u003dOptional.empty, expectedRows\u003dOptional.empty}\n                - node(ProjectNode)\n                    bind non_null -\u003e true\n                    - node(ValuesNode)\n                        ValuesMatcher{outputSymbolAliases\u003d{a\u003d0}, expectedOutputSymbolCount\u003dOptional.empty, expectedRows\u003dOptional.empty}\n\n] but found [\n\n- FilterProject[filterPredicate \u003d (CASE \"is_distinct\" WHEN true THEN true ELSE CAST(\"fail\"(28, \u0027Scalar sub-query has returned multiple rows\u0027) AS boolean) END)] \u003d\u003e [corr:bigint, a:bigint]\n    - MarkDistinct[distinct\u003dcorr:bigint, unique:bigint marker\u003dis_distinct] \u003d\u003e [corr:bigint, unique:bigint, a:bigint, is_distinct:boolean]\n        - Lateral[[corr]] \u003d\u003e [corr:bigint, unique:bigint, a:bigint]\n            - AssignUniqueId \u003d\u003e [corr:bigint, unique:bigint]\n                - GroupReference[2] \u003d\u003e [corr:bigint]\n            - GroupReference[4] \u003d\u003e [a:bigint]\n\n] which resolves to [\n\n- FilterProject[filterPredicate \u003d (CASE \"is_distinct\" WHEN true THEN true ELSE CAST(\"fail\"(28, \u0027Scalar sub-query has returned multiple rows\u0027) AS boolean) END)] \u003d\u003e [corr:bigint, a:bigint]\n    - MarkDistinct[distinct\u003dcorr:bigint, unique:bigint marker\u003dis_distinct] \u003d\u003e [corr:bigint, unique:bigint, a:bigint, is_distinct:boolean]\n        - Lateral[[corr]] \u003d\u003e [corr:bigint, unique:bigint, a:bigint]\n            - AssignUniqueId \u003d\u003e [corr:bigint, unique:bigint]\n                - Values \u003d\u003e [corr:bigint]\n                        Cost: {rows: 0 (0B), cpu: ?, memory: ?, network: ?}\n            - Filter[filterPredicate \u003d (\"corr\" \u003d 1)] \u003d\u003e [a:bigint]\n                    Cost: {rows: 0 (0B), cpu: ?, memory: ?, network: ?}\n                - Values \u003d\u003e [a:bigint]\n                        Cost: {rows: 0 (0B), cpu: ?, memory: ?, network: ?}\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.type.TestMapOperators",
      "failingMethods": [
        "com.facebook.presto.type.TestMapOperators#testDistinctFrom",
        "com.facebook.presto.type.TestMapOperators#testMapConcat"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "com.facebook.presto.spi.PrestoException",
          "failureDetail": "Value 3601762680 exceeds MAX_INT",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [{5.1\u003d33.22, 1.0\u003d2.20}] but found [{404738870.4\u003d2.20, 5.1\u003d33.22}]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.sql.planner.TestLogicalPlanner",
      "failingMethods": [
        "com.facebook.presto.sql.planner.TestLogicalPlanner#testCorrelatedSubqueries",
        "com.facebook.presto.sql.planner.TestLogicalPlanner#testDoubleNestedCorrelatedSubqueries"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(FilterNode)\n        FilterMatcher{predicate\u003d(BIGINT \u00273\u0027 \u003d \"X\")}\n        - node(LateralJoinNode)\n            CorrelationMatcher{correlation\u003d[X]}\n            - node(TableScanNode)\n                TableScanMatcher{expectedTableName\u003dorders}\n                bind X -\u003e Column orders:orderkey\n            - node(EnforceSingleRowNode)\n                - node(ProjectNode)\n                    - node(ValuesNode)\n\n] but found [\n\n- Output[orderkey] \u003d\u003e [orderkey:bigint]\n    - FilterProject[filterPredicate \u003d (CASE \"is_distinct\" WHEN true THEN true ELSE CAST(\"fail\"(28, \u0027Scalar sub-query has returned multiple rows\u0027) AS boolean) END)] \u003d\u003e [orderkey:bigint]\n        - MarkDistinct[distinct\u003dorderkey:bigint, unique:bigint marker\u003dis_distinct] \u003d\u003e [orderkey:bigint, unique:bigint, is_distinct:boolean]\n            - AssignUniqueId \u003d\u003e [orderkey:bigint, unique:bigint]\n                - ScanFilter[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d (BIGINT \u00273\u0027 \u003d \"orderkey\"), filterPredicate \u003d (\"orderkey\" \u003d BIGINT \u00273\u0027)] \u003d\u003e [orderkey:bigint]\n                        Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}/{rows: 7500 (73.24kB), cpu: ?, memory: ?, network: ?}\n                        orderkey :\u003d tpch:orderkey\n                            :: [[3]]\n                        tpch:orderstatus\n                            :: [[F], [O], [P]]\n\n] which resolves to [\n\n- Output[orderkey] \u003d\u003e [orderkey:bigint]\n    - FilterProject[filterPredicate \u003d (CASE \"is_distinct\" WHEN true THEN true ELSE CAST(\"fail\"(28, \u0027Scalar sub-query has returned multiple rows\u0027) AS boolean) END)] \u003d\u003e [orderkey:bigint]\n        - MarkDistinct[distinct\u003dorderkey:bigint, unique:bigint marker\u003dis_distinct] \u003d\u003e [orderkey:bigint, unique:bigint, is_distinct:boolean]\n            - AssignUniqueId \u003d\u003e [orderkey:bigint, unique:bigint]\n                - ScanFilter[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d (BIGINT \u00273\u0027 \u003d \"orderkey\"), filterPredicate \u003d (\"orderkey\" \u003d BIGINT \u00273\u0027)] \u003d\u003e [orderkey:bigint]\n                        Cost: {rows: 15000 (146.48kB), cpu: ?, memory: ?, network: ?}/{rows: 7500 (73.24kB), cpu: ?, memory: ?, network: ?}\n                        orderkey :\u003d tpch:orderkey\n                            :: [[3]]\n                        tpch:orderstatus\n                            :: [[F], [O], [P]]\n\n]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Plan does not match, expected [\n\n- anyTree\n    - node(FilterNode)\n        FilterMatcher{predicate\u003d\"OUTER_FILTER\"}\n        - node(ApplyNode)\n            CorrelationMatcher{correlation\u003d[C, O]}\n            bind OUTER_FILTER -\u003e THREE IN (C)\n            - node(ProjectNode)\n                bind THREE -\u003e BIGINT \u00273\u0027\n                - node(TableScanNode)\n                    TableScanMatcher{expectedTableName\u003dorders}\n                    bind O -\u003e Column orders:orderkey\n                    bind C -\u003e Column orders:custkey\n            - anyTree\n                - node(LateralJoinNode)\n                    CorrelationMatcher{correlation\u003d[L]}\n                    - node(TableScanNode)\n                        TableScanMatcher{expectedTableName\u003dlineitem}\n                        bind L -\u003e Column lineitem:orderkey\n                    - node(EnforceSingleRowNode)\n                        - node(ProjectNode)\n                            - node(ValuesNode)\n\n] but found [\n\n- Output[orderkey] \u003d\u003e [orderkey:bigint]\n    - FilterProject[filterPredicate \u003d \"expr_12\"] \u003d\u003e [orderkey:bigint]\n        - Apply[[custkey, orderkey]] \u003d\u003e [orderkey:bigint, custkey:bigint, expr:bigint, expr_12:boolean]\n                        expr_12 :\u003d (\"expr\" IN \"custkey\")\n            - ScanProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint, custkey:bigint, expr:bigint]\n                    Cost: {rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}\n                    expr :\u003d BIGINT \u00273\u0027\n                    orderkey :\u003d tpch:orderkey\n                    custkey :\u003d tpch:custkey\n                    tpch:orderstatus\n                        :: [[F], [O], [P]]\n            - Project[] \u003d\u003e [custkey:bigint]\n                - FilterProject[filterPredicate \u003d ((CASE \"is_distinct\" WHEN true THEN true ELSE CAST(\"fail\"(28, \u0027Scalar sub-query has returned multiple rows\u0027) AS boolean) END) AND \"expr_3\")] \u003d\u003e []\n                    - MarkDistinct[distinct\u003dorderkey_0:bigint, unique:bigint marker\u003dis_distinct] \u003d\u003e [orderkey_0:bigint, unique:bigint, expr_3:boolean, is_distinct:boolean]\n                        - Project[] \u003d\u003e [orderkey_0:bigint, unique:bigint, expr_3:boolean]\n                                expr_3 :\u003d (\"orderkey_0\" \u003d \"orderkey\")\n                            - AssignUniqueId \u003d\u003e [orderkey_0:bigint, unique:bigint]\n                                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey_0:bigint]\n                                        Cost: {rows: 60175 (587.65kB), cpu: ?, memory: ?, network: ?}\n                                        orderkey_0 :\u003d tpch:orderkey\n\n] which resolves to [\n\n- Output[orderkey] \u003d\u003e [orderkey:bigint]\n    - FilterProject[filterPredicate \u003d \"expr_12\"] \u003d\u003e [orderkey:bigint]\n        - Apply[[custkey, orderkey]] \u003d\u003e [orderkey:bigint, custkey:bigint, expr:bigint, expr_12:boolean]\n                        expr_12 :\u003d (\"expr\" IN \"custkey\")\n            - ScanProject[table \u003d local:tpch:orders:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey:bigint, custkey:bigint, expr:bigint]\n                    Cost: {rows: 15000 (292.97kB), cpu: ?, memory: ?, network: ?}/{rows: 15000 (439.45kB), cpu: ?, memory: ?, network: ?}\n                    expr :\u003d BIGINT \u00273\u0027\n                    orderkey :\u003d tpch:orderkey\n                    custkey :\u003d tpch:custkey\n                    tpch:orderstatus\n                        :: [[F], [O], [P]]\n            - Project[] \u003d\u003e [custkey:bigint]\n                - FilterProject[filterPredicate \u003d ((CASE \"is_distinct\" WHEN true THEN true ELSE CAST(\"fail\"(28, \u0027Scalar sub-query has returned multiple rows\u0027) AS boolean) END) AND \"expr_3\")] \u003d\u003e []\n                    - MarkDistinct[distinct\u003dorderkey_0:bigint, unique:bigint marker\u003dis_distinct] \u003d\u003e [orderkey_0:bigint, unique:bigint, expr_3:boolean, is_distinct:boolean]\n                        - Project[] \u003d\u003e [orderkey_0:bigint, unique:bigint, expr_3:boolean]\n                                expr_3 :\u003d (\"orderkey_0\" \u003d \"orderkey\")\n                            - AssignUniqueId \u003d\u003e [orderkey_0:bigint, unique:bigint]\n                                - TableScan[local:tpch:lineitem:sf0.01, originalConstraint \u003d true] \u003d\u003e [orderkey_0:bigint]\n                                        Cost: {rows: 60175 (587.65kB), cpu: ?, memory: ?, network: ?}\n                                        orderkey_0 :\u003d tpch:orderkey\n\n]",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    }
  ]
}