{
  "totalNumberSkippingTests": 4,
  "bugType": "only_fail",
  "totalNumberErroringTests": 255,
  "repo": "INRIA/spoon",
  "failingModule": "/root/workspace/INRIA/spoon/362343075",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 4,
  "error-types": [
    "spoon.SpoonException",
    "java.lang.AssertionError",
    "java.lang.NoClassDefFoundError",
    "java.lang.ExceptionInInitializerError",
    "java.lang.NullPointerException",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 1085,
  "failing-test-cases": [
    {
      "className": "spoon.test.trycatch.TryCatchTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.trycatch.TryCatchTest#testCatchWithExplicitFinalVariable",
        "spoon.test.trycatch.TryCatchTest#testMultiTryCatchWithCustomExceptions",
        "spoon.test.trycatch.TryCatchTest#testCompileMultiTryCatchWithCustomExceptions"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.parent.NullParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.NullParentTest#testAssertNullExpression",
        "spoon.test.parent.NullParentTest#testIfNullBranches",
        "spoon.test.parent.NullParentTest#testFieldNullDefaultExpression",
        "spoon.test.parent.NullParentTest#testReturnNullExpression",
        "spoon.test.parent.NullParentTest#testTargetedAccessNullTarget",
        "spoon.test.parent.NullParentTest#testForLoopNullChildren",
        "spoon.test.parent.NullParentTest#testLocalVariableNullDefaultExpression",
        "spoon.test.parent.NullParentTest#testTargetedExpressionNullTarget"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.staticFieldAccess.StaticAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.staticFieldAccess.StaticAccessTest#testProcessAndCompile",
        "spoon.test.staticFieldAccess.StaticAccessTest#testReferences"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.MavenLauncherTest",
      "failingMethods": [
        "spoon.MavenLauncherTest#spoonMavenLauncherTest",
        "spoon.MavenLauncherTest#mavenLauncherTestMultiModulesAndVariables"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Content of classpath: ",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected:\u003c7\u003e but was:\u003c0\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.imports.ImportTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.imports.ImportTest#testCanAccess",
        "spoon.test.imports.ImportTest#testSpoonWithImports",
        "spoon.test.imports.ImportTest#testSortImportPutStaticImportAfterTypeImport",
        "spoon.test.imports.ImportTest#testAccessType",
        "spoon.test.imports.ImportTest#testAccessToNestedClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest#testRenameAllLocalVariablesOfRenameTestSubject",
        "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest#testRenameLocalVariableToSameName",
        "spoon.test.refactoring.CtRenameLocalVariableRefactoringTest#testRefactorWrongUsage"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.initializers.InitializerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.initializers.InitializerTest#testModelBuildingInitializer"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.TypeReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.TypeReferenceTest#testConstructorCallInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testIgnoreEnclosingClassInActualTypes",
        "spoon.test.reference.TypeReferenceTest#testSubTypeAnonymous",
        "spoon.test.reference.TypeReferenceTest#testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testToStringEqualityBetweenTwoGenericTypeDifferent",
        "spoon.test.reference.TypeReferenceTest#testUnknownSuperClassWithSameNameInNoClasspath",
        "spoon.test.reference.TypeReferenceTest#testAnnotationOnMethodWithPrimitiveReturnTypeInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.parent.ParentContractTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.ParentContractTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class spoon.test.parent.ParentContractTest",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.annotation.AnnotationValuesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationValuesTest#testValuesOnJava7Annotation",
        "spoon.test.annotation.AnnotationValuesTest#testValuesOnJava8Annotation"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.refactoring.RefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.refactoring.RefactoringTest#testRefactoringClassChangeAllCtTypeReferenceAssociatedWithClassConcerned",
        "spoon.test.refactoring.RefactoringTest#testThisInConstructorAfterATransformation",
        "spoon.test.refactoring.RefactoringTest#testTransformedInstanceofAfterATransformation",
        "spoon.test.refactoring.RefactoringTest#testThisInConstructor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.template.TemplateReplaceReturnTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateReplaceReturnTest#testNoReturnReplaceTemplate",
        "spoon.test.template.TemplateReplaceReturnTest#testReturnReplaceTemplate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.constructorcallnewclass.NewClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructorcallnewclass.NewClassTest#testMoreThan9NewClass",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithObjectClass",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassInterfaceWithParameters",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassInEnumeration",
        "spoon.test.constructorcallnewclass.NewClassTest#testCtNewClassInNoClasspath",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithInterface",
        "spoon.test.constructorcallnewclass.NewClassTest#testNewClassWithInterfaceGeneric"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "spoon.test.sourcePosition.SourcePositionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.sourcePosition.SourcePositionTest#equalPositionsHaveSameHashcode"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.APITest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.api.APITest#testPrintNotAllSourcesWithFilter",
        "spoon.test.api.APITest#testSetterInNodes",
        "spoon.test.api.APITest#testPrintNotAllSourcesInCommandLine",
        "spoon.test.api.APITest#testPrintNotAllSourcesWithNames",
        "spoon.test.api.APITest#testOutputDestinationHandlerWithCUFactory"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.prettyprinter.PrintChangesTest",
      "failingMethods": [
        "spoon.test.prettyprinter.PrintChangesTest#testPrintUnchaged",
        "spoon.test.prettyprinter.PrintChangesTest#testPrintChanged"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inter.testclasses;\n\n[import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? ]\u003e but was:\u003c...inter.testclasses;\n\n[\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...inter.testclasses;\n\n[import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n \n \n /**/\n final\n //\n private String string \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n \n //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n//and what about this comment? ]\u003e but was:\u003c...inter.testclasses;\n\n[\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n/**\n * The content of this file \n * \n\n *   should not be changed\n * Because DJPP should print only modified content again \n */\npublic\n@Deprecated\nabstract class /* even this comment stays here together with all SPACES and EOLs*/ ToBeChanged\u003cT, K\u003e /*before extends*/ \n extends ArrayList\u003cT /* let\u0027s confuse \u003e it */ \u003e implements List\u003cT\u003e,\n Cloneable\n{\n    /**/\n final\n //\n private String modified \u003d \"a\"\n   + \"b\" + \"c\"+\"d\";\n\n    //and spaces here are wanted too\n \n \n public \u003cT, K\u003e void andSomeOtherMethod(\n   int param1,\n   String param2         , List\u003c?\u003e[][] ... twoDArrayOfLists)\n {/**/\n  System.out.println(\"aaa\"\n    + \"xyz\");\n /*x*/}\n\n    List\u003c?\u003e[][] twoDArrayOfLists \u003d new List\u003c?\u003e[7][];\n}\n\n]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "spoon.test.annotation.AnnotationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.annotation.AnnotationTest#testAnnotatedElementTypes",
        "spoon.test.annotation.AnnotationTest#testAbstractAllAnnotationProcessorWithGlobalAnnotation",
        "spoon.test.annotation.AnnotationTest#annotationOverrideFQNIsOK"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.template.TemplateTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateTest#substituteTypeAccessReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.invocations.InvocationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.invocations.InvocationTest#testIssue1753"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.factory.ConstructorFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.ConstructorFactoryTest#testCreate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.query_function.VariableReferencesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.query_function.VariableReferencesTest#testPotentialVariableAccessFromStaticMethod",
        "spoon.test.query_function.VariableReferencesTest#testVariableReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testCheckModelConsistency",
        "spoon.test.query_function.VariableReferencesTest#testLocalVariableReferenceDeclarationFunction",
        "spoon.test.query_function.VariableReferencesTest#testCatchVariableReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testParameterReferenceFunction",
        "spoon.test.query_function.VariableReferencesTest#testVariableScopeFunction",
        "spoon.test.query_function.VariableReferencesTest#testLocalVariableReferenceFunction"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.test.support.ResourceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.support.ResourceTest#testFilteringFolder"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.PrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.PrinterTest#testPrinterTokenListener",
        "spoon.test.prettyprinter.PrinterTest#testJDTBatchCompilerCanBeBuild",
        "spoon.test.prettyprinter.PrinterTest#testRuleCanBeBuild",
        "spoon.test.prettyprinter.PrinterTest#testPrettyPrinter"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.pkg.PackageTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.pkg.PackageTest#testGetFQNInNoClassPath",
        "spoon.test.pkg.PackageTest#testPackage"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.reflect.visitor.CtVisitorTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtVisitorTest#testMethodsInVisitor"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.targeted.TargetedExpressionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.targeted.TargetedExpressionTest#testStaticTargetsOfInv",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldAccessInInnerClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInv",
        "spoon.test.targeted.TargetedExpressionTest#testClassDeclaredInALambda",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInvInInnerClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldAccess",
        "spoon.test.targeted.TargetedExpressionTest#testNotTargetedExpression",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfFieldInAnonymousClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfInvInAnonymousClass",
        "spoon.test.targeted.TargetedExpressionTest#testTargetsOfStaticFieldAccess",
        "spoon.test.targeted.TargetedExpressionTest#testTargetOfFieldAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 11
    },
    {
      "className": "spoon.test.intercession.IntercessionContractTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.IntercessionContractTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.template.TemplateEnumAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.template.TemplateEnumAccessTest#testEnumAccessTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.jdtimportbuilder.ImportBuilderTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.jdtimportbuilder.ImportBuilderTest#testInternalImportWhenNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.ctClass.CtClassTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.ctClass.CtClassTest#testCloneAnonymousClassInvocationWithAutoimports",
        "spoon.test.ctClass.CtClassTest#testSpoonShouldInferImplicitPackageInNoClasspath",
        "spoon.test.ctClass.CtClassTest#testCloneAnonymousClassInvocation",
        "spoon.test.ctClass.CtClassTest#testNoClasspathWithSuperClassOfAClassInAnInterface"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.factory.AnnotationFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.AnnotationFactoryTest#testAnnotate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.variable.AccessFullyQualifiedFieldTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNAndStaticImport",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable",
        "spoon.test.variable.AccessFullyQualifiedFieldTest#testStaticImportWithAutoImport"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.factory.FactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.FactoryTest#specificationCoreFactoryCreate",
        "spoon.test.factory.FactoryTest#testFactoryOverriding",
        "spoon.test.factory.FactoryTest#testClone"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.filters.FilterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.filters.FilterTest#testOverriddenMethodFromInterface",
        "spoon.test.filters.FilterTest#testInvalidQueryStep",
        "spoon.test.filters.FilterTest#testClassCastExceptionOnForEach",
        "spoon.test.filters.FilterTest#testQueryWithOptionalNumberOfInputs",
        "spoon.test.filters.FilterTest#testSubInheritanceHierarchyResolver",
        "spoon.test.filters.FilterTest#testQueryStepScannWithConsumer",
        "spoon.test.filters.FilterTest#testEarlyTerminatingQuery",
        "spoon.test.filters.FilterTest#filteredElementsAreOfTheCorrectType",
        "spoon.test.filters.FilterTest#testgetTopDefinitions",
        "spoon.test.filters.FilterTest#unionOfTwoFilters",
        "spoon.test.filters.FilterTest#classCastExceptionIsNotThrown",
        "spoon.test.filters.FilterTest#intersectionOfTwoFilters",
        "spoon.test.filters.FilterTest#testQueryBuilderWithFilterChain",
        "spoon.test.filters.FilterTest#testReflectionBasedTypeFilter",
        "spoon.test.filters.FilterTest#testOverriddenMethodsFromSubClassOfAbstractClass",
        "spoon.test.filters.FilterTest#testElementMapConsumableFunction",
        "spoon.test.filters.FilterTest#testReuseOfBaseQuery",
        "spoon.test.filters.FilterTest#testOverridingMethodFromInterface",
        "spoon.test.filters.FilterTest#testOverridingMethodFromAbstractClass",
        "spoon.test.filters.FilterTest#testQueryInQuery",
        "spoon.test.filters.FilterTest#testFilterQueryStep",
        "spoon.test.filters.FilterTest#testElementMapFunction",
        "spoon.test.filters.FilterTest#testOverriddenMethodFromSubClassOfInterface",
        "spoon.test.filters.FilterTest#testReuseOfQuery",
        "spoon.test.filters.FilterTest#testFilterChildrenWithoutFilterQueryStep",
        "spoon.test.filters.FilterTest#testOverridingMethodFromSubClassOfAbstractClass",
        "spoon.test.filters.FilterTest#testCtScannerListener",
        "spoon.test.filters.FilterTest#testParentFunction",
        "spoon.test.filters.FilterTest#testInvalidQueryStepFailurePolicyIgnore",
        "spoon.test.filters.FilterTest#testOverriddenMethodFromAbstractClass",
        "spoon.test.filters.FilterTest#testFunctionQueryStep",
        "spoon.test.filters.FilterTest#testOverridingMethodFromSubClassOfInterface",
        "spoon.test.filters.FilterTest#testInvocationFilterWithExecutableInLibrary"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 33
    },
    {
      "className": "spoon.test.literal.LiteralTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.literal.LiteralTest#testCharLiteralInNoClasspath"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.constructorcallnewclass.ConstructorCallTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallWithGenericArray",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallObjectWithoutParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallStringWithParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testCoreConstructorCall",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallStringWithoutParameters",
        "spoon.test.constructorcallnewclass.ConstructorCallTest#testConstructorCallObjectWithParameters"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.compilationunit.TestCompilationUnit",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilationunit.TestCompilationUnit#testGetUnitTypeWorksWithDeclaredPackage",
        "spoon.test.compilationunit.TestCompilationUnit#testNewlyCreatedCUWouldGetAPartialPosition"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.parent.TopLevelTypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.TopLevelTypeTest#testTopLevelType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.prettyprinter.LinesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.LinesTest#testIdenticalPrettyPrinter",
        "spoon.test.prettyprinter.LinesTest#testCompileWhenUsingLinesArgument",
        "spoon.test.prettyprinter.LinesTest#testPrettyPrinterWithLines"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.replace.ReplaceParametrizedTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.replace.ReplaceParametrizedTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.api.MetamodelTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.api.MetamodelTest#testRoleOnField"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.arrays.ArraysTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.arrays.ArraysTest#testInitializeWithNewArray"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.limits.utils.InternalTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.limits.utils.InternalTest#testStaticFinalFieldInAnonymousClass",
        "spoon.test.limits.utils.InternalTest#testInternalClasses"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.reflect.ast.AstCheckerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.ast.AstCheckerTest#testAvoidSetCollectionSavedOnAST",
        "spoon.reflect.ast.AstCheckerTest#testPushToStackChanges"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.factory.FieldFactoryTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.factory.FieldFactoryTest#testCreateFromSource",
        "spoon.test.factory.FieldFactoryTest#testCreate"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.reference.ElasticsearchStackoverflowTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.ElasticsearchStackoverflowTest#testStackOverflow"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.generics.GenericsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.generics.GenericsTest#testisGeneric",
        "spoon.test.generics.GenericsTest#testName",
        "spoon.test.generics.GenericsTest#testGenericsInQualifiedNameInConstructorCall",
        "spoon.test.generics.GenericsTest#testInvocationGenerics",
        "spoon.test.generics.GenericsTest#testMethodTypingContext",
        "spoon.test.generics.GenericsTest#testIsGenericsMethod",
        "spoon.test.generics.GenericsTest#testClassTypingContextMethodSignature",
        "spoon.test.generics.GenericsTest#testMethodsWithGenericsWhoExtendsObject",
        "spoon.test.generics.GenericsTest#testClassTypingContext",
        "spoon.test.generics.GenericsTest#testGenericTypeReference",
        "spoon.test.generics.GenericsTest#testAccessToGenerics",
        "spoon.test.generics.GenericsTest#testDeclarationOfTypeParameterReference",
        "spoon.test.generics.GenericsTest#testConstructorCallGenerics",
        "spoon.test.generics.GenericsTest#testMethodTypingContextAdaptMethod",
        "spoon.test.generics.GenericsTest#testCannotAdaptTypeOfNonTypeScope",
        "spoon.test.generics.GenericsTest#testNewClassGenerics",
        "spoon.test.generics.GenericsTest#testCtTypeReference_getSuperclass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 17
    },
    {
      "className": "spoon.test.prettyprinter.QualifiedThisRefTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.QualifiedThisRefTest#testCloneThisAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.visitor.CtScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtScannerTest#testScannerCallsAllProperties",
        "spoon.reflect.visitor.CtScannerTest#testScan",
        "spoon.reflect.visitor.CtScannerTest#testScannerContract"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.refactoring.MethodsRefactoringTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.refactoring.MethodsRefactoringTest#testExecutableReferenceFilter",
        "spoon.test.refactoring.MethodsRefactoringTest#testSubInheritanceHierarchyFunction",
        "spoon.test.refactoring.MethodsRefactoringTest#testAllMethodsSameSignatureFunction",
        "spoon.test.refactoring.MethodsRefactoringTest#testCtParameterRemoveRefactoringValidationCheck",
        "spoon.test.refactoring.MethodsRefactoringTest#testCtParameterRemoveRefactoring"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.processing.ProcessingTest#testCallProcessorWithMultipleTypes",
        "spoon.test.processing.ProcessingTest#testInsertBegin",
        "spoon.test.processing.ProcessingTest#testInsertEnd",
        "spoon.test.processing.ProcessingTest#testProcessorWithGenericType"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "spoon.test.reference.VariableAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.VariableAccessTest#testVariableAccessDeclarationInAnonymousClass",
        "spoon.test.reference.VariableAccessTest#testDeclarationOfVariableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.method.MethodTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.method.MethodTest#testGetAllMethods",
        "spoon.test.method.MethodTest#testClone"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.variable.AccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.variable.AccessTest#testFieldWriteDeclaredInTheSuperclass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.SetParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.SetParentTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class spoon.test.parent.ParentContractTest",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.parent.ParentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.parent.ParentTest#testParentSet",
        "spoon.test.parent.ParentTest#testParentPackage",
        "spoon.test.parent.ParentTest#testParent",
        "spoon.test.parent.ParentTest#testParentOfGenericInTypeReference",
        "spoon.test.parent.ParentTest#testParentOfCtPackageReference",
        "spoon.test.parent.ParentTest#testParentOfPrimitiveReference",
        "spoon.test.parent.ParentTest#testHasParent",
        "spoon.test.parent.ParentTest#testGetParentWithFilter",
        "spoon.test.parent.ParentTest#testParentOfCtVariableReference",
        "spoon.test.parent.ParentTest#testParentOfCtExecutableReference"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "spoon.test.secondaryclasses.ClassesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.secondaryclasses.ClassesTest#testAnonymousClass",
        "spoon.test.secondaryclasses.ClassesTest#testIsAnonymousMethodInCtClass",
        "spoon.test.secondaryclasses.ClassesTest#testAnonymousClassInStaticField"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "spoon.test.architecture.SpoonArchitectureEnforcerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#metamodelPackageRule",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testSpecPackage",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testSrcMainJava",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testStaticClasses",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#statelessFactory",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testInterfacesAreCtScannable",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testFactorySubFactory",
        "spoon.test.architecture.SpoonArchitectureEnforcerTest#testGoodTestClassNames"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "spoon.processing.CtGenerationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.processing.CtGenerationTest#testGenerateCloneVisitor",
        "spoon.processing.CtGenerationTest#testGenerateRoleHandler"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.prettyprinter.DefaultPrettyPrinterTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAClassWithImports",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAMethodWithGeneric",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testPrintAMethodWithImports",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#testIssue1501",
        "spoon.test.prettyprinter.DefaultPrettyPrinterTest#printClassCreatedWithSpoon"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition value must not be negative",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "spoon.test.comment.CommentTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.comment.CommentTest#testDocumentationContract"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.imports.ImportScannerTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.imports.ImportScannerTest#testComputeImportsInClass",
        "spoon.test.imports.ImportScannerTest#testComputeMinimalImportsInClass"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.visibility.VisibilityTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.visibility.VisibilityTest#testInvocationVisibilityInFieldDeclaration"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilationunit.GetBinaryFilesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilationunit.GetBinaryFilesTest#testAnonymousClasses"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.type.TypeTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.type.TypeTest#test"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.model.AnonymousExecutableTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.model.AnonymousExecutableTest#testStatements"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.visitor.CtInheritanceScannerMethodsTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.visitor.CtInheritanceScannerMethodsTest#testMethodsInInheritanceScanner"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.reflect.ast.CloneTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.reflect.ast.CloneTest#testCloneMethodsDeclaredInAST"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.properties.PropertiesTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.properties.PropertiesTest#testNonExistingDirectory"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.processing.ProcessingTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.processing.ProcessingTest#testSpoonTagger"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "spoon.SpoonException: SourcePosition value must not be negative",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.intercession.IntercessionTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.intercession.IntercessionTest#testSettersAreAllGood"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reference.ExecutableReferenceTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reference.ExecutableReferenceTest#testSuperClassInGetAllExecutables",
        "spoon.test.reference.ExecutableReferenceTest#testSpecifyGetAllExecutablesMethod"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "spoon.test.fieldaccesses.FieldAccessTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.fieldaccesses.FieldAccessTest#testTypeDeclaredInAnonymousClass",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldAccessInAnonymousClass",
        "spoon.test.fieldaccesses.FieldAccessTest#testFieldWriteWithPlusEqualsOperation",
        "spoon.test.fieldaccesses.FieldAccessTest#testGetReference",
        "spoon.test.fieldaccesses.FieldAccessTest#testIncrementationOnAVarIsAUnaryOperator",
        "spoon.test.fieldaccesses.FieldAccessTest#testTypeOfFieldAccess"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "spoon.test.delete.DeleteTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.delete.DeleteTest#testDeleteMethod",
        "spoon.test.delete.DeleteTest#testDeleteConditionInACondition",
        "spoon.test.delete.DeleteTest#testDeleteParameterOfMethod",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInConstructor",
        "spoon.test.delete.DeleteTest#testDeleteChainOfAssignment",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInMethod",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInAnonymousExecutable",
        "spoon.test.delete.DeleteTest#testDeleteAnnotationOnAClass",
        "spoon.test.delete.DeleteTest#testDeleteACaseOfASwitch",
        "spoon.test.delete.DeleteTest#testDeleteStatementInCase",
        "spoon.test.delete.DeleteTest#testDeleteAStatementInStaticAnonymousExecutable",
        "spoon.test.delete.DeleteTest#testDeleteAClassTopLevel",
        "spoon.test.delete.DeleteTest#testDeleteBodyOfAMethod",
        "spoon.test.delete.DeleteTest#testDeleteReturn"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        },
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 14
    },
    {
      "className": "spoon.test.main.MainTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.main.MainTest#spoon.test.main.MainTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.reflect.meta.MetaModelTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.reflect.meta.MetaModelTest#spoonMetaModelTest"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "spoon.test.compilation.CompilationTest",
      "failingMethods": [],
      "erroringMethods": [
        "spoon.test.compilation.CompilationTest#testFilterResourcesDir"
      ],
      "failures": [
        {
          "failureName": "spoon.SpoonException",
          "failureDetail": "SourcePosition values must be ascending or equal",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    }
  ]
}