{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 164,
  "repo": "allanmoreira8/vitrine",
  "bugCommit": "https://github.com/allanmoreira8/vitrine/compare/050941e104a7...b62223bb035a",
  "failingModule": "/root/workspace/allanmoreira8/vitrine/358851790",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 0,
  "error-types": [
    "java.lang.IllegalStateException",
    "java.lang.OutOfMemoryError"
  ],
  "totalNumberRunningTests": 191,
  "failing-test-cases": [
    {
      "className": "br.com.vitrine.web.rest.UserResourceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.web.rest.UserResourceIntTest#createUser",
        "br.com.vitrine.web.rest.UserResourceIntTest#updateUserLogin",
        "br.com.vitrine.web.rest.UserResourceIntTest#createUserWithExistingLogin",
        "br.com.vitrine.web.rest.UserResourceIntTest#testAuthorityEquals",
        "br.com.vitrine.web.rest.UserResourceIntTest#getNonExistingUser",
        "br.com.vitrine.web.rest.UserResourceIntTest#testUserFromId",
        "br.com.vitrine.web.rest.UserResourceIntTest#deleteUser",
        "br.com.vitrine.web.rest.UserResourceIntTest#testUserToUserDTO",
        "br.com.vitrine.web.rest.UserResourceIntTest#testUserEquals",
        "br.com.vitrine.web.rest.UserResourceIntTest#updateUserExistingEmail",
        "br.com.vitrine.web.rest.UserResourceIntTest#createUserWithExistingEmail",
        "br.com.vitrine.web.rest.UserResourceIntTest#getUser",
        "br.com.vitrine.web.rest.UserResourceIntTest#createUserWithExistingId",
        "br.com.vitrine.web.rest.UserResourceIntTest#updateUserExistingLogin",
        "br.com.vitrine.web.rest.UserResourceIntTest#testUserDTOtoUser",
        "br.com.vitrine.web.rest.UserResourceIntTest#getAllUsers",
        "br.com.vitrine.web.rest.UserResourceIntTest#updateUser",
        "br.com.vitrine.web.rest.UserResourceIntTest#getAllAuthorities"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 18
    },
    {
      "className": "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#testFindByPrincipalNotNullAndAfterIsNull",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#findByPrincipalAndType",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#testAddEventWithNullData",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#addAuditEventTruncateLargeData",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#testFindAfter",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#addAuditEventWithAuthorizationFailureType",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#testAddEventWithWebAuthenticationDetails",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#addAuditEvent",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#addAuditEventWithAnonymousUser",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#testFindByPrincipal",
        "br.com.vitrine.repository.CustomAuditEventRepositoryIntTest#testFindByPrincipalIsNullAndAfterIsNull"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 11
    },
    {
      "className": "br.com.vitrine.web.rest.LogsResourceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.web.rest.LogsResourceIntTest#changeLogs",
        "br.com.vitrine.web.rest.LogsResourceIntTest#getAllLogs",
        "br.com.vitrine.web.rest.LogsResourceIntTest#testLogstashAppender"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testInternalServerError",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testMethodNotSupported",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testAccessDenied",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testUnauthorized",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testExceptionWithResponseStatus",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testConcurrencyFailure",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testMissingServletRequestPartException",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testParameterizedError",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testParameterizedError2",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testMissingServletRequestParameterException",
        "br.com.vitrine.web.rest.errors.ExceptionTranslatorIntTest#testMethodArgumentNotValid"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 11
    },
    {
      "className": "br.com.vitrine.service.MailServiceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.service.MailServiceIntTest#testSendEmail",
        "br.com.vitrine.service.MailServiceIntTest#testSendPasswordResetMail",
        "br.com.vitrine.service.MailServiceIntTest#testSendEmailWithException",
        "br.com.vitrine.service.MailServiceIntTest#testCreationEmail",
        "br.com.vitrine.service.MailServiceIntTest#testSendEmailFromTemplate",
        "br.com.vitrine.service.MailServiceIntTest#testSendHtmlEmail",
        "br.com.vitrine.service.MailServiceIntTest#testSendMultipartHtmlEmail",
        "br.com.vitrine.service.MailServiceIntTest#testSendMultipartEmail",
        "br.com.vitrine.service.MailServiceIntTest#testSendActivationEmail"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 9
    },
    {
      "className": "br.com.vitrine.web.rest.AccountResourceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRegisterInvalidEmail",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRequestPasswordResetWrongEmail",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRegisterValid",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testSaveExistingEmailAndLogin",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testChangePasswordTooLong",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testGetUnknownAccount",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testFinishPasswordResetTooSmall",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testChangePassword",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testSaveExistingEmail",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testActivateAccountWithWrongKey",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testSaveInvalidEmail",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testGetExistingAccount",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRegisterInvalidLogin",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testFinishPasswordResetWrongKey",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testFinishPasswordReset",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRequestPasswordResetUpperCaseEmail",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testAuthenticatedUser",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testActivateAccount",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRegisterInvalidPassword",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testChangePasswordTooSmall",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRegisterDuplicateEmail",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRegisterAdminIsIgnored",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRegisterDuplicateLogin",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRequestPasswordReset",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testChangePasswordEmpty",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testSaveAccount",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testRegisterNullPassword",
        "br.com.vitrine.web.rest.AccountResourceIntTest#testNonAuthenticatedUser"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 28
    },
    {
      "className": "br.com.vitrine.service.UserServiceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.service.UserServiceIntTest#assertThatAnonymousUserIsNotGet",
        "br.com.vitrine.service.UserServiceIntTest#testFindNotActivatedUsersByCreationDateBefore",
        "br.com.vitrine.service.UserServiceIntTest#assertThatUserCanResetPassword",
        "br.com.vitrine.service.UserServiceIntTest#testRemoveNotActivatedUsers",
        "br.com.vitrine.service.UserServiceIntTest#assertThatResetKeyMustBeValid",
        "br.com.vitrine.service.UserServiceIntTest#assertThatUserMustExistToResetPassword",
        "br.com.vitrine.service.UserServiceIntTest#assertThatOnlyActivatedUserCanRequestPasswordReset",
        "br.com.vitrine.service.UserServiceIntTest#assertThatResetKeyMustNotBeOlderThan24Hours"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#addConnection",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#removeConnectionNoOp",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#noSuchConnectionFactory",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findUserIdsConnectedTo",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionsByProviderIdEmptyResult",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionByApiToUser",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionsByProviderId",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#removeConnectionsToProviderNoOp",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findPrimaryConnectionNotConnected",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findUserIdWithConnectionMultipleConnectionsToSameProviderUser",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionByKey",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#updateConnectionProfileFields",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findUserIdWithConnectionNoSuchConnection",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionsByApi",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionByKeyNoSuchConnection",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionsToUsers",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#updateConnectionAccessFields",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionsToUsersEmptyInput",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findPrimaryConnection_afterRemove",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findPrimaryConnection",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findUserIdWithConnection",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionsToUsersEmptyResult",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findAllConnectionsMultipleConnectionResults",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#removeConnection",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findAllConnectionsEmptyResult",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionByApiToUserNoSuchConnection",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#removeConnections",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#addConnectionDuplicate",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findPrimaryConnectionSelectFromMultipleByRank",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findConnectionsByApiEmptyResult",
        "br.com.vitrine.repository.CustomSocialUsersConnectionRepositoryIntTest#findAllConnections"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 31
    },
    {
      "className": "br.com.vitrine.service.SocialServiceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldThrowExceptionIfConnectionIsNull",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldCreateUserIfNotExist",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldCreateUserWithExactLangKey",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldThrowExceptionIfConnectionHasNoEmailAndLoginAlreadyExist",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldNotChangeUserIfEmailAlreadyExist",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldCreateUserWithSocialInformation",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldSendRegistrationValidationEmail",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldNotCreateUserIfEmailAlreadyExist",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldCreateActivatedUserWithRoleUserAndPassword",
        "br.com.vitrine.service.SocialServiceIntTest#testDeleteUserSocialConnection",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldCreateUserWithLoginSameAsEmailIfNotTwitter",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldCreateUserWithSocialLoginWhenIsTwitter",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldCreateSocialConnection",
        "br.com.vitrine.service.SocialServiceIntTest#testCreateSocialUserShouldThrowExceptionIfConnectionHasNoEmailAndNoLogin"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 14
    },
    {
      "className": "br.com.vitrine.web.rest.UserJWTControllerIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.web.rest.UserJWTControllerIntTest#testAuthorize",
        "br.com.vitrine.web.rest.UserJWTControllerIntTest#testAuthorizeWithRememberMe",
        "br.com.vitrine.web.rest.UserJWTControllerIntTest#testAuthorizeFails"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "br.com.vitrine.web.rest.ProdutoResourceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#checkDataCadastroIsRequired",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#deleteProduto",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#checkNomeIsRequired",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#getNonExistingProduto",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#getProduto",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#testEntityFromId",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#createProdutoWithExistingId",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#getAllProdutos",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#equalsVerifier",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#searchProduto",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#updateNonExistingProduto",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#createProduto",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#updateProduto",
        "br.com.vitrine.web.rest.ProdutoResourceIntTest#dtoEqualsVerifier"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 14
    },
    {
      "className": "br.com.vitrine.web.rest.ProfileInfoResourceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.web.rest.ProfileInfoResourceIntTest#getProfileInfoWithoutActiveProfiles",
        "br.com.vitrine.web.rest.ProfileInfoResourceIntTest#getProfileInfoWithRibbon",
        "br.com.vitrine.web.rest.ProfileInfoResourceIntTest#getProfileInfoWithoutRibbon"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "br.com.vitrine.security.DomainUserDetailsServiceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.security.DomainUserDetailsServiceIntTest#assertThatUserCanBeFoundByLoginIgnoreCase",
        "br.com.vitrine.security.DomainUserDetailsServiceIntTest#assertThatUserCanBeFoundByLogin",
        "br.com.vitrine.security.DomainUserDetailsServiceIntTest#assertThatUserCanBeFoundByEmailIgnoreCase",
        "br.com.vitrine.security.DomainUserDetailsServiceIntTest#assertThatUserNotActivatedExceptionIsThrownForNotActivatedUsers",
        "br.com.vitrine.security.DomainUserDetailsServiceIntTest#assertThatUserCanBeFoundByEmail",
        "br.com.vitrine.security.DomainUserDetailsServiceIntTest#assertThatEmailIsPrioritizedOverLogin"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "GC overhead limit exceeded",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "br.com.vitrine.web.rest.AuditResourceIntTest",
      "failingMethods": [],
      "erroringMethods": [
        "br.com.vitrine.web.rest.AuditResourceIntTest#getAudit",
        "br.com.vitrine.web.rest.AuditResourceIntTest#getNonExistingAudit",
        "br.com.vitrine.web.rest.AuditResourceIntTest#getAuditsByDate",
        "br.com.vitrine.web.rest.AuditResourceIntTest#getNonExistingAuditsByDate",
        "br.com.vitrine.web.rest.AuditResourceIntTest#getAllAudits"
      ],
      "failures": [
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        },
        {
          "failureName": "java.lang.OutOfMemoryError",
          "failureDetail": "Java heap space",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    }
  ]
}