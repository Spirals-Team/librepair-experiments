<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="io.hekate.codec.fst.FstCodecTest" time="0.766" tests="72" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.121-b13"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="maven.multiModuleProjectDirectory" value="/root/workspace/hekate-io/hekate/383632883"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="skip.gulp" value="true"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="findbugs.skip" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/root/workspace/hekate-io/hekate/383632883"/>
    <property name="checkstyle.skip" value="true"/>
    <property name="java.runtime.version" value="1.8.0_121-8u121-b13-1~bpo8+1-b13"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="skip.npm" value="true"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="gpg.skip" value="true"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="cobertura.skip" value="true"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/share/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/>
    <property name="license.skip" value="true"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.class.version" value="52.0"/>
    <property name="org.slf4j.simpleLogger.levelInBrackets" value="true"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="skip.bower" value="true"/>
    <property name="maven.repo.local" value="/root/./workspace/hekate-io/hekate/383632883/.m2"/>
    <property name="os.version" value="3.10.0-862.2.3.el7.x86_64"/>
    <property name="user.home" value="/root"/>
    <property name="user.timezone" value="Europe/Paris"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="user.name" value="root"/>
    <property name="java.class.path" value="/usr/share/maven/boot/plexus-classworlds-2.5.2.jar"/>
    <property name="skipITs" value="true"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-openjdk-amd64/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher -B -D enforcer.skip=true -D dependency-check.skip=true -D skipITs=true -D cobertura.skip=true -D maven.repo.local=/root/./workspace/hekate-io/hekate/383632883/.m2 -D rat.skip=true -D findbugs.skip=true -D skip.bower=true -D gpg.skip=true -D checkstyle.skip=true -D skip.gulp=true -D license.skip=true -D skip.npm=true test"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="dependency-check.skip" value="true"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_121"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="enforcer.skip" value="true"/>
    <property name="rat.skip" value="true"/>
    <property name="maven.home" value="/usr/share/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="org.slf4j.simpleLogger.showThreadName" value="false"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="testStateless[0: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.01"/>
  <testcase name="testUnmodifiableList[0: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.042"/>
  <testcase name="testUnmodifiableMap[0: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.009"/>
  <testcase name="testUnmodifiableSet[0: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.011"/>
  <testcase name="testToString[0: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.007"/>
  <testcase name="testBaseType[0: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.015"/>
  <testcase name="testArrayAsList[0: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.011"/>
  <testcase name="testEncodeDecode[0: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.032"/>
  <testcase name="testStateless[1: factory=FstCodecFactory[use-unsafe=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testUnmodifiableList[1: factory=FstCodecFactory[use-unsafe=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.017"/>
  <testcase name="testUnmodifiableMap[1: factory=FstCodecFactory[use-unsafe=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testUnmodifiableSet[1: factory=FstCodecFactory[use-unsafe=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testToString[1: factory=FstCodecFactory[use-unsafe=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.011"/>
  <testcase name="testBaseType[1: factory=FstCodecFactory[use-unsafe=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.007"/>
  <testcase name="testArrayAsList[1: factory=FstCodecFactory[use-unsafe=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.007"/>
  <testcase name="testEncodeDecode[1: factory=FstCodecFactory[use-unsafe=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.065"/>
  <testcase name="testStateless[2: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testUnmodifiableList[2: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testUnmodifiableMap[2: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testUnmodifiableSet[2: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testToString[2: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.007"/>
  <testcase name="testBaseType[2: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testArrayAsList[2: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testEncodeDecode[2: factory=FstCodecFactory[use-unsafe=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.022"/>
  <testcase name="testStateless[3: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testUnmodifiableList[3: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testUnmodifiableMap[3: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.007"/>
  <testcase name="testUnmodifiableSet[3: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testToString[3: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testBaseType[3: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testArrayAsList[3: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testEncodeDecode[3: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.064"/>
  <testcase name="testStateless[4: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.032"/>
  <testcase name="testUnmodifiableList[4: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.008"/>
  <testcase name="testUnmodifiableMap[4: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testUnmodifiableSet[4: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testToString[4: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.007"/>
  <testcase name="testBaseType[4: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testArrayAsList[4: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testEncodeDecode[4: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.02"/>
  <testcase name="testStateless[5: factory=FstCodecFactory[use-unsafe=true, shared-references=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.007"/>
  <testcase name="testUnmodifiableList[5: factory=FstCodecFactory[use-unsafe=true, shared-references=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.008"/>
  <testcase name="testUnmodifiableMap[5: factory=FstCodecFactory[use-unsafe=true, shared-references=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testUnmodifiableSet[5: factory=FstCodecFactory[use-unsafe=true, shared-references=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testToString[5: factory=FstCodecFactory[use-unsafe=true, shared-references=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testBaseType[5: factory=FstCodecFactory[use-unsafe=true, shared-references=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testArrayAsList[5: factory=FstCodecFactory[use-unsafe=true, shared-references=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testEncodeDecode[5: factory=FstCodecFactory[use-unsafe=true, shared-references=true]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.016"/>
  <testcase name="testStateless[6: factory=FstCodecFactory[use-unsafe=true, shared-references=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testUnmodifiableList[6: factory=FstCodecFactory[use-unsafe=true, shared-references=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testUnmodifiableMap[6: factory=FstCodecFactory[use-unsafe=true, shared-references=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testUnmodifiableSet[6: factory=FstCodecFactory[use-unsafe=true, shared-references=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testToString[6: factory=FstCodecFactory[use-unsafe=true, shared-references=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testBaseType[6: factory=FstCodecFactory[use-unsafe=true, shared-references=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testArrayAsList[6: factory=FstCodecFactory[use-unsafe=true, shared-references=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testEncodeDecode[6: factory=FstCodecFactory[use-unsafe=true, shared-references=false]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.025"/>
  <testcase name="testStateless[7: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testUnmodifiableList[7: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testUnmodifiableMap[7: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testUnmodifiableSet[7: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testToString[7: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testBaseType[7: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testArrayAsList[7: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.007"/>
  <testcase name="testEncodeDecode[7: factory=FstCodecFactory[use-unsafe=false, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.042"/>
  <testcase name="testStateless[8: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testUnmodifiableList[8: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.006"/>
  <testcase name="testUnmodifiableMap[8: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testUnmodifiableSet[8: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.005"/>
  <testcase name="testToString[8: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testBaseType[8: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testArrayAsList[8: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.004"/>
  <testcase name="testEncodeDecode[8: factory=FstCodecFactory[use-unsafe=true, known-types={1=class io.hekate.codec.CodecTestBase$ObjA, 2=class io.hekate.codec.CodecTestBase$ObjB}]]" classname="io.hekate.codec.fst.FstCodecTest" time="0.017"/>
</testsuite>