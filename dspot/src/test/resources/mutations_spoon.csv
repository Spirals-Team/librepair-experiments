JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,createParameterizedType,1277,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,createParameterizedType,1277,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,250,KILLED,spoon.test.position.PositionTest.testPositionStatement(spoon.test.position.PositionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,245,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,255,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,260,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,265,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,270,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,290,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,295,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,275,KILLED,spoon.test.variable.AccessTest.testCanVisitArrayAccessAndSubClasses(spoon.test.variable.AccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,280,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,285,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,300,KILLED,spoon.test.parent.ParentTest.testParentPackage(spoon.test.parent.ParentTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,305,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,310,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,315,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,320,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,329,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,334,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithSimpleImportNoAutoimport(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,717,SURVIVED,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,339,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,344,KILLED,spoon.reflect.ast.CloneTest.testCloneCastConditional(spoon.reflect.ast.CloneTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,349,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,354,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,359,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,364,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,369,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,374,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,379,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,384,KILLED,spoon.test.condition.ConditionalTest.testBlockInConditionAndLoop(spoon.test.condition.ConditionalTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,389,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,394,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,399,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,409,KILLED,spoon.reflect.declaration.UnknownDeclarationTest.testUnknownCalls(spoon.reflect.declaration.UnknownDeclarationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,404,KILLED,spoon.test.modifiers.TestModifiers.testCtModifiableAddRemoveReturnCtModifiable(spoon.test.modifiers.TestModifiers)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,414,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,419,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,424,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,429,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,766,KILLED,spoon.test.reference.VariableAccessTest.testDeclaringTypeOfALambdaReferencedByParameterReference(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,434,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,439,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,456,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,450,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnParameterInMethod(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,469,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,462,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,476,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,482,KILLED,spoon.test.invocations.InvocationTest.testTargetNullForStaticMethod(spoon.test.invocations.InvocationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,487,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,444,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,493,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,498,KILLED,spoon.test.generics.GenericsTest.testBugComparableComparator(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,512,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceWithGenerics(spoon.test.reference.TypeReferenceTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,503,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,521,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,530,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,539,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,544,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testTypeOfFieldAccess(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,549,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreate(spoon.test.factory.ConstructorFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,554,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,629,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,561,KILLED,spoon.test.targeted.TargetedExpressionTest.testCtThisAccess(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,639,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,566,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,575,KILLED,spoon.test.imports.ImportTest.testImportOfAnInnerClassInAClassPackage(spoon.test.imports.ImportTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,749,KILLED,spoon.test.type.TypeTest.testPolyTypBindingInTernaryExpression(spoon.test.type.TypeTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,580,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,585,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,594,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,601,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,610,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,619,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,624,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,634,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,650,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,658,KILLED,spoon.test.method.MethodTest.testGetAllMethods(spoon.test.method.MethodTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,645,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,663,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,668,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,673,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,688,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,693,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,700,KILLED,spoon.test.compilationunit.TestCompilationUnit.testCompilationUnitDeclaredTypes(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,678,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,683,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,707,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,1418,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,1423,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,void,endVisit,712,KILLED,spoon.test.condition.ConditionalTest.testBlockInConditionAndLoop(spoon.test.condition.ConditionalTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,null,getLogger,184,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,793,KILLED,spoon.test.position.PositionTest.testPositionStatement(spoon.test.position.PositionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,793,KILLED,spoon.test.position.PositionTest.testPositionStatement(spoon.test.position.PositionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,772,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,772,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,801,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,801,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,809,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,809,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,819,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,819,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,825,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,825,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,858,KILLED,spoon.test.type.TypeTest.testTypeAccessForTypeAccessInInstanceOf(spoon.test.type.TypeTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,858,KILLED,spoon.test.type.TypeTest.testTypeAccessForTypeAccessInInstanceOf(spoon.test.type.TypeTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,871,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,871,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,832,KILLED,spoon.test.variable.AccessTest.testCanVisitArrayAccessAndSubClasses(spoon.test.variable.AccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,832,KILLED,spoon.test.variable.AccessTest.testCanVisitArrayAccessAndSubClasses(spoon.test.variable.AccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,843,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,843,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,853,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,853,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,876,KILLED,spoon.test.parent.ParentTest.testParentPackage(spoon.test.parent.ParentTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,876,KILLED,spoon.test.parent.ParentTest.testParentPackage(spoon.test.parent.ParentTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,882,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,882,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,896,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,896,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,904,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,904,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,910,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,910,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1483,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1483,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,920,KILLED,spoon.test.targeted.TargetedExpressionTest.testCastWriteWithGenerics(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,920,KILLED,spoon.test.targeted.TargetedExpressionTest.testCastWriteWithGenerics(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,927,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,927,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,934,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithSimpleImportNoAutoimport(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,934,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithSimpleImportNoAutoimport(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,735,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,735,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,888,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,888,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,940,KILLED,spoon.reflect.ast.CloneTest.testCloneCastConditional(spoon.reflect.ast.CloneTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,940,KILLED,spoon.reflect.ast.CloneTest.testCloneCastConditional(spoon.reflect.ast.CloneTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,977,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,977,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1012,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1012,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1022,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1022,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1028,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1028,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1035,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1035,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1043,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1043,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1054,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1054,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1060,KILLED,spoon.test.condition.ConditionalTest.testBlockInConditionAndLoop(spoon.test.condition.ConditionalTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1060,KILLED,spoon.test.condition.ConditionalTest.testBlockInConditionAndLoop(spoon.test.condition.ConditionalTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1067,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithStaticStarredImportFromInterface(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1067,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithStaticStarredImportFromInterface(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1091,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1091,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1097,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1097,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1110,KILLED,spoon.reflect.declaration.UnknownDeclarationTest.testUnknownCalls(spoon.reflect.declaration.UnknownDeclarationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1110,KILLED,spoon.reflect.declaration.UnknownDeclarationTest.testUnknownCalls(spoon.reflect.declaration.UnknownDeclarationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1104,KILLED,spoon.test.modifiers.TestModifiers.testCtModifiableAddRemoveReturnCtModifiable(spoon.test.modifiers.TestModifiers)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1104,KILLED,spoon.test.modifiers.TestModifiers.testCtModifiableAddRemoveReturnCtModifiable(spoon.test.modifiers.TestModifiers)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1116,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1116,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1122,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1122,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1132,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1132,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1140,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1140,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1148,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1148,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,754,KILLED,spoon.test.reference.VariableAccessTest.testDeclaringTypeOfALambdaReferencedByParameterReference(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,754,KILLED,spoon.test.reference.VariableAccessTest.testDeclaringTypeOfALambdaReferencedByParameterReference(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1154,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1154,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1169,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1169,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1191,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1191,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1186,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnParameterInMethod(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1186,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnParameterInMethod(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1221,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1221,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1215,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1215,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1227,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1227,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,946,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,946,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1582,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1582,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1181,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1181,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1176,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1176,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1244,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1244,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1250,KILLED,spoon.test.generics.GenericsTest.testBugComparableComparator(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1250,KILLED,spoon.test.generics.GenericsTest.testBugComparableComparator(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1258,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceWithGenerics(spoon.test.reference.TypeReferenceTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1258,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceWithGenerics(spoon.test.reference.TypeReferenceTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1263,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics(spoon.test.reference.TypeReferenceTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1263,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics(spoon.test.reference.TypeReferenceTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1268,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1268,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1273,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1273,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1288,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1288,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1301,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testTypeOfFieldAccess(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1301,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testTypeOfFieldAccess(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,781,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreate(spoon.test.factory.ConstructorFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,781,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreate(spoon.test.factory.ConstructorFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1314,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1314,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1391,KILLED,spoon.test.targeted.TargetedExpressionTest.testCtSuperAccess(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1391,KILLED,spoon.test.targeted.TargetedExpressionTest.testCtSuperAccess(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1406,KILLED,spoon.test.targeted.TargetedExpressionTest.testCtThisAccess(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1406,KILLED,spoon.test.targeted.TargetedExpressionTest.testCtThisAccess(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1340,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithNoImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1340,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithNoImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1356,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithNoImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1356,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithNoImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,743,KILLED,spoon.test.type.TypeTest.testPolyTypBindingInTernaryExpression(spoon.test.type.TypeTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,743,KILLED,spoon.test.type.TypeTest.testPolyTypBindingInTernaryExpression(spoon.test.type.TypeTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1361,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1361,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1196,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1196,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1367,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1367,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1442,RUN_ERROR,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1442,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1466,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1466,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1471,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1471,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1477,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1477,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1400,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1400,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1493,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1493,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1499,KILLED,spoon.test.method.MethodTest.testGetAllMethods(spoon.test.method.MethodTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1499,KILLED,spoon.test.method.MethodTest.testGetAllMethods(spoon.test.method.MethodTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1412,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1412,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1505,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1505,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1511,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1511,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1518,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1518,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1530,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreate(spoon.test.factory.ConstructorFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1530,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreate(spoon.test.factory.ConstructorFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1544,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1544,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1550,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1550,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1000,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1000,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,995,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,995,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1568,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1568,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1428,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1428,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1437,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1437,NO_COVERAGE,none
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visit,1576,KILLED,spoon.test.condition.ConditionalTest.testBlockInConditionAndLoop(spoon.test.condition.ConditionalTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visit,1576,KILLED,spoon.test.condition.ConditionalTest.testBlockInConditionAndLoop(spoon.test.condition.ConditionalTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visitMarkerAnnotation,1208,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visitMarkerAnnotation,1208,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visitNormalAnnotation,1202,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visitNormalAnnotation,1202,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,false,visitTypeParameter,1004,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilder.java,spoon.support.compiler.jdt.JDTTreeBuilder,true,visitTypeParameter,1004,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Annotation,159,KILLED,spoon.test.annotation.AnnotationTest.testCreateAnnotation(spoon.test.annotation.AnnotationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Class,172,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Code,185,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,CompilationUnit,333,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Constructor,198,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Core,211,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent(spoon.testing.CtElementAssertTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Enum,226,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Eval,265,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationParameterTypes(spoon.test.annotation.AnnotationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Executable,252,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Field,278,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Interface,294,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Method,307,KILLED,spoon.test.method.MethodTest.testAddSameMethodsTwoTimes(spoon.test.method.MethodTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Module,371,KILLED,spoon.test.api.APITest.testOutputDestinationHandlerWithCUFactory(spoon.test.api.APITest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Package,320,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Query,359,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,Type,346,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnnotation,638,KILLED,spoon.test.ctElement.ElementTest.testGetFactory(spoon.test.ctElement.ElementTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnnotation,457,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnnotationFieldAccess,693,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnnotationMethod,808,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnnotationType,673,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnnotationType,1093,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnnotationType,1098,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnonymous,1028,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAnonymousExecutable,983,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createArrayRead,698,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createArrayReference,1033,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createArrayReference,1038,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createArrayReference,1043,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createArrayReference,1063,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createArrayTypeReference,848,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createArrayWrite,703,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAssert,708,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createAssignment,678,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createBinaryOperator,713,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createBinaryOperator,477,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createBlock,643,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createBodyHolderSourcePosition,973,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createBreak,893,KILLED,spoon.test.ctBlock.TestCtBlock.testAddStatementInCase(spoon.test.ctBlock.TestCtBlock)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCase,658,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCatch,898,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCatchVariable,718,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCatchVariable,482,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCatchVariableReference,853,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCatchVariableReference,573,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createClass,813,SURVIVED,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createClass,1103,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createClass,1108,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createClass,1113,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createClassAccess,497,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCodeSnippetExpression,723,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCodeSnippetExpression,487,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCodeSnippetStatement,903,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCodeSnippetStatement,603,KILLED,spoon.reflect.ast.CloneTest.testCopyMethod(spoon.reflect.ast.CloneTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createComment,908,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createComment,608,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCompilationUnit,963,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithCreatedObjects(spoon.test.compilationunit.TestCompilationUnit)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createConditional,728,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createConstructor,818,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createConstructor,1128,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createConstructor,1133,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createConstructor,1118,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createConstructor,1123,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createConstructorCall,733,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createConstructorCall,492,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createContinue,913,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCtBlock,472,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCtCatch,598,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCtField,568,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCtPackageReference,628,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCtThrow,623,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createCtTypeReference,588,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationValueReflection(spoon.test.annotation.AnnotationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createDeclarationSourcePosition,978,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createDefault,633,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createDo,918,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createElement,1198,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createEnum,668,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createEnum,1138,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createEnum,1143,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createEnumValue,823,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createExecutableReference,858,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createExecutableReferenceExpression,688,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createField,828,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createField,1148,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createField,1153,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createField,1158,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createFieldRead,738,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createFieldReference,863,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createFieldWrite,743,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createFor,923,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createForEach,928,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createIf,933,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createImport,1203,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createInlineComment,613,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createInterface,833,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createInterface,1173,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createInterface,1163,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createInterface,1168,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createIntersectionTypeReference,868,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createIntersectionTypeReferenceWithBounds,1048,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createInvocation,748,KILLED,spoon.test.ctBlock.TestCtBlock.testAddStatementInCase(spoon.test.ctBlock.TestCtBlock)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createInvocation,502,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createInvocation,507,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createJavaDocTag,618,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLambda,753,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLiteral,758,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLiteral,512,KILLED,spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLiteralArray,523,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLocalVariable,763,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLocalVariable,517,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLocalVariableReference,873,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLocalVariableReference,578,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createLocalVariableReference,583,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createMethod,838,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationNotRepeatableNotArrayAnnotation(spoon.test.annotation.AnnotationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createMethod,1178,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createMethod,1188,KILLED,spoon.test.type.TypeTest.testTypeMemberOrder(spoon.test.type.TypeTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createMethod,1183,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createModule,1227,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createModuleReference,1232,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createModuleRequirement,1222,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createNewArray,768,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createNewClass,773,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createNewClass,528,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createOperatorAssignment,683,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createPackage,988,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createPackage,1193,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createPackageExport,1212,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createPackageReference,998,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createParameter,843,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createParameter,1018,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createParameterReference,878,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createParameterReference,1023,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createPartialEvaluator,1013,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createPartialSourcePosition,1242,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createProvidedService,1217,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createQuery,1073,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createQuery,1088,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createQuery,1078,KILLED,spoon.test.filters.FilterTest.testBoundQuery(spoon.test.filters.FilterTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createQuery,1083,KILLED,spoon.test.serializable.SourcePositionTest.testSourcePosition(spoon.test.serializable.SourcePositionTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createReferences,1058,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createReturn,648,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createSourcePosition,968,KILLED,spoon.test.lambda.LambdaTest.testFieldAccessInLambdaNoClassPathExternal1Example(spoon.test.lambda.LambdaTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createStatementList,653,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createStatementList,467,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createSuperAccess,778,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createSwitch,663,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createSynchronized,938,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createThisAccess,783,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createThisAccess,538,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createThisAccess,543,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createThrow,943,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTry,948,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTryWithResource,953,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeAccess,788,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeAccess,548,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeAccess,553,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeAccessWithoutCloningReference,558,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeAdapter,1053,KILLED,spoon.reflect.declaration.CtTypeInformationTest.testClassTypingContextContinueScanning(spoon.reflect.declaration.CtTypeInformationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeParameter,993,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeParameterReference,1003,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeParameterReference,1068,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createTypeReference,883,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createUnaryOperator,793,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createUnboundVariableReference,888,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createUsedService,1237,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createVariableAssignment,462,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createVariableAssignments,533,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createVariableRead,798,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createVariableRead,563,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createVariableReads,593,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createVariableWrite,803,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createWhile,958,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createWildcardReference,1008,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,createWildcardStaticTypeMemberReference,1208,NO_COVERAGE,none
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,"",dedup,420,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,"A",dedup,420,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,dedup,420,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,null,getEnvironment,239,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent(spoon.testing.CtElementAssertTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl,void,readObject,439,KILLED,spoon.test.serializable.SourcePositionTest.testSourcePosition(spoon.test.serializable.SourcePositionTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,addParentPath,371,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,calculate,1976,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,computeImports,311,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccessWithImport(spoon.test.imports.ImportTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,computeImports,302,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,enterCtExpression,254,KILLED,spoon.test.strings.StringTest.testModelBuildingInitializer(spoon.test.strings.StringTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,enterCtStatement,277,KILLED,spoon.test.annotation.AnnotationLoopTest.testAnnotationDeclaredInForInit(spoon.test.annotation.AnnotationLoopTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,exitCtExpression,289,KILLED,spoon.test.strings.StringTest.testModelBuildingInitializer(spoon.test.strings.StringTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,getLineNumberMapping,2001,SURVIVED,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"",getLineSeparator,238,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"A",getLineSeparator,238,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,getLineSeparator,238,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"",getPath,363,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"A",getPath,363,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,getPath,363,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,getPrinterHelper,2021,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"",getResult,1951,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"A",getResult,1951,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,getResult,1951,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,false,hasDeclaringTypeWithGenerics,1516,KILLED,spoon.test.visibility.VisibilityTest.testFullyQualifiedNameOfTypeReferenceWithGeneric(spoon.test.visibility.VisibilityTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,true,hasDeclaringTypeWithGenerics,1516,KILLED,spoon.test.imports.ImportTest.testNewInnerClassDefinesInItsClassAndSuperClass(spoon.test.imports.ImportTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,false,isImported,823,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,true,isImported,823,KILLED,spoon.test.visibility.VisibilityTest.testMethodeWithNonAccessibleTypeArgument(spoon.test.visibility.VisibilityTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,false,isImported,808,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNAndStaticImport(spoon.test.variable.AccessFullyQualifiedFieldTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,true,isImported,808,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccess(spoon.test.imports.ImportTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,false,isInitializeStaticFinalField,889,KILLED,spoon.test.targeted.TargetedExpressionTest.testTargetsOfStaticFieldAccess(spoon.test.targeted.TargetedExpressionTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,true,isInitializeStaticFinalField,889,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,printConstructorCall,1478,KILLED,spoon.test.visibility.VisibilityTest.testMethodeWithNonAccessibleTypeArgument(spoon.test.visibility.VisibilityTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,printCtArrayAccess,459,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldWriteWithPlusEqualsOperation(spoon.test.fieldaccesses.FieldAccessTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,printCtFieldAccess,838,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"",printModuleInfo,1944,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"A",printModuleInfo,1944,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,printModuleInfo,1944,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"",printPackageInfo,1925,KILLED,spoon.test.pkg.PackageTest.testPrintPackageInfoWhenNothingInPackage(spoon.test.pkg.PackageTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"A",printPackageInfo,1925,KILLED,spoon.test.pkg.PackageTest.testPrintPackageInfoWhenNothingInPackage(spoon.test.pkg.PackageTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,printPackageInfo,1925,KILLED,spoon.test.pkg.PackageTest.testPrintPackageInfoWhenNothingInPackage(spoon.test.pkg.PackageTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,false,printQualified,1761,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,true,printQualified,1761,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccessWithImport(spoon.test.imports.ImportTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,reset,1955,KILLED,spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testAnnotationInChildWithConstants(spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,scan,336,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,setLineSeparator,246,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,setPrinterTokenWriter,2015,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,false,shouldSetBracket,386,KILLED,spoon.test.strings.StringTest.testModelBuildingInitializer(spoon.test.strings.StringTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,true,shouldSetBracket,386,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"",toString,407,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,"A",toString,407,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,toString,407,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtAnnotation,412,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationNotRepeatableNotArrayAnnotation(spoon.test.annotation.AnnotationTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtAnnotationFieldAccess,1121,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtAnnotationMethod,1396,KILLED,spoon.test.annotation.AnnotationTest.testFieldAndMethodInAnnotation(spoon.test.annotation.AnnotationTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtAnnotationType,431,KILLED,spoon.test.constructor.ConstructorTest.testTransformationOnConstructorWithInsertBegin(spoon.test.constructor.ConstructorTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtAnonymousExecutable,442,KILLED,spoon.test.comment.CommentTest.testBlockComment(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtArrayRead,450,KILLED,spoon.test.prettyprinter.LinesTest.testCompileWhenUsingLinesArgument(spoon.test.prettyprinter.LinesTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtArrayTypeReference,469,KILLED,spoon.test.varargs.VarArgsTest.testModelBuildingInitializer(spoon.test.varargs.VarArgsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtArrayWrite,455,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldWriteWithPlusEqualsOperation(spoon.test.fieldaccesses.FieldAccessTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtAssert,480,KILLED,spoon.test.parent.NullParentTest.testAssertNullExpression(spoon.test.parent.NullParentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtAssignment,492,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtBinaryOperator,502,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtBlock,518,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtBreak,545,KILLED,spoon.processing.CtGenerationTest.testGenerateReplacementVisitor(spoon.processing.CtGenerationTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtCase,555,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtCatch,586,KILLED,spoon.test.trycatch.TryCatchTest.testMultiTryCatchWithCustomExceptions(spoon.test.trycatch.TryCatchTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtCatchVariable,1342,KILLED,spoon.test.trycatch.TryCatchTest.testCompileMultiTryCatchWithCustomExceptions(spoon.test.trycatch.TryCatchTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtCatchVariableReference,1353,SURVIVED,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtClass,607,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtCodeSnippetExpression,1900,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtCodeSnippetStatement,1906,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtComment,1113,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtConditional,652,KILLED,spoon.test.condition.ConditionalTest.testConditional(spoon.test.condition.ConditionalTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtConstructor,687,KILLED,spoon.test.imports.ImportTest.testNewInnerClassDefinesInItsClassAndSuperClass(spoon.test.imports.ImportTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtConstructorCall,1458,KILLED,spoon.test.visibility.VisibilityTest.testMethodeWithNonAccessibleTypeArgument(spoon.test.visibility.VisibilityTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtContinue,709,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtDo,718,KILLED,spoon.test.comment.CommentTest.testBlockComment(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtEnum,728,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtEnumValue,774,KILLED,spoon.test.enums.EnumsTest.testAnnotationsOnEnum(spoon.test.enums.EnumsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtExecutableReference,753,KILLED,spoon.test.secondaryclasses.ClassesTest.testAnonymousClass(spoon.test.secondaryclasses.ClassesTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtExecutableReferenceExpression,1561,KILLED,spoon.test.generics.GenericsTest.testDiamondComplexGenericsRxJava(spoon.test.generics.GenericsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtField,758,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testBCUBug20140402(spoon.test.fieldaccesses.FieldAccessTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtFieldRead,799,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccess(spoon.test.imports.ImportTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtFieldReference,1137,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtFieldWrite,804,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtFor,1169,KILLED,spoon.test.annotation.AnnotationLoopTest.testAnnotationDeclaredInForInit(spoon.test.annotation.AnnotationLoopTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtForEach,1201,KILLED,spoon.test.loop.LoopTest.testForeachShouldHaveAlwaysABlockInItsBody(spoon.test.loop.LoopTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtIf,1212,KILLED,spoon.test.condition.ConditionalTest.testNoBlockInConditionAndLoop(spoon.test.condition.ConditionalTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtImport,993,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtInterface,1233,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInExtendsImplementsOfAClass(spoon.test.annotation.AnnotationTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtIntersectionTypeReference,1784,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtInvocation,1258,KILLED,spoon.test.visibility.VisibilityTest.testMethodeWithNonAccessibleTypeArgument(spoon.test.visibility.VisibilityTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtJavaDoc,977,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtJavaDocTag,988,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtLambda,1537,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessInLambda(spoon.test.fieldaccesses.FieldAccessTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtLiteral,1310,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtLocalVariable,1317,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testBCUBug20140402(spoon.test.fieldaccesses.FieldAccessTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtLocalVariableReference,1337,SURVIVED,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtMethod,1358,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtModule,1033,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtModuleReference,1050,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtModuleRequirement,1076,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtNewArray,1414,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationWithDefaultArrayValue(spoon.test.annotation.AnnotationTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtNewClass,1468,KILLED,spoon.test.ctClass.CtClassTest.testCloneAnonymousClassInvocation(spoon.test.ctClass.CtClassTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtOperatorAssignment,1579,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldWriteWithPlusEqualsOperation(spoon.test.fieldaccesses.FieldAccessTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtPackage,1592,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtPackageExport,1055,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtPackageReference,1603,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtParameter,1608,KILLED,spoon.test.varargs.VarArgsTest.testModelBuildingInitializer(spoon.test.varargs.VarArgsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtParameterReference,1623,SURVIVED,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtProvidedService,1093,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtReturn,1628,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.useFullyQualifiedNamesInCtElementImpl_toString(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtStatementList,1649,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtSuperAccess,965,KILLED,spoon.test.targeted.TargetedExpressionTest.testCtSuperAccess(spoon.test.targeted.TargetedExpressionTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtSwitch,1656,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtSynchronized,1673,KILLED,spoon.test.comment.CommentTest.testBlockComment(spoon.test.comment.CommentTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtThisAccess,908,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtThrow,1685,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testInvocationSubstitutionByStatement(spoon.test.template.TemplateInvocationSubstitutionTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtTry,1692,KILLED,spoon.test.trycatch.TryCatchTest.testCompileMultiTryCatchWithCustomExceptions(spoon.test.trycatch.TryCatchTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtTryWithResource,1707,SURVIVED,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtType,1638,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtTypeAccess,1799,KILLED,spoon.test.signature.SignatureTest.testNullSignatureInUnboundVariable(spoon.test.signature.SignatureTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtTypeParameter,630,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtTypeParameterReference,1731,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtTypeReference,1794,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtTypeReference,1812,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtTypeReferenceWithoutGenerics,1808,KILLED,spoon.test.prettyprinter.QualifiedThisRefTest.testQualifiedThisRef(spoon.test.prettyprinter.QualifiedThisRefTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtUnaryOperator,1861,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtUnboundVariableReference,1920,NO_COVERAGE,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtUsedService,1106,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtVariableRead,1876,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtVariableWrite,1883,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtWhile,1890,SURVIVED,none
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,void,visitCtWildcardReference,1744,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
DefaultJavaPrettyPrinter.java,spoon.reflect.visitor.DefaultJavaPrettyPrinter,null,writeHeader,1969,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addField,234,KILLED,spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven(spoon.test.field.FieldTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addField,229,KILLED,spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven(spoon.test.field.FieldTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addFieldAtTop,224,KILLED,spoon.test.field.FieldTest.testAddFieldsAtTop(spoon.test.field.FieldTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addFormalCtTypeParameter,697,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addMethod,615,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addModifier,507,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoCtPackage(spoon.testing.CtPackageAssertTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addNestedType,293,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addSuperInterface,643,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerInterface(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addTypeMember,118,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,addTypeMemberAt,146,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,clone,1025,KILLED,spoon.test.generics.GenericsTest.testTypeParameterDeclarer(spoon.test.generics.GenericsTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,void,compileAndReplaceSnippets,486,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,copyType,1060,KILLED,spoon.reflect.ast.CloneTest.testCopyType(spoon.reflect.ast.CloneTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getActualClass,361,KILLED,spoon.test.type.TypeTest.testShadowType(spoon.test.type.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getAllExecutables,977,KILLED,spoon.test.reference.TypeReferenceTest.testGetAllExecutablesForInterfaces(spoon.test.reference.TypeReferenceTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getAllFields,589,KILLED,spoon.test.reference.TypeReferenceTest.doNotCloseLoader(spoon.test.reference.TypeReferenceTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getAllMethods,986,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getDeclaredExecutables,965,KILLED,spoon.test.model.TypeTest.testGetAllExecutables(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getDeclaredField,269,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getDeclaredFields,601,KILLED,spoon.test.model.TypeTest.testGetAllExecutables(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getDeclaredOrInheritedField,275,KILLED,spoon.test.model.TypeTest.testGetDeclaredOrIheritedFieldByReflection(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getDeclaringType,367,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getExtendedModifiers,530,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getField,259,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getFields,282,KILLED,spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven(spoon.test.field.FieldTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getMethod,747,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getMethod,721,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getMethods,825,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getMethodsAnnotatedWith,836,KILLED,spoon.test.api.MetamodelTest.testRoleOnField(spoon.test.api.MetamodelTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getMethodsByName,853,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getModifiers,491,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getNestedType,447,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getNestedTypes,454,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getPackage,465,KILLED,spoon.test.factory.ClassFactoryTest.testTopLevelClass(spoon.test.factory.ClassFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getPackageReference,351,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,"",getQualifiedName,907,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,"A",getQualifiedName,907,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getQualifiedName,907,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getReference,476,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getTopLevelType,376,KILLED,spoon.test.parent.TopLevelTypeTest.testTopLevelType(spoon.test.parent.TopLevelTypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getTypeErasure,1005,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getTypeMembers,108,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getUsedTypes,318,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,getVisibility,525,MEMORY_ERROR,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,hasMethod,869,KILLED,spoon.test.enums.EnumsTest.testGetAllMethods(spoon.test.enums.EnumsTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,hasMethod,869,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodOnNull(spoon.test.ctType.CtTypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,hasModifier,496,KILLED,spoon.test.filters.FilterTest.testQueryInQuery(spoon.test.filters.FilterTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,hasModifier,496,KILLED,spoon.test.generics.GenericsTest.testClassContextOnInnerClass(spoon.test.generics.GenericsTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isAbstract,1055,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isAbstract,1055,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isFinal,1045,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isFinal,1045,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isFromJavaLang,336,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isFromJavaLang,336,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isLocalType,552,KILLED,spoon.test.generics.GenericsTest.testGenericsOnLocalType(spoon.test.generics.GenericsTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isLocalType,552,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessWithoutAnyImport(spoon.test.fieldaccesses.FieldAccessTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isPrivate,1035,SURVIVED,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isPrivate,1035,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isProtected,1040,SURVIVED,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isProtected,1040,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isPublic,1030,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isPublic,1030,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isSameParameter,780,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isSameParameter,780,KILLED,spoon.test.method.MethodTest.testSearchMethodWithGeneric(spoon.test.method.MethodTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isStatic,1050,SURVIVED,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isStatic,1050,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isTopLevel,481,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isTopLevel,481,KILLED,spoon.test.annotation.AnnotationTest.testGetAnnotationOuter(spoon.test.annotation.AnnotationTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,isValidTypeReference,332,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,isValidTypeReference,332,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,removeField,254,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,removeField,254,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,removeFormalCtTypeParameter,711,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,removeFormalCtTypeParameter,711,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,removeMethod,638,KILLED,spoon.test.api.APITest.testInvalidateCacheOfCompiler(spoon.test.api.APITest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,removeMethod,638,KILLED,spoon.test.api.APITest.testInvalidateCacheOfCompiler(spoon.test.api.APITest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,removeModifier,513,KILLED,spoon.test.ctClass.CtClassTest.testAllTypeReferencesToALocalTypeShouldNotStartWithNumber(spoon.test.ctClass.CtClassTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,removeNestedType,298,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,removeNestedType,298,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,removeSuperInterface,657,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,removeSuperInterface,657,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,removeTypeMember,179,KILLED,spoon.test.api.APITest.testInvalidateCacheOfCompiler(spoon.test.api.APITest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,removeTypeMember,179,KILLED,spoon.test.api.APITest.testInvalidateCacheOfCompiler(spoon.test.api.APITest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setExtendedModifiers,535,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoCtPackage(spoon.testing.CtPackageAssertTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setFields,239,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtInterface<T> extends spoon.reflect.declaration.CtType<T> {
    @java.lang.Override
    spoon.reflect.declaration.CtInterface<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.ParentContractTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setFormalCtTypeParameters,680,KILLED,spoon.test.generics.GenericsTest.testTypeParameterDeclarer(spoon.test.generics.GenericsTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setMethods,927,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtInterface<T> extends spoon.reflect.declaration.CtType<T> {
    @java.lang.Override
    spoon.reflect.declaration.CtInterface<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.ParentContractTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setModifiers,501,KILLED,spoon.test.reference.VariableAccessTest.testGetDeclarationAfterClone(spoon.test.reference.VariableAccessTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setNestedTypes,303,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtInterface<T> extends spoon.reflect.declaration.CtType<T> {
    @java.lang.Override
    spoon.reflect.declaration.CtInterface<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.ParentContractTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setShadow,1018,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setSuperInterfaces,948,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtInterface<T> extends spoon.reflect.declaration.CtType<T> {
    @java.lang.Override
    spoon.reflect.declaration.CtInterface<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.ParentContractTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setSuperclass,943,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setTypeMembers,208,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,null,setVisibility,519,NO_COVERAGE,none
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,false,shouldIncludeSamePackage,328,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl,true,shouldIncludeSamePackage,328,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,clone,215,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,create,728,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createAnnotation,219,KILLED,spoon.test.ctElement.ElementTest.testGetFactory(spoon.test.ctElement.ElementTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createAnnotationFieldAccess,378,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createAnnotationMethod,467,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnnotationMethod](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createAnnotationType,225,KILLED,spoon.test.annotation.AnnotationTest.testCreateAnnotation(spoon.test.annotation.AnnotationTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createAnonymousExecutable,232,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnonymousExecutable](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createArrayRead,239,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtArrayRead](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createArrayTypeReference,252,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtArrayTypeReference](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createArrayWrite,246,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtArrayWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createAssert,258,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtAssert](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createAssignment,264,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtAssignment](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createBinaryOperator,270,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBinaryOperator](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createBlock,276,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBlock](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createBodyHolderSourcePosition,701,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createBreak,282,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBreak](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createCase,288,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCase](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createCatch,294,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCatch](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createCatchVariable,447,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCatchVariable](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createCatchVariableReference,454,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtCatchVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createClass,300,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createCodeSnippetExpression,631,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createCodeSnippetStatement,637,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createComment,643,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createCompilationUnit,710,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithCreatedObjects(spoon.test.compilationunit.TestCompilationUnit)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createConditional,314,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtConditional](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createConstructor,320,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createConstructorCall,480,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtConstructorCall](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createContinue,326,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtContinue](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createDeclarationSourcePosition,696,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createDo,332,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtDo](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createEnum,338,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createEnumValue,358,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtEnumValue](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createExecutableReference,345,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createExecutableReferenceExpression,500,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtExecutableReferenceExpression](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createField,351,KILLED,spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven(spoon.test.field.FieldTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createFieldRead,365,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createFieldReference,391,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createFieldWrite,372,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtFieldWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createFor,397,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtFor](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createForEach,403,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtForEach](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createIf,409,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtIf](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createImport,671,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtImport](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createInterface,415,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createIntersectionTypeReference,594,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtIntersectionTypeReference](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createInvocation,422,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtInvocation](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createJavaDoc,652,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtJavaDoc](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createJavaDocTag,659,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtJavaDocTag](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createLambda,493,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtLambda](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createLiteral,428,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createLocalVariable,434,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtLocalVariable](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createLocalVariableReference,440,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtLocalVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createMethod,460,KILLED,spoon.test.method.MethodTest.testAddSameMethodsTwoTimes(spoon.test.method.MethodTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createModule,978,KILLED,spoon.test.api.APITest.testOutputDestinationHandlerWithCUFactory(spoon.test.api.APITest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createModuleReference,986,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtModuleReference](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createModuleRequirement,993,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtModuleRequirement](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createNewArray,473,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createNewClass,486,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtNewClass](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createOperatorAssignment,506,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtOperatorAssignment](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createPackage,512,KILLED,spoon.test.factory.ClassFactoryTest.testTopLevelClass(spoon.test.factory.ClassFactoryTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createPackageExport,1000,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtPackageExport](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createPackageReference,519,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createParameter,525,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtParameter](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createParameterReference,531,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtParameterReference](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createPartialSourcePosition,691,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createProvidedService,1007,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtProvidedService](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createReturn,537,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtReturn](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createSourcePosition,686,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createStatementList,543,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtStatementList](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createSuperAccess,722,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSuperAccess](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createSwitch,549,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSwitch](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createSynchronized,555,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSynchronized](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createThisAccess,716,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createThrow,561,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtThrow](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createTry,567,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtTry](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createTryWithResource,574,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtTryWithResource](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createTypeAccess,607,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createTypeParameter,308,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtTypeParameter](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createTypeParameterReference,580,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createTypeReference,600,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createUnaryOperator,613,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtUnaryOperator](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createUnboundVariableReference,385,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtUnboundVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createUsedService,1014,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtUsedService](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createVariableRead,619,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtVariableRead](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createVariableWrite,625,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtVariableWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createWhile,665,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtWhile](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createWildcardReference,587,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtWildcardReference](spoon.reflect.visitor.CtInheritanceScannerTest)
DefaultCoreFactory.java,spoon.support.DefaultCoreFactory,null,createWildcardStaticTypeMemberReference,973,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtTypeReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,scan,201,NO_COVERAGE,none
CtScanner.java,spoon.reflect.visitor.CtScanner,void,scan,167,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,scan,181,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,scan,208,NO_COVERAGE,none
CtScanner.java,spoon.reflect.visitor.CtScanner,void,scan,144,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,scan,156,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotation](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,scan,174,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtAnnotation,187,KILLED,spoon.test.reference.TypeReferenceTest.testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath(spoon.test.reference.TypeReferenceTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtAnnotationFieldAccess,445,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotationFieldAccess](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtAnnotationMethod,569,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotationMethod](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtAnnotationType,220,KILLED,spoon.test.comment.CommentTest.testCommentsInComment1And2(spoon.test.comment.CommentTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtAnonymousExecutable,228,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtArrayRead,237,MEMORY_ERROR,none
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtArrayTypeReference,260,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayTypeReference](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtArrayWrite,249,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testModelBuildingFieldAccesses(spoon.test.fieldaccesses.FieldAccessTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtAssert,271,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssert](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtAssignment,280,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtBinaryOperator,291,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtBlock,302,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtBreak,310,MEMORY_ERROR,none
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtCase,317,KILLED,spoon.test.filters.FilterTest.testLineFilter(spoon.test.filters.FilterTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtCatch,326,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtCatchVariable,540,MEMORY_ERROR,none
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtCatchVariableReference,548,KILLED,spoon.reflect.ast.CloneTest.testCloneListener(spoon.reflect.ast.CloneTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtClass,335,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtCodeSnippetExpression,834,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCodeSnippetExpression](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtCodeSnippetStatement,843,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCodeSnippetStatement](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtComment,890,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtComment](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtConditional,355,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtConstructor,367,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtConstructorCall,590,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtContinue,378,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtContinue](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtDo,385,KILLED,spoon.test.comment.CommentTest.testBlockComment(spoon.test.comment.CommentTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtEnum,394,KILLED,spoon.test.reference.ExecutableReferenceTest.testInvokeEnumMethod(spoon.test.reference.ExecutableReferenceTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtEnumValue,425,KILLED,spoon.test.reflect.visitor.ReferenceQueryTest.getAllTypeReferencesInEnum(spoon.test.reflect.visitor.ReferenceQueryTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtExecutableReference,404,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtExecutableReferenceExpression,628,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReferenceExpression](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtField,415,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtFieldRead,857,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtFieldReference,455,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtFieldWrite,868,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtFor,463,KILLED,spoon.reflect.declaration.UnknownDeclarationTest.testUnknownCalls(spoon.reflect.declaration.UnknownDeclarationTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtForEach,474,KILLED,spoon.test.prettyprinter.PrinterTest.testPrinterTokenListener(spoon.test.prettyprinter.PrinterTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtIf,484,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtImport,915,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtImport](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtInterface,494,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtIntersectionTypeReference,764,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIntersectionTypeReference](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtInvocation,504,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtJavaDoc,898,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtJavaDocTag,907,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtJavaDocTag](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtLambda,614,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtLiteral,515,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtLocalVariable,524,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtLocalVariableReference,533,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtMethod,556,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtModule,924,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtModuleReference,934,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModuleReference](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtModuleRequirement,951,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModuleRequirement](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtNewArray,578,KILLED,spoon.test.type.TypeTest.testTypeAccessForDotClass(spoon.test.type.TypeTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtNewClass,601,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtOperatorAssignment,639,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtPackage,650,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtPackageExport,941,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackageExport](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtPackageReference,659,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtParameter,665,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtParameterReference,673,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtProvidedService,960,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtProvidedService](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtReturn,680,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtStatementList,688,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtStatementList](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtSuperAccess,879,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtSwitch,696,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtSynchronized,705,KILLED,spoon.test.reference.TypeReferenceTest.testAnnotationOnMethodWithPrimitiveReturnTypeInNoClasspath(spoon.test.reference.TypeReferenceTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtThisAccess,435,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtThrow,714,KILLED,spoon.test.reference.CloneReferenceTest.testGetDeclarationAfterClone(spoon.test.reference.CloneReferenceTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtTry,722,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtTryWithResource,733,KILLED,spoon.test.query_function.VariableReferencesTest.testCheckModelConsistency(spoon.test.query_function.VariableReferencesTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtTypeAccess,786,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtTypeParameter,347,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtTypeParameterReference,744,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtTypeReference,775,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtUnaryOperator,795,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtUnboundVariableReference,850,SURVIVED,none
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtUsedService,970,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUsedService](spoon.test.replace.ReplaceParametrizedTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtVariableRead,806,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtVariableWrite,816,KILLED,spoon.reflect.visitor.CtScannerTest.testScan(spoon.reflect.visitor.CtScannerTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtWhile,825,KILLED,spoon.test.query_function.VariableReferencesTest.testCheckModelConsistency(spoon.test.query_function.VariableReferencesTest)
CtScanner.java,spoon.reflect.visitor.CtScanner,void,visitCtWildcardReference,754,KILLED,spoon.reflect.ast.CloneTest.testCloneListener(spoon.reflect.ast.CloneTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,replace,1269,KILLED,spoon.test.prettyprinter.PrinterTest.testPrintingOfOrphanFieldReference(spoon.test.prettyprinter.PrinterTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,replace,1260,KILLED,spoon.test.replace.ReplaceTest.testReplaceExpression(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,replaceElementIfExist,1366,KILLED,spoon.test.replace.ReplaceTest.testReplaceExpression(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,replaceInListIfExist,1339,KILLED,spoon.test.prettyprinter.PrinterTest.testPrintingOfOrphanFieldReference(spoon.test.prettyprinter.PrinterTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,replaceInMapIfExist,1288,KILLED,spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,replaceInSetIfExist,1318,KILLED,spoon.test.delete.DeleteTest.testDeleteAClassTopLevel(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtAnnotation,1384,KILLED,spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtAnnotationFieldAccess,1614,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotationFieldAccess](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtAnnotationMethod,1737,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotationMethod](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtAnnotationType,1394,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtAnonymousExecutable,1402,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtArrayRead,1410,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayRead](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtArrayTypeReference,1432,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayTypeReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtArrayWrite,1421,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayWrite](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtAssert,1443,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssert](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtAssignment,1452,KILLED,spoon.test.delete.DeleteTest.testDeleteChainOfAssignment(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtBinaryOperator,1463,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtBlock,1474,KILLED,spoon.test.replace.ReplaceTest.testReplaceStatement(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtBreak,1482,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtBreak](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtCase,1489,KILLED,spoon.test.delete.DeleteTest.testDeleteStatementInCase(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtCatch,1498,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCatch](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtCatchVariable,1709,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtCatchVariableReference,1717,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCatchVariableReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtClass,1507,KILLED,spoon.test.prettyprinter.PrinterTest.testPrintingOfOrphanFieldReference(spoon.test.prettyprinter.PrinterTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtCodeSnippetExpression,1992,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCodeSnippetExpression](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtCodeSnippetStatement,2001,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCodeSnippetStatement](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtComment,2044,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtComment](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtConditional,1526,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtConditional](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtConstructor,1538,SURVIVED,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtConstructorCall,1757,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtConstructorCall](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtContinue,1549,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtContinue](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtDo,1556,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtDo](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtEnum,1565,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtEnum](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtEnumValue,1595,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtExecutableReference,1575,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtExecutableReferenceExpression,1793,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReferenceExpression](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtField,1586,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtField](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtFieldRead,2014,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtFieldReference,1624,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtFieldWrite,2024,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldWrite](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtFor,1632,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtForEach,1643,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtForEach](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtIf,1653,KILLED,spoon.test.delete.DeleteTest.testDeleteConditionInACondition(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtImport,2066,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtImport](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtInterface,1663,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtIntersectionTypeReference,1926,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIntersectionTypeReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtInvocation,1673,KILLED,spoon.test.replace.ReplaceTest.testReplaceExecutableReferenceByAnotherOne(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtJavaDoc,2051,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtJavaDoc](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtJavaDocTag,2059,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtJavaDocTag](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtLambda,1780,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtLambda](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtLiteral,1684,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtLiteral](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtLocalVariable,1693,KILLED,spoon.test.replace.ReplaceTest.testReplaceExpression(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtLocalVariableReference,1702,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtLocalVariableReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtMethod,1725,KILLED,spoon.test.delete.DeleteTest.testDeleteBodyOfAMethod(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtModule,2074,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtModuleReference,2083,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModuleReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtModuleRequirement,2098,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModuleRequirement](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtNewArray,1746,KILLED,spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtNewClass,1768,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewClass](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtOperatorAssignment,1804,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtOperatorAssignment](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtPackage,1815,KILLED,spoon.test.delete.DeleteTest.testDeleteAClassTopLevel(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtPackageExport,2089,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackageExport](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtPackageReference,1824,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackageReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtParameter,1830,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtParameterReference,1838,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtParameterReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtProvidedService,2106,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtProvidedService](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtReturn,1845,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtStatementList,1853,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtStatementList](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtSuperAccess,2034,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSuperAccess](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtSwitch,1861,KILLED,spoon.test.delete.DeleteTest.testDeleteACaseOfASwitch(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtSynchronized,1870,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSynchronized](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtThisAccess,1604,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtThisAccess](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtThrow,1879,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtThrow](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtTry,1887,KILLED,spoon.test.replace.ReplaceTest.testReplaceBlockTry(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtTryWithResource,1897,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtTypeAccess,1946,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeAccess](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtTypeParameter,1518,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeParameter](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtTypeParameterReference,1908,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeParameterReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtTypeReference,1936,KILLED,spoon.test.replace.ReplaceTest.testReplaceAPackageReferenceByAnotherOne(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtUnaryOperator,1955,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUnaryOperator](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtUnboundVariableReference,2008,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtUsedService,2115,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUsedService](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtVariableRead,1965,KILLED,spoon.test.replace.ReplaceTest.testReplaceAParameterReferenceToFieldReference(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtVariableWrite,1974,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtVariableWrite](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtWhile,1983,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtWhile](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor,void,visitCtWildcardReference,1917,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtWildcardReference](spoon.test.replace.ReplaceParametrizedTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,biScan,41,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,biScan,57,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,biScan,53,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtAnnotation,64,KILLED,spoon.test.annotation.AnnotationTest.testAbstractAllAnnotationProcessorWithGlobalAnnotation(spoon.test.annotation.AnnotationTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtAnnotationFieldAccess,347,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtAnnotationMethod,497,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtAnnotationType,76,KILLED,spoon.test.annotation.AnnotationTest.testInnerAnnotationsWithArray(spoon.test.annotation.AnnotationTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtAnonymousExecutable,86,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtArrayRead,97,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtArrayTypeReference,124,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtArrayWrite,111,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtAssert,137,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtAssignment,148,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtBinaryOperator,161,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtBlock,174,KILLED,spoon.test.filters.FilterTest.testLineFilter(spoon.test.filters.FilterTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtBreak,184,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtCase,193,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtCatch,204,KILLED,spoon.test.comparison.EqualTest.testEqualsMultitype(spoon.test.comparison.EqualTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtCatchVariable,462,KILLED,spoon.test.comparison.EqualTest.testEqualsMultitype(spoon.test.comparison.EqualTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtCatchVariableReference,472,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtClass,215,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtCodeSnippetExpression,816,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtCodeSnippetStatement,827,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtComment,884,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtConditional,239,KILLED,spoon.reflect.ast.CloneTest.testCloneCastConditional(spoon.reflect.ast.CloneTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtConstructor,253,MEMORY_ERROR,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtConstructorCall,522,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtContinue,266,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtDo,275,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtEnum,286,KILLED,spoon.test.annotation.AnnotationValuesTest.testValuesOnJava7Annotation(spoon.test.annotation.AnnotationValuesTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtEnumValue,323,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtExecutableReference,298,KILLED,spoon.test.reference.ExecutableReferenceTest.testHashcodeWorksWithReference(spoon.test.reference.ExecutableReferenceTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtExecutableReferenceExpression,566,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtField,311,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtFieldRead,845,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoDifferentCtElement(spoon.testing.CtElementAssertTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtFieldReference,359,KILLED,spoon.test.imports.ImportScannerTest.testComputeMinimalImportsInClass(spoon.test.imports.ImportScannerTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtFieldWrite,858,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtFor,369,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtForEach,382,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtIf,394,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtImport,915,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtInterface,406,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassInAnInterface(spoon.test.factory.TypeFactoryTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtIntersectionTypeReference,732,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtInvocation,418,KILLED,spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtJavaDoc,894,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtJavaDocTag,905,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtLambda,550,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtLiteral,431,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtLocalVariable,442,KILLED,spoon.test.delete.DeleteTest.testDeleteAStatementInConstructor(spoon.test.delete.DeleteTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtLocalVariableReference,453,KILLED,spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtMethod,482,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtModule,926,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtModuleReference,938,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtModuleRequirement,959,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtNewArray,508,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtNewClass,535,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtOperatorAssignment,579,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtPackage,592,KILLED,spoon.test.parent.ParentTest.testParentOfCtPackageReference(spoon.test.parent.ParentTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtPackageExport,947,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtPackageReference,603,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtParameter,611,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtParameterReference,621,KILLED,spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtProvidedService,970,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtReturn,630,KILLED,spoon.test.position.PositionTest.getPositionOfImplicitBlock(spoon.test.position.PositionTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtStatementList,640,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtSuperAccess,871,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtSwitch,650,KILLED,spoon.test.processing.ProcessingTest.testInsertEnd(spoon.test.processing.ProcessingTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtSynchronized,661,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtThisAccess,335,KILLED,spoon.test.imports.ImportTest.testStaticImportForInvocationInNoClasspath(spoon.test.imports.ImportTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtThrow,672,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtTry,682,KILLED,spoon.test.comparison.EqualTest.testEqualsMultitype(spoon.test.comparison.EqualTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtTryWithResource,695,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtTypeAccess,758,MEMORY_ERROR,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtTypeParameter,229,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtTypeParameterReference,708,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtTypeReference,745,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtUnaryOperator,769,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtUnboundVariableReference,836,NO_COVERAGE,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtUsedService,982,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtVariableRead,782,KILLED,spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtVariableWrite,794,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtWhile,805,SURVIVED,none
CtBiScannerDefault.java,spoon.reflect.visitor.CtBiScannerDefault,void,visitCtWildcardReference,720,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeReferences(spoon.test.ctType.CtTypeTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,scan,169,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,scan,180,KILLED,spoon.test.method.MethodTest.testAddSameMethodsTwoTimes(spoon.test.method.MethodTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtAnnotation,388,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnnotation](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtAnnotationFieldAccess,933,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtAnnotationFieldAccess](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtAnnotationMethod,717,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnnotationMethod](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtAnnotationType,397,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnnotationType](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtAnonymousExecutable,409,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnonymousExecutable](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtArrayRead,421,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtArrayRead](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtArrayTypeReference,442,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtArrayTypeReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtArrayWrite,432,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtArrayWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtAssert,446,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtAssert](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtAssignment,454,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtOperatorAssignment](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtBinaryOperator,464,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBinaryOperator](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtBlock,472,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBlock](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtBreak,477,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBreak](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtCase,486,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCase](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtCatch,491,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCatch](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtCatchVariable,685,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCatchVariable](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtCatchVariableReference,696,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtCatchVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtClass,498,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtClass](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtCodeSnippetExpression,149,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCodeSnippetExpression](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtCodeSnippetStatement,158,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCodeSnippetStatement](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtComment,914,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtComment](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtConditional,525,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtConditional](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtConstructor,533,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtConstructor](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtConstructorCall,730,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtNewClass](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtContinue,546,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtContinue](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtDo,555,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtDo](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtEnum,564,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtEnum](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtEnumValue,588,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtEnumValue](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtExecutableReference,568,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtExecutableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtExecutableReferenceExpression,760,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtExecutableReferenceExpression](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtField,575,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtField](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtFieldRead,349,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtFieldRead](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtFieldReference,601,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtFieldReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtFieldWrite,356,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtFieldWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtFor,608,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtFor](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtForEach,617,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtForEach](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtIf,626,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtIf](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtImport,958,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtImport](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtInterface,633,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtInterface](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtIntersectionTypeReference,862,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtIntersectionTypeReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtInvocation,645,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtInvocation](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtJavaDoc,922,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtJavaDoc](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtJavaDocTag,927,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtJavaDocTag](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtLambda,747,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtLambda](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtLiteral,657,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtLiteral](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtLocalVariable,665,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtLocalVariable](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtLocalVariableReference,678,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtLocalVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtMethod,703,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtMethod](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtModule,964,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtModule](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtModuleReference,971,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtModuleReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtModuleRequirement,985,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtModuleRequirement](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtNewArray,721,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtNewArray](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtNewClass,742,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtNewClass](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtOperatorAssignment,371,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtOperatorAssignment](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtPackage,773,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtPackage](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtPackageExport,978,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtPackageExport](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtPackageReference,780,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtPackageReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtParameter,786,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtParameter](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtParameterReference,796,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtParameterReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtProvidedService,992,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtProvidedService](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtReturn,803,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtReturn](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtStatementList,811,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtStatementList](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtSuperAccess,362,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSuperAccess](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtSwitch,817,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSwitch](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtSynchronized,824,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSynchronized](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtThisAccess,592,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtThisAccess](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtThrow,831,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtThrow](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtTry,839,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtTry](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtTryWithResource,848,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtTryWithResource](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtTypeAccess,876,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtTypeAccess](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtTypeParameter,513,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtTypeParameter](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtTypeParameterReference,852,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtTypeParameterReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtTypeReference,866,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtTypeReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtUnaryOperator,884,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtUnaryOperator](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtUnboundVariableReference,947,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtUnboundVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtUsedService,999,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtUsedService](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtVariableRead,894,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtVariableRead](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtVariableWrite,904,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtVariableWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtWhile,938,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtWhile](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInheritanceScanner.java,spoon.reflect.visitor.CtInheritanceScanner,void,visitCtWildcardReference,857,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtWildcardReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtAnnotation,42,KILLED,spoon.test.loop.LoopTest.testAnnotationInForLoop(spoon.test.loop.LoopTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtAnnotationFieldAccess,349,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtAnnotationMethod,512,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAnnotationMethod<T> extends spoon.reflect.declaration.CtMethod<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DEFAULT_EXPRESSION)
    spoon.reflect.code.CtExpression<T> getDefaultExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DEFAULT_EXPRESSION)
    <C extends spoon.reflect.declaration.CtAnnotationMethod<T>> C setDefaultExpression(spoon.reflect.code.CtExpression<T> assignedExpression);

    @java.lang.Override
    spoon.reflect.declaration.CtAnnotationMethod<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.code.CtBodyHolder> T1 setBody(spoon.reflect.code.CtStatement body);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.declaration.CtExecutable<T>> T1 setThrownTypes(java.util.Set<spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> thrownTypes);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtFormalTypeDeclarer> T setFormalCtTypeParameters(java.util.List<spoon.reflect.declaration.CtTypeParameter> formalTypeParameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.declaration.CtExecutable<T>> T1 setParameters(java.util.List<spoon.reflect.declaration.CtParameter<?>> parameters);
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtAnnotationType,55,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAnnotationType<T extends java.lang.annotation.Annotation> extends spoon.reflect.declaration.CtType<T> {
    @spoon.support.DerivedProperty
    java.util.Set<spoon.reflect.declaration.CtAnnotationMethod<?>> getAnnotationMethods();

    @java.lang.Override
    <M, C extends spoon.reflect.declaration.CtType<T>> C addMethod(spoon.reflect.declaration.CtMethod<M> method);

    @java.lang.Override
    <C extends spoon.reflect.declaration.CtType<T>> C setMethods(java.util.Set<spoon.reflect.declaration.CtMethod<?>> methods);

    @java.lang.Override
    spoon.reflect.declaration.CtAnnotationType<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtFormalTypeDeclarer> T setFormalCtTypeParameters(java.util.List<spoon.reflect.declaration.CtTypeParameter> formalTypeParameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperInterfaces(java.util.Set<spoon.reflect.reference.CtTypeReference<?>> interfaces);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtAnonymousExecutable,66,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAnonymousExecutable extends spoon.reflect.declaration.CtExecutable<java.lang.Void> , spoon.reflect.declaration.CtTypeMember {
    @java.lang.Override
    spoon.reflect.declaration.CtAnonymousExecutable clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtExecutable<java.lang.Void>> T setThrownTypes(java.util.Set<spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> thrownTypes);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtExecutable<java.lang.Void>> T setParameters(java.util.List<spoon.reflect.declaration.CtParameter<?>> parameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference<java.lang.Void> type);
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtArrayRead,78,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtArrayRead<T> extends spoon.reflect.code.CtArrayAccess<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtArrayRead<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtArrayTypeReference,107,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtArrayWrite,93,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtArrayWrite<T> extends spoon.reflect.code.CtArrayAccess<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtArrayWrite<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtAssert,121,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAssert<T> extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getAssertExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <A extends spoon.reflect.code.CtAssert<T>> A setAssertExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> asserted);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <A extends spoon.reflect.code.CtAssert<T>> A setExpression(spoon.reflect.code.CtExpression<T> expression);

    @java.lang.Override
    spoon.reflect.code.CtAssert<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtAssignment,133,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAssignment<T, A extends T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.code.CtRHSReceiver<A> , spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ASSIGNED)
    spoon.reflect.code.CtExpression<T> getAssigned();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ASSIGNED)
    <C extends spoon.reflect.code.CtAssignment<T, A>> C setAssigned(spoon.reflect.code.CtExpression<T> assigned);

    @java.lang.Override
    spoon.reflect.code.CtAssignment<T, A> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtBinaryOperator,147,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtBinaryOperator<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.LEFT_OPERAND)
    spoon.reflect.code.CtExpression<?> getLeftHandOperand();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.RIGHT_OPERAND)
    spoon.reflect.code.CtExpression<?> getRightHandOperand();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.LEFT_OPERAND)
    <C extends spoon.reflect.code.CtBinaryOperator<T>> C setLeftHandOperand(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.RIGHT_OPERAND)
    <C extends spoon.reflect.code.CtBinaryOperator<T>> C setRightHandOperand(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtBinaryOperator<T>> C setKind(spoon.reflect.code.BinaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.BinaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtBinaryOperator<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtBlock,161,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtBlock<R> extends spoon.reflect.code.CtStatement , spoon.reflect.code.CtStatementList , spoon.template.TemplateParameter<R> {
    @java.lang.Override
    spoon.reflect.code.CtBlock<R> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtBreak,172,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtBreak extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtBreak clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtCase,182,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCase<S> extends spoon.reflect.code.CtStatement , spoon.reflect.code.CtStatementList {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<S> getCaseExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtCase<S>> T setCaseExpression(spoon.reflect.code.CtExpression<S> caseExpression);

    @java.lang.Override
    spoon.reflect.code.CtCase<S> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtCatch,194,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCatch extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PARAMETER)
    spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable> getParameter();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PARAMETER)
    <T extends spoon.reflect.code.CtCatch> T setParameter(spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable> parameter);

    @java.lang.Override
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBody();

    @java.lang.Override
    spoon.reflect.code.CtCatch clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtCatchVariable,474,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCatchVariable<T> extends spoon.reflect.code.CtCodeElement , spoon.reflect.declaration.CtMultiTypedElement , spoon.reflect.declaration.CtVariable<T> {
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtCatchVariableReference<T> getReference();

    @java.lang.Override
    spoon.reflect.code.CtCatchVariable<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtVariable<T>> C setDefaultExpression(spoon.reflect.code.CtExpression<T> assignedExpression);
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtCatchVariableReference,485,KILLED,spoon.test.reference.CloneReferenceTest.testGetDeclarationAfterClone(spoon.test.reference.CloneReferenceTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtClass,206,KILLED,spoon.test.generics.GenericsTest.testTypeParameterDeclarer(spoon.test.generics.GenericsTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtCodeSnippetExpression,857,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCodeSnippetExpression<T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.declaration.CtCodeSnippet {
    <E extends spoon.reflect.code.CtExpression<T>> E compile() throws spoon.support.compiler.SnippetCompilationError;

    @java.lang.Override
    spoon.reflect.code.CtCodeSnippetExpression<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtCodeSnippetStatement,869,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCodeSnippetStatement extends spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtCodeSnippet {
    <S extends spoon.reflect.code.CtStatement> S compile() throws spoon.support.compiler.SnippetCompilationError;

    @java.lang.Override
    spoon.reflect.code.CtCodeSnippetStatement clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtComment,931,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtComment extends spoon.reflect.code.CtStatement {
    enum CommentType {
        FILE, JAVADOC, INLINE, BLOCK;}

    java.lang.String LINE_SEPARATOR = "\n";

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_CONTENT)
    java.lang.String getContent();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_CONTENT)
    <E extends spoon.reflect.code.CtComment> E setContent(java.lang.String content);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_TYPE)
    spoon.reflect.code.CtComment.CommentType getCommentType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TYPE)
    <E extends spoon.reflect.code.CtComment> E setCommentType(spoon.reflect.code.CtComment.CommentType commentType);

    @java.lang.Override
    spoon.reflect.code.CtComment clone();

    spoon.reflect.code.CtJavaDoc asJavaDoc();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtConditional,232,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtConditional<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ELSE)
    spoon.reflect.code.CtExpression<T> getElseExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.THEN)
    spoon.reflect.code.CtExpression<T> getThenExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getCondition();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ELSE)
    <C extends spoon.reflect.code.CtConditional<T>> C setElseExpression(spoon.reflect.code.CtExpression<T> elseExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.THEN)
    <C extends spoon.reflect.code.CtConditional<T>> C setThenExpression(spoon.reflect.code.CtExpression<T> thenExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <C extends spoon.reflect.code.CtConditional<T>> C setCondition(spoon.reflect.code.CtExpression<java.lang.Boolean> condition);

    @java.lang.Override
    spoon.reflect.code.CtConditional<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtConstructor,247,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtConstructorCall,539,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtConstructorCall<T> extends spoon.reflect.code.CtAbstractInvocation<T> , spoon.reflect.code.CtStatement , spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> , spoon.reflect.reference.CtActualTypeContainer {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @java.lang.Override
    spoon.reflect.code.CtConstructorCall<T> clone();

    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE)
    spoon.reflect.reference.CtTypeReference<T> getType();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtContinue,261,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtDo,271,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtDo extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getLoopingExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtDo> T setLoopingExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @java.lang.Override
    spoon.reflect.code.CtDo clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtEnum,283,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtEnum<T extends java.lang.Enum<?>> extends spoon.reflect.declaration.CtClass<T> {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.declaration.CtEnum<T>> C addEnumValue(spoon.reflect.declaration.CtEnumValue<?> enumValue);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    boolean removeEnumValue(spoon.reflect.declaration.CtEnumValue<?> enumValue);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    spoon.reflect.declaration.CtEnumValue<?> getEnumValue(java.lang.String name);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    java.util.List<spoon.reflect.declaration.CtEnumValue<?>> getEnumValues();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.declaration.CtEnum<T>> C setEnumValues(java.util.List<spoon.reflect.declaration.CtEnumValue<?>> enumValues);

    @java.lang.Override
    spoon.reflect.declaration.CtEnum<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtFormalTypeDeclarer> T setFormalCtTypeParameters(java.util.List<spoon.reflect.declaration.CtTypeParameter> formalTypeParameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtEnumValue,323,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtEnumValue<T> extends spoon.reflect.declaration.CtField<T> {
    @java.lang.Override
    spoon.reflect.declaration.CtEnumValue clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtExecutableReference,296,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtExecutableReferenceExpression,586,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtExecutableReferenceExpression<T, E extends spoon.reflect.code.CtExpression<?>> extends spoon.reflect.code.CtTargetedExpression<T, E> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXECUTABLE_REF)
    spoon.reflect.reference.CtExecutableReference<T> getExecutable();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXECUTABLE_REF)
    <C extends spoon.reflect.code.CtExecutableReferenceExpression<T, E>> C setExecutable(spoon.reflect.reference.CtExecutableReference<T> executable);

    @java.lang.Override
    spoon.reflect.code.CtExecutableReferenceExpression<T, E> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtField,310,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtField<T> extends spoon.reflect.code.CtRHSReceiver<T> , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember , spoon.reflect.declaration.CtVariable<T> {
    java.lang.String FIELD_SEPARATOR = "#";

    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtFieldReference<T> getReference();

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.code.CtExpression<T> getAssignment();

    @java.lang.Override
    spoon.reflect.declaration.CtField<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtFieldRead,889,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtFieldRead<T> extends spoon.reflect.code.CtFieldAccess<T> , spoon.reflect.code.CtVariableRead<T> {
    @java.lang.Override
    spoon.reflect.code.CtFieldRead<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtFieldReference,362,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtFieldWrite,903,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtFieldWrite<T> extends spoon.reflect.code.CtFieldAccess<T> , spoon.reflect.code.CtVariableWrite<T> {
    @java.lang.Override
    spoon.reflect.code.CtFieldWrite<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtFor,373,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtFor extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtFor> T setExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    java.util.List<spoon.reflect.code.CtStatement> getForInit();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    <T extends spoon.reflect.code.CtFor> T addForInit(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    <T extends spoon.reflect.code.CtFor> T setForInit(java.util.List<spoon.reflect.code.CtStatement> forInit);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    boolean removeForInit(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    java.util.List<spoon.reflect.code.CtStatement> getForUpdate();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    <T extends spoon.reflect.code.CtFor> T addForUpdate(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    <T extends spoon.reflect.code.CtFor> T setForUpdate(java.util.List<spoon.reflect.code.CtStatement> forUpdate);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    boolean removeForUpdate(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtFor clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtForEach,387,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtForEach extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<?> getExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOREACH_VARIABLE)
    spoon.reflect.code.CtLocalVariable<?> getVariable();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtForEach> T setExpression(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOREACH_VARIABLE)
    <T extends spoon.reflect.code.CtForEach> T setVariable(spoon.reflect.code.CtLocalVariable<?> variable);

    @java.lang.Override
    spoon.reflect.code.CtForEach clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtIf,400,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtIf extends spoon.reflect.code.CtStatement , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getCondition();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ELSE)
    <S extends spoon.reflect.code.CtStatement> S getElseStatement();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.THEN)
    <S extends spoon.reflect.code.CtStatement> S getThenStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <T extends spoon.reflect.code.CtIf> T setCondition(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ELSE)
    <T extends spoon.reflect.code.CtIf> T setElseStatement(spoon.reflect.code.CtStatement elseStatement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.THEN)
    <T extends spoon.reflect.code.CtIf> T setThenStatement(spoon.reflect.code.CtStatement thenStatement);

    @java.lang.Override
    spoon.reflect.code.CtIf clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtImport,965,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtImport extends spoon.reflect.declaration.CtElement {
    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtImportKind getImportKind();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IMPORT_REFERENCE)
    spoon.reflect.reference.CtReference getReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPORT_REFERENCE)
    <T extends spoon.reflect.declaration.CtImport> T setReference(spoon.reflect.reference.CtReference reference);

    @java.lang.Override
    spoon.reflect.declaration.CtImport clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtInterface,413,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtInterface<T> extends spoon.reflect.declaration.CtType<T> {
    @java.lang.Override
    spoon.reflect.declaration.CtInterface<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtIntersectionTypeReference,767,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtInvocation,426,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtInvocation<T> extends spoon.reflect.code.CtAbstractInvocation<T> , spoon.reflect.code.CtStatement , spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> , spoon.reflect.reference.CtActualTypeContainer {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE)
    spoon.reflect.reference.CtTypeReference<T> getType();

    @java.lang.Override
    spoon.reflect.code.CtInvocation<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtJavaDoc,942,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    java.util.List<spoon.reflect.code.CtJavaDocTag> getTags();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E setTags(java.util.List<spoon.reflect.code.CtJavaDocTag> tags);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(int index, spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(int index);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.support.DerivedProperty
    java.lang.String getShortDescription();

    @spoon.support.DerivedProperty
    java.lang.String getLongDescription();

    @java.lang.Override
    spoon.reflect.code.CtJavaDoc clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtJavaDocTag,954,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtJavaDocTag extends spoon.reflect.declaration.CtElement {
    java.lang.String JAVADOC_TAG_PREFIX = "@";

    enum TagType {
        AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;
        public boolean hasParam() {
            return ((this) == (spoon.reflect.code.CtJavaDocTag.TagType.PARAM)) || ((this) == (spoon.reflect.code.CtJavaDocTag.TagType.THROWS));
        }

        public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String tagName) {
            for (spoon.reflect.code.CtJavaDocTag.TagType t : spoon.reflect.code.CtJavaDocTag.TagType.values()) {
                if (t.name().toLowerCase().equals(tagName.toLowerCase())) {
                    return t;
                }
            }
            return spoon.reflect.code.CtJavaDocTag.TagType.UNKNOWN;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return (spoon.reflect.code.CtJavaDocTag.JAVADOC_TAG_PREFIX) + (name().toLowerCase());
        }
    }

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)
    spoon.reflect.code.CtJavaDocTag.TagType getType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)
    <E extends spoon.reflect.code.CtJavaDocTag> E setType(java.lang.String type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)
    <E extends spoon.reflect.code.CtJavaDocTag> E setType(spoon.reflect.code.CtJavaDocTag.TagType type);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_CONTENT)
    java.lang.String getContent();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_CONTENT)
    <E extends spoon.reflect.code.CtJavaDocTag> E setContent(java.lang.String content);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE)
    java.lang.String getParam();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE)
    <E extends spoon.reflect.code.CtJavaDocTag> E setParam(java.lang.String param);

    @java.lang.Override
    spoon.reflect.code.CtJavaDocTag clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtLambda,569,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtLambda<T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.declaration.CtExecutable<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getExpression();

    @spoon.support.DerivedProperty
    <R> spoon.reflect.declaration.CtMethod<R> getOverriddenMethod();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtLambda<T>> C setExpression(spoon.reflect.code.CtExpression<T> expression);

    @java.lang.Override
    spoon.reflect.code.CtLambda<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.declaration.CtExecutable<T>> T1 setThrownTypes(java.util.Set<spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> thrownTypes);
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtLiteral,440,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtLiteral<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    T getValue();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.code.CtLiteral<T>> C setValue(T value);

    @java.lang.Override
    spoon.reflect.code.CtLiteral<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtLocalVariable,452,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtLocalVariable<T> extends spoon.reflect.code.CtRHSReceiver<T> , spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtVariable<T> {
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtLocalVariableReference<T> getReference();

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.code.CtExpression<T> getAssignment();

    @java.lang.Override
    spoon.reflect.code.CtLocalVariable<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtLocalVariableReference,464,KILLED,spoon.test.ctBlock.TestCtBlock.testAddStatementInCase(spoon.test.ctBlock.TestCtBlock)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtMethod,496,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtMethod<T> extends spoon.reflect.declaration.CtExecutable<T> , spoon.reflect.declaration.CtFormalTypeDeclarer , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember {
    boolean isOverriding(spoon.reflect.declaration.CtMethod<?> superMethod);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IS_DEFAULT)
    boolean isDefaultMethod();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IS_DEFAULT)
    <C extends spoon.reflect.declaration.CtMethod<T>> C setDefaultMethod(boolean defaultMethod);

    @java.lang.Override
    spoon.reflect.declaration.CtMethod<T> clone();

    java.util.Collection<spoon.reflect.declaration.CtMethod<?>> getTopDefinitions();

    spoon.reflect.declaration.CtMethod<?> copyMethod();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtModule,977,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtModuleReference,990,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModuleRequirement](spoon.test.replace.ReplaceParametrizedTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtModuleRequirement,1013,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtModuleRequirement extends spoon.reflect.declaration.CtModuleDirective {
    enum RequiresModifier {
        STATIC, TRANSITIVE;}

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> getRequiresModifiers();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModuleRequirement> T setRequiresModifiers(java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> requiresModifiers);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    spoon.reflect.reference.CtModuleReference getModuleReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtModuleRequirement> T setModuleReference(spoon.reflect.reference.CtModuleReference moduleReference);

    @java.lang.Override
    spoon.reflect.declaration.CtModuleRequirement clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtNewArray,524,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtNewArray<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DIMENSION)
    java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> getDimensionExpressions();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setDimensionExpressions(java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> dimensions);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    boolean removeDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    java.util.List<spoon.reflect.code.CtExpression<?>> getElements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setElements(java.util.List<spoon.reflect.code.CtExpression<?>> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addElement(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    boolean removeElement(spoon.reflect.code.CtExpression<?> expression);

    @java.lang.Override
    spoon.reflect.code.CtNewArray<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtNewClass,553,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtNewClass<T> extends spoon.reflect.code.CtConstructorCall<T> {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.NESTED_TYPE)
    spoon.reflect.declaration.CtClass<?> getAnonymousClass();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.NESTED_TYPE)
    <N extends spoon.reflect.code.CtNewClass> N setAnonymousClass(spoon.reflect.declaration.CtClass<?> anonymousClass);

    @java.lang.Override
    spoon.reflect.code.CtNewClass<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtOperatorAssignment,600,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtOperatorAssignment<T, A extends T> extends spoon.reflect.code.CtAssignment<T, A> {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtOperatorAssignment<T, A>> C setKind(spoon.reflect.code.BinaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.BinaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtOperatorAssignment<T, A> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtPackage,614,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {
    java.lang.String PACKAGE_SEPARATOR = ".";

    char PACKAGE_SEPARATOR_CHAR = '.';

    java.lang.String TOP_LEVEL_PACKAGE_NAME = "unnamed package";

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtModule getDeclaringModule();

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtPackage getDeclaringPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getPackage(java.lang.String name);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    java.util.Set<spoon.reflect.declaration.CtPackage> getPackages();

    java.lang.String getQualifiedName();

    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtPackageReference getReference();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtType<?>> T getType(java.lang.String simpleName);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    java.util.Set<spoon.reflect.declaration.CtType<?>> getTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtPackage> T addType(spoon.reflect.declaration.CtType<?> type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    void removeType(spoon.reflect.declaration.CtType<?> type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackage> T setPackages(java.util.Set<spoon.reflect.declaration.CtPackage> pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackage> T addPackage(spoon.reflect.declaration.CtPackage pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    boolean removePackage(spoon.reflect.declaration.CtPackage pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtPackage> T setTypes(java.util.Set<spoon.reflect.declaration.CtType<?>> types);

    @java.lang.Override
    spoon.reflect.declaration.CtPackage clone();

    boolean isUnnamedPackage();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtPackageExport,1000,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtPackageExport extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackageExport> T setOpenedPackage(boolean openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    boolean isOpenedPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    spoon.reflect.reference.CtPackageReference getPackageReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setPackageReference(spoon.reflect.reference.CtPackageReference packageReference);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    java.util.List<spoon.reflect.reference.CtModuleReference> getTargetExport();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setTargetExport(java.util.List<spoon.reflect.reference.CtModuleReference> targetExport);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T addTargetExport(spoon.reflect.reference.CtModuleReference targetExport);

    @java.lang.Override
    spoon.reflect.declaration.CtPackageExport clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtPackageReference,626,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtParameter,635,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtParameterReference,646,KILLED,spoon.test.reference.VariableAccessTest.testDeclarationOfVariableReference(spoon.test.reference.VariableAccessTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtProvidedService,1025,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtProvidedService extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    spoon.reflect.reference.CtTypeReference getServiceType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setServiceType(spoon.reflect.reference.CtTypeReference providingType);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    java.util.List<spoon.reflect.reference.CtTypeReference> getImplementationTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setImplementationTypes(java.util.List<spoon.reflect.reference.CtTypeReference> usedTypes);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T addImplementationType(spoon.reflect.reference.CtTypeReference usedType);

    @java.lang.Override
    spoon.reflect.declaration.CtProvidedService clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtReturn,656,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtReturn<R> extends spoon.reflect.code.CtCFlowBreak , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<R> getReturnedExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtReturn<R>> T setReturnedExpression(spoon.reflect.code.CtExpression<R> returnedExpression);

    @java.lang.Override
    spoon.reflect.code.CtReturn<R> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtStatementList,667,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtStatementList extends java.lang.Iterable<spoon.reflect.code.CtStatement> , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.STATEMENT)
    java.util.List<spoon.reflect.code.CtStatement> getStatements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List<spoon.reflect.code.CtStatement> statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(int index, spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getStatement(int i);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getLastStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    void removeStatement(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtStatementList clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtSuperAccess,917,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtSuperAccess<T> extends spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> , spoon.reflect.code.CtVariableRead<T> {
    @java.lang.Override
    spoon.reflect.code.CtSuperAccess<T> clone();

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtTypeReference<T> getType();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtSwitch,678,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtSwitch<S> extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<S> getSelector();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtSwitch<S>> T setSelector(spoon.reflect.code.CtExpression<S> selector);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CASE)
    java.util.List<spoon.reflect.code.CtCase<? super S>> getCases();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    <T extends spoon.reflect.code.CtSwitch<S>> T setCases(java.util.List<spoon.reflect.code.CtCase<? super S>> cases);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    <T extends spoon.reflect.code.CtSwitch<S>> T addCase(spoon.reflect.code.CtCase<? super S> c);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    boolean removeCase(spoon.reflect.code.CtCase<? super S> c);

    @java.lang.Override
    spoon.reflect.code.CtSwitch<S> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtSynchronized,690,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtSynchronized extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<?> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtSynchronized> T setExpression(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBlock();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.BODY)
    <T extends spoon.reflect.code.CtSynchronized> T setBlock(spoon.reflect.code.CtBlock<?> block);

    @java.lang.Override
    spoon.reflect.code.CtSynchronized clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtThisAccess,336,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtThisAccess<T> extends spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtThisAccess<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtThrow,702,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtThrow extends spoon.reflect.code.CtCFlowBreak , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<? extends java.lang.Throwable> getThrownExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtThrow> T setThrownExpression(spoon.reflect.code.CtExpression<? extends java.lang.Throwable> thrownExpression);

    @java.lang.Override
    spoon.reflect.code.CtThrow clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtTry,713,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtTry extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtStatement , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CATCH)
    java.util.List<spoon.reflect.code.CtCatch> getCatchers();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    <T extends spoon.reflect.code.CtTry> T setCatchers(java.util.List<spoon.reflect.code.CtCatch> catchers);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    <T extends spoon.reflect.code.CtTry> T addCatcher(spoon.reflect.code.CtCatch catcher);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    boolean removeCatcher(spoon.reflect.code.CtCatch catcher);

    @java.lang.Override
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBody();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FINALIZER)
    spoon.reflect.code.CtBlock<?> getFinalizer();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FINALIZER)
    <T extends spoon.reflect.code.CtTry> T setFinalizer(spoon.reflect.code.CtBlock<?> finalizer);

    @java.lang.Override
    spoon.reflect.code.CtTry clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtTryWithResource,727,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtTryWithResource extends spoon.reflect.code.CtTry {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    java.util.List<spoon.reflect.code.CtLocalVariable<?>> getResources();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    <T extends spoon.reflect.code.CtTryWithResource> T setResources(java.util.List<spoon.reflect.code.CtLocalVariable<?>> resources);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    <T extends spoon.reflect.code.CtTryWithResource> T addResource(spoon.reflect.code.CtLocalVariable<?> resource);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    boolean removeResource(spoon.reflect.code.CtLocalVariable<?> resource);

    @java.lang.Override
    spoon.reflect.code.CtTryWithResource clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtTypeAccess,794,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtTypeAccess<A> extends spoon.reflect.code.CtExpression<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ACCESSED_TYPE)
    spoon.reflect.reference.CtTypeReference<A> getAccessedType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ACCESSED_TYPE)
    <C extends spoon.reflect.code.CtTypeAccess<A>> C setAccessedType(spoon.reflect.reference.CtTypeReference<A> accessedType);

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtTypeReference<java.lang.Void> getType();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference<java.lang.Void> type);

    @java.lang.Override
    spoon.reflect.code.CtTypeAccess<A> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtTypeParameter,221,KILLED,spoon.test.generics.GenericsTest.testTypeParameterDeclarer(spoon.test.generics.GenericsTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtTypeParameterReference,741,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtTypeReference,780,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtUnaryOperator,806,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtUnaryOperator<T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getOperand();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtUnaryOperator> C setOperand(spoon.reflect.code.CtExpression<T> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtUnaryOperator> C setKind(spoon.reflect.code.UnaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.UnaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtUnaryOperator<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtUnboundVariableReference,879,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUnboundVariableReference](spoon.test.replace.ReplaceParametrizedTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtUsedService,1038,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtUsedService extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    spoon.reflect.reference.CtTypeReference getServiceType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    <T extends spoon.reflect.declaration.CtUsedService> T setServiceType(spoon.reflect.reference.CtTypeReference providingType);

    @java.lang.Override
    spoon.reflect.declaration.CtUsedService clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtVariableRead,820,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtVariableRead<T> extends spoon.reflect.code.CtVariableAccess<T> {
    @java.lang.Override
    spoon.reflect.code.CtVariableRead<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtVariableWrite,833,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtVariableWrite<T> extends spoon.reflect.code.CtVariableAccess<T> {
    @java.lang.Override
    spoon.reflect.code.CtVariableWrite<T> clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtWhile,845,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtWhile extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getLoopingExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtWhile> T setLoopingExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @java.lang.Override
    spoon.reflect.code.CtWhile clone();
}](spoon.test.parent.SetParentTest)
CloneVisitor.java,spoon.support.visitor.clone.CloneVisitor,void,visitCtWildcardReference,754,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,null,getFinalExpressionFromCast,673,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,hasChildEqualsToDefaultValue,330,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,hasChildEqualsToDefaultValue,330,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,hasChildEqualsToDefaultValue,262,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,hasChildEqualsToDefaultValue,262,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationTypeAndFieldOnField(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,hasChildEqualsToEnclosingInstance,732,KILLED,spoon.test.generics.GenericsTest.testNewClassGenerics(spoon.test.generics.GenericsTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,hasChildEqualsToEnclosingInstance,732,KILLED,spoon.test.executable.ExecutableRefTest.constructorTest(spoon.test.executable.ExecutableRefTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,hasChildEqualsToQualification,651,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.superInvocationWithEnclosingInstance(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,hasChildEqualsToQualification,651,KILLED,spoon.test.comparison.EqualTest.testEqualsEmptyException(spoon.test.comparison.EqualTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,hasChildEqualsToReceiver,662,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,hasChildEqualsToReceiver,662,KILLED,spoon.test.comparison.EqualTest.testEqualsEmptyException(spoon.test.comparison.EqualTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,hasChildEqualsToType,743,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,hasChildEqualsToType,743,KILLED,spoon.test.generics.GenericsTest.testGenericsInConstructorCall(spoon.test.generics.GenericsTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,hasChildEqualsToType,313,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,hasChildEqualsToType,313,KILLED,spoon.test.trycatch.TryCatchTest.testRethrowingExceptionsJava7(spoon.test.trycatch.TryCatchTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,isContainedInDimensionExpression,696,KILLED,spoon.test.arrays.ArraysTest.testInitializeWithNewArray(spoon.test.arrays.ArraysTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,isContainedInDimensionExpression,696,KILLED,spoon.test.annotation.AnnotationTest.testInnerAnnotationsWithArray(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,isContainedInForInit,541,KILLED,spoon.reflect.declaration.UnknownDeclarationTest.testUnknownCalls(spoon.reflect.declaration.UnknownDeclarationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,isContainedInForInit,541,KILLED,spoon.test.control.ControlTest.testModelBuildingFor(spoon.test.control.ControlTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,isContainedInForUpdate,557,KILLED,spoon.reflect.declaration.UnknownDeclarationTest.testUnknownCalls(spoon.reflect.declaration.UnknownDeclarationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,isContainedInForUpdate,557,KILLED,spoon.test.annotation.AnnotationLoopTest.testAnnotationDeclaredInForInit(spoon.test.annotation.AnnotationLoopTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,scanCtElement,136,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,scanCtExecutable,182,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,scanCtFormalTypeDeclarer,197,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,scanCtLoop,205,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,scanCtTargetedExpression,218,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,scanCtType,227,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,scanCtVariable,250,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,substituteAnnotation,161,KILLED,spoon.test.loop.LoopTest.testAnnotationInForLoop(spoon.test.loop.LoopTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,false,visitArrayAccess,361,KILLED,spoon.test.reference.VariableAccessTest.testDeclarationArray(spoon.test.reference.VariableAccessTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,true,visitArrayAccess,361,KILLED,spoon.test.reference.VariableAccessTest.testDeclarationArray(spoon.test.reference.VariableAccessTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtAnnotation,278,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtAnnotationMethod,322,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtAnonymousExecutable,339,KILLED,spoon.test.initializers.InitializerTest.testModelBuildingStaticInitializer(spoon.test.initializers.InitializerTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtArrayRead,348,KILLED,spoon.test.prettyprinter.LinesTest.testCompileWhenUsingLinesArgument(spoon.test.prettyprinter.LinesTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtArrayWrite,355,KILLED,spoon.test.reference.VariableAccessTest.testDeclarationArray(spoon.test.reference.VariableAccessTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtAssert,375,KILLED,spoon.test.parent.NullParentTest.testAssertNullExpression(spoon.test.parent.NullParentTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtAssignment,389,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtBinaryOperator,403,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtBlock,428,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtCase,437,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtCatch,450,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtCatchVariable,462,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtClass,471,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtConditional,504,KILLED,spoon.test.condition.ConditionalTest.testConditional(spoon.test.condition.ConditionalTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtConstructor,286,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtConstructorCall,713,KILLED,spoon.test.filters.CUFilterTest.testSingleExcludeWithoutFilter(spoon.test.filters.CUFilterTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtDo,518,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtExecutableReferenceExpression,780,KILLED,spoon.test.generics.GenericsTest.testDiamondComplexGenericsRxJava(spoon.test.generics.GenericsTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtFor,527,KILLED,spoon.reflect.declaration.UnknownDeclarationTest.testUnknownCalls(spoon.reflect.declaration.UnknownDeclarationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtForEach,574,KILLED,spoon.test.loop.LoopTest.testAnnotationInForLoop(spoon.test.loop.LoopTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtIf,595,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtInvocation,627,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtLambda,766,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtMethod,298,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtNewArray,681,KILLED,spoon.test.annotation.AnnotationTest.testInnerAnnotationsWithArray(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtNewClass,750,KILLED,spoon.test.limits.utils.InternalTest.testStaticFinalFieldInAnonymousClass(spoon.test.limits.utils.InternalTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtPackage,788,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtReturn,806,KILLED,spoon.test.filters.CUFilterTest.testSingleExcludeWithFilter(spoon.test.filters.CUFilterTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtSuperAccess,618,KILLED,spoon.test.targeted.TargetedExpressionTest.testCtSuperAccess(spoon.test.targeted.TargetedExpressionTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtSwitch,815,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtSynchronized,828,KILLED,spoon.test.reference.TypeReferenceTest.testAnnotationOnMethodWithPrimitiveReturnTypeInNoClasspath(spoon.test.reference.TypeReferenceTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtThrow,841,KILLED,spoon.test.reference.CloneReferenceTest.testGetDeclarationAfterClone(spoon.test.reference.CloneReferenceTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtTry,850,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtTryWithResource,869,KILLED,spoon.test.trycatch.TryCatchTest.testTryWithOneResource(spoon.test.trycatch.TryCatchTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtTypeParameter,486,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtTypeParameterReference,886,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationWithGenericTypesInClassDeclaration(spoon.test.annotation.AnnotationTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtUnaryOperator,877,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
ParentExiter.java,spoon.support.compiler.jdt.ParentExiter,void,visitCtWhile,586,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,void,accept,83,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,addActualTypeArgument,553,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,void,applyActualTypeArguments,720,SURVIVED,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,asCtIntersectionTypeReference,296,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,box,88,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,canAccess,621,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,canAccess,621,KILLED,spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassAvailableInLibrary(spoon.test.imports.ImportTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,clone,791,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,findClass,160,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,findTypeParamDeclarationByPosition,830,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getAccessType,682,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getActualAnnotatedElement,175,NO_COVERAGE,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getActualClass,124,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getAllExecutables,477,KILLED,spoon.test.reference.TypeReferenceTest.testGetAllExecutablesForInterfaces(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getAllFields,467,KILLED,spoon.test.reference.TypeReferenceTest.doNotCloseLoader(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getDeclaration,181,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getDeclaredExecutables,449,KILLED,spoon.test.methodreference.MethodReferenceTest.testNoClasspathSuperExecutable(spoon.test.methodreference.MethodReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getDeclaredField,397,NO_COVERAGE,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getDeclaredFieldReferences,361,NO_COVERAGE,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getDeclaredFields,342,NO_COVERAGE,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,empty,getDeclaredFields,377,NO_COVERAGE,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getDeclaredFields,377,NO_COVERAGE,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getDeclaredOrInheritedField,420,KILLED,spoon.test.model.TypeTest.testGetDeclaredOrIheritedFieldByReflection(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getLastVisibleSuperClassExtendingFrom,755,KILLED,spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassAvailableInLibrary(spoon.test.imports.ImportTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getModifiers,487,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,"",getQualifiedName,205,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,"A",getQualifiedName,205,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getQualifiedName,205,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getSuperInterfaces,510,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getSuperclass,498,KILLED,spoon.test.reference.TypeReferenceTest.testCorrectEnumParent(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getTopLevelType,670,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getTypeDeclaration,186,KILLED,spoon.test.reference.TypeReferenceTest.testCorrectEnumParent(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getTypeErasure,835,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,getTypeParameterDeclaration,797,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,void,handleParentNotFound,384,SURVIVED,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isAnnotationType,600,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isAnnotationType,600,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isAnonymous,530,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testTypeDeclaredInAnonymousClass(spoon.test.fieldaccesses.FieldAccessTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isAnonymous,530,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessWithoutAnyImport(spoon.test.fieldaccesses.FieldAccessTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isClass,576,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isClass,576,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isEnum,610,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isEnum,610,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isGenerics,818,KILLED,spoon.test.generics.GenericsTest.testIsGenericsMethod(spoon.test.generics.GenericsTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isGenerics,818,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isImplementationOf,247,KILLED,spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassPackageFullQualified(spoon.test.imports.ImportTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isImplementationOf,247,KILLED,spoon.test.imports.ImportTest.testCanAccess(spoon.test.imports.ImportTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isInSamePackage,665,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessWithoutAnyImport(spoon.test.fieldaccesses.FieldAccessTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isInSamePackage,665,KILLED,spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassAvailableInLibrary(spoon.test.imports.ImportTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isInterface,590,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isInterface,590,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isLocalType,539,KILLED,spoon.test.generics.GenericsTest.testGenericsOnLocalType(spoon.test.generics.GenericsTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isLocalType,539,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessWithoutAnyImport(spoon.test.fieldaccesses.FieldAccessTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isPrimitive,216,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isPrimitive,216,KILLED,spoon.test.reference.TypeReferenceTest.unboxTest(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,isSubtypeOf,222,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtStatementList extends java.lang.Iterable<spoon.reflect.code.CtStatement> , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.STATEMENT)
    java.util.List<spoon.reflect.code.CtStatement> getStatements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List<spoon.reflect.code.CtStatement> statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(int index, spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getStatement(int i);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getLastStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    void removeStatement(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtStatementList clone();
}](spoon.test.parent.ParentContractTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,isSubtypeOf,222,KILLED,spoon.test.reference.TypeReferenceTest.testNullReferenceSubtype(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,false,removeActualTypeArgument,567,NO_COVERAGE,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,true,removeActualTypeArgument,567,NO_COVERAGE,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,setActualTypeArguments,259,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,setDeclaringType,276,KILLED,spoon.test.factory.TypeFactoryTest.testCreateTypeRef(spoon.test.factory.TypeFactoryTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,setPackage,286,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,setShadow,784,MEMORY_ERROR,none
CtTypeReferenceImpl.java,spoon.support.reflect.reference.CtTypeReferenceImpl,null,unbox,301,KILLED,spoon.test.type.TypeTest.testUnboxingTypeReference(spoon.test.type.TypeTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,addAnnotation,227,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,addComment,491,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,clone,529,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,void,delete,223,KILLED,spoon.test.prettyprinter.PrinterTest.testPrintingOfOrphanFieldReference(spoon.test.prettyprinter.PrinterTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,emptyList,93,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,emptySet,97,KILLED,spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven(spoon.test.field.FieldTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,false,equals,131,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,true,equals,131,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,filterChildren,335,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getAnnotatedChildren,295,NO_COVERAGE,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getAnnotation,145,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getAnnotation,167,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getAnnotations,176,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getComments,486,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,"",getDocComment,180,KILLED,spoon.test.javadoc.JavaDocTest.testJavaDocReprint(spoon.test.javadoc.JavaDocTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,"A",getDocComment,180,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getDocComment,180,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getElements,320,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getFactory,437,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent(spoon.testing.CtElementAssertTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getMetadata,470,KILLED,spoon.test.ctElement.MetadataTest.testMetadata(spoon.test.ctElement.MetadataTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getMetadataKeys,478,KILLED,spoon.test.ctElement.MetadataTest.testMetadata(spoon.test.ctElement.MetadataTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getParent,340,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getParent,371,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getParent,383,KILLED,spoon.test.filters.FilterTest.testLineFilter(spoon.test.filters.FilterTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getPath,547,NO_COVERAGE,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getPosition,194,KILLED,spoon.test.position.PositionTest.testSourcePosition(spoon.test.position.PositionTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getReferencedTypes,313,KILLED,spoon.test.reference.TypeReferenceTest.testPackageInNoClasspath(spoon.test.reference.TypeReferenceTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getRoleInParent,413,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,"",getShortRepresentation,126,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {
    java.lang.String PACKAGE_SEPARATOR = ".";

    char PACKAGE_SEPARATOR_CHAR = '.';

    java.lang.String TOP_LEVEL_PACKAGE_NAME = "unnamed package";

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtModule getDeclaringModule();

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtPackage getDeclaringPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getPackage(java.lang.String name);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    java.util.Set<spoon.reflect.declaration.CtPackage> getPackages();

    java.lang.String getQualifiedName();

    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtPackageReference getReference();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtType<?>> T getType(java.lang.String simpleName);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    java.util.Set<spoon.reflect.declaration.CtType<?>> getTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtPackage> T addType(spoon.reflect.declaration.CtType<?> type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    void removeType(spoon.reflect.declaration.CtType<?> type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackage> T setPackages(java.util.Set<spoon.reflect.declaration.CtPackage> pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackage> T addPackage(spoon.reflect.declaration.CtPackage pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    boolean removePackage(spoon.reflect.declaration.CtPackage pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtPackage> T setTypes(java.util.Set<spoon.reflect.declaration.CtType<?>> types);

    @java.lang.Override
    spoon.reflect.declaration.CtPackage clone();

    boolean isUnnamedPackage();
}](spoon.test.parent.ParentContractTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,"A",getShortRepresentation,126,SURVIVED,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getShortRepresentation,126,SURVIVED,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,getValueByRole,534,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationRoleTest(spoon.test.reflect.meta.MetaModelTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,false,hasAnnotation,156,NO_COVERAGE,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,true,hasAnnotation,156,NO_COVERAGE,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,false,hasParent,405,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtStatementList extends java.lang.Iterable<spoon.reflect.code.CtStatement> , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.STATEMENT)
    java.util.List<spoon.reflect.code.CtStatement> getStatements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List<spoon.reflect.code.CtStatement> statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(int index, spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getStatement(int i);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getLastStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    void removeStatement(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtStatementList clone();
}](spoon.test.parent.ParentContractTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,true,hasParent,405,KILLED,spoon.test.parent.ParentTest.testHasParent(spoon.test.parent.ParentTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,0,hashCode,202,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,1,hashCode,202,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,false,isParentInitialized,365,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,true,isParentInitialized,365,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,map,325,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,map,330,KILLED,spoon.test.filters.FilterTest.testElementMapFunction(spoon.test.filters.FilterTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,putMetadata,461,KILLED,spoon.test.ctElement.MetadataTest.testMetadata(spoon.test.ctElement.MetadataTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,false,removeAnnotation,240,SURVIVED,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,true,removeAnnotation,240,SURVIVED,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,removeComment,505,KILLED,spoon.test.comment.CommentTest.testRemoveComment(spoon.test.comment.CommentTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,void,replace,456,KILLED,spoon.test.prettyprinter.PrinterTest.testPrintingOfOrphanFieldReference(spoon.test.prettyprinter.PrinterTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,void,replace,451,KILLED,spoon.test.replace.ReplaceTest.testReplaceExpression(spoon.test.replace.ReplaceTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,setAnnotations,208,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationRoleHandlerTest(spoon.test.reflect.meta.MetaModelTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,setComments,515,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtStatementList extends java.lang.Iterable<spoon.reflect.code.CtStatement> , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.STATEMENT)
    java.util.List<spoon.reflect.code.CtStatement> getStatements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List<spoon.reflect.code.CtStatement> statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(int index, spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getStatement(int i);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getLastStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    void removeStatement(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtStatementList clone();
}](spoon.test.parent.ParentContractTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,setDocComment,248,NO_COVERAGE,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,void,setFactory,445,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,setImplicit,306,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,setParent,359,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,setPosition,259,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,setPositions,265,NO_COVERAGE,none
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,setValueByRole,540,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationRoleTest(spoon.test.reflect.meta.MetaModelTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,"",toString,276,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,"A",toString,276,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,toString,276,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,null,unmodifiableList,101,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl,void,updateAllParentsBelow,432,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,void,addNestedType,504,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,booleanPrimitiveType,142,SURVIVED,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,booleanType,135,SURVIVED,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,bytePrimitiveType,156,KILLED,spoon.reflect.ast.CloneTest.testCloneCastConditional(spoon.reflect.ast.CloneTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,byteType,149,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,characterPrimitiveType,170,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,characterType,163,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createArrayReference,312,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createArrayReference,280,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createArrayReference,289,KILLED,spoon.test.annotation.AnnotationTest.annotationAddValue(spoon.test.annotation.AnnotationTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createArrayReference,298,KILLED,spoon.test.arrays.ArraysTest.testArrayReferences(spoon.test.arrays.ArraysTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createImport,690,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createIntersectionTypeReferenceWithBounds,669,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createReference,321,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createReference,400,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createReference,336,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createReference,360,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createReference,382,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createReferences,562,KILLED,spoon.test.methodreference.MethodReferenceTest.testNoClasspathSuperExecutable(spoon.test.methodreference.MethodReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createTypeAdapter,655,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createTypeParameterReference,624,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,createWildcardStaticTypeMemberReference,343,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,dateType,247,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,doublePrimitiveType,226,KILLED,spoon.test.literal.LiteralTest.testFactoryLiternal(spoon.test.literal.LiteralTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,doubleType,219,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,floatPrimitiveType,212,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,floatType,205,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,get,523,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,get,422,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,getAll,484,KILLED,spoon.test.serializable.SerializableTest.testSerializationModelStreamer(spoon.test.serializable.SerializableTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,getAll,491,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,"",getDeclaringTypeName,555,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,"A",getDeclaringTypeName,555,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,getDeclaringTypeName,555,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotateWithEnum(spoon.test.annotation.AnnotationValuesTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,"",getPackageName,573,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,"A",getPackageName,573,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,getPackageName,573,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,"",getSimpleName,583,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,"A",getSimpleName,583,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,getSimpleName,583,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,0,hasInnerType,596,KILLED,spoon.test.factory.FactoryTest.testClassAccessCreatedFromFactories(spoon.test.factory.FactoryTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,1,hasInnerType,596,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,0,hasPackage,614,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,1,hasPackage,614,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,integerPrimitiveType,184,KILLED,spoon.test.literal.LiteralTest.testFactoryLiternal(spoon.test.literal.LiteralTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,integerType,177,KILLED,spoon.test.method.MethodTest.testSearchMethodWithGeneric(spoon.test.method.MethodTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,longPrimitiveType,198,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,longType,191,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,nullType,107,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,objectType,254,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,shortPrimitiveType,240,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,shortType,233,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,stringType,128,KILLED,spoon.test.literal.LiteralTest.testFactoryLiternal(spoon.test.literal.LiteralTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,voidPrimitiveType,121,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory,null,voidType,114,SURVIVED,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,addCompilationUnitFilter,628,KILLED,spoon.test.filters.CUFilterTest.testSingleExcludeWithFilter(spoon.test.filters.CUFilterTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,addInputSource,206,KILLED,spoon.test.compilation.CompilationTest.testCompilationInEmptyDir(spoon.test.compilation.CompilationTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,addInputSource,218,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,addInputSources,227,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,addTemplateSource,253,NO_COVERAGE,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,addTemplateSource,243,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,addTemplateSources,265,NO_COVERAGE,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,false,build,99,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,true,build,99,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,false,build,104,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,true,build,104,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,buildModel,403,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,false,buildSources,335,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,true,buildSources,335,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,false,buildTemplates,355,KILLED,spoon.test.jar.JarTest.testResource(spoon.test.jar.JarTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,true,buildTemplates,355,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,empty,buildUnits,370,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,buildUnits,370,KILLED,spoon.test.api.FileSystemFolderTest.testLauncherWithWrongPathAsInput(spoon.test.api.FileSystemFolderTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,false,buildUnitsAndModel,359,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,true,buildUnitsAndModel,359,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,checkModel,130,MEMORY_ERROR,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,false,compile,137,KILLED,spoon.test.compilation.CompilationTest.testCompilationInEmptyDir(spoon.test.compilation.CompilationTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,true,compile,137,KILLED,spoon.test.compilation.CompilationTest.testCompilationInEmptyDir(spoon.test.compilation.CompilationTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,createBatchCompiler,339,KILLED,spoon.test.api.FileSystemFolderTest.testLauncherWithWrongPathAsInput(spoon.test.api.FileSystemFolderTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,createBatchCompiler,343,KILLED,spoon.test.api.FileSystemFolderTest.testLauncherWithWrongPathAsInput(spoon.test.api.FileSystemFolderTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,forceBuild,326,NO_COVERAGE,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,generateProcessedSourceFiles,187,SURVIVED,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,generateProcessedSourceFiles,192,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,generateProcessedSourceFilesUsingCUs,445,KILLED,spoon.test.imports.ImportTest.testmportInCu(spoon.test.imports.ImportTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,generateProcessedSourceFilesUsingTypes,431,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getBinaryOutputDirectory,296,KILLED,spoon.test.compilation.CompilationTest.testCompilationInEmptyDir(spoon.test.compilation.CompilationTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getCompilationUnitFilter,638,NO_COVERAGE,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getCompilationUnitInputStream,612,KILLED,spoon.test.compilationunit.TestCompilationUnit.testAddDeclaredTypeInCU(spoon.test.compilationunit.TestCompilationUnit)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getEnvironment,623,KILLED,spoon.MavenLauncherTest.mavenLauncherOnDirectoryWithoutPomTest(spoon.MavenLauncherTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getInputSources,234,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getProblems,600,KILLED,spoon.test.processing.ProcessingTest.testProcessorWithNoArgumentsInConstructor(spoon.test.processing.ProcessingTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,empty,getSourceClasspath,301,KILLED,spoon.test.reference.TypeReferenceTest.loadReferencedClassFromClasspath(spoon.test.reference.TypeReferenceTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getSourceClasspath,301,KILLED,spoon.test.reference.TypeReferenceTest.loadReferencedClassFromClasspath(spoon.test.reference.TypeReferenceTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getSourceOutputDirectory,286,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,null,getTemplateSources,272,NO_COVERAGE,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,instantiateAndProcess,164,KILLED,spoon.test.processing.ProcessingTest.testProcessorWithNoArgumentsInConstructor(spoon.test.processing.ProcessingTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,keepOutdatedFiles,518,NO_COVERAGE,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,process,176,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorInstantiated(spoon.testing.AbstractAssertTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,removeCompilationUnitFilter,633,NO_COVERAGE,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,report,570,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,reportProblem,546,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,reportProblems,560,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,setBinaryOutputDirectory,291,MEMORY_ERROR,none
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,setSourceClasspath,306,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionInvalidAPI(spoon.test.exceptions.ExceptionTest)
JDTBasedSpoonCompiler.java,spoon.support.compiler.jdt.JDTBasedSpoonCompiler,void,setSourceOutputDirectory,281,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,void,accept,53,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtTypeParameter](spoon.reflect.visitor.CtInheritanceScannerTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,addField,118,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,addField,111,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,addFieldAtTop,104,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,addMethod,320,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,addModifier,210,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,addNestedType,150,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,addSuperInterface,334,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,clone,88,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtTypeParameter extends spoon.reflect.declaration.CtType<java.lang.Object> {
    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtTypeParameterReference getReference();

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtFormalTypeDeclarer getTypeParameterDeclarer();

    @java.lang.Override
    spoon.reflect.declaration.CtTypeParameter clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtFormalTypeDeclarer> T setFormalCtTypeParameters(java.util.List<spoon.reflect.declaration.CtTypeParameter> formalTypeParameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<java.lang.Object>> C setSuperInterfaces(java.util.Set<spoon.reflect.reference.CtTypeReference<?>> interfaces);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<java.lang.Object>> C setTypeMembers(java.util.List<spoon.reflect.declaration.CtTypeMember> members);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<java.lang.Object>> C setFields(java.util.List<spoon.reflect.declaration.CtField<?>> fields);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<java.lang.Object>> C setMethods(java.util.Set<spoon.reflect.declaration.CtMethod<?>> methods);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<java.lang.Object>> C setNestedTypes(java.util.Set<spoon.reflect.declaration.CtType<?>> nestedTypes);
}](spoon.test.parent.SetParentTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getAllExecutables,399,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getAllFields,249,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getAllMethods,405,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getBound,309,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtStatementList extends java.lang.Iterable<spoon.reflect.code.CtStatement> , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.STATEMENT)
    java.util.List<spoon.reflect.code.CtStatement> getStatements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List<spoon.reflect.code.CtStatement> statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(int index, spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getStatement(int i);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getLastStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    void removeStatement(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtStatementList clone();
}](spoon.test.parent.ParentContractTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getDeclaredExecutables,393,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getDeclaredFields,254,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getFields,143,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeParameter](spoon.test.replace.ReplaceParametrizedTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getFormalCtTypeParameters,411,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getMethods,357,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getMethodsAnnotatedWith,362,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getMethodsByName,367,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getModifiers,191,KILLED,spoon.test.generics.GenericsTest.testModelBuildingSimilarSignatureMethods(spoon.test.generics.GenericsTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getNestedTypes,175,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getReference,78,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getSuperInterfaces,373,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getTypeErasure,304,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getTypeMembers,423,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,getTypeParameterDeclarer,94,KILLED,spoon.test.generics.GenericsTest.testTypeParameterDeclarer(spoon.test.generics.GenericsTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,false,isSameInSameScope,296,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,true,isSameInSameScope,296,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,false,isSubtypeOf,259,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,true,isSubtypeOf,259,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtLiteral<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    T getValue();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.code.CtLiteral<T>> C setValue(T value);

    @java.lang.Override
    spoon.reflect.code.CtLiteral<T> clone();
}](spoon.test.parent.ParentContractTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,false,isSubtypeOf,269,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,true,isSubtypeOf,269,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,removeModifier,217,NO_COVERAGE,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setFields,125,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setFormalCtTypeParameters,417,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setMethods,380,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setModifiers,203,MEMORY_ERROR,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setNestedTypes,164,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setSuperInterfaces,387,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setSuperclass,63,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setTypeMembers,429,SURVIVED,none
CtTypeParameterImpl.java,spoon.support.reflect.declaration.CtTypeParameterImpl,null,setVisibility,224,NO_COVERAGE,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,addClassImport,244,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,addClassImport,244,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,addFieldImport,477,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,addFieldImport,477,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,addMethodImport,429,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,addMethodImport,429,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,classNamePresentInJavaLang,510,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,classNamePresentInJavaLang,510,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,computeImports,206,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,declaringTypeIsLocalOrImported,379,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,declaringTypeIsLocalOrImported,379,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,null,getAllImports,187,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,"",getSignature,471,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,"A",getSignature,471,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,null,getSignature,471,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,isImported,220,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,isImported,220,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,isImportedInClassImports,342,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,isImportedInClassImports,342,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithSimpleImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,isImportedInFieldImports,493,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,isImportedInFieldImports,493,KILLED,spoon.test.prettyprinter.PrinterTest.testFQNModeWriteFQNConstructorInCtVisitor(spoon.test.prettyprinter.PrinterTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,isImportedInMethodImports,459,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,isImportedInMethodImports,459,KILLED,spoon.test.imports.ImportScannerTest.testComputeMinimalImportsInClass(spoon.test.imports.ImportScannerTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,isInCollisionWithLocalMethod,413,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,isInCollisionWithLocalMethod,413,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,isThereAnotherClassWithSameNameInAnotherPackage,232,KILLED,spoon.test.ctClass.CtClassTest.testDefaultConstructorAreOk(spoon.test.ctClass.CtClassTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,isThereAnotherClassWithSameNameInAnotherPackage,232,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,false,isTypeInCollision,586,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,true,isTypeInCollision,586,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,null,lookForLocalVariables,535,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,scan,135,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtAnnotationType,143,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtCatchVariable,179,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtClass,167,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtEnum,149,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtExecutableReference,105,KILLED,spoon.test.imports.ImportTest.testNotImportExecutableType(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtFieldRead,82,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccessWithImport(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtFieldReference,92,KILLED,spoon.test.imports.ImportTest.testJavaLangIsConsideredAsImported(spoon.test.imports.ImportTest)
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtInterface,155,SURVIVED,none
ImportScannerImpl.java,spoon.reflect.visitor.ImportScannerImpl,void,visitCtTypeReference,117,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfPrivateClass(spoon.test.imports.ImportTest)
Launcher.java,spoon.Launcher,void,addInputResource,158,KILLED,spoon.LauncherTest.testLLauncherBuildModelReturnAModel(spoon.LauncherTest)
Launcher.java,spoon.Launcher,void,addInputResource,168,KILLED,spoon.LauncherTest.testLLauncherBuildModelReturnAModel(spoon.LauncherTest)
Launcher.java,spoon.Launcher,void,addProcessor,173,KILLED,spoon.test.processing.ProcessingTest.testProcessorNotFoundThrowAnException(spoon.test.processing.ProcessingTest)
Launcher.java,spoon.Launcher,void,addProcessor,178,KILLED,spoon.test.api.APITest.testAddProcessorMethodInSpoonAPI(spoon.test.api.APITest)
Launcher.java,spoon.Launcher,void,addTemplateResource,182,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Launcher.java,spoon.Launcher,null,buildModel,719,KILLED,spoon.LauncherTest.testLLauncherBuildModelReturnAModel(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,createCompiler,600,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,createCompiler,608,KILLED,spoon.test.staticFieldAccess.StaticAccessTest.testProcessAndCompile(spoon.test.staticFieldAccess.StaticAccessTest)
Launcher.java,spoon.Launcher,null,createCompiler,562,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,createCompiler,582,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
Launcher.java,spoon.Launcher,null,createCompiler,592,NO_COVERAGE,none
Launcher.java,spoon.Launcher,null,createEnvironment,625,MEMORY_ERROR,none
Launcher.java,spoon.Launcher,null,createFactory,615,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,createOutputWriter,634,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,createOutputWriter,630,NO_COVERAGE,none
Launcher.java,spoon.Launcher,null,createPrettyPrinter,640,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,defineArgs,198,NO_COVERAGE,none
Launcher.java,spoon.Launcher,null,getArguments,423,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,getEnvironment,187,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,getModel,810,KILLED,spoon.test.filters.CUFilterTest.testSingleExcludeWithFilter(spoon.test.filters.CUFilterTest)
Launcher.java,spoon.Launcher,"",getVersionMessage,690,SURVIVED,none
Launcher.java,spoon.Launcher,"A",getVersionMessage,690,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
Launcher.java,spoon.Launcher,null,getVersionMessage,690,SURVIVED,none
Launcher.java,spoon.Launcher,void,main,101,KILLED,spoon.test.api.APITest.testNotValidInput(spoon.test.api.APITest)
Launcher.java,spoon.Launcher,null,parseArgs,526,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,null,parseClass,815,KILLED,spoon.test.api.APITest.testOneLinerIntro(spoon.test.api.APITest)
Launcher.java,spoon.Launcher,void,prettyprint,735,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
Launcher.java,spoon.Launcher,void,printUsage,124,NO_COVERAGE,none
Launcher.java,spoon.Launcher,void,process,727,KILLED,spoon.test.processing.ProcessingTest.testProcessorNotFoundThrowAnException(spoon.test.processing.ProcessingTest)
Launcher.java,spoon.Launcher,void,processArguments,427,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,void,run,662,KILLED,spoon.test.processing.ProcessingTest.testProcessorNotFoundThrowAnException(spoon.test.processing.ProcessingTest)
Launcher.java,spoon.Launcher,void,run,106,KILLED,spoon.test.api.APITest.testNotValidInput(spoon.test.api.APITest)
Launcher.java,spoon.Launcher,void,setArgs,119,KILLED,spoon.LauncherTest.testInitEnvironment(spoon.LauncherTest)
Launcher.java,spoon.Launcher,void,setBinaryOutputDirectory,805,KILLED,spoon.test.compilationunit.GetBinaryFilesTest.testExistingButNotBuiltBinary(spoon.test.compilationunit.GetBinaryFilesTest)
Launcher.java,spoon.Launcher,void,setBinaryOutputDirectory,800,KILLED,spoon.test.compilationunit.GetBinaryFilesTest.testExistingButNotBuiltBinary(spoon.test.compilationunit.GetBinaryFilesTest)
Launcher.java,spoon.Launcher,void,setOutputFilter,785,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
Launcher.java,spoon.Launcher,void,setSourceOutputDirectory,774,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
Launcher.java,spoon.Launcher,void,setSourceOutputDirectory,769,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createAnnotation,602,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createBinaryOperator,96,KILLED,spoon.test.compilation.CompilationTest.compileTest(spoon.test.compilation.CompilationTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCatchVariable,352,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCatchVariableReference,360,KILLED,spoon.test.trycatch.TryCatchTest.testRethrowingExceptionsJava7(spoon.test.trycatch.TryCatchTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createClassAccess,162,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCodeSnippetExpression,650,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCodeSnippetStatement,663,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createComment,676,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createConstructorCall,186,KILLED,spoon.test.constructor.ConstructorTest.testConstructorCallFactory(spoon.test.constructor.ConstructorTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCtBlock,508,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCtCatch,553,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCtField,494,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCtPackageReference,591,KILLED,spoon.test.factory.TypeFactoryTest.testCreateTypeRef(spoon.test.factory.TypeFactoryTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCtThrow,538,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createCtTypeReference,568,KILLED,spoon.test.factory.TypeFactoryTest.testCreateTypeRef(spoon.test.factory.TypeFactoryTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createInlineComment,689,KILLED,spoon.test.comment.CommentTest.testInsertNewComment(spoon.test.comment.CommentTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createInvocation,256,KILLED,spoon.test.invocations.InvocationTest.testTargetNullForStaticMethod(spoon.test.invocations.InvocationTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createInvocation,237,KILLED,spoon.test.invocations.InvocationTest.testTargetNullForStaticMethod(spoon.test.invocations.InvocationTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createJavaDocTag,700,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createLiteral,269,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createLiteralArray,284,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayAccess(spoon.test.template.TemplateArrayAccessTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createLocalVariable,315,KILLED,spoon.test.comment.CommentTest.testInsertNewComment(spoon.test.comment.CommentTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createLocalVariableReference,323,KILLED,spoon.test.reference.VariableAccessTest.testReferences(spoon.test.reference.VariableAccessTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createLocalVariableReference,335,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createNewClass,214,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createStatementList,367,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createThisAccess,386,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createThisAccess,403,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createTypeAccess,111,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createTypeAccess,137,KILLED,spoon.test.imports.ImportTest.testStaticImportForInvocationInNoClasspath(spoon.test.imports.ImportTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createTypeAccessWithoutCloningReference,147,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createVariableAssignment,456,KILLED,spoon.processing.CtGenerationTest.testGenerateCloneVisitor(spoon.processing.CtGenerationTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createVariableAssignments,471,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createVariableRead,416,KILLED,spoon.test.template.TemplateEnumAccessTest.testEnumAccessTest(spoon.test.template.TemplateEnumAccessTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,createVariableReads,435,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,getOrCreateCtBlock,521,KILLED,spoon.test.type.TypeTest.testShadowType(spoon.test.type.TypeTest)
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,getReferences,620,NO_COVERAGE,none
CodeFactory.java,spoon.reflect.factory.CodeFactory,null,modifiers,635,NO_COVERAGE,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,null,build,32,NO_COVERAGE,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,copy,27,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,scanCtElement,60,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,scanCtNamedElement,70,KILLED,spoon.test.generics.GenericsTest.testTypeParameterDeclarer(spoon.test.generics.GenericsTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,scanCtReference,79,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,scanCtStatement,88,MEMORY_ERROR,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,scanCtType,97,KILLED,spoon.test.reference.VariableAccessTest.testGetDeclarationAfterClone(spoon.test.reference.VariableAccessTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtAnnotation,110,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtAnonymousExecutable,116,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtBinaryOperator,122,KILLED,spoon.test.ctBlock.TestCtBlock.testAddStatementInBlock(spoon.test.ctBlock.TestCtBlock)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtBreak,128,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtCatchVariable,186,KILLED,spoon.test.reference.VariableAccessTest.testGetDeclarationAfterClone(spoon.test.reference.VariableAccessTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtCodeSnippetExpression,45,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtCodeSnippetStatement,51,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtComment,255,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtConstructor,134,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtConstructorCall,202,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtContinue,141,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtExecutableReference,147,KILLED,spoon.test.ctBlock.TestCtBlock.testAddStatementInCase(spoon.test.ctBlock.TestCtBlock)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtField,153,KILLED,spoon.test.reference.CloneReferenceTest.testGetDeclarationOfFieldAfterClone(spoon.test.reference.CloneReferenceTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtFieldReference,160,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testSimpleStaticImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtInvocation,167,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtJavaDocTag,263,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtLambda,209,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtLiteral,173,KILLED,spoon.reflect.ast.CloneTest.testCloneCastConditional(spoon.reflect.ast.CloneTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtLocalVariable,179,KILLED,spoon.test.ctBlock.TestCtBlock.testAddStatementInCase(spoon.test.ctBlock.TestCtBlock)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtMethod,193,KILLED,spoon.test.annotation.AnnotationTest.testFieldAndMethodInAnnotation(spoon.test.annotation.AnnotationTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtModule,272,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtModuleRequirement,286,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtOperatorAssignement,215,NO_COVERAGE,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtOperatorAssignment,104,KILLED,spoon.reflect.ast.CloneTest.testCloneListener(spoon.reflect.ast.CloneTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtPackage,221,KILLED,spoon.test.factory.FactoryTest.testCtModel(spoon.test.factory.FactoryTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtPackageExport,279,SURVIVED,none
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtParameter,227,KILLED,spoon.test.reference.VariableAccessTest.testGetDeclarationAfterClone(spoon.test.reference.VariableAccessTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtTypeParameterReference,235,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtTypeReference,241,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CloneBuilder.java,spoon.support.visitor.clone.CloneBuilder,void,visitCtUnaryOperator,247,KILLED,spoon.test.ctBlock.TestCtBlock.testAddStatementInCase(spoon.test.ctBlock.TestCtBlock)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,buildTypeParameterReference,174,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,buildTypeReference,150,KILLED,spoon.test.imports.ImportTest.testImportOfAnInnerClassInAClassPackage(spoon.test.imports.ImportTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,buildTypeReference,135,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,buildTypeReferenceInternal,182,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,"",concatSubArray,578,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,"A",concatSubArray,578,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,concatSubArray,578,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceWithGenerics(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getBoundedTypeReference,120,NO_COVERAGE,none
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getBoundedTypesReferences,974,NO_COVERAGE,none
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getCtCircularTypeReference,887,SURVIVED,none
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getDeclaringReferenceFromImports,297,KILLED,spoon.test.imports.ImportTest.testMissingImport(spoon.test.imports.ImportTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getExecutableReference,415,KILLED,spoon.test.executable.ExecutableRefTest.constructorTest(spoon.test.executable.ExecutableRefTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getExecutableReference,435,KILLED,spoon.test.executable.ExecutableRefTest.methodTest(spoon.test.executable.ExecutableRefTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getExecutableReference,360,KILLED,spoon.test.executable.ExecutableRefTest.methodTest(spoon.test.executable.ExecutableRefTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getLambdaExecutableReference,1015,NO_COVERAGE,none
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getModuleReference,1050,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getPackageReference,466,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getPackageReference,462,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getQualifiedTypeReference,256,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getTypeParameterReference,623,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getTypeParameterReference,487,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getTypeReference,591,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceWithGenerics(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getTypeReference,541,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceWithGenerics(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getTypeReference,650,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getTypeReference,477,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getVariableReference,905,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getVariableReference,923,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getVariableReference,892,NO_COVERAGE,none
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getVariableReference,964,KILLED,spoon.test.reference.TypeReferenceTest.testArgumentOfAInvocationIsNotATypeAccess(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,null,getVariableReference,934,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,void,insertGenericTypesInNoClasspathFromJDTInSpoon,521,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,false,isCorrectTypeReference,506,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,true,isCorrectTypeReference,506,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceWithGenerics(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,false,isTypeArgumentExplicit,231,KILLED,spoon.test.reference.TypeReferenceTest.testTypeReferenceSpecifiedInClassDeclarationInNoClasspathWithGenerics(spoon.test.reference.TypeReferenceTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,true,isTypeArgumentExplicit,231,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.useFullyQualifiedNamesInCtElementImpl_toString(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
ReferenceBuilder.java,spoon.support.compiler.jdt.ReferenceBuilder,void,setPackageOrDeclaringType,985,KILLED,spoon.test.filters.CUFilterTest.testSingleExcludeWithoutFilter(spoon.test.filters.CUFilterTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,void,accept,444,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtModule](spoon.reflect.visitor.CtInheritanceScannerTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,addExportedPackage,258,SURVIVED,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,addModuleDirective,84,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,addModuleDirectiveAt,125,NO_COVERAGE,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,addOpenedPackage,312,SURVIVED,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,addProvidedService,411,SURVIVED,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,addRequiredModule,361,SURVIVED,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,addUsedService,204,SURVIVED,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,clone,454,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.SetParentTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,computeRoleFromModuleDirectory,104,SURVIVED,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,getExportedPackages,222,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,getModuleDirectives,145,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,getOpenedPackages,276,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,getParent,466,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.SetParentTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,getProvidedServices,379,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,getReference,449,NO_COVERAGE,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,getRequiredModules,330,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,getUsedServices,174,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,false,isUnnamedModule,55,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,true,isUnnamedModule,55,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,removeExportedPackage,268,NO_COVERAGE,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,removeModuleDirective,150,NO_COVERAGE,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,removeOpenedPackage,322,NO_COVERAGE,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,removeProvidedService,421,NO_COVERAGE,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,removeRequiredModule,371,NO_COVERAGE,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,removeUsedService,214,NO_COVERAGE,none
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setExportedPackages,240,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setIsOpenModule,167,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setModuleDirectives,65,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setOpenedPackages,294,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setParent,460,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setProvidedServices,394,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setRequiredModules,345,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setRootPackage,434,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent(spoon.testing.CtElementAssertTest)
CtModuleImpl.java,spoon.support.reflect.declaration.CtModuleImpl,null,setUsedServices,189,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModule extends spoon.reflect.declaration.CtNamedElement {
    java.lang.String TOP_LEVEL_MODULE_NAME = "unnamed module";

    @spoon.support.DerivedProperty
    boolean isUnnamedModule();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    boolean isOpenModule();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModule> T setIsOpenModule(boolean openModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T setModuleDirectives(java.util.List<spoon.reflect.declaration.CtModuleDirective> moduleDirectives);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T addModuleDirectiveAt(int position, spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    java.util.List<spoon.reflect.declaration.CtModuleDirective> getModuleDirectives();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_DIRECTIVE)
    <T extends spoon.reflect.declaration.CtModule> T removeModuleDirective(spoon.reflect.declaration.CtModuleDirective moduleDirective);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtUsedService> getUsedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setUsedServices(java.util.List<spoon.reflect.declaration.CtUsedService> usedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeUsedService(spoon.reflect.declaration.CtUsedService usedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getExportedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setExportedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> exportedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPORTED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeExportedPackage(spoon.reflect.declaration.CtPackageExport exportedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtPackageExport> getOpenedPackages();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setOpenedPackages(java.util.List<spoon.reflect.declaration.CtPackageExport> openedPackages);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeOpenedPackage(spoon.reflect.declaration.CtPackageExport openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtModuleRequirement> getRequiredModules();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setRequiredModules(java.util.List<spoon.reflect.declaration.CtModuleRequirement> requiredModules);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.REQUIRED_MODULE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeRequiredModule(spoon.reflect.declaration.CtModuleRequirement requiredModule);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    java.util.List<spoon.reflect.declaration.CtProvidedService> getProvidedServices();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T setProvidedServices(java.util.List<spoon.reflect.declaration.CtProvidedService> providedServices);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T addProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PROVIDED_SERVICE)
    @spoon.support.DerivedProperty
    <T extends spoon.reflect.declaration.CtModule> T removeProvidedService(spoon.reflect.declaration.CtProvidedService providedService);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getRootPackage();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtModule> T setRootPackage(spoon.reflect.declaration.CtPackage rootPackage);

    @spoon.support.DerivedProperty
    @java.lang.Override
    spoon.reflect.reference.CtModuleReference getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtModule clone();
}](spoon.test.parent.ParentContractTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,void,accept,73,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtMethod](spoon.reflect.visitor.CtInheritanceScannerTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,addFormalCtTypeParameter,127,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,addModifier,166,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,clone,220,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtMethod<T> extends spoon.reflect.declaration.CtExecutable<T> , spoon.reflect.declaration.CtFormalTypeDeclarer , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember {
    boolean isOverriding(spoon.reflect.declaration.CtMethod<?> superMethod);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IS_DEFAULT)
    boolean isDefaultMethod();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IS_DEFAULT)
    <C extends spoon.reflect.declaration.CtMethod<T>> C setDefaultMethod(boolean defaultMethod);

    @java.lang.Override
    spoon.reflect.declaration.CtMethod<T> clone();

    java.util.Collection<spoon.reflect.declaration.CtMethod<?>> getTopDefinitions();

    spoon.reflect.declaration.CtMethod<?> copyMethod();
}](spoon.test.parent.SetParentTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,copyMethod,283,KILLED,spoon.reflect.ast.CloneTest.testCopyMethod(spoon.reflect.ast.CloneTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,getExtendedModifiers,189,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,getModifiers,150,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,getTopDefinitions,225,KILLED,spoon.test.filters.FilterTest.testgetTopDefinitions(spoon.test.filters.FilterTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,getVisibility,184,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,hasModifier,155,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,hasModifier,155,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,isAbstract,278,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,isAbstract,278,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,isFinal,268,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,isFinal,268,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,isOverriding,200,KILLED,spoon.test.method_overriding.MethodOverriddingTest.testMethodOverride(spoon.test.method_overriding.MethodOverriddingTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,isOverriding,200,KILLED,spoon.test.method_overriding.MethodOverriddingTest.testMethodOverride(spoon.test.method_overriding.MethodOverriddingTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,isPrivate,258,SURVIVED,none
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,isPrivate,258,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,isProtected,263,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,isProtected,263,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,isPublic,253,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,isPublic,253,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,isStatic,273,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,isStatic,273,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,false,removeFormalCtTypeParameter,141,NO_COVERAGE,none
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,true,removeFormalCtTypeParameter,141,NO_COVERAGE,none
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,removeModifier,172,KILLED,spoon.test.modifiers.TestModifiers.testCtModifiableAddRemoveReturnCtModifiable(spoon.test.modifiers.TestModifiers)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,setDefaultMethod,98,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,setExtendedModifiers,194,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,setFormalCtTypeParameters,110,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtMethod<T> extends spoon.reflect.declaration.CtExecutable<T> , spoon.reflect.declaration.CtFormalTypeDeclarer , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember {
    boolean isOverriding(spoon.reflect.declaration.CtMethod<?> superMethod);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IS_DEFAULT)
    boolean isDefaultMethod();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IS_DEFAULT)
    <C extends spoon.reflect.declaration.CtMethod<T>> C setDefaultMethod(boolean defaultMethod);

    @java.lang.Override
    spoon.reflect.declaration.CtMethod<T> clone();

    java.util.Collection<spoon.reflect.declaration.CtMethod<?>> getTopDefinitions();

    spoon.reflect.declaration.CtMethod<?> copyMethod();
}](spoon.test.parent.ParentContractTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,setModifiers,160,KILLED,spoon.test.reference.VariableAccessTest.testGetDeclarationAfterClone(spoon.test.reference.VariableAccessTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,setShadow,213,MEMORY_ERROR,none
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,setType,83,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtMethodImpl.java,spoon.support.reflect.declaration.CtMethodImpl,null,setVisibility,178,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,void,accept,57,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtConstructor](spoon.reflect.visitor.CtInheritanceScannerTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,addFormalCtTypeParameter,117,KILLED,spoon.test.generics.GenericsTest.testWildcard(spoon.test.generics.GenericsTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,addModifier,156,KILLED,spoon.test.imports.ImportTest.testNewInnerClassDefinesInItsClassAndSuperClass(spoon.test.imports.ImportTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,clone,206,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,getDeclaringType,74,KILLED,spoon.test.reference.ExecutableReferenceTest.testCreateReferenceForAnonymousExecutable(spoon.test.reference.ExecutableReferenceTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,getExtendedModifiers,179,KILLED,spoon.test.imports.ImportTest.testNewInnerClassDefinesInItsClassAndSuperClass(spoon.test.imports.ImportTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,getModifiers,140,KILLED,spoon.test.serializable.SerializableTest.testSerializationModelStreamer(spoon.test.serializable.SerializableTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,getType,80,KILLED,spoon.test.reference.ExecutableReferenceTest.testCreateReferenceForAnonymousExecutable(spoon.test.reference.ExecutableReferenceTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,getVisibility,174,SURVIVED,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,false,hasModifier,145,KILLED,spoon.test.architecture.SpoonArchitectureEnforcerTest.testStaticClasses(spoon.test.architecture.SpoonArchitectureEnforcerTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,true,hasModifier,145,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,false,isAbstract,236,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,true,isAbstract,236,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,false,isFinal,226,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,true,isFinal,226,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,false,isPrivate,216,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,true,isPrivate,216,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,false,isProtected,221,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,true,isProtected,221,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,false,isPublic,211,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,true,isPublic,211,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,false,isStatic,231,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,true,isStatic,231,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,false,removeFormalCtTypeParameter,131,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,true,removeFormalCtTypeParameter,131,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,removeModifier,162,NO_COVERAGE,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,setExtendedModifiers,184,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,setFormalCtTypeParameters,100,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtConstructor<T> extends spoon.reflect.declaration.CtExecutable<T> , spoon.reflect.declaration.CtFormalTypeDeclarer , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.NAME)
    java.lang.String getSimpleName();

    @java.lang.Override
    spoon.reflect.declaration.CtConstructor<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference<T> type);
}](spoon.test.parent.ParentContractTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,setModifiers,150,KILLED,spoon.test.reference.VariableAccessTest.testGetDeclarationAfterClone(spoon.test.reference.VariableAccessTest)
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,setShadow,199,MEMORY_ERROR,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,setSimpleName,63,SURVIVED,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,setType,90,SURVIVED,none
CtConstructorImpl.java,spoon.support.reflect.declaration.CtConstructorImpl,null,setVisibility,168,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,void,accept,46,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnonymousExecutable](spoon.reflect.visitor.CtInheritanceScannerTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,addModifier,51,KILLED,spoon.test.initializers.InitializerTest.testModelBuildingStaticInitializer(spoon.test.initializers.InitializerTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,addParameter,125,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,addThrownType,151,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,clone,188,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAnonymousExecutable extends spoon.reflect.declaration.CtExecutable<java.lang.Void> , spoon.reflect.declaration.CtTypeMember {
    @java.lang.Override
    spoon.reflect.declaration.CtAnonymousExecutable clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtExecutable<java.lang.Void>> T setThrownTypes(java.util.Set<spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> thrownTypes);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtExecutable<java.lang.Void>> T setParameters(java.util.List<spoon.reflect.declaration.CtParameter<?>> parameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference<java.lang.Void> type);
}](spoon.test.parent.SetParentTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,getExtendedModifiers,99,KILLED,spoon.test.type.TypeTest.testTypeMemberOrder(spoon.test.type.TypeTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,getModifiers,63,KILLED,spoon.test.initializers.InitializerTest.testModelBuildingStaticInitializer(spoon.test.initializers.InitializerTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,getParameters,111,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,getThrownTypes,137,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,getType,176,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,getVisibility,68,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,false,hasModifier,82,SURVIVED,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,true,hasModifier,82,KILLED,spoon.test.initializers.InitializerTest.testModelBuildingInitializer(spoon.test.initializers.InitializerTest)
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,false,isAbstract,218,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,true,isAbstract,218,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,false,isFinal,208,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,true,isFinal,208,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,false,isPrivate,198,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,true,isPrivate,198,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,false,isProtected,203,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,true,isProtected,203,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,false,isPublic,193,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,true,isPublic,193,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,false,isStatic,213,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,true,isStatic,213,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,removeModifier,57,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,setExtendedModifiers,104,NO_COVERAGE,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,setModifiers,87,SURVIVED,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,setParameters,118,SURVIVED,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,setSimpleName,170,SURVIVED,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,setThrownTypes,144,SURVIVED,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,setType,183,SURVIVED,none
CtAnonymousExecutableImpl.java,spoon.support.reflect.declaration.CtAnonymousExecutableImpl,null,setVisibility,93,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,void,accept,62,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCatchVariable](spoon.reflect.visitor.CtInheritanceScannerTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,addModifier,195,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,addMultiType,134,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,clone,238,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCatchVariable<T> extends spoon.reflect.code.CtCodeElement , spoon.reflect.declaration.CtMultiTypedElement , spoon.reflect.declaration.CtVariable<T> {
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtCatchVariableReference<T> getReference();

    @java.lang.Override
    spoon.reflect.code.CtCatchVariable<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtVariable<T>> C setDefaultExpression(spoon.reflect.code.CtExpression<T> assignedExpression);
}](spoon.test.parent.SetParentTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,getExtendedModifiers,227,KILLED,spoon.test.trycatch.TryCatchTest.testCompileMultiTryCatchWithCustomExceptions(spoon.test.trycatch.TryCatchTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,getModifiers,179,KILLED,spoon.test.comparison.EqualTest.testEqualsMultitype(spoon.test.comparison.EqualTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,getReference,73,KILLED,spoon.test.trycatch.TryCatchTest.testRethrowingExceptionsJava7(spoon.test.trycatch.TryCatchTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,getType,85,KILLED,spoon.test.trycatch.TryCatchTest.testCatchOrder(spoon.test.trycatch.TryCatchTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,getVisibility,213,SURVIVED,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,false,hasModifier,184,KILLED,spoon.test.trycatch.TryCatchTest.testCatchWithExplicitFinalVariable(spoon.test.trycatch.TryCatchTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,true,hasModifier,184,SURVIVED,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,false,isAbstract,268,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,true,isAbstract,268,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,false,isFinal,258,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,true,isFinal,258,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,false,isPrivate,248,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,true,isPrivate,248,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,false,isProtected,253,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,true,isProtected,253,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,false,isPublic,243,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,true,isPublic,243,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,false,isStatic,263,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,true,isStatic,263,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,removeModifier,201,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,false,removeMultiType,148,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,true,removeMultiType,148,NO_COVERAGE,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,setDefaultExpression,116,SURVIVED,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,setExtendedModifiers,232,KILLED,spoon.test.trycatch.TryCatchTest.testCatchWithExplicitFinalVariable(spoon.test.trycatch.TryCatchTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,setModifiers,189,SURVIVED,none
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,setMultiTypes,162,KILLED,spoon.test.comparison.EqualTest.testEqualsMultitype(spoon.test.comparison.EqualTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,setSimpleName,121,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,setType,128,KILLED,spoon.test.trycatch.TryCatchTest.testModelBuildingInitializer(spoon.test.trycatch.TryCatchTest)
CtCatchVariableImpl.java,spoon.support.reflect.code.CtCatchVariableImpl,null,setVisibility,207,NO_COVERAGE,none
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,void,accept,84,KILLED,spoon.test.api.NoClasspathTest.testBug20141021(spoon.test.api.NoClasspathTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,addActualTypeArgument,449,KILLED,spoon.test.generics.GenericsTest.testGenericsInConstructorCall(spoon.test.generics.GenericsTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,false,addParameter,226,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,true,addParameter,226,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,clone,479,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getActualAnnotatedElement,318,NO_COVERAGE,none
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getActualConstructor,354,KILLED,spoon.test.executable.ExecutableRefTest.constructorTest(spoon.test.executable.ExecutableRefTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getActualMethod,327,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getCtExecutable,173,KILLED,spoon.test.executable.ExecutableTest.testGetReference(spoon.test.executable.ExecutableTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getDeclaration,160,KILLED,spoon.test.executable.ExecutableTest.testGetReference(spoon.test.executable.ExecutableTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getExecutableDeclaration,169,KILLED,spoon.test.reference.AnnotationFieldReferenceTest.testAnnotationFieldReference(spoon.test.reference.AnnotationFieldReferenceTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getModifiers,398,NO_COVERAGE,none
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getOverloadedExecutable,429,KILLED,spoon.test.methodreference.MethodReferenceTest.testNoClasspathSuperExecutable(spoon.test.methodreference.MethodReferenceTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getOverridingExecutable,420,KILLED,spoon.test.methodreference.MethodReferenceTest.testNoClasspathSuperExecutable(spoon.test.methodreference.MethodReferenceTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getOverridingExecutable,237,NO_COVERAGE,none
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getParameters,205,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,"",getSignature,472,KILLED,spoon.test.imports.ImportTest.testAnotherMissingImport(spoon.test.imports.ImportTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,"A",getSignature,472,KILLED,spoon.test.imports.ImportTest.testAnotherMissingImport(spoon.test.imports.ImportTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,getSignature,472,KILLED,spoon.test.imports.ImportTest.testAnotherMissingImport(spoon.test.imports.ImportTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,false,isConstructor,94,KILLED,spoon.test.constructorcallnewclass.NewClassTest.testNewClassWithObjectClass(spoon.test.constructorcallnewclass.NewClassTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,true,isConstructor,94,KILLED,spoon.test.api.NoClasspathTest.testBug20141021(spoon.test.api.NoClasspathTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,false,isFinal,384,KILLED,spoon.test.executable.ExecutableTest.testGetReference(spoon.test.executable.ExecutableTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,true,isFinal,384,KILLED,spoon.test.executable.ExecutableTest.testGetReference(spoon.test.executable.ExecutableTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,false,isOverriding,258,KILLED,spoon.test.executable.ExecutableRefTest.testOverridingMethod(spoon.test.executable.ExecutableRefTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,true,isOverriding,258,KILLED,spoon.test.executable.ExecutableRefTest.testOverridingMethod(spoon.test.executable.ExecutableRefTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,false,removeActualTypeArgument,463,NO_COVERAGE,none
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,true,removeActualTypeArgument,463,NO_COVERAGE,none
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,setActualTypeArguments,281,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,setDeclaringType,298,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,setParameters,210,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,setStatic,377,KILLED,spoon.test.executable.ExecutableTest.testGetReference(spoon.test.executable.ExecutableTest)
CtExecutableReferenceImpl.java,spoon.support.reflect.reference.CtExecutableReferenceImpl,null,setType,308,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,void,accept,67,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtField](spoon.reflect.visitor.CtInheritanceScannerTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,addModifier,133,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,clone,196,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtField<T> extends spoon.reflect.code.CtRHSReceiver<T> , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember , spoon.reflect.declaration.CtVariable<T> {
    java.lang.String FIELD_SEPARATOR = "#";

    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtFieldReference<T> getReference();

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.code.CtExpression<T> getAssignment();

    @java.lang.Override
    spoon.reflect.declaration.CtField<T> clone();
}](spoon.test.parent.SetParentTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,getAssignment,169,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testBCUBug20140402(spoon.test.fieldaccesses.FieldAccessTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,getDeclaringType,72,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,getExtendedModifiers,145,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,getModifiers,117,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,getReference,87,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,getTopLevelType,77,NO_COVERAGE,none
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,getVisibility,163,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,false,hasModifier,122,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,true,hasModifier,122,KILLED,spoon.test.targeted.TargetedExpressionTest.testNotTargetedExpression(spoon.test.targeted.TargetedExpressionTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,false,isAbstract,226,SURVIVED,none
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,true,isAbstract,226,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,false,isFinal,216,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,true,isFinal,216,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,false,isPrivate,206,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,true,isPrivate,206,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,false,isProtected,211,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,true,isProtected,211,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,false,isPublic,201,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,true,isPublic,201,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,false,isStatic,221,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,true,isStatic,221,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,removeModifier,139,NO_COVERAGE,none
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,setAssignment,175,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testBCUBug20140402(spoon.test.fieldaccesses.FieldAccessTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,setDefaultExpression,97,KILLED,spoon.test.literal.LiteralTest.testBuildLiternal(spoon.test.literal.LiteralTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,setExtendedModifiers,150,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,setModifiers,127,KILLED,spoon.test.eval.EvalTest.testVisitorPartialEvaluatorScanner(spoon.test.eval.EvalTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,setShadow,189,MEMORY_ERROR,none
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,setType,107,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtFieldImpl.java,spoon.support.reflect.declaration.CtFieldImpl,null,setVisibility,157,NO_COVERAGE,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,addInput,90,KILLED,spoon.test.filters.FilterTest.testQueryWithOptionalNumberOfInputs(spoon.test.filters.FilterTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,addInput,79,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,void,addStep,251,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,detectTargetClassFromCCE,601,SURVIVED,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,void,evaluate,212,KILLED,spoon.test.filters.FilterTest.testQueryInQuery(spoon.test.filters.FilterTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,failurePolicy,224,KILLED,spoon.test.filters.FilterTest.testInvalidQueryStepFailurePolicyIgnore(spoon.test.filters.FilterTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,filterChildren,173,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,first,131,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,first,137,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,void,forEach,103,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,0,getIndexOfCallerInStackOfLambda,576,NO_COVERAGE,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,1,getIndexOfCallerInStackOfLambda,576,NO_COVERAGE,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,getInputs,61,KILLED,spoon.test.filters.FilterTest.testReuseOfQuery(spoon.test.filters.FilterTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,"",getStepDescription,284,SURVIVED,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,"A",getStepDescription,284,SURVIVED,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,getStepDescription,284,SURVIVED,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,0,getStepIndex,261,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,1,getStepIndex,261,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,void,handleListenerSetQuery,245,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,list,112,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,list,117,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,void,log,278,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,logging,240,SURVIVED,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,map,161,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,map,167,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,name,218,KILLED,spoon.test.filters.FilterTest.testInvalidQueryStepFailurePolicyIgnore(spoon.test.filters.FilterTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,void,reset,489,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,select,182,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,setInput,67,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,null,stepFailurePolicy,229,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl,void,terminate,202,KILLED,spoon.test.field.FieldTest.testFieldImplicitTarget(spoon.test.field.FieldTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,void,accept,60,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtLocalVariable](spoon.reflect.visitor.CtInheritanceScannerTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,addModifier,128,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.testTernaryParenthesesOnLocalVariable(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,clone,184,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtLocalVariable<T> extends spoon.reflect.code.CtRHSReceiver<T> , spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtVariable<T> {
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtLocalVariableReference<T> getReference();

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.code.CtExpression<T> getAssignment();

    @java.lang.Override
    spoon.reflect.code.CtLocalVariable<T> clone();
}](spoon.test.parent.SetParentTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,getAssignment,172,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccess(spoon.test.imports.ImportTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,getExtendedModifiers,160,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,getModifiers,112,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,getReference,70,KILLED,spoon.test.reference.VariableAccessTest.testReferences(spoon.test.reference.VariableAccessTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,getVisibility,146,SURVIVED,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,false,hasModifier,117,SURVIVED,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,true,hasModifier,117,KILLED,spoon.test.field.FieldTest.testFieldImplicitTarget(spoon.test.field.FieldTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,false,isAbstract,214,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,true,isAbstract,214,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,false,isFinal,204,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,true,isFinal,204,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,false,isPrivate,194,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,true,isPrivate,194,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,false,isProtected,199,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,true,isProtected,199,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,false,isPublic,189,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,true,isPublic,189,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,false,isStatic,209,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,true,isStatic,209,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,removeModifier,134,NO_COVERAGE,none
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,setAssignment,178,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testBCUBug20140402(spoon.test.fieldaccesses.FieldAccessTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,setDefaultExpression,85,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,setExtendedModifiers,165,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,setModifiers,122,KILLED,spoon.reflect.ast.CloneTest.testCloneListener(spoon.reflect.ast.CloneTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,setSimpleName,95,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,setType,102,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
CtLocalVariableImpl.java,spoon.support.reflect.code.CtLocalVariableImpl,null,setVisibility,140,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,void,accept,66,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtParameter](spoon.reflect.visitor.CtInheritanceScannerTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,addModifier,132,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,clone,188,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtParameter<T> extends spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtVariable<T> {
    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtExecutable<?> getParent();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IS_VARARGS)
    boolean isVarArgs();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IS_VARARGS)
    <C extends spoon.reflect.declaration.CtParameter<T>> C setVarArgs(boolean varArgs);

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtParameterReference<T> getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtParameter<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtVariable<T>> C setDefaultExpression(spoon.reflect.code.CtExpression<T> assignedExpression);
}](spoon.test.parent.SetParentTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,getExtendedModifiers,161,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,getModifiers,116,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,getParent,156,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,getReference,77,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReference(spoon.test.generics.GenericsTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,getVisibility,150,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,false,hasModifier,121,SURVIVED,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,true,hasModifier,121,SURVIVED,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,false,isAbstract,218,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,true,isAbstract,218,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,false,isFinal,208,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,true,isFinal,208,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,false,isPrivate,198,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,true,isPrivate,198,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,false,isProtected,203,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,true,isProtected,203,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,false,isPublic,193,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,true,isPublic,193,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,false,isStatic,213,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,true,isStatic,213,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,removeModifier,138,NO_COVERAGE,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,setDefaultExpression,89,SURVIVED,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,setExtendedModifiers,166,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,setModifiers,126,KILLED,spoon.processing.CtGenerationTest.testGenerateCtBiScanner(spoon.processing.CtGenerationTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,setShadow,181,MEMORY_ERROR,none
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,setType,94,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,setVarArgs,109,KILLED,spoon.test.varargs.VarArgsTest.testModelBuildingInitializer(spoon.test.varargs.VarArgsTest)
CtParameterImpl.java,spoon.support.reflect.declaration.CtParameterImpl,null,setVisibility,144,NO_COVERAGE,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,null,convert,75,KILLED,spoon.test.eval.EvalTest.testStringConcatenation(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,null,evaluate,101,KILLED,spoon.test.eval.EvalTest.testTryCatchAndStatement(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,exit,96,KILLED,spoon.test.eval.EvalTest.testVisitorPartialEvaluatorScanner(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,false,isLiteralType,447,KILLED,spoon.test.eval.EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,true,isLiteralType,447,KILLED,spoon.test.eval.EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtAnnotationFieldAccess,323,NO_COVERAGE,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtAssignment,550,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtBinaryOperator,125,KILLED,spoon.test.eval.EvalTest.testArrayLength(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtBlock,252,KILLED,spoon.test.eval.EvalTest.testArrayLength(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtCatch,507,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtCatchVariable,481,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtConditional,569,KILLED,spoon.test.eval.EvalTest.testVisitorPartialEvaluatorScanner(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtDo,272,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtField,467,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtFieldRead,280,KILLED,spoon.test.eval.EvalTest.testArrayLength(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtFieldWrite,285,NO_COVERAGE,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtFor,330,NO_COVERAGE,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtIf,354,KILLED,spoon.test.eval.EvalTest.testArrayLength(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtInvocation,390,KILLED,spoon.test.eval.EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtLocalVariable,474,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtReturn,486,KILLED,spoon.test.eval.EvalTest.testDoNotSimplifyToExpressionWhenStatementIsExpected(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtSynchronized,493,NO_COVERAGE,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtThrow,499,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtUnaryOperator,513,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationParameterTypes(spoon.test.annotation.AnnotationTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtVariableRead,532,KILLED,spoon.test.eval.EvalTest.testTryCatchAndStatement(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtVariableWrite,537,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitCtWhile,556,SURVIVED,none
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitFieldAccess,289,KILLED,spoon.test.eval.EvalTest.testArrayLength(spoon.test.eval.EvalTest)
VisitorPartialEvaluator.java,spoon.support.reflect.eval.VisitorPartialEvaluator,void,visitVariableAccess,541,KILLED,spoon.test.eval.EvalTest.testTryCatchAndStatement(spoon.test.eval.EvalTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,"",computeAnonymousName,101,KILLED,spoon.test.secondaryclasses.ClassesTest.testIsAnonymousMethodInCtClass(spoon.test.secondaryclasses.ClassesTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,"A",computeAnonymousName,101,KILLED,spoon.test.secondaryclasses.ClassesTest.testIsAnonymousMethodInCtClass(spoon.test.secondaryclasses.ClassesTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,computeAnonymousName,101,KILLED,spoon.test.secondaryclasses.ClassesTest.testIsAnonymousMethodInCtClass(spoon.test.secondaryclasses.ClassesTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createCatchVariable,129,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createExecutableReferenceExpression,606,KILLED,spoon.test.type.TypeTest.testPolyTypBindingInTernaryExpression(spoon.test.type.TypeTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createFieldAccess,446,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createFieldAccess,370,KILLED,spoon.test.field.FieldTest.testAddFieldsAtTop(spoon.test.field.FieldTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createFieldAccess,351,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createFieldAccessNoClasspath,422,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionIfNotCompilable(spoon.test.exceptions.ExceptionTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createFieldAccessNoClasspath,397,KILLED,spoon.test.signature.SignatureTest.testArgumentNotNullForExecutableReference(spoon.test.signature.SignatureTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createModule,669,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createModuleExport,748,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createModuleExport,770,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createModuleProvidedService,792,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createModuleRequirement,729,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createParameter,584,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,"",createQualifiedTypeName,113,KILLED,spoon.test.variable.AccessTest.testVariableAccessInNoClasspath(spoon.test.variable.AccessTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,"A",createQualifiedTypeName,113,KILLED,spoon.test.variable.AccessTest.testVariableAccessInNoClasspath(spoon.test.variable.AccessTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createQualifiedTypeName,113,KILLED,spoon.test.targeted.TargetedExpressionTest.testInitializeFieldAccessInNoclasspathMode(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createTargetFieldAccess,564,KILLED,spoon.test.position.PositionTest.testPositionField(spoon.test.position.PositionTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createType,627,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createTypeAccess,466,KILLED,spoon.test.position.PositionTest.testPositionField(spoon.test.position.PositionTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createTypeAccessNoClasspath,505,KILLED,spoon.test.signature.SignatureTest.testNullSignatureInUnboundVariable(spoon.test.signature.SignatureTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createTypeAccessNoClasspath,544,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createUsedService,722,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createVariableAccess,287,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createVariableAccess,166,KILLED,spoon.test.generics.GenericsTest.testDiamond2(spoon.test.generics.GenericsTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createVariableAccess,149,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper,null,createVariableAccessNoClasspath,188,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,null,createListPrinter,492,KILLED,spoon.test.prettyprinter.PrinterTest.testListPrinter(spoon.test.prettyprinter.PrinterTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,null,getComments,419,KILLED,spoon.test.condition.ConditionalTest.testNoBlockInConditionAndLoop(spoon.test.condition.ConditionalTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,null,getPrinterHelper,515,KILLED,spoon.test.prettyprinter.LinesTest.testPrettyPrinterWithLines(spoon.test.prettyprinter.LinesTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,false,isJavaLangClasses,289,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testInterfacePrettyPrinting(spoon.test.interfaces.TestInterfaceWithoutSetup)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,true,isJavaLangClasses,289,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.importsFromMultipleTypesSupported(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,"",removeInnerTypeSeparator,387,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,"A",removeInnerTypeSeparator,387,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,null,removeInnerTypeSeparator,387,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,visitCtNamedElement,130,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationNotRepeatableNotArrayAnnotation(spoon.test.annotation.AnnotationTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeActualTypeArguments,271,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeAnnotationElement,207,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationNotRepeatableNotArrayAnnotation(spoon.test.annotation.AnnotationTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeAnnotations,80,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationNotRepeatableNotArrayAnnotation(spoon.test.annotation.AnnotationTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeComment,399,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeComment,391,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeComment,408,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeComment,415,KILLED,spoon.test.comment.CommentTest.testInsertNewComment(spoon.test.comment.CommentTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeElementList,191,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeExecutableParameters,157,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeExtendsClause,137,KILLED,spoon.test.imports.ImportTest.testFullQualifiedNameImport(spoon.test.imports.ImportTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeFormalTypeParameters,250,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeHeader,367,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeIfOrLoopBlock,456,KILLED,spoon.test.annotation.AnnotationLoopTest.testAnnotationDeclaredInForInit(spoon.test.annotation.AnnotationLoopTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeImplementsClause,145,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationInExtendsImplementsOfAClass(spoon.test.annotation.AnnotationTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeImports,294,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.importsFromMultipleTypesSupported(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeModifiers,99,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writePackageLine,382,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,null,writeQualifiedName,502,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeStatement,182,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.useFullyQualifiedNamesInCtElementImpl_toString(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
ElementPrinterHelper.java,spoon.reflect.visitor.ElementPrinterHelper,void,writeThrowsClause,167,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationBeforeExceptionInSignatureOfMethod(spoon.test.annotation.AnnotationTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,void,accept,102,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnnotation](spoon.reflect.visitor.CtInheritanceScannerTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,addValue,107,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,addValue,211,NO_COVERAGE,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,addValue,201,NO_COVERAGE,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,addValue,206,NO_COVERAGE,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,addValue,216,NO_COVERAGE,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,addValueExpression,168,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,clone,475,KILLED,spoon.test.loop.LoopTest.testAnnotationInForLoop(spoon.test.loop.LoopTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,convertValue,221,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,convertValueToExpression,115,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getActualAnnotation,455,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getAnnotatedElement,416,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnParameterInMethod(spoon.test.annotation.AnnotationTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getAnnotatedElementType,421,KILLED,spoon.test.annotation.AnnotationTest.testUsageOfTypeAnnotationOnParameterInMethod(spoon.test.annotation.AnnotationTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getDefaultValue,305,SURVIVED,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getElementType,285,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getElementValue,316,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getElementValues,361,NO_COVERAGE,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getReflectValue,375,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getTypeCasts,481,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotation](spoon.test.replace.ReplaceParametrizedTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getValue,357,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,getValues,370,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationValueReflection(spoon.test.annotation.AnnotationTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,false,isPrimitive,164,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,true,isPrimitive,164,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotateWithEnum(spoon.test.annotation.AnnotationValuesTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,setAnnotationType,386,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,setElementValues,396,NO_COVERAGE,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,setShadow,468,MEMORY_ERROR,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,setTypeCasts,487,SURVIVED,none
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl,null,setValues,406,KILLED,spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)
TemplateMatcher.java,spoon.template.TemplateMatcher,false,addMatch,203,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,true,addMatch,203,SURVIVED,none
TemplateMatcher.java,spoon.template.TemplateMatcher,null,checkListStatements,214,SURVIVED,none
TemplateMatcher.java,spoon.template.TemplateMatcher,false,containsSame,700,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,true,containsSame,700,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,null,find,242,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,null,findParameterMatcher,252,NO_COVERAGE,none
TemplateMatcher.java,spoon.template.TemplateMatcher,"",getBindedParameter,293,NO_COVERAGE,none
TemplateMatcher.java,spoon.template.TemplateMatcher,"A",getBindedParameter,293,NO_COVERAGE,none
TemplateMatcher.java,spoon.template.TemplateMatcher,null,getBindedParameter,293,NO_COVERAGE,none
TemplateMatcher.java,spoon.template.TemplateMatcher,null,getMethods,70,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,null,getParameterInstance,321,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,null,getTemplateNameParameters,83,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,null,getTemplateTypeParameters,88,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,null,getVarargs,116,SURVIVED,none
TemplateMatcher.java,spoon.template.TemplateMatcher,false,helperMatch,349,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,true,helperMatch,349,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,false,invokeCallBack,481,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,true,invokeCallBack,481,SURVIVED,none
TemplateMatcher.java,spoon.template.TemplateMatcher,false,isCurrentTemplate,517,NO_COVERAGE,none
TemplateMatcher.java,spoon.template.TemplateMatcher,true,isCurrentTemplate,517,NO_COVERAGE,none
TemplateMatcher.java,spoon.template.TemplateMatcher,false,matchCollections,550,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,true,matchCollections,550,SURVIVED,none
TemplateMatcher.java,spoon.template.TemplateMatcher,false,matchNames,645,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,true,matchNames,645,SURVIVED,none
TemplateMatcher.java,spoon.template.TemplateMatcher,false,matches,540,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,true,matches,540,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
TemplateMatcher.java,spoon.template.TemplateMatcher,null,nextListStatement,672,SURVIVED,none
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,void,accept,57,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtPackage](spoon.reflect.visitor.CtInheritanceScannerTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,void,addAllPackages,113,KILLED,spoon.test.factory.FactoryTest.testCtModel(spoon.test.factory.FactoryTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,void,addAllTypes,101,KILLED,spoon.test.factory.FactoryTest.testCtModel(spoon.test.factory.FactoryTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,addPackage,62,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,addType,220,KILLED,spoon.test.factory.ClassFactoryTest.testTopLevelClass(spoon.test.factory.ClassFactoryTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,clone,276,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {
    java.lang.String PACKAGE_SEPARATOR = ".";

    char PACKAGE_SEPARATOR_CHAR = '.';

    java.lang.String TOP_LEVEL_PACKAGE_NAME = "unnamed package";

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtModule getDeclaringModule();

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtPackage getDeclaringPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getPackage(java.lang.String name);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    java.util.Set<spoon.reflect.declaration.CtPackage> getPackages();

    java.lang.String getQualifiedName();

    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtPackageReference getReference();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtType<?>> T getType(java.lang.String simpleName);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    java.util.Set<spoon.reflect.declaration.CtType<?>> getTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtPackage> T addType(spoon.reflect.declaration.CtType<?> type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    void removeType(spoon.reflect.declaration.CtType<?> type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackage> T setPackages(java.util.Set<spoon.reflect.declaration.CtPackage> pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackage> T addPackage(spoon.reflect.declaration.CtPackage pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    boolean removePackage(spoon.reflect.declaration.CtPackage pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtPackage> T setTypes(java.util.Set<spoon.reflect.declaration.CtType<?>> types);

    @java.lang.Override
    spoon.reflect.declaration.CtPackage clone();

    boolean isUnnamedPackage();
}](spoon.test.parent.SetParentTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,getDeclaringModule,130,KILLED,spoon.test.api.APITest.testOutputDestinationHandler(spoon.test.api.APITest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,getDeclaringPackage,139,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,getPackage,147,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,"",getQualifiedName,162,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,"A",getQualifiedName,162,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,getQualifiedName,162,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithCreatedObjects(spoon.test.compilationunit.TestCompilationUnit)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,getReference,215,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,getType,172,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,false,isUnnamedPackage,281,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,true,isUnnamedPackage,281,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,orderedPackageSet,92,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithCreatedObjects(spoon.test.compilationunit.TestCompilationUnit)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,orderedTypeSet,96,KILLED,spoon.test.factory.ClassFactoryTest.testTopLevelClass(spoon.test.factory.ClassFactoryTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,false,removePackage,120,NO_COVERAGE,none
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,true,removePackage,120,NO_COVERAGE,none
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,void,removeType,234,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,setPackages,187,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtPackage extends spoon.reflect.declaration.CtNamedElement , spoon.reflect.declaration.CtShadowable {
    java.lang.String PACKAGE_SEPARATOR = ".";

    char PACKAGE_SEPARATOR_CHAR = '.';

    java.lang.String TOP_LEVEL_PACKAGE_NAME = "unnamed package";

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtModule getDeclaringModule();

    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtPackage getDeclaringPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    spoon.reflect.declaration.CtPackage getPackage(java.lang.String name);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    java.util.Set<spoon.reflect.declaration.CtPackage> getPackages();

    java.lang.String getQualifiedName();

    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtPackageReference getReference();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtType<?>> T getType(java.lang.String simpleName);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    java.util.Set<spoon.reflect.declaration.CtType<?>> getTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtPackage> T addType(spoon.reflect.declaration.CtType<?> type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    void removeType(spoon.reflect.declaration.CtType<?> type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackage> T setPackages(java.util.Set<spoon.reflect.declaration.CtPackage> pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackage> T addPackage(spoon.reflect.declaration.CtPackage pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SUB_PACKAGE)
    boolean removePackage(spoon.reflect.declaration.CtPackage pack);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONTAINED_TYPE)
    <T extends spoon.reflect.declaration.CtPackage> T setTypes(java.util.Set<spoon.reflect.declaration.CtType<?>> types);

    @java.lang.Override
    spoon.reflect.declaration.CtPackage clone();

    boolean isUnnamedPackage();
}](spoon.test.parent.ParentContractTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,setShadow,269,MEMORY_ERROR,none
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,setTypes,201,KILLED,spoon.test.delete.DeleteTest.testDeleteAClassTopLevel(spoon.test.delete.DeleteTest)
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,"",toString,256,SURVIVED,none
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,"A",toString,256,SURVIVED,none
CtPackageImpl.java,spoon.support.reflect.declaration.CtPackageImpl,null,toString,256,SURVIVED,none
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,enter,81,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,null,exit,85,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,"",getTypeName,390,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,"A",getTypeName,390,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,null,getTypeName,390,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,null,scan,92,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,setModifier,466,KILLED,spoon.test.lambda.LambdaTest.testLambdaMethod(spoon.test.lambda.LambdaTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitAnnotation,222,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitAnnotationClass,200,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitArrayReference,418,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitClass,135,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredConstructor(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitClassReference,443,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitConstructor,243,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredConstructor(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitEnum,177,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitEnumValue,289,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitField,276,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredField(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitInterface,158,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerInterface(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitInterfaceReference,455,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerInterface(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitMethod,256,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitMethod,261,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitPackage,124,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitParameter,301,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitType,355,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitType,339,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitType,379,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitTypeParameter,314,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder,void,visitTypeParameterReference,326,KILLED,spoon.test.generics.GenericsTest.testWildCardonShadowClass(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,adaptTypeParameter,391,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,createEnclosingHierarchy,324,KILLED,spoon.test.generics.GenericsTest.testRecursiveTypeAdapting(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,createEnclosingHierarchy,330,KILLED,spoon.test.reference.TypeReferenceTest.testSubTypeAnonymous(spoon.test.reference.TypeReferenceTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,getActualTypeArguments,519,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,getEnclosingType,346,KILLED,spoon.test.generics.GenericsTest.testRecursiveTypeAdapting(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,getEnclosingType,365,KILLED,spoon.test.generics.GenericsTest.testMethodTypingContext(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,getTypeReferences,334,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,getValue,530,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,getVisitedSet,414,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,false,isOverriding,267,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,true,isOverriding,267,KILLED,spoon.test.method_overriding.MethodOverriddingTest.testMethodOverride(spoon.test.method_overriding.MethodOverriddingTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,false,isSameSignature,624,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,true,isSameSignature,624,KILLED,spoon.test.reference.TypeReferenceTest.testGetAllExecutablesForInterfaces(spoon.test.reference.TypeReferenceTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,false,isSameSignature,308,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,true,isSameSignature,308,KILLED,spoon.test.reference.TypeReferenceTest.testGetAllExecutablesForInterfaces(spoon.test.reference.TypeReferenceTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,false,isSubSignature,296,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,true,isSubSignature,296,KILLED,spoon.test.generics.GenericsTest.testCannotAdaptTypeOfNonTypeScope(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,false,isSubTypeArg,588,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeReferences(spoon.test.ctType.CtTypeTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,true,isSubTypeArg,588,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeReferences(spoon.test.ctType.CtTypeTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,false,isSubTypeByActualTypeArguments,560,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,true,isSubTypeByActualTypeArguments,560,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeReferences(spoon.test.ctType.CtTypeTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,false,isSubtypeOf,133,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,true,isSubtypeOf,133,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,resolveActualTypeArgumentsOf,158,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,resolveTypeParameter,480,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,resolveTypeParameters,466,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext,null,substituteBy,545,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,void,checkTemplateContracts,670,SURVIVED,none
Substitution.java,spoon.template.Substitution,null,createTypeFromTemplate,111,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
Substitution.java,spoon.template.Substitution,null,getFactory,708,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,null,getTemplateCtClass,643,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Substitution.java,spoon.template.Substitution,null,getTemplateCtClass,661,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Substitution.java,spoon.template.Substitution,void,insertAll,71,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
Substitution.java,spoon.template.Substitution,void,insertAllConstructors,332,SURVIVED,none
Substitution.java,spoon.template.Substitution,void,insertAllConstructors,351,SURVIVED,none
Substitution.java,spoon.template.Substitution,void,insertAllFields,248,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,void,insertAllMethods,195,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
Substitution.java,spoon.template.Substitution,void,insertAllMethods,211,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
Substitution.java,spoon.template.Substitution,void,insertAllNestedTypes,290,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,void,insertAllSuperInterfaces,134,SURVIVED,none
Substitution.java,spoon.template.Substitution,void,insertAllSuperInterfaces,151,SURVIVED,none
Substitution.java,spoon.template.Substitution,null,insertConstructor,435,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,null,insertConstructor,385,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,null,insertField,606,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,void,insertGeneratedField,268,SURVIVED,none
Substitution.java,spoon.template.Substitution,void,insertGeneratedNestedType,312,SURVIVED,none
Substitution.java,spoon.template.Substitution,null,insertMethod,410,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
Substitution.java,spoon.template.Substitution,void,redirectTypeReferences,618,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,null,substitute,529,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testSubstitutionByExpression(spoon.test.template.TemplateInvocationSubstitutionTest)
Substitution.java,spoon.template.Substitution,null,substitute,584,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,null,substituteFieldDefaultExpression,511,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,null,substituteMethodBody,464,NO_COVERAGE,none
Substitution.java,spoon.template.Substitution,null,substituteStatement,489,NO_COVERAGE,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,void,accept,68,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,addAnonymousExecutable,115,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,addConstructor,165,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,clone,259,KILLED,spoon.test.generics.GenericsTest.testTypeParameterDeclarer(spoon.test.generics.GenericsTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,getAllExecutables,292,KILLED,spoon.test.model.TypeTest.testGetAllExecutables(spoon.test.model.TypeTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,getAnonymousExecutables,73,KILLED,spoon.test.field.FieldTest.testAddFieldsAtTop(spoon.test.field.FieldTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,getConstructor,84,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,getConstructors,104,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredConstructor(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,getDeclaredExecutables,248,KILLED,spoon.test.model.TypeTest.testGetAllExecutables(spoon.test.model.TypeTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,insertAfter,206,SURVIVED,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,insertAfter,212,NO_COVERAGE,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,insertBefore,218,NO_COVERAGE,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,insertBefore,224,NO_COVERAGE,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,false,isAnonymous,192,KILLED,spoon.test.secondaryclasses.ClassesTest.testIsAnonymousMethodInCtClass(spoon.test.secondaryclasses.ClassesTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,true,isAnonymous,192,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,false,isSubtypeOf,201,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOf(spoon.test.ctType.CtTypeTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,true,isSubtypeOf,201,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtParameter<T> extends spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtVariable<T> {
    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtExecutable<?> getParent();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IS_VARARGS)
    boolean isVarArgs();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IS_VARARGS)
    <C extends spoon.reflect.declaration.CtParameter<T>> C setVarArgs(boolean varArgs);

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtParameterReference<T> getReference();

    @java.lang.Override
    spoon.reflect.declaration.CtParameter<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtVariable<T>> C setDefaultExpression(spoon.reflect.code.CtExpression<T> assignedExpression);
}](spoon.test.parent.ParentContractTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,newInstance,265,KILLED,spoon.test.compilation.CompilationTest.testNewInstanceFromExistingClass(spoon.test.compilation.CompilationTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,partiallyEvaluate,242,NO_COVERAGE,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,false,removeAnonymousExecutable,125,NO_COVERAGE,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,true,removeAnonymousExecutable,125,NO_COVERAGE,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,void,removeConstructor,171,NO_COVERAGE,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,setAnonymousExecutables,136,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtClass<T extends java.lang.Object> extends spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtType<T> {
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)
    java.util.List<spoon.reflect.declaration.CtAnonymousExecutable> getAnonymousExecutables();

    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    spoon.reflect.declaration.CtConstructor<T> getConstructor(spoon.reflect.reference.CtTypeReference<?>... parameterTypes);

    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    java.util.Set<spoon.reflect.declaration.CtConstructor<T>> getConstructors();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)
    <C extends spoon.reflect.declaration.CtClass<T>> C setAnonymousExecutables(java.util.List<spoon.reflect.declaration.CtAnonymousExecutable> e);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)
    <C extends spoon.reflect.declaration.CtClass<T>> C addAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)
    boolean removeAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    <C extends spoon.reflect.declaration.CtClass<T>> C setConstructors(java.util.Set<spoon.reflect.declaration.CtConstructor<T>> constructors);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    <C extends spoon.reflect.declaration.CtClass<T>> C addConstructor(spoon.reflect.declaration.CtConstructor<T> constructor);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    void removeConstructor(spoon.reflect.declaration.CtConstructor<T> constructor);

    boolean isAnonymous();

    @java.lang.Override
    spoon.reflect.declaration.CtClass<T> clone();

    T newInstance();
}](spoon.test.parent.ParentContractTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,setConstructors,150,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtClass<T extends java.lang.Object> extends spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtType<T> {
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)
    java.util.List<spoon.reflect.declaration.CtAnonymousExecutable> getAnonymousExecutables();

    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    spoon.reflect.declaration.CtConstructor<T> getConstructor(spoon.reflect.reference.CtTypeReference<?>... parameterTypes);

    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    java.util.Set<spoon.reflect.declaration.CtConstructor<T>> getConstructors();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)
    <C extends spoon.reflect.declaration.CtClass<T>> C setAnonymousExecutables(java.util.List<spoon.reflect.declaration.CtAnonymousExecutable> e);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)
    <C extends spoon.reflect.declaration.CtClass<T>> C addAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ANNONYMOUS_EXECUTABLE)
    boolean removeAnonymousExecutable(spoon.reflect.declaration.CtAnonymousExecutable e);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    <C extends spoon.reflect.declaration.CtClass<T>> C setConstructors(java.util.Set<spoon.reflect.declaration.CtConstructor<T>> constructors);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    <C extends spoon.reflect.declaration.CtClass<T>> C addConstructor(spoon.reflect.declaration.CtConstructor<T> constructor);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONSTRUCTOR)
    void removeConstructor(spoon.reflect.declaration.CtConstructor<T> constructor);

    boolean isAnonymous();

    @java.lang.Override
    spoon.reflect.declaration.CtClass<T> clone();

    T newInstance();
}](spoon.test.parent.ParentContractTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,setLabel,236,SURVIVED,none
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl,null,setSuperclass,176,KILLED,spoon.test.imports.ImportTest.testFullQualifiedNameImport(spoon.test.imports.ImportTest)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,null,addModifier,87,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoCtPackage(spoon.testing.CtPackageAssertTest)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,false,equals,172,NO_COVERAGE,none
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,true,equals,172,NO_COVERAGE,none
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,null,getFactory,44,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,null,getModifiers,68,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,null,getVisibility,129,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,false,hasModifier,72,SURVIVED,none
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,true,hasModifier,72,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,0,hashCode,167,NO_COVERAGE,none
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,1,hashCode,167,NO_COVERAGE,none
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,false,isAbstract,154,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,true,isAbstract,154,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,false,isFinal,162,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,true,isFinal,162,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,false,isPrivate,150,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,true,isPrivate,150,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,false,isProtected,146,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,true,isProtected,146,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,false,isPublic,142,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,true,isPublic,142,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,false,isStatic,158,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,true,isStatic,158,KILLED,spoon.test.modifiers.TestModifiers.testGetModifiersHelpers(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,null,removeModifier,98,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,null,setExtendedModifiers,52,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoCtPackage(spoon.testing.CtPackageAssertTest)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,null,setModifiers,76,KILLED,spoon.test.reference.VariableAccessTest.testGetDeclarationAfterClone(spoon.test.reference.VariableAccessTest)
CtModifierHandler.java,spoon.support.reflect.CtModifierHandler,null,setVisibility,109,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,adjustEndPosition,254,KILLED,spoon.test.prettyprinter.LinesTest.testIdenticalPrettyPrinter(spoon.test.prettyprinter.LinesTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,adjustStartPosition,238,KILLED,spoon.test.prettyprinter.LinesTest.testIdenticalPrettyPrinter(spoon.test.prettyprinter.LinesTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,void,autoWriteTabs,175,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,decTab,193,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,getLineNumberMapping,283,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,incTab,185,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,false,isWhite,233,KILLED,spoon.test.prettyprinter.LinesTest.testIdenticalPrettyPrinter(spoon.test.prettyprinter.LinesTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,true,isWhite,233,SURVIVED,none
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,void,mapLine,270,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,void,putLineNumberMapping,279,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,false,removeLine,213,KILLED,spoon.test.prettyprinter.LinesTest.testIdenticalPrettyPrinter(spoon.test.prettyprinter.LinesTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,true,removeLine,213,TIMED_OUT,none
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,void,reset,89,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,setTabCount,208,NO_COVERAGE,none
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,"",toString,288,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,"A",toString,288,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,toString,288,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,void,undefineLine,264,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,write,115,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,write,102,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,void,writeSpace,309,KILLED,spoon.test.prettyprinter.PrinterTest.testListPrinter(spoon.test.prettyprinter.PrinterTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,writeTabs,157,NO_COVERAGE,none
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,void,writeTabsInternal,161,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
PrinterHelper.java,spoon.reflect.visitor.PrinterHelper,null,writeln,151,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,false,canRemoveExpression,233,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,true,canRemoveExpression,233,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,checkAllExecutables,177,SURVIVED,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,checkAllInvocations,198,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,checkExecutable,183,SURVIVED,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,checkInvocation,204,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,computeAllExecutables,138,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,computeAllInvocations,158,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,createExpressionCannotBeRemovedIssue,297,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,createParameterUsedIssue,287,NO_COVERAGE,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,detectIssues,130,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,null,getTargetExecutables,101,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,null,getTargetInvocations,111,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,false,isAllowedParameterUsage,216,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,true,isAllowedParameterUsage,216,SURVIVED,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,false,isRemovedParamOfRefactoredInvocation,274,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,true,isRemovedParamOfRefactoredInvocation,274,SURVIVED,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,refactor,119,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,refactorNoCheck,303,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,removeInvocationArgument,315,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,removeInvocationArguments,308,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,removeMethodParameters,319,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,void,removeParameter,326,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring,null,setTarget,87,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
Parameters.java,spoon.support.template.Parameters,null,NIL,302,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,null,getAllTemplateParameterFields,320,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,null,getAllTemplateParameterFields,338,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,0,getIndex,63,NON_VIABLE,none
Parameters.java,spoon.support.template.Parameters,1,getIndex,63,NON_VIABLE,none
Parameters.java,spoon.support.template.Parameters,null,getIndex,63,SURVIVED,none
Parameters.java,spoon.support.template.Parameters,null,getNames,196,KILLED,spoon.test.api.APITest.testSetterInNodes(spoon.test.api.APITest)
Parameters.java,spoon.support.template.Parameters,null,getNamesToValues,214,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Parameters.java,spoon.support.template.Parameters,null,getParameterField,115,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,"",getParameterName,174,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,"A",getParameterName,174,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,null,getParameterName,174,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,"",getParameterName,183,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Parameters.java,spoon.support.template.Parameters,"A",getParameterName,183,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Parameters.java,spoon.support.template.Parameters,null,getParameterName,183,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Parameters.java,spoon.support.template.Parameters,null,getTemplateParameterType,289,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testSubstitutionByExpression(spoon.test.template.TemplateInvocationSubstitutionTest)
Parameters.java,spoon.support.template.Parameters,null,getTemplateParametersAsMap,239,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Parameters.java,spoon.support.template.Parameters,null,getValue,74,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,null,getValue,94,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Parameters.java,spoon.support.template.Parameters,false,isParameterSource,282,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,true,isParameterSource,282,NO_COVERAGE,none
Parameters.java,spoon.support.template.Parameters,false,isParameterSource,254,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Parameters.java,spoon.support.template.Parameters,true,isParameterSource,254,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
Parameters.java,spoon.support.template.Parameters,void,setValue,139,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,addGeneratedBy,378,SURVIVED,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,void,addGeneratedByComment,478,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,void,appendInnerTypedElements,457,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,void,applyGeneratedByComments,472,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,createContext,685,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getFirst,503,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,"",getGeneratedByComment,434,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,"A",getGeneratedByComment,434,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getGeneratedByComment,434,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getJavaDoc,491,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getParameterValueAsClass,566,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testInvocationSubstitutionByStatement(spoon.test.template.TemplateInvocationSubstitutionTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getParameterValueAsListOfClones,531,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testInvocationSubstitutionByStatement(spoon.test.template.TemplateInvocationSubstitutionTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getParameterValueAsNewList,538,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,"",getParameterValueAsString,599,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,"A",getParameterValueAsString,599,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getParameterValueAsString,599,KILLED,spoon.test.ctBodyHolder.CtBodyHolderTest.testForWithBlock(spoon.test.ctBodyHolder.CtBodyHolderTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getParameterValueAsTypeReference,643,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testInvocationSubstitutionByStatement(spoon.test.template.TemplateInvocationSubstitutionTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getParameterValueAtIndex,670,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,"",getShortSignatureForJavadoc,627,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,"A",getShortSignatureForJavadoc,627,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,getShortSignatureForJavadoc,627,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,void,scan,387,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor,null,substitute,406,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
ZipFolder.java,spoon.support.compiler.ZipFolder,void,addFile,168,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,void,addFolder,173,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,false,equals,158,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,true,equals,158,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,void,extract,178,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,null,getAllFiles,53,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
ZipFolder.java,spoon.support.compiler.ZipFolder,null,getAllJavaFiles,57,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,null,getFileSystemParent,148,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,null,getFiles,73,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
ZipFolder.java,spoon.support.compiler.ZipFolder,"",getName,107,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,"A",getName,107,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,null,getName,107,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,null,getParent,112,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,"",getPath,134,KILLED,spoon.test.reference.TypeReferenceTest.loadReferencedClassFromClasspath(spoon.test.reference.TypeReferenceTest)
ZipFolder.java,spoon.support.compiler.ZipFolder,"A",getPath,134,KILLED,spoon.test.reference.TypeReferenceTest.loadReferencedClassFromClasspath(spoon.test.reference.TypeReferenceTest)
ZipFolder.java,spoon.support.compiler.ZipFolder,null,getPath,134,KILLED,spoon.test.reference.TypeReferenceTest.loadReferencedClassFromClasspath(spoon.test.reference.TypeReferenceTest)
ZipFolder.java,spoon.support.compiler.ZipFolder,null,getSubFolders,120,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,0,hashCode,163,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,1,hashCode,163,NO_COVERAGE,none
ZipFolder.java,spoon.support.compiler.ZipFolder,"",toString,129,SURVIVED,none
ZipFolder.java,spoon.support.compiler.ZipFolder,"A",toString,129,SURVIVED,none
ZipFolder.java,spoon.support.compiler.ZipFolder,null,toString,129,SURVIVED,none
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,void,accept,65,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtTypeParameterReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,addActualTypeArgument,130,NO_COVERAGE,none
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,addBound,141,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,clone,273,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,findTypeParamDeclaration,244,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,getActualClass,106,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,getActualTypeArguments,118,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,getDeclaration,201,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,getTypeDeclaration,254,KILLED,spoon.test.generics.GenericsTest.testWildCardonShadowClass(spoon.test.generics.GenericsTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,getTypeErasure,259,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,false,isDefaultBoundingType,60,KILLED,spoon.test.reference.TypeReferenceTest.testClearBoundsForTypeParameterReference(spoon.test.reference.TypeReferenceTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,true,isDefaultBoundingType,60,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,false,isGenerics,278,KILLED,spoon.test.model.TypeTest.testTypeInfoIsInterface(spoon.test.model.TypeTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,true,isGenerics,278,KILLED,spoon.test.generics.GenericsTest.testisGeneric(spoon.test.generics.GenericsTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,false,isSubtypeOf,268,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtContinue](spoon.test.replace.ReplaceParametrizedTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,true,isSubtypeOf,268,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtLiteral<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    T getValue();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.code.CtLiteral<T>> C setValue(T value);

    @java.lang.Override
    spoon.reflect.code.CtLiteral<T> clone();
}](spoon.test.parent.ParentContractTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,false,removeBound,159,NO_COVERAGE,none
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,true,removeBound,159,NO_COVERAGE,none
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,setActualTypeArguments,124,SURVIVED,none
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,setBoundingType,177,KILLED,spoon.test.reference.TypeReferenceTest.testClearBoundsForTypeParameterReference(spoon.test.reference.TypeReferenceTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,setBounds,75,KILLED,spoon.test.reference.TypeReferenceTest.testClearBoundsForTypeParameterReference(spoon.test.reference.TypeReferenceTest)
CtTypeParameterReferenceImpl.java,spoon.support.reflect.reference.CtTypeParameterReferenceImpl,null,setUpper,93,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,false,forceWildcardGenerics,54,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,true,forceWildcardGenerics,54,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,null,getCurrentTypeContext,117,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,null,getCurrentTypeReference,107,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,false,ignoreEnclosingClass,51,KILLED,spoon.test.visibility.VisibilityTest.testFullyQualifiedNameOfTypeReferenceWithGeneric(spoon.test.visibility.VisibilityTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,true,ignoreEnclosingClass,51,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessWithoutAnyImport(spoon.test.fieldaccesses.FieldAccessTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,false,ignoreGenerics,42,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
PrintingContext.java,spoon.reflect.visitor.PrintingContext,true,ignoreGenerics,42,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,false,ignoreStaticAccess,48,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccess(spoon.test.imports.ImportTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,true,ignoreStaticAccess,48,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,false,isInCurrentScope,147,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,true,isInCurrentScope,147,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,null,modify,98,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,false,noTypeDecl,39,KILLED,spoon.test.annotation.AnnotationLoopTest.testAnnotationDeclaredInForInit(spoon.test.annotation.AnnotationLoopTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,true,noTypeDecl,39,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testBCUBug20140402(spoon.test.fieldaccesses.FieldAccessTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,void,popCurrentThis,128,KILLED,spoon.test.prettyprinter.PrinterTest.testRuleCanBeBuild(spoon.test.prettyprinter.PrinterTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,void,pushCurrentThis,125,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,false,skipArray,45,KILLED,spoon.test.arrays.ArraysTest.testInitializeWithNewArray(spoon.test.arrays.ArraysTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,true,skipArray,45,KILLED,spoon.test.varargs.VarArgsTest.testModelBuildingInitializer(spoon.test.varargs.VarArgsTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext,"",toString,140,NO_COVERAGE,none
PrintingContext.java,spoon.reflect.visitor.PrintingContext,"A",toString,140,NO_COVERAGE,none
PrintingContext.java,spoon.reflect.visitor.PrintingContext,null,toString,140,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,void,addFile,153,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,void,addFolder,158,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,false,equals,140,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,true,equals,140,KILLED,spoon.MavenLauncherTest.spoonMavenLauncherTest(spoon.MavenLauncherTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,getAllFiles,51,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,getAllJavaFiles,107,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,getFileSystemParent,130,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,getFiles,60,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,"",getName,70,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,"A",getName,70,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,getName,70,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,getParent,75,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,"",getPath,120,KILLED,spoon.LauncherTest.testInitEnvironment(spoon.LauncherTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,"A",getPath,120,KILLED,spoon.LauncherTest.testInitEnvironment(spoon.LauncherTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,getPath,120,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,getSubFolders,84,KILLED,spoon.test.api.FileSystemFolderTest.jarFileIsNotSubfolder(spoon.test.api.FileSystemFolderTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,0,hashCode,148,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,1,hashCode,148,NO_COVERAGE,none
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,"",toString,103,KILLED,spoon.MavenLauncherTest.spoonMavenLauncherTest(spoon.MavenLauncherTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,"A",toString,103,KILLED,spoon.MavenLauncherTest.spoonMavenLauncherTest(spoon.MavenLauncherTest)
FileSystemFolder.java,spoon.support.compiler.FileSystemFolder,null,toString,103,KILLED,spoon.LauncherTest.testInitEnvironment(spoon.LauncherTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,void,accept,48,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBlock](spoon.reflect.visitor.CtInheritanceScannerTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,addStatement,184,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,addStatement,179,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,clone,248,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtBlock<R> extends spoon.reflect.code.CtStatement , spoon.reflect.code.CtStatementList , spoon.template.TemplateParameter<R> {
    @java.lang.Override
    spoon.reflect.code.CtBlock<R> clone();
}](spoon.test.parent.SetParentTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,void,ensureModifiableStatementsList,198,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,getLastStatement,66,KILLED,spoon.test.ctElement.MetadataTest.testMetadata(spoon.test.ctElement.MetadataTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,getStatement,60,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,getStatements,53,KILLED,spoon.test.type.TypeTest.testShadowType(spoon.test.type.TypeTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,insertAfter,133,NO_COVERAGE,none
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,insertAfter,141,NO_COVERAGE,none
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,insertBefore,149,NO_COVERAGE,none
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,insertBefore,157,NO_COVERAGE,none
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,insertBegin,102,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,insertBegin,85,KILLED,spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertBeforeWithoutBrace(spoon.test.intercession.insertBefore.InsertMethodsTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,insertEnd,118,KILLED,spoon.test.processing.ProcessingTest.testInsertEnd(spoon.test.processing.ProcessingTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,insertEnd,125,KILLED,spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfterWithoutBrace(spoon.test.intercession.insertBefore.InsertMethodsTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,iterator,232,KILLED,spoon.test.model.BlockTest.testIterationStatements(spoon.test.model.BlockTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,void,removeStatement,205,KILLED,spoon.test.ctBlock.TestCtBlock.testRemoveStatement(spoon.test.ctBlock.TestCtBlock)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,null,setStatements,165,KILLED,spoon.test.factory.FactoryTest.testClone(spoon.test.factory.FactoryTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,false,shouldInsertAfterSuper,71,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
CtBlockImpl.java,spoon.support.reflect.code.CtBlockImpl,true,shouldInsertAfterSuper,71,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,void,accept,55,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtEnum](spoon.reflect.visitor.CtInheritanceScannerTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,addEnumValue,75,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,clone,149,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtEnum<T extends java.lang.Enum<?>> extends spoon.reflect.declaration.CtClass<T> {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.declaration.CtEnum<T>> C addEnumValue(spoon.reflect.declaration.CtEnumValue<?> enumValue);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    boolean removeEnumValue(spoon.reflect.declaration.CtEnumValue<?> enumValue);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    spoon.reflect.declaration.CtEnumValue<?> getEnumValue(java.lang.String name);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    java.util.List<spoon.reflect.declaration.CtEnumValue<?>> getEnumValues();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.declaration.CtEnum<T>> C setEnumValues(java.util.List<spoon.reflect.declaration.CtEnumValue<?>> enumValues);

    @java.lang.Override
    spoon.reflect.declaration.CtEnum<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtFormalTypeDeclarer> T setFormalCtTypeParameters(java.util.List<spoon.reflect.declaration.CtTypeParameter> formalTypeParameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.SetParentTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getAllMethods,60,KILLED,spoon.test.enums.EnumsTest.testGetAllMethods(spoon.test.enums.EnumsTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getEnumValue,102,SURVIVED,none
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getEnumValues,112,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getField,140,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.autoImportUsesFullyQualifiedNameWhenImportedNameAlreadyPresent(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getFields,132,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getFormalCtTypeParameters,233,KILLED,spoon.test.architecture.SpoonArchitectureEnforcerTest.testSrcMainJava(spoon.test.architecture.SpoonArchitectureEnforcerTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getMethod,195,KILLED,spoon.test.reference.ExecutableReferenceTest.testInvokeEnumMethod(spoon.test.reference.ExecutableReferenceTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getMethod,206,NO_COVERAGE,none
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,getSuperclass,155,KILLED,spoon.test.reference.TypeReferenceTest.testCorrectEnumParent(spoon.test.reference.TypeReferenceTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,false,isSubtypeOf,70,SURVIVED,none
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,true,isSubtypeOf,70,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModuleRequirement extends spoon.reflect.declaration.CtModuleDirective {
    enum RequiresModifier {
        STATIC, TRANSITIVE;}

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> getRequiresModifiers();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModuleRequirement> T setRequiresModifiers(java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> requiresModifiers);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    spoon.reflect.reference.CtModuleReference getModuleReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtModuleRequirement> T setModuleReference(spoon.reflect.reference.CtModuleReference moduleReference);

    @java.lang.Override
    spoon.reflect.declaration.CtModuleRequirement clone();
}](spoon.test.parent.ParentContractTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,false,removeEnumValue,93,NO_COVERAGE,none
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,true,removeEnumValue,93,NO_COVERAGE,none
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,setEnumValues,117,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtEnum<T extends java.lang.Enum<?>> extends spoon.reflect.declaration.CtClass<T> {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.declaration.CtEnum<T>> C addEnumValue(spoon.reflect.declaration.CtEnumValue<?> enumValue);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    boolean removeEnumValue(spoon.reflect.declaration.CtEnumValue<?> enumValue);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    spoon.reflect.declaration.CtEnumValue<?> getEnumValue(java.lang.String name);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    java.util.List<spoon.reflect.declaration.CtEnumValue<?>> getEnumValues();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.declaration.CtEnum<T>> C setEnumValues(java.util.List<spoon.reflect.declaration.CtEnumValue<?>> enumValues);

    @java.lang.Override
    spoon.reflect.declaration.CtEnum<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtFormalTypeDeclarer> T setFormalCtTypeParameters(java.util.List<spoon.reflect.declaration.CtTypeParameter> formalTypeParameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.ParentContractTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,setFormalCtTypeParameters,239,SURVIVED,none
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,setSuperclass,161,SURVIVED,none
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,valueOfMethod,178,KILLED,spoon.test.reference.ExecutableReferenceTest.testInvokeEnumMethod(spoon.test.reference.ExecutableReferenceTest)
CtEnumImpl.java,spoon.support.reflect.declaration.CtEnumImpl,null,valuesMethod,165,SURVIVED,none
StandardEnvironment.java,spoon.support.StandardEnvironment,void,debugMessage,111,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
StandardEnvironment.java,spoon.support.StandardEnvironment,null,getInputClassLoader,381,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,null,getProcessorProperties,177,SURVIVED,none
StandardEnvironment.java,spoon.support.StandardEnvironment,null,getSourceOutputDirectory,525,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,void,prefix,194,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
StandardEnvironment.java,spoon.support.StandardEnvironment,void,print,250,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
StandardEnvironment.java,spoon.support.StandardEnvironment,void,report,241,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
StandardEnvironment.java,spoon.support.StandardEnvironment,void,report,205,NO_COVERAGE,none
StandardEnvironment.java,spoon.support.StandardEnvironment,void,report,236,NO_COVERAGE,none
StandardEnvironment.java,spoon.support.StandardEnvironment,void,reportEnd,265,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
StandardEnvironment.java,spoon.support.StandardEnvironment,void,reportProgressMessage,289,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
StandardEnvironment.java,spoon.support.StandardEnvironment,void,setInputClassLoader,354,KILLED,spoon.test.compilation.CompilationTest.testURLClassLoaderWithOtherResourcesThanOnlyFiles(spoon.test.compilation.CompilationTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,void,setLevel,137,KILLED,spoon.test.logging.LogTest.testAllLevelsForLogs[5](spoon.test.logging.LogTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,void,setProcessorProperties,321,NO_COVERAGE,none
StandardEnvironment.java,spoon.support.StandardEnvironment,void,setSourceClasspath,414,KILLED,spoon.test.compilation.CompilationTest.testClassLoader(spoon.test.compilation.CompilationTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,void,setSourceOutputDirectory,507,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,null,toLevel,162,KILLED,spoon.test.logging.LogTest.testAllLevelsForLogs[5](spoon.test.logging.LogTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,empty,urlClasspath,394,KILLED,spoon.test.compilation.CompilationTest.testClassLoader(spoon.test.compilation.CompilationTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,null,urlClasspath,394,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
StandardEnvironment.java,spoon.support.StandardEnvironment,void,verifySourceClasspath,420,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionInvalidAPI(spoon.test.exceptions.ExceptionTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,false,equals,173,KILLED,spoon.test.position.PositionTest.getPositionOfImplicitBlock(spoon.test.position.PositionTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,true,equals,173,SURVIVED,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,0,getColumn,125,SURVIVED,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,1,getColumn,125,SURVIVED,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,0,getEndColumn,129,NO_COVERAGE,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,1,getEndColumn,129,NO_COVERAGE,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,0,getEndLine,147,KILLED,spoon.test.position.PositionTest.testPositionField(spoon.test.position.PositionTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,1,getEndLine,147,KILLED,spoon.test.position.PositionTest.testPositionField(spoon.test.position.PositionTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,null,getFile,133,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithNoImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,0,getLine,140,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,1,getLine,140,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,0,hashCode,182,SURVIVED,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,1,hashCode,182,SURVIVED,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,0,searchColumnNumber,66,SURVIVED,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,1,searchColumnNumber,66,SURVIVED,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,0,searchLineNumber,37,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,1,searchLineNumber,37,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,"",toString,164,MEMORY_ERROR,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,"A",toString,164,SURVIVED,none
SourcePositionImpl.java,spoon.support.reflect.cu.position.SourcePositionImpl,null,toString,164,MEMORY_ERROR,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,void,accept,46,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtStatementList](spoon.reflect.visitor.CtInheritanceScannerTest)
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,addStatement,75,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,addStatement,70,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,clone,199,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtStatementList extends java.lang.Iterable<spoon.reflect.code.CtStatement> , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.STATEMENT)
    java.util.List<spoon.reflect.code.CtStatement> getStatements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List<spoon.reflect.code.CtStatement> statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(int index, spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getStatement(int i);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getLastStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    void removeStatement(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtStatementList clone();
}](spoon.test.parent.SetParentTest)
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,void,ensureModifiableStatementsList,88,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,getLastStatement,172,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,getStatement,167,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,getSubstitution,203,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,insertAfter,135,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,insertAfter,143,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,insertBefore,151,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,insertBefore,159,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,insertBegin,108,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,insertBegin,95,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,insertEnd,120,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,insertEnd,127,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,iterator,194,KILLED,spoon.test.processing.ProcessingTest.testInsertEnd(spoon.test.processing.ProcessingTest)
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,void,removeStatement,177,NO_COVERAGE,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,setPosition,186,SURVIVED,none
CtStatementListImpl.java,spoon.support.reflect.code.CtStatementListImpl,null,setStatements,56,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtStatementList extends java.lang.Iterable<spoon.reflect.code.CtStatement> , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.STATEMENT)
    java.util.List<spoon.reflect.code.CtStatement> getStatements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List<spoon.reflect.code.CtStatement> statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(int index, spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getStatement(int i);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getLastStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    void removeStatement(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtStatementList clone();
}](spoon.test.parent.ParentContractTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,false,equals,117,KILLED,spoon.test.support.ResourceTest.testEqualsFileSystemFile(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,true,equals,117,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,null,getContent,51,KILLED,spoon.test.api.FileSystemFolderTest.testLauncherWithWrongPathAsInput(spoon.test.api.FileSystemFolderTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,null,getFileSystemParent,75,NO_COVERAGE,none
FileSystemFile.java,spoon.support.compiler.FileSystemFile,"",getName,61,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,"A",getName,61,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,null,getName,61,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,null,getParent,66,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,"",getPath,88,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,"A",getPath,88,KILLED,spoon.test.compilation.CompilationTest.testCompilationInEmptyDir(spoon.test.compilation.CompilationTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,null,getPath,88,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,0,hashCode,122,KILLED,spoon.test.support.ResourceTest.testVirtualFolder(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,1,hashCode,122,KILLED,spoon.test.support.ResourceTest.testVirtualFolder(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,false,isArchive,102,NO_COVERAGE,none
FileSystemFile.java,spoon.support.compiler.FileSystemFile,true,isArchive,102,NO_COVERAGE,none
FileSystemFile.java,spoon.support.compiler.FileSystemFile,false,isJava,83,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,true,isJava,83,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,"",toString,97,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,"A",toString,97,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
FileSystemFile.java,spoon.support.compiler.FileSystemFile,null,toString,97,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,void,accept,56,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtInvocation](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,addActualTypeArgument,196,SURVIVED,none
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,addArgument,65,KILLED,spoon.test.comparison.EqualTest.testEqualsEmptyException(spoon.test.comparison.EqualTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,addArgument,79,KILLED,spoon.test.comparison.EqualTest.testEqualsEmptyException(spoon.test.comparison.EqualTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,clone,212,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtInvocation<T> extends spoon.reflect.code.CtAbstractInvocation<T> , spoon.reflect.code.CtStatement , spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> , spoon.reflect.reference.CtActualTypeContainer {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE)
    spoon.reflect.reference.CtTypeReference<T> getType();

    @java.lang.Override
    spoon.reflect.code.CtInvocation<T> clone();
}](spoon.test.parent.SetParentTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,getActualTypeArguments,183,KILLED,spoon.test.generics.GenericsTest.testModelBuildingTree(spoon.test.generics.GenericsTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,getExecutable,93,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,getType,166,KILLED,spoon.test.imports.ImportTest.testStaticImportForInvocationInNoClasspath(spoon.test.imports.ImportTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,insertAfter,102,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,insertAfter,114,NO_COVERAGE,none
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,insertBefore,108,KILLED,spoon.test.constructor.ConstructorTest.testTransformationOnConstructorWithInsertBefore(spoon.test.constructor.ConstructorTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,insertBefore,120,NO_COVERAGE,none
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,false,removeActualTypeArgument,204,NO_COVERAGE,none
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,true,removeActualTypeArgument,204,NO_COVERAGE,none
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,void,removeArgument,84,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,setActualTypeArguments,188,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtInvocation](spoon.test.replace.ReplaceParametrizedTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,setArguments,126,KILLED,spoon.test.invocations.InvocationTest.testTargetNullForStaticMethod(spoon.test.invocations.InvocationTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,setExecutable,143,KILLED,spoon.test.invocations.InvocationTest.testTargetNullForStaticMethod(spoon.test.invocations.InvocationTest)
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,setLabel,158,SURVIVED,none
CtInvocationImpl.java,spoon.support.reflect.code.CtInvocationImpl,null,setType,172,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtInvocation<T> extends spoon.reflect.code.CtAbstractInvocation<T> , spoon.reflect.code.CtStatement , spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> , spoon.reflect.reference.CtActualTypeContainer {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE)
    spoon.reflect.reference.CtTypeReference<T> getType();

    @java.lang.Override
    spoon.reflect.code.CtInvocation<T> clone();
}](spoon.test.parent.ParentContractTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,void,accept,54,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtConstructorCall](spoon.reflect.visitor.CtInheritanceScannerTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,addActualTypeArgument,178,KILLED,spoon.test.generics.GenericsTest.testGenericsInConstructorCall(spoon.test.generics.GenericsTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,addArgument,117,KILLED,spoon.test.executable.ExecutableRefTest.constructorTest(spoon.test.executable.ExecutableRefTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,addArgument,131,KILLED,spoon.test.executable.ExecutableRefTest.constructorTest(spoon.test.executable.ExecutableRefTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,clone,213,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtConstructorCall<T> extends spoon.reflect.code.CtAbstractInvocation<T> , spoon.reflect.code.CtStatement , spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> , spoon.reflect.reference.CtActualTypeContainer {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @java.lang.Override
    spoon.reflect.code.CtConstructorCall<T> clone();

    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE)
    spoon.reflect.reference.CtTypeReference<T> getType();
}](spoon.test.parent.SetParentTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,getActualTypeArguments,163,KILLED,spoon.test.visibility.VisibilityTest.testMethodeWithNonAccessibleTypeArgument(spoon.test.visibility.VisibilityTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,getExecutable,64,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,getType,196,KILLED,spoon.test.filters.CUFilterTest.testSingleExcludeWithFilter(spoon.test.filters.CUFilterTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,insertAfter,77,NO_COVERAGE,none
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,insertAfter,89,NO_COVERAGE,none
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,insertBefore,83,NO_COVERAGE,none
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,insertBefore,95,NO_COVERAGE,none
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,false,removeActualTypeArgument,187,NO_COVERAGE,none
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,true,removeActualTypeArgument,187,NO_COVERAGE,none
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,void,removeArgument,136,NO_COVERAGE,none
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,setActualTypeArguments,169,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewClass](spoon.test.replace.ReplaceParametrizedTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,setArguments,101,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtNewClass<T> extends spoon.reflect.code.CtConstructorCall<T> {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.NESTED_TYPE)
    spoon.reflect.declaration.CtClass<?> getAnonymousClass();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.NESTED_TYPE)
    <N extends spoon.reflect.code.CtNewClass> N setAnonymousClass(spoon.reflect.declaration.CtClass<?> anonymousClass);

    @java.lang.Override
    spoon.reflect.code.CtNewClass<T> clone();
}](spoon.test.parent.ParentContractTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,setExecutable,145,KILLED,spoon.test.executable.ExecutableRefTest.constructorTest(spoon.test.executable.ExecutableRefTest)
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,setLabel,155,SURVIVED,none
CtConstructorCallImpl.java,spoon.support.reflect.code.CtConstructorCallImpl,null,setType,202,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtNewClass<T> extends spoon.reflect.code.CtConstructorCall<T> {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.NESTED_TYPE)
    spoon.reflect.declaration.CtClass<?> getAnonymousClass();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.NESTED_TYPE)
    <N extends spoon.reflect.code.CtNewClass> N setAnonymousClass(spoon.reflect.declaration.CtClass<?> anonymousClass);

    @java.lang.Override
    spoon.reflect.code.CtNewClass<T> clone();
}](spoon.test.parent.ParentContractTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,null,getDeclaredMethods,362,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitAnnotation,163,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitAnnotationClass,143,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitArrayReference,334,MEMORY_ERROR,none
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitClass,42,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredConstructor(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitClassReference,343,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitConstructor,174,MEMORY_ERROR,none
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitEnum,107,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitEnumValue,232,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitField,217,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitInterface,81,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerInterface(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitInterfaceReference,353,MEMORY_ERROR,none
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitMethod,187,NO_COVERAGE,none
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitMethod,191,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitParameter,242,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitType,294,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitType,310,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitTypeParameter,260,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionVisitorImpl.java,spoon.support.visitor.java.JavaReflectionVisitorImpl,void,visitTypeParameterReference,273,KILLED,spoon.test.generics.GenericsTest.testGetExecDeclarationOfEnumSetOf(spoon.test.generics.GenericsTest)
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,void,accept,49,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCase](spoon.reflect.visitor.CtInheritanceScannerTest)
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,addStatement,99,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,addStatement,88,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,clone,207,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCase<S> extends spoon.reflect.code.CtStatement , spoon.reflect.code.CtStatementList {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<S> getCaseExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtCase<S>> T setCaseExpression(spoon.reflect.code.CtExpression<S> caseExpression);

    @java.lang.Override
    spoon.reflect.code.CtCase<S> clone();
}](spoon.test.parent.SetParentTest)
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,void,ensureModifiableStatementsList,92,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,getLastStatement,188,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,getStatement,183,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,insertAfter,167,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,insertAfter,175,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,insertBefore,151,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,insertBefore,159,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,insertBegin,111,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,insertBegin,123,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,insertEnd,136,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,insertEnd,143,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,iterator,202,KILLED,spoon.test.model.SwitchCaseTest.testIterationStatements(spoon.test.model.SwitchCaseTest)
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,void,removeStatement,193,NO_COVERAGE,none
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,setCaseExpression,64,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtCaseImpl.java,spoon.support.reflect.code.CtCaseImpl,null,setStatements,74,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,void,accept,66,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtLambda](spoon.reflect.visitor.CtInheritanceScannerTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,addParameter,166,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,addThrownType,211,SURVIVED,none
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,clone,265,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtLambda<T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.declaration.CtExecutable<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getExpression();

    @spoon.support.DerivedProperty
    <R> spoon.reflect.declaration.CtMethod<R> getOverriddenMethod();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtLambda<T>> C setExpression(spoon.reflect.code.CtExpression<T> expression);

    @java.lang.Override
    spoon.reflect.code.CtLambda<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.declaration.CtExecutable<T>> T1 setThrownTypes(java.util.Set<spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> thrownTypes);
}](spoon.test.parent.SetParentTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,getOverriddenMethod,111,KILLED,spoon.test.lambda.LambdaTest.testLambdaMethod(spoon.test.lambda.LambdaTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,getParameters,144,KILLED,spoon.test.reference.VariableAccessTest.testDeclaringTypeOfALambdaReferencedByParameterReference(spoon.test.reference.VariableAccessTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,getReference,241,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testExecutableReferenceFilter(spoon.test.refactoring.MethodsRefactoringTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,"",getSignature,234,NO_COVERAGE,none
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,"A",getSignature,234,NO_COVERAGE,none
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,getSignature,234,NO_COVERAGE,none
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,false,removeParameter,180,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,true,removeParameter,180,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,false,removeThrownType,225,NO_COVERAGE,none
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,true,removeThrownType,225,NO_COVERAGE,none
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,setBody,89,KILLED,spoon.test.reference.VariableAccessTest.testDeclaringTypeOfALambdaReferencedByParameterReference(spoon.test.reference.VariableAccessTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,setExpression,251,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,setParameters,149,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtLambda<T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.declaration.CtExecutable<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getExpression();

    @spoon.support.DerivedProperty
    <R> spoon.reflect.declaration.CtMethod<R> getOverriddenMethod();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtLambda<T>> C setExpression(spoon.reflect.code.CtExpression<T> expression);

    @java.lang.Override
    spoon.reflect.code.CtLambda<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.declaration.CtExecutable<T>> T1 setThrownTypes(java.util.Set<spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> thrownTypes);
}](spoon.test.parent.ParentContractTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,setSimpleName,76,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testExecutableReferenceFilter(spoon.test.refactoring.MethodsRefactoringTest)
CtLambdaImpl.java,spoon.support.reflect.code.CtLambdaImpl,null,setThrownTypes,194,SURVIVED,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onListAdd,77,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onListAdd,72,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onListDelete,89,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onListDelete,82,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onListDeleteAll,94,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onMapAdd,99,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onMapDeleteAll,104,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onObjectDelete,67,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onObjectUpdate,62,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onObjectUpdate,57,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onSetAdd,114,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onSetAdd,109,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onSetDelete,124,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onSetDelete,119,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onSetDelete,131,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,onSetDeleteAll,136,NO_COVERAGE,none
ActionBasedChangeListenerImpl.java,spoon.experimental.modelobs.ActionBasedChangeListenerImpl,void,propagateModelChange,43,NO_COVERAGE,none
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,null,addCommentToNear,217,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,void,build,103,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,void,buildComment,117,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,"",cleanComment,569,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,"A",cleanComment,569,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,null,cleanComment,569,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,"",cleanComment,561,NO_COVERAGE,none
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,"A",cleanComment,561,NO_COVERAGE,none
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,null,cleanComment,561,NO_COVERAGE,none
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,void,defineCommentContent,202,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,null,findCommentParent,526,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,null,getBody,544,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,"",getCommentContent,557,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,"A",getCommentContent,557,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,null,getCommentContent,557,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,void,insertCommentInAST,256,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder,null,parseTags,162,KILLED,spoon.test.pkg.PackageTest.testPackage(spoon.test.pkg.PackageTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,scan,275,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,scanCtStatement,435,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtAnonymousExecutable,442,NO_COVERAGE,none
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtBinaryOperator,320,KILLED,spoon.test.comment.CommentTest.testInLineComment(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtCatch,462,KILLED,spoon.test.query_function.VariableReferencesTest.testCatchVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtClass,328,KILLED,spoon.test.comment.CommentTest.testRemoveComment(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtConditional,311,KILLED,spoon.test.comment.CommentTest.testInLineComment(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtConstructor,306,NO_COVERAGE,none
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtField,366,KILLED,spoon.test.comment.CommentTest.testBlockComment(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtIf,413,KILLED,spoon.test.comment.CommentTest.testBlockComment(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtInterface,349,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testInterfacePrettyPrinting(spoon.test.interfaces.TestInterfaceWithoutSetup)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtMethod,301,KILLED,spoon.test.comment.CommentTest.testJavaDocEmptyCommentAndTag(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtModule,470,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtNewArray,447,KILLED,spoon.test.comment.CommentTest.testCommentsInComment1And2(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtParameter,457,KILLED,spoon.test.comment.CommentTest.testBlockComment(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtStatementList,291,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1,void,visitCtSwitch,371,KILLED,spoon.test.comment.CommentTest.testBlockComment(spoon.test.comment.CommentTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,adaptTypeForNewMethod,315,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,adaptTypeParameter,181,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,void,checkSameTypingContext,335,MEMORY_ERROR,none
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,getBound,300,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,getEnclosingGenericTypeAdapter,122,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,0,getIndexOfTypeParam,288,MEMORY_ERROR,none
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,1,getIndexOfTypeParam,288,TIMED_OUT,none
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,getScopeMethodDeclaringType,308,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,false,hasSameMethodFormalTypeParameters,223,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,true,hasSameMethodFormalTypeParameters,223,TIMED_OUT,none
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,false,isSameMethodFormalTypeParameter,239,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,true,isSameMethodFormalTypeParameter,239,MEMORY_ERROR,none
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,setClassTypingContext,129,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithReferencedGenerics(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,setConstructor,113,KILLED,spoon.test.ctType.CtTypeParameterTest.testTypeSame(spoon.test.ctType.CtTypeParameterTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,setExecutableReference,149,KILLED,spoon.test.generics.GenericsTest.testMethodTypingContext(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,setInvocation,135,KILLED,spoon.test.generics.GenericsTest.testMethodTypingContext(spoon.test.generics.GenericsTest)
MethodTypingContext.java,spoon.support.visitor.MethodTypingContext,null,setMethod,63,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,scanCtModifiable,88,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,scanCtNamedElement,52,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,scanCtReference,62,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,scanCtStatement,72,MEMORY_ERROR,none
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtArrayTypeReference,177,MEMORY_ERROR,none
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtAssignment,114,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtBinaryOperator,141,SURVIVED,none
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtBreak,187,SURVIVED,none
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtContinue,205,NO_COVERAGE,none
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtExecutableReference,223,SURVIVED,none
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtImport,271,SURVIVED,none
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtLiteral,253,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtMethod,233,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtOperatorAssignment,123,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtParameter,243,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
EqualsChecker.java,spoon.support.visitor.equals.EqualsChecker,void,visitCtUnaryOperator,159,SURVIVED,none
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,addParameter,117,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,addThrownType,162,KILLED,spoon.test.trycatch.TryCatchTest.testRethrowingExceptionsJava7(spoon.test.trycatch.TryCatchTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,clone,197,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,getDeclaringType,64,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,getReference,192,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,"",getSignature,185,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,"A",getSignature,185,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,getSignature,185,KILLED,spoon.test.method.MethodTest.testAddSameMethodsTwoTimes(spoon.test.method.MethodTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,getTopLevelType,68,KILLED,spoon.test.parent.TopLevelTypeTest.testTopLevelType(spoon.test.parent.TopLevelTypeTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,false,removeParameter,131,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,true,removeParameter,131,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,false,removeThrownType,176,NO_COVERAGE,none
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,true,removeThrownType,176,NO_COVERAGE,none
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,setBody,79,KILLED,spoon.test.type.TypeTest.testShadowType(spoon.test.type.TypeTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,setParameters,100,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtExecutableImpl.java,spoon.support.reflect.declaration.CtExecutableImpl,null,setThrownTypes,145,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtMethod<T> extends spoon.reflect.declaration.CtExecutable<T> , spoon.reflect.declaration.CtFormalTypeDeclarer , spoon.reflect.declaration.CtShadowable , spoon.reflect.declaration.CtTypeMember {
    boolean isOverriding(spoon.reflect.declaration.CtMethod<?> superMethod);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IS_DEFAULT)
    boolean isDefaultMethod();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IS_DEFAULT)
    <C extends spoon.reflect.declaration.CtMethod<T>> C setDefaultMethod(boolean defaultMethod);

    @java.lang.Override
    spoon.reflect.declaration.CtMethod<T> clone();

    java.util.Collection<spoon.reflect.declaration.CtMethod<?>> getTopDefinitions();

    spoon.reflect.declaration.CtMethod<?> copyMethod();
}](spoon.test.parent.ParentContractTest)
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,false,equals,111,NO_COVERAGE,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,true,equals,111,NO_COVERAGE,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,empty,getDeclaredAnnotations,83,SURVIVED,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,null,getDeclaredAnnotations,83,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,"",getName,57,MEMORY_ERROR,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,"A",getName,57,MEMORY_ERROR,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,null,getName,57,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,0,hashCode,128,NO_COVERAGE,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,1,hashCode,128,NO_COVERAGE,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,false,isVarArgs,97,MEMORY_ERROR,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,true,isVarArgs,97,MEMORY_ERROR,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,empty,parametersOf,162,MEMORY_ERROR,none
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,null,parametersOf,162,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,empty,parametersOf,142,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtParameter.java,spoon.support.visitor.java.reflect.RtParameter,null,parametersOf,142,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,null,getBinaryOperatorKind,261,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,null,getModifiers,319,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,null,getUnaryOperator,240,KILLED,spoon.test.arrays.ArraysTest.testCtNewArrayInnerCtNewArray(spoon.test.arrays.ArraysTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,false,hasAnnotationWithType,169,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,true,hasAnnotationWithType,169,KILLED,spoon.test.annotation.AnnotationLoopTest.testAnnotationDeclaredInForInit(spoon.test.annotation.AnnotationLoopTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,false,isLhsAssignment,229,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,true,isLhsAssignment,229,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testBUG20160112(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,false,isValidProblemBindingField,213,KILLED,spoon.test.targeted.TargetedExpressionTest.testStaticTargetsOfFieldAccessNoClasspath(spoon.test.targeted.TargetedExpressionTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,true,isValidProblemBindingField,213,KILLED,spoon.test.position.PositionTest.testPositionField(spoon.test.position.PositionTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,null,searchPackage,135,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,"",searchType,111,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,"A",searchType,111,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,null,searchType,111,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,null,searchTypeBinding,81,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderQuery.java,spoon.support.compiler.jdt.JDTTreeBuilderQuery,null,searchTypeBinding,56,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,void,addModule,165,SURVIVED,none
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,"",extractVariable,242,KILLED,spoon.MavenLauncherTest.multiModulesProjectTest(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,"A",extractVariable,242,KILLED,spoon.MavenLauncherTest.multiModulesProjectTest(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,null,extractVariable,242,KILLED,spoon.MavenLauncherTest.multiModulesProjectTest(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,null,getDependencies,255,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,"",getProperty,337,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,"A",getProperty,337,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,null,getProperty,337,KILLED,spoon.MavenLauncherTest.multiModulesProjectTest(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,null,getSourceDirectories,185,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,0,getSourceVersion,357,KILLED,spoon.MavenLauncherTest.multiModulesProjectTest(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,1,getSourceVersion,357,KILLED,spoon.MavenLauncherTest.multiModulesProjectTest(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,null,getTestDirectories,214,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,"",toString,392,NO_COVERAGE,none
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,"A",toString,392,NO_COVERAGE,none
MavenLauncher.java,spoon.MavenLauncher$InheritanceModel,null,toString,392,NO_COVERAGE,none
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,void,addDeclaredType,117,KILLED,spoon.test.compilationunit.TestCompilationUnit.testAddDeclaredTypeInCU(spoon.test.compilationunit.TestCompilationUnit)
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,0,beginOfLineIndex,208,NO_COVERAGE,none
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,1,beginOfLineIndex,208,NO_COVERAGE,none
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,null,getBinaryFiles,146,KILLED,spoon.test.compilationunit.GetBinaryFilesTest.testSingleBinary(spoon.test.compilationunit.GetBinaryFilesTest)
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,null,getDeclaredTypes,106,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithCreatedObjects(spoon.test.compilationunit.TestCompilationUnit)
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,null,getMainType,87,KILLED,spoon.test.api.APITest.testBasicAPIUsage(spoon.test.api.APITest)
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,"",getOriginalSourceCode,194,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,"A",getOriginalSourceCode,194,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,null,getOriginalSourceCode,194,KILLED,spoon.test.compilationunit.TestCompilationUnit.testIsoEncodingIsSupported(spoon.test.compilationunit.TestCompilationUnit)
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,0,getTabCount,225,NO_COVERAGE,none
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,1,getTabCount,225,NO_COVERAGE,none
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,null,getUnitType,56,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithCreatedObjects(spoon.test.compilationunit.TestCompilationUnit)
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,0,nextLineIndex,216,NO_COVERAGE,none
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,1,nextLineIndex,216,NO_COVERAGE,none
CompilationUnitImpl.java,spoon.support.reflect.cu.CompilationUnitImpl,void,setDeclaredTypes,111,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithCreatedObjects(spoon.test.compilationunit.TestCompilationUnit)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,void,accept,42,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtArrayTypeReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,null,clone,103,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,null,getActualClass,86,KILLED,spoon.test.annotation.AnnotationTest.testGetAnnotationOuter(spoon.test.annotation.AnnotationTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,null,getArrayType,56,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,null,getComponentType,47,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,0,getDimensionCount,95,KILLED,spoon.test.arrays.ArraysTest.testArrayReferences(spoon.test.arrays.ArraysTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,1,getDimensionCount,95,KILLED,spoon.test.arrays.ArraysTest.testArrayReferences(spoon.test.arrays.ArraysTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,null,getLastComponentTypeReference,60,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,"",getQualifiedName,80,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,"A",getQualifiedName,80,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,null,getQualifiedName,80,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,"",getSimpleName,75,KILLED,spoon.test.varargs.VarArgsTest.testModelBuildingInitializer(spoon.test.varargs.VarArgsTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,"A",getSimpleName,75,KILLED,spoon.test.varargs.VarArgsTest.testModelBuildingInitializer(spoon.test.varargs.VarArgsTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,null,getSimpleName,75,KILLED,spoon.test.factory.TypeFactoryTest.reflectionAPI(spoon.test.factory.TypeFactoryTest)
CtArrayTypeReferenceImpl.java,spoon.support.reflect.reference.CtArrayTypeReferenceImpl,null,setComponentType,65,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,void,addConsumedAnnotationType,75,KILLED,spoon.test.annotation.AnnotationTest.testAbstractAllAnnotationProcessorWithGlobalAnnotation(spoon.test.annotation.AnnotationTest)
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,void,addProcessedAnnotationType,83,KILLED,spoon.test.annotation.AnnotationTest.testAbstractAllAnnotationProcessorWithGlobalAnnotation(spoon.test.annotation.AnnotationTest)
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,void,clearConsumedAnnotationTypes,104,NO_COVERAGE,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,void,clearProcessedAnnotationTypes,97,NO_COVERAGE,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,null,getConsumedAnnotationTypes,115,NO_COVERAGE,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,null,getProcessedAnnotationTypes,119,NO_COVERAGE,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,false,isToBeProcessed,132,KILLED,spoon.test.annotation.AnnotationTest.testAbstractAllAnnotationProcessorWithGlobalAnnotation(spoon.test.annotation.AnnotationTest)
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,true,isToBeProcessed,132,SURVIVED,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,void,process,145,KILLED,spoon.test.annotation.AnnotationTest.testAbstractAllAnnotationProcessorWithGlobalAnnotation(spoon.test.annotation.AnnotationTest)
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,void,removeConsumedAnnotationType,111,NO_COVERAGE,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,void,removeProcessedAnnotationType,90,NO_COVERAGE,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,false,shoudBeConsumed,166,SURVIVED,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,true,shoudBeConsumed,166,SURVIVED,none
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,false,shoudBeProcessed,170,KILLED,spoon.test.annotation.AnnotationTest.testAbstractAllAnnotationProcessorWithGlobalAnnotation(spoon.test.annotation.AnnotationTest)
AbstractAnnotationProcessor.java,spoon.processing.AbstractAnnotationProcessor,true,shoudBeProcessed,170,SURVIVED,none
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,null,createFolders,237,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,void,createJavaFile,121,KILLED,spoon.test.api.APITest.testOutputDestinationHandler(spoon.test.api.APITest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,void,createModuleFile,200,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,void,createPackageFile,181,SURVIVED,none
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,null,getElementPath,221,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,null,getElementPath,226,KILLED,spoon.test.pkg.PackageTest.testPrintPackageInfoWhenNothingInPackage(spoon.test.pkg.PackageTest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,null,getElementPath,231,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,null,getEnvironment,80,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,null,getOutputDirectory,92,KILLED,spoon.processing.ProcessingTest.testSpoonTagger(spoon.processing.ProcessingTest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,null,getTraversalStrategy,256,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,void,init,99,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,false,isToBeProcessed,162,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,true,isToBeProcessed,162,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,void,process,170,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JavaOutputProcessor.java,spoon.support.JavaOutputProcessor,void,setOutputDirectory,247,NO_COVERAGE,none
ModelUtils.java,spoon.testing.utils.ModelUtils,null,build,42,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,null,build,50,KILLED,spoon.test.factory.FactoryTest.testFactoryOverriding(spoon.test.factory.FactoryTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,null,build,86,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoDifferentCtPackage(spoon.testing.CtPackageAssertTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,null,build,64,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,null,buildClass,102,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,null,buildNoClasspath,74,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReferenceAsActualTypeArgument(spoon.test.generics.GenericsTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,void,canBeBuilt,107,SURVIVED,none
ModelUtils.java,spoon.testing.utils.ModelUtils,void,canBeBuilt,117,SURVIVED,none
ModelUtils.java,spoon.testing.utils.ModelUtils,void,canBeBuilt,112,SURVIVED,none
ModelUtils.java,spoon.testing.utils.ModelUtils,void,canBeBuilt,134,SURVIVED,none
ModelUtils.java,spoon.testing.utils.ModelUtils,null,createFactory,37,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent(spoon.testing.CtElementAssertTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,"",getOptimizedString,143,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,"A",getOptimizedString,143,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
ModelUtils.java,spoon.testing.utils.ModelUtils,null,getOptimizedString,143,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,void,expand,349,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,null,expandAll,319,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,null,getJContentPane,100,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,null,getJScrollPane,116,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,null,getJTree,129,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,null,getMenu,138,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,void,initialize,222,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,void,keyTyped,243,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,void,maybeShowPopup,260,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,void,mousePressed,276,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,void,mouseReleased,282,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,null,next,287,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,null,search,301,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree,void,setVisible,361,NO_COVERAGE,none
ListHandler.java,spoon.reflect.meta.impl.ListHandler,false,add,118,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,true,add,118,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,null,asCollection,54,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtContinue](spoon.test.replace.ReplaceParametrizedTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,null,asList,59,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,null,castValue,46,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationRoleHandlerTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,null,get,125,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,null,getContainerKind,41,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationRoleHandlerTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,null,iterator,140,KILLED,spoon.test.path.PathTest.testGetPathFromNonParent(spoon.test.path.PathTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,null,remove,111,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,false,remove,102,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,true,remove,102,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,null,set,129,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,0,size,136,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler,1,size,136,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,void,accept,59,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtFieldReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,clone,232,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,fromDeclaringType,144,KILLED,spoon.test.reference.CloneReferenceTest.testGetDeclarationOfFieldAfterClone(spoon.test.reference.CloneReferenceTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,getActualAnnotatedElement,79,NO_COVERAGE,none
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,getActualField,65,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,getDeclaration,140,KILLED,spoon.test.reference.CloneReferenceTest.testGetDeclarationOfFieldAfterClone(spoon.test.reference.CloneReferenceTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,getFieldDeclaration,156,KILLED,spoon.test.field.FieldTest.testFieldImplicitTarget(spoon.test.field.FieldTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,getModifiers,219,KILLED,spoon.test.initializers.InitializerTest.testModelBuildingInitializer(spoon.test.initializers.InitializerTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,"",getQualifiedName,177,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testSimpleStaticImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,"A",getQualifiedName,177,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testSimpleStaticImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,getQualifiedName,177,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testSimpleStaticImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,setDeclaringType,195,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,setFinal,205,KILLED,spoon.test.staticFieldAccess.StaticAccessTest.testProcessAndCompile(spoon.test.staticFieldAccess.StaticAccessTest)
CtFieldReferenceImpl.java,spoon.support.reflect.reference.CtFieldReferenceImpl,null,setStatic,212,KILLED,spoon.test.position.PositionTest.testPositionField(spoon.test.position.PositionTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,void,accept,116,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtJavaDoc](spoon.reflect.visitor.CtInheritanceScannerTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,addTag,69,NO_COVERAGE,none
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,addTag,59,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    java.util.List<spoon.reflect.code.CtJavaDocTag> getTags();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E setTags(java.util.List<spoon.reflect.code.CtJavaDocTag> tags);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(int index, spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(int index);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.support.DerivedProperty
    java.lang.String getShortDescription();

    @spoon.support.DerivedProperty
    java.lang.String getLongDescription();

    @java.lang.Override
    spoon.reflect.code.CtJavaDoc clone();
}](spoon.test.parent.ParentContractTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,clone,121,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    java.util.List<spoon.reflect.code.CtJavaDocTag> getTags();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E setTags(java.util.List<spoon.reflect.code.CtJavaDocTag> tags);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(int index, spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(int index);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.support.DerivedProperty
    java.lang.String getShortDescription();

    @spoon.support.DerivedProperty
    java.lang.String getLongDescription();

    @java.lang.Override
    spoon.reflect.code.CtJavaDoc clone();
}](spoon.test.parent.SetParentTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,"",getLongDescription,104,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,"A",getLongDescription,104,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,getLongDescription,104,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,"",getShortDescription,91,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,"A",getShortDescription,91,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,getShortDescription,91,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,getTags,41,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,removeTag,77,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,removeTag,84,NO_COVERAGE,none
CtJavaDocImpl.java,spoon.support.reflect.code.CtJavaDocImpl,null,setTags,46,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    java.util.List<spoon.reflect.code.CtJavaDocTag> getTags();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E setTags(java.util.List<spoon.reflect.code.CtJavaDocTag> tags);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(int index, spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(int index);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.support.DerivedProperty
    java.lang.String getShortDescription();

    @spoon.support.DerivedProperty
    java.lang.String getLongDescription();

    @java.lang.Override
    spoon.reflect.code.CtJavaDoc clone();
}](spoon.test.parent.ParentContractTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,null,clearLast,149,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,"",getSignature,42,KILLED,spoon.test.api.NoClasspathTest.testBug20141021(spoon.test.api.NoClasspathTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,"A",getSignature,42,KILLED,spoon.test.api.NoClasspathTest.testBug20141021(spoon.test.api.NoClasspathTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,null,getSignature,42,KILLED,spoon.test.api.NoClasspathTest.testBug20141021(spoon.test.api.NoClasspathTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,visitCtAnnotationMethod,125,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationInterfacePreserveMethods(spoon.test.annotation.AnnotationTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,visitCtArrayTypeReference,47,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,visitCtConstructor,109,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,visitCtExecutableReference,53,KILLED,spoon.test.api.NoClasspathTest.testBug20141021(spoon.test.api.NoClasspathTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,visitCtIntersectionTypeReference,100,NO_COVERAGE,none
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,visitCtMethod,136,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,visitCtTypeParameterReference,87,KILLED,spoon.test.generics.GenericsTest.testModelBuildingSimilarSignatureMethods(spoon.test.generics.GenericsTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,visitCtTypeReference,82,KILLED,spoon.test.factory.TypeFactoryTest.reflectionAPI(spoon.test.factory.TypeFactoryTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,null,write,154,KILLED,spoon.test.api.NoClasspathTest.testBug20141021(spoon.test.api.NoClasspathTest)
SignaturePrinter.java,spoon.support.visitor.SignaturePrinter,void,writeNameAndParameters,58,KILLED,spoon.test.api.NoClasspathTest.testBug20141021(spoon.test.api.NoClasspathTest)
ZipFile.java,spoon.support.compiler.ZipFile,false,equals,92,SURVIVED,none
ZipFile.java,spoon.support.compiler.ZipFile,true,equals,92,SURVIVED,none
ZipFile.java,spoon.support.compiler.ZipFile,null,getContent,42,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
ZipFile.java,spoon.support.compiler.ZipFile,null,getFileSystemParent,55,NO_COVERAGE,none
ZipFile.java,spoon.support.compiler.ZipFile,"",getPath,67,SURVIVED,none
ZipFile.java,spoon.support.compiler.ZipFile,"A",getPath,67,SURVIVED,none
ZipFile.java,spoon.support.compiler.ZipFile,null,getPath,67,SURVIVED,none
ZipFile.java,spoon.support.compiler.ZipFile,0,hashCode,97,SURVIVED,none
ZipFile.java,spoon.support.compiler.ZipFile,1,hashCode,97,SURVIVED,none
ZipFile.java,spoon.support.compiler.ZipFile,false,isJava,63,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
ZipFile.java,spoon.support.compiler.ZipFile,true,isJava,63,SURVIVED,none
ZipFile.java,spoon.support.compiler.ZipFile,"",toString,72,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
ZipFile.java,spoon.support.compiler.ZipFile,"A",toString,72,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
ZipFile.java,spoon.support.compiler.ZipFile,null,toString,72,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addAnnotation,51,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addArrayReference,91,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addClassReference,86,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addConstructor,56,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addEnumValue,71,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addField,66,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addFormalType,96,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addInterfaceReference,81,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addMethod,61,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addPackage,41,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addParameter,76,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addType,46,NO_COVERAGE,none
AbstractRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AbstractRuntimeBuilderContext,void,addTypeName,101,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList,false,containsAll,72,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList,true,containsAll,72,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList,false,equals,95,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList,true,equals,95,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList,null,get,90,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList,null,instance,34,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
EmptyClearableList.java,spoon.support.util.EmptyClearableList,null,iterator,47,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
EmptyClearableList.java,spoon.support.util.EmptyClearableList,null,listIterator,52,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList,null,readResolve,105,KILLED,spoon.test.serializable.SourcePositionTest.testSourcePosition(spoon.test.serializable.SourcePositionTest)
EmptyClearableList.java,spoon.support.util.EmptyClearableList,empty,toArray,77,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
EmptyClearableList.java,spoon.support.util.EmptyClearableList,null,toArray,77,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
EmptyClearableList.java,spoon.support.util.EmptyClearableList,empty,toArray,82,KILLED,spoon.test.executable.ExecutableTest.testGetReference(spoon.test.executable.ExecutableTest)
EmptyClearableList.java,spoon.support.util.EmptyClearableList,null,toArray,82,KILLED,spoon.test.executable.ExecutableTest.testGetReference(spoon.test.executable.ExecutableTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,false,_java8_isDefault,162,KILLED,spoon.test.interfaces.InterfaceTest.testDefaultMethodInConsumer(spoon.test.interfaces.InterfaceTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,true,_java8_isDefault,162,KILLED,spoon.test.lambda.LambdaTest.testLambdaMethod(spoon.test.lambda.LambdaTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,null,create,143,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,false,equals,116,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,true,equals,116,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,0,hashCode,139,NO_COVERAGE,none
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,1,hashCode,139,NO_COVERAGE,none
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,false,isLightEquals,201,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,true,isLightEquals,201,KILLED,spoon.test.generics.GenericsTest.testCannotAdaptTypeOfNonTypeScope(spoon.test.generics.GenericsTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,empty,methodsOf,176,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,null,methodsOf,176,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,empty,sameMethodsWithDifferentTypeOf,188,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
RtMethod.java,spoon.support.visitor.java.reflect.RtMethod,null,sameMethodsWithDifferentTypeOf,188,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler,false,add,101,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler,true,add,101,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler,null,asCollection,55,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler,null,asSet,60,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler,null,castValue,47,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler,false,contains,110,NO_COVERAGE,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler,true,contains,110,NO_COVERAGE,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler,null,getContainerKind,42,KILLED,spoon.test.path.PathTest.testGetPathFromNonParent(spoon.test.path.PathTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler,null,iterator,118,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler,false,remove,92,NO_COVERAGE,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler,true,remove,92,NO_COVERAGE,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler,0,size,114,SURVIVED,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler,1,size,114,SURVIVED,none
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,decTab,88,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,incTab,82,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,void,reset,94,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeCodeSnippet,64,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeComment,70,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeIdentifier,58,KILLED,spoon.test.prettyprinter.PrinterTest.testListPrinter(spoon.test.prettyprinter.PrinterTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeKeyword,52,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.printClassCreatedWithSpoon(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeLiteral,46,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeOperator,34,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeSeparator,40,KILLED,spoon.test.prettyprinter.PrinterTest.testListPrinter(spoon.test.prettyprinter.PrinterTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeSpace,99,KILLED,spoon.test.prettyprinter.PrinterTest.testListPrinter(spoon.test.prettyprinter.PrinterTest)
DefaultTokenWriter.java,spoon.reflect.visitor.DefaultTokenWriter,null,writeln,76,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,null,asList,92,NO_COVERAGE,none
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,null,asMap,102,NO_COVERAGE,none
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,null,asSet,97,NO_COVERAGE,none
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,null,castItemValue,75,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,null,castTarget,59,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,null,castValue,63,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,void,checkItemsClass,68,SURVIVED,none
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,void,setValue,82,SURVIVED,none
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,"",toString,107,SURVIVED,none
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,"A",toString,107,SURVIVED,none
AbstractRoleHandler.java,spoon.reflect.meta.impl.AbstractRoleHandler,null,toString,107,SURVIVED,none
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,void,apply,212,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,null,enter,325,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,void,exit,336,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,null,failOnClassNotFound,202,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,null,includingInterfaces,162,KILLED,spoon.test.trycatch.TryCatchTest.testTryCatchVariableGetType(spoon.test.trycatch.TryCatchTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,null,includingSelf,154,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,null,returnTypeReferences,172,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,void,sendResult,346,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,null,setListener,191,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,void,visitSuperClasses,261,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction,void,visitSuperInterfaces,294,KILLED,spoon.test.reference.TypeReferenceTest.testGetAllExecutablesForInterfaces(spoon.test.reference.TypeReferenceTest)
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,void,accept,46,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnnotationType](spoon.reflect.visitor.CtInheritanceScannerTest)
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,null,addMethod,111,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,null,clone,97,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAnnotationType<T extends java.lang.annotation.Annotation> extends spoon.reflect.declaration.CtType<T> {
    @spoon.support.DerivedProperty
    java.util.Set<spoon.reflect.declaration.CtAnnotationMethod<?>> getAnnotationMethods();

    @java.lang.Override
    <M, C extends spoon.reflect.declaration.CtType<T>> C addMethod(spoon.reflect.declaration.CtMethod<M> method);

    @java.lang.Override
    <C extends spoon.reflect.declaration.CtType<T>> C setMethods(java.util.Set<spoon.reflect.declaration.CtMethod<?>> methods);

    @java.lang.Override
    spoon.reflect.declaration.CtAnnotationType<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtFormalTypeDeclarer> T setFormalCtTypeParameters(java.util.List<spoon.reflect.declaration.CtTypeParameter> formalTypeParameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperInterfaces(java.util.Set<spoon.reflect.reference.CtTypeReference<?>> interfaces);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.SetParentTest)
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,null,getAnnotationMethods,102,NO_COVERAGE,none
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,null,getFormalCtTypeParameters,81,NO_COVERAGE,none
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,null,getSuperInterfaces,57,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,false,isSubtypeOf,92,NO_COVERAGE,none
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,true,isSubtypeOf,92,NO_COVERAGE,none
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,null,setFormalCtTypeParameters,87,SURVIVED,none
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,null,setSuperInterfaces,75,SURVIVED,none
CtAnnotationTypeImpl.java,spoon.support.reflect.declaration.CtAnnotationTypeImpl,null,setSuperclass,69,SURVIVED,none
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,false,addReference,72,KILLED,spoon.test.reference.TypeReferenceTest.testPackageInNoClasspath(spoon.test.reference.TypeReferenceTest)
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,true,addReference,72,KILLED,spoon.test.reference.TypeReferenceTest.testPackageInNoClasspath(spoon.test.reference.TypeReferenceTest)
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtAnnotationType,135,NO_COVERAGE,none
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtClass,158,KILLED,spoon.test.reference.TypeReferenceTest.testPackageInNoClasspath(spoon.test.reference.TypeReferenceTest)
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtEnum,141,NO_COVERAGE,none
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtExecutableReference,117,KILLED,spoon.test.reference.TypeReferenceTest.testAnonymousClassesHaveAnEmptyStringForItsNameInNoClasspath(spoon.test.reference.TypeReferenceTest)
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtFieldRead,77,KILLED,spoon.test.api.NoClasspathTest.testGetStaticDependency(spoon.test.api.NoClasspathTest)
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtFieldReference,100,SURVIVED,none
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtFieldWrite,89,SURVIVED,none
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtInterface,147,NO_COVERAGE,none
TypeReferenceScanner.java,spoon.support.visitor.TypeReferenceScanner,void,visitCtTypeReference,125,KILLED,spoon.test.reference.TypeReferenceTest.testPackageInNoClasspath(spoon.test.reference.TypeReferenceTest)
CtForImpl.java,spoon.support.reflect.code.CtForImpl,void,accept,50,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtFor](spoon.reflect.visitor.CtInheritanceScannerTest)
CtForImpl.java,spoon.support.reflect.code.CtForImpl,null,addForInit,75,KILLED,spoon.test.reference.VariableAccessTest.testReferenceToLocalVariableDeclaredInLoop(spoon.test.reference.VariableAccessTest)
CtForImpl.java,spoon.support.reflect.code.CtForImpl,null,addForUpdate,117,KILLED,spoon.test.control.ControlTest.testModelBuildingFor(spoon.test.control.ControlTest)
CtForImpl.java,spoon.support.reflect.code.CtForImpl,null,clone,154,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtFor extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtFor> T setExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    java.util.List<spoon.reflect.code.CtStatement> getForInit();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    <T extends spoon.reflect.code.CtFor> T addForInit(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    <T extends spoon.reflect.code.CtFor> T setForInit(java.util.List<spoon.reflect.code.CtStatement> forInit);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    boolean removeForInit(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    java.util.List<spoon.reflect.code.CtStatement> getForUpdate();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    <T extends spoon.reflect.code.CtFor> T addForUpdate(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    <T extends spoon.reflect.code.CtFor> T setForUpdate(java.util.List<spoon.reflect.code.CtStatement> forUpdate);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    boolean removeForUpdate(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtFor clone();
}](spoon.test.parent.SetParentTest)
CtForImpl.java,spoon.support.reflect.code.CtForImpl,false,removeForInit,103,NO_COVERAGE,none
CtForImpl.java,spoon.support.reflect.code.CtForImpl,true,removeForInit,103,NO_COVERAGE,none
CtForImpl.java,spoon.support.reflect.code.CtForImpl,false,removeForUpdate,145,NO_COVERAGE,none
CtForImpl.java,spoon.support.reflect.code.CtForImpl,true,removeForUpdate,145,NO_COVERAGE,none
CtForImpl.java,spoon.support.reflect.code.CtForImpl,null,setExpression,60,KILLED,spoon.test.control.ControlTest.testModelBuildingFor(spoon.test.control.ControlTest)
CtForImpl.java,spoon.support.reflect.code.CtForImpl,null,setForInit,89,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtFor extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtFor> T setExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    java.util.List<spoon.reflect.code.CtStatement> getForInit();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    <T extends spoon.reflect.code.CtFor> T addForInit(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    <T extends spoon.reflect.code.CtFor> T setForInit(java.util.List<spoon.reflect.code.CtStatement> forInit);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    boolean removeForInit(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    java.util.List<spoon.reflect.code.CtStatement> getForUpdate();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    <T extends spoon.reflect.code.CtFor> T addForUpdate(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    <T extends spoon.reflect.code.CtFor> T setForUpdate(java.util.List<spoon.reflect.code.CtStatement> forUpdate);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    boolean removeForUpdate(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtFor clone();
}](spoon.test.parent.ParentContractTest)
CtForImpl.java,spoon.support.reflect.code.CtForImpl,null,setForUpdate,131,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtFor extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtFor> T setExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    java.util.List<spoon.reflect.code.CtStatement> getForInit();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    <T extends spoon.reflect.code.CtFor> T addForInit(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    <T extends spoon.reflect.code.CtFor> T setForInit(java.util.List<spoon.reflect.code.CtStatement> forInit);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_INIT)
    boolean removeForInit(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    java.util.List<spoon.reflect.code.CtStatement> getForUpdate();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    <T extends spoon.reflect.code.CtFor> T addForUpdate(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    <T extends spoon.reflect.code.CtFor> T setForUpdate(java.util.List<spoon.reflect.code.CtStatement> forUpdate);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOR_UPDATE)
    boolean removeForUpdate(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtFor clone();
}](spoon.test.parent.ParentContractTest)
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,void,addProcessor,62,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,void,addProcessor,79,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,false,addProcessor,72,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,true,addProcessor,72,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,null,getProcessors,94,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,null,getVisitor,101,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,void,process,108,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,void,process,119,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,void,process,131,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,void,process,141,NO_COVERAGE,none
RuntimeProcessingManager.java,spoon.support.RuntimeProcessingManager,void,setFactory,150,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,false,isJavaIdentifier,50,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,true,isJavaIdentifier,50,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,false,isLegalJavaExecutableIdentifier,101,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,true,isLegalJavaExecutableIdentifier,101,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,false,isLegalJavaIdentifier,68,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,true,isLegalJavaIdentifier,68,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,false,isLegalJavaPackageIdentifier,81,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,true,isLegalJavaPackageIdentifier,81,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,null,valueOf,30,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,empty,values,30,NO_COVERAGE,none
JavaIdentifiers.java,spoon.reflect.visitor.JavaIdentifiers,null,values,30,NO_COVERAGE,none
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,false,add,78,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,true,add,78,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,false,equals,115,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,true,equals,115,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,null,get,61,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,null,remove,89,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,false,remove,101,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,true,remove,101,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,null,set,69,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,0,size,55,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler$1,1,size,55,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
RtHelper.java,spoon.support.util.RtHelper,void,addAllFields,59,KILLED,spoon.test.processing.ProcessingTest.testInitPropertiesWithWrongType(spoon.test.processing.ProcessingTest)
RtHelper.java,spoon.support.util.RtHelper,null,getAllExecutables,179,KILLED,spoon.test.methodreference.MethodReferenceTest.testNoClasspathSuperExecutable(spoon.test.methodreference.MethodReferenceTest)
RtHelper.java,spoon.support.util.RtHelper,empty,getAllFields,52,KILLED,spoon.test.processing.ProcessingTest.testInitPropertiesWithWrongType(spoon.test.processing.ProcessingTest)
RtHelper.java,spoon.support.util.RtHelper,null,getAllFields,52,KILLED,spoon.test.processing.ProcessingTest.testInitPropertiesWithWrongType(spoon.test.processing.ProcessingTest)
RtHelper.java,spoon.support.util.RtHelper,null,getAllFields,75,NO_COVERAGE,none
RtHelper.java,spoon.support.util.RtHelper,void,getAllIMethods,104,NO_COVERAGE,none
RtHelper.java,spoon.support.util.RtHelper,empty,getAllMethods,87,NO_COVERAGE,none
RtHelper.java,spoon.support.util.RtHelper,null,getAllMethods,87,NO_COVERAGE,none
RtHelper.java,spoon.support.util.RtHelper,null,getMethod,198,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
RtHelper.java,spoon.support.util.RtHelper,null,getModifiers,138,KILLED,spoon.test.imports.ImportTest.testFullQualifiedNameImport(spoon.test.imports.ImportTest)
RtHelper.java,spoon.support.util.RtHelper,null,invoke,119,KILLED,spoon.test.eval.EvalTest.testStringConcatenation(spoon.test.eval.EvalTest)
CtRole.java,spoon.reflect.path.CtRole,null,fromName,135,KILLED,spoon.test.role.TestCtRole.testGetCtRoleByName(spoon.test.role.TestCtRole)
CtRole.java,spoon.reflect.path.CtRole,"",getCamelCaseName,148,KILLED,spoon.test.role.TestCtRole.testGetCtRoleByName(spoon.test.role.TestCtRole)
CtRole.java,spoon.reflect.path.CtRole,"A",getCamelCaseName,148,KILLED,spoon.test.role.TestCtRole.testGetCtRoleByName(spoon.test.role.TestCtRole)
CtRole.java,spoon.reflect.path.CtRole,null,getCamelCaseName,148,KILLED,spoon.test.role.TestCtRole.testGetCtRoleByName(spoon.test.role.TestCtRole)
CtRole.java,spoon.reflect.path.CtRole,"",toString,165,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtRole.java,spoon.reflect.path.CtRole,"A",toString,165,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtRole.java,spoon.reflect.path.CtRole,null,toString,165,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtRole.java,spoon.reflect.path.CtRole,null,valueOf,26,SURVIVED,none
CtRole.java,spoon.reflect.path.CtRole,empty,values,26,KILLED,spoon.test.role.TestCtRole.testCtRoleSubRoleMatchesWithSuperRole(spoon.test.role.TestCtRole)
CtRole.java,spoon.reflect.path.CtRole,null,values,26,KILLED,spoon.test.role.TestCtRole.testCtRoleGetSubRolesNotNull(spoon.test.role.TestCtRole)
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,void,accept,49,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtAnnotationMethod](spoon.reflect.visitor.CtInheritanceScannerTest)
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,clone,117,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAnnotationMethod<T> extends spoon.reflect.declaration.CtMethod<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DEFAULT_EXPRESSION)
    spoon.reflect.code.CtExpression<T> getDefaultExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DEFAULT_EXPRESSION)
    <C extends spoon.reflect.declaration.CtAnnotationMethod<T>> C setDefaultExpression(spoon.reflect.code.CtExpression<T> assignedExpression);

    @java.lang.Override
    spoon.reflect.declaration.CtAnnotationMethod<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.code.CtBodyHolder> T1 setBody(spoon.reflect.code.CtStatement body);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.declaration.CtExecutable<T>> T1 setThrownTypes(java.util.Set<spoon.reflect.reference.CtTypeReference<? extends java.lang.Throwable>> thrownTypes);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T extends spoon.reflect.declaration.CtFormalTypeDeclarer> T setFormalCtTypeParameters(java.util.List<spoon.reflect.declaration.CtTypeParameter> formalTypeParameters);

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <T1 extends spoon.reflect.declaration.CtExecutable<T>> T1 setParameters(java.util.List<spoon.reflect.declaration.CtParameter<?>> parameters);
}](spoon.test.parent.SetParentTest)
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,getFormalCtTypeParameters,94,NO_COVERAGE,none
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,getParameters,106,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,getThrownTypes,82,NO_COVERAGE,none
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,setBody,76,SURVIVED,none
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,setDefaultExpression,59,KILLED,spoon.test.annotation.AnnotationTest.testDefaultValueInAnnotationsForAnnotationFields(spoon.test.annotation.AnnotationTest)
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,setFormalCtTypeParameters,100,SURVIVED,none
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,setParameters,112,SURVIVED,none
CtAnnotationMethodImpl.java,spoon.support.reflect.declaration.CtAnnotationMethodImpl,null,setThrownTypes,88,SURVIVED,none
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createAnonymous,59,NO_COVERAGE,none
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createParameter,69,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createParameterReference,87,KILLED,spoon.test.generics.GenericsTest.testTypeParameterReference(spoon.test.generics.GenericsTest)
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createReference,212,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createReference,97,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createReference,198,KILLED,spoon.test.methodreference.MethodReferenceTest.testNoClasspathSuperExecutable(spoon.test.methodreference.MethodReferenceTest)
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createReference,139,KILLED,spoon.test.reference.ExecutableReferenceTest.testCreateReferenceForAnonymousExecutable(spoon.test.reference.ExecutableReferenceTest)
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createReference,175,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createReference,157,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ExecutableFactory.java,spoon.reflect.factory.ExecutableFactory,null,createReferenceInternal,103,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,"",getOperatorText,68,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,"A",getOperatorText,68,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,null,getOperatorText,68,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,"",getOperatorText,42,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,"A",getOperatorText,42,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,null,getOperatorText,42,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,false,isPrefixOperator,32,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testIncrementationOnAVarIsAUnaryOperator(spoon.test.fieldaccesses.FieldAccessTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,true,isPrefixOperator,32,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,false,isSufixOperator,35,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
OperatorHelper.java,spoon.reflect.visitor.OperatorHelper,true,isSufixOperator,35,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testIncrementationOnAVarIsAUnaryOperator(spoon.test.fieldaccesses.FieldAccessTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,false,add,91,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,true,add,91,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,null,get,76,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,null,iterator,65,KILLED,spoon.test.path.PathTest.testGetPathFromNonParent(spoon.test.path.PathTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,null,remove,86,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,false,remove,96,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,true,remove,96,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,null,set,81,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,0,size,70,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
ListHandler.java,spoon.reflect.meta.impl.ListHandler$1,1,size,70,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationAdaptedRoleTest(spoon.test.reflect.meta.MetaModelTest)
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,void,accept,39,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,null,clone,54,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,null,getActualAnnotatedElement,49,NO_COVERAGE,none
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,null,getActualPackage,44,NO_COVERAGE,none
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,null,getDeclaration,34,SURVIVED,none
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,"",getQualifiedName,59,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,"A",getQualifiedName,59,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,null,getQualifiedName,59,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,false,isUnnamedPackage,64,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtPackageReferenceImpl.java,spoon.support.reflect.reference.CtPackageReferenceImpl,true,isUnnamedPackage,64,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,void,accept,44,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtNewArray](spoon.reflect.visitor.CtInheritanceScannerTest)
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,null,addDimensionExpression,73,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtNewArray<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DIMENSION)
    java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> getDimensionExpressions();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setDimensionExpressions(java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> dimensions);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    boolean removeDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    java.util.List<spoon.reflect.code.CtExpression<?>> getElements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setElements(java.util.List<spoon.reflect.code.CtExpression<?>> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addElement(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    boolean removeElement(spoon.reflect.code.CtExpression<?> expression);

    @java.lang.Override
    spoon.reflect.code.CtNewArray<T> clone();
}](spoon.test.parent.ParentContractTest)
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,null,addElement,110,KILLED,spoon.test.annotation.AnnotationTest.testInnerAnnotationsWithArray(spoon.test.annotation.AnnotationTest)
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,null,clone,133,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtNewArray<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DIMENSION)
    java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> getDimensionExpressions();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setDimensionExpressions(java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> dimensions);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    boolean removeDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    java.util.List<spoon.reflect.code.CtExpression<?>> getElements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setElements(java.util.List<spoon.reflect.code.CtExpression<?>> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addElement(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    boolean removeElement(spoon.reflect.code.CtExpression<?> expression);

    @java.lang.Override
    spoon.reflect.code.CtNewArray<T> clone();
}](spoon.test.parent.SetParentTest)
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,false,removeDimensionExpression,87,NO_COVERAGE,none
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,true,removeDimensionExpression,87,NO_COVERAGE,none
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,false,removeElement,124,NO_COVERAGE,none
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,true,removeElement,124,NO_COVERAGE,none
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,null,setDimensionExpressions,59,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtNewArray<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DIMENSION)
    java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> getDimensionExpressions();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setDimensionExpressions(java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> dimensions);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    boolean removeDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    java.util.List<spoon.reflect.code.CtExpression<?>> getElements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setElements(java.util.List<spoon.reflect.code.CtExpression<?>> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addElement(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    boolean removeElement(spoon.reflect.code.CtExpression<?> expression);

    @java.lang.Override
    spoon.reflect.code.CtNewArray<T> clone();
}](spoon.test.parent.ParentContractTest)
CtNewArrayImpl.java,spoon.support.reflect.code.CtNewArrayImpl,null,setElements,96,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtNewArray<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DIMENSION)
    java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> getDimensionExpressions();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setDimensionExpressions(java.util.List<spoon.reflect.code.CtExpression<java.lang.Integer>> dimensions);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DIMENSION)
    boolean removeDimensionExpression(spoon.reflect.code.CtExpression<java.lang.Integer> dimension);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    java.util.List<spoon.reflect.code.CtExpression<?>> getElements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C setElements(java.util.List<spoon.reflect.code.CtExpression<?>> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtNewArray<T>> C addElement(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    boolean removeElement(spoon.reflect.code.CtExpression<?> expression);

    @java.lang.Override
    spoon.reflect.code.CtNewArray<T> clone();
}](spoon.test.parent.ParentContractTest)
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,null,buildPosition,53,KILLED,spoon.test.position.PositionTest.testPositionField(spoon.test.position.PositionTest)
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,null,buildPositionCtElement,59,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,0,findNextNonWhitespace,229,KILLED,spoon.test.position.PositionTest.testPositionInterface(spoon.test.position.PositionTest)
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,1,findNextNonWhitespace,229,KILLED,spoon.test.position.PositionTest.testPositionInterface(spoon.test.position.PositionTest)
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,0,findNextWhitespace,243,NO_COVERAGE,none
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,1,findNextWhitespace,243,NO_COVERAGE,none
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,0,findPrevNonWhitespace,256,KILLED,spoon.test.position.PositionTest.testPositionGeneric(spoon.test.position.PositionTest)
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,1,findPrevNonWhitespace,256,KILLED,spoon.test.position.PositionTest.testPositionGeneric(spoon.test.position.PositionTest)
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,0,findPrevWhitespace,270,KILLED,spoon.test.position.PositionTest.testPositionGeneric(spoon.test.position.PositionTest)
PositionBuilder.java,spoon.support.compiler.jdt.PositionBuilder,1,findPrevWhitespace,270,KILLED,spoon.test.position.PositionTest.testPositionGeneric(spoon.test.position.PositionTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,null,clone,286,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,null,insertAfter,259,KILLED,spoon.test.ctCase.SwitchCaseTest.insertAfterStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,void,insertAfter,47,KILLED,spoon.test.ctCase.SwitchCaseTest.insertAfterStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,void,insertAfter,54,KILLED,spoon.test.ctCase.SwitchCaseTest.insertAfterStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,null,insertAfter,265,NO_COVERAGE,none
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,null,insertBefore,247,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,void,insertBefore,65,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,void,insertBefore,73,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,null,insertBefore,253,NO_COVERAGE,none
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl,null,setLabel,279,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,null,_replace,763,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,null,getParameterValue,727,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,null,putParameter,707,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,null,putParameters,718,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,null,replace,745,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,null,replace,740,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,null,substitute,776,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,"",substituteName,798,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,"A",substituteName,798,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$Context,null,substituteName,798,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayAccess(spoon.test.template.TemplateArrayAccessTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,false,addClassImport,46,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenShadowedByField(spoon.test.variable.AccessFullyQualifiedFieldTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,true,addClassImport,46,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenShadowedByField(spoon.test.variable.AccessFullyQualifiedFieldTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,false,addFieldImport,57,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNAndStaticImport(spoon.test.variable.AccessFullyQualifiedFieldTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,true,addFieldImport,57,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNAndStaticImport(spoon.test.variable.AccessFullyQualifiedFieldTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,false,addMethodImport,79,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,true,addMethodImport,79,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,false,isImportedInClassImports,108,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,true,isImportedInClassImports,108,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,false,shouldTypeBeImported,37,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
MinimalImportScanner.java,spoon.reflect.visitor.MinimalImportScanner,true,shouldTypeBeImported,37,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,create,97,NO_COVERAGE,none
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,createReference,65,NO_COVERAGE,none
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,createReference,82,KILLED,spoon.test.reference.TypeReferenceTest.testShortTypeReference(spoon.test.reference.TypeReferenceTest)
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,createReference,50,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,get,135,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,getAll,155,KILLED,spoon.test.api.APITest.testBasicAPIUsage(spoon.test.api.APITest)
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,getOrCreate,107,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,getRootPackage,162,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,getSubPackageList,166,NO_COVERAGE,none
PackageFactory.java,spoon.reflect.factory.PackageFactory,null,topLevel,72,KILLED,spoon.test.model.TypeTest.testGetUsedTypesForTypeInRootPackage(spoon.test.model.TypeTest)
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,void,accept,46,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtUnaryOperator](spoon.reflect.visitor.CtInheritanceScannerTest)
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,null,clone,114,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtUnaryOperator<T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getOperand();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <C extends spoon.reflect.code.CtUnaryOperator> C setOperand(spoon.reflect.code.CtExpression<T> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtUnaryOperator> C setKind(spoon.reflect.code.UnaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.UnaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtUnaryOperator<T> clone();
}](spoon.test.parent.SetParentTest)
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,null,insertAfter,66,KILLED,spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfterSwitchCase(spoon.test.intercession.insertBefore.InsertMethodsTest)
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,null,insertAfter,78,NO_COVERAGE,none
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,null,insertBefore,72,KILLED,spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertBeforeSwitchCase(spoon.test.intercession.insertBefore.InsertMethodsTest)
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,null,insertBefore,84,NO_COVERAGE,none
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,null,setKind,100,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,null,setLabel,107,SURVIVED,none
CtUnaryOperatorImpl.java,spoon.support.reflect.code.CtUnaryOperatorImpl,null,setOperand,90,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
VirtualFolder.java,spoon.support.compiler.VirtualFolder,void,addFile,34,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
VirtualFolder.java,spoon.support.compiler.VirtualFolder,void,addFolder,39,KILLED,spoon.test.support.ResourceTest.testVirtualFolder(spoon.test.support.ResourceTest)
VirtualFolder.java,spoon.support.compiler.VirtualFolder,null,getAllFiles,48,KILLED,spoon.test.support.ResourceTest.testVirtualFolder(spoon.test.support.ResourceTest)
VirtualFolder.java,spoon.support.compiler.VirtualFolder,null,getAllJavaFiles,61,KILLED,spoon.test.support.ResourceTest.testVirtualFolder(spoon.test.support.ResourceTest)
VirtualFolder.java,spoon.support.compiler.VirtualFolder,null,getFiles,74,KILLED,spoon.test.support.ResourceTest.testVirtualFolder(spoon.test.support.ResourceTest)
VirtualFolder.java,spoon.support.compiler.VirtualFolder,null,getSubFolders,89,KILLED,spoon.LauncherTest.testInitEnvironmentDefault(spoon.LauncherTest)
VirtualFolder.java,spoon.support.compiler.VirtualFolder,"",toString,127,NO_COVERAGE,none
VirtualFolder.java,spoon.support.compiler.VirtualFolder,"A",toString,127,NO_COVERAGE,none
VirtualFolder.java,spoon.support.compiler.VirtualFolder,null,toString,127,NO_COVERAGE,none
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,void,accept,53,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtTry](spoon.reflect.visitor.CtInheritanceScannerTest)
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,null,addCatcher,77,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,null,clone,137,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtTryWithResource extends spoon.reflect.code.CtTry {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    java.util.List<spoon.reflect.code.CtLocalVariable<?>> getResources();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    <T extends spoon.reflect.code.CtTryWithResource> T setResources(java.util.List<spoon.reflect.code.CtLocalVariable<?>> resources);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    <T extends spoon.reflect.code.CtTryWithResource> T addResource(spoon.reflect.code.CtLocalVariable<?> resource);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    boolean removeResource(spoon.reflect.code.CtLocalVariable<?> resource);

    @java.lang.Override
    spoon.reflect.code.CtTryWithResource clone();
}](spoon.test.parent.SetParentTest)
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,null,getSubstitution,146,NO_COVERAGE,none
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,false,removeCatcher,91,NO_COVERAGE,none
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,true,removeCatcher,91,NO_COVERAGE,none
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,null,setBody,120,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtTry extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtStatement , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CATCH)
    java.util.List<spoon.reflect.code.CtCatch> getCatchers();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    <T extends spoon.reflect.code.CtTry> T setCatchers(java.util.List<spoon.reflect.code.CtCatch> catchers);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    <T extends spoon.reflect.code.CtTry> T addCatcher(spoon.reflect.code.CtCatch catcher);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    boolean removeCatcher(spoon.reflect.code.CtCatch catcher);

    @java.lang.Override
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBody();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FINALIZER)
    spoon.reflect.code.CtBlock<?> getFinalizer();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FINALIZER)
    <T extends spoon.reflect.code.CtTry> T setFinalizer(spoon.reflect.code.CtBlock<?> finalizer);

    @java.lang.Override
    spoon.reflect.code.CtTry clone();
}](spoon.test.parent.ParentContractTest)
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,null,setCatchers,63,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtTry extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtStatement , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CATCH)
    java.util.List<spoon.reflect.code.CtCatch> getCatchers();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    <T extends spoon.reflect.code.CtTry> T setCatchers(java.util.List<spoon.reflect.code.CtCatch> catchers);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    <T extends spoon.reflect.code.CtTry> T addCatcher(spoon.reflect.code.CtCatch catcher);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    boolean removeCatcher(spoon.reflect.code.CtCatch catcher);

    @java.lang.Override
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBody();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FINALIZER)
    spoon.reflect.code.CtBlock<?> getFinalizer();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FINALIZER)
    <T extends spoon.reflect.code.CtTry> T setFinalizer(spoon.reflect.code.CtBlock<?> finalizer);

    @java.lang.Override
    spoon.reflect.code.CtTry clone();
}](spoon.test.parent.ParentContractTest)
CtTryImpl.java,spoon.support.reflect.code.CtTryImpl,null,setFinalizer,105,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtTry extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtStatement , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CATCH)
    java.util.List<spoon.reflect.code.CtCatch> getCatchers();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    <T extends spoon.reflect.code.CtTry> T setCatchers(java.util.List<spoon.reflect.code.CtCatch> catchers);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    <T extends spoon.reflect.code.CtTry> T addCatcher(spoon.reflect.code.CtCatch catcher);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CATCH)
    boolean removeCatcher(spoon.reflect.code.CtCatch catcher);

    @java.lang.Override
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBody();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FINALIZER)
    spoon.reflect.code.CtBlock<?> getFinalizer();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FINALIZER)
    <T extends spoon.reflect.code.CtTry> T setFinalizer(spoon.reflect.code.CtBlock<?> finalizer);

    @java.lang.Override
    spoon.reflect.code.CtTry clone();
}](spoon.test.parent.ParentContractTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,scanCtNamedElement,110,KILLED,spoon.processing.CtGenerationTest.testGenerateRoleHandler(spoon.processing.CtGenerationTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,scanCtReference,133,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testInvocationSubstitutionByStatement(spoon.test.template.TemplateInvocationSubstitutionTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,visitCtComment,90,SURVIVED,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,visitCtFieldRead,203,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,visitCtFieldWrite,208,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,visitCtForEach,177,NO_COVERAGE,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,visitCtInvocation,296,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testSubstitutionByExpression(spoon.test.template.TemplateInvocationSubstitutionTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,visitCtLiteral,97,SURVIVED,none
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$InheritanceSustitutionScanner,void,visitFieldAccess,213,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,false,add,81,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,true,add,81,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,false,contains,76,NO_COVERAGE,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,true,contains,76,NO_COVERAGE,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,null,iterator,66,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,false,remove,86,NO_COVERAGE,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,true,remove,86,NO_COVERAGE,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,0,size,71,SURVIVED,none
SetHandler.java,spoon.reflect.meta.impl.SetHandler$1,1,size,71,SURVIVED,none
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,scanCtExecutable,120,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,scanCtType,86,NO_COVERAGE,none
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,visitCtCatch,152,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInTryCatch(spoon.test.variable.AccessFullyQualifiedFieldTest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,visitCtFor,126,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInLoop(spoon.test.variable.AccessFullyQualifiedFieldTest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,visitCtForEach,134,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,visitCtLocalVariable,146,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInLoop(spoon.test.variable.AccessFullyQualifiedFieldTest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,visitCtMethod,140,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,visitCtStatementList,69,KILLED,spoon.test.variable.AccessFullyQualifiedFieldTest.testNoFQNWhenUsedInInnerClassAndShadowedByLocalVariable(spoon.test.variable.AccessFullyQualifiedFieldTest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder$1VariableScanner,void,visitCtTryWithResource,114,SURVIVED,none
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,void,accept,81,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtJavaDocTag](spoon.reflect.visitor.CtInheritanceScannerTest)
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,null,clone,86,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtJavaDocTag extends spoon.reflect.declaration.CtElement {
    java.lang.String JAVADOC_TAG_PREFIX = "@";

    enum TagType {
        AUTHOR, DEPRECATED, EXCEPTION, PARAM, RETURN, SEE, SERIAL, SERIAL_DATA, SERIAL_FIELD, SINCE, THROWS, VERSION, UNKNOWN;
        public boolean hasParam() {
            return ((this) == (spoon.reflect.code.CtJavaDocTag.TagType.PARAM)) || ((this) == (spoon.reflect.code.CtJavaDocTag.TagType.THROWS));
        }

        public static spoon.reflect.code.CtJavaDocTag.TagType tagFromName(java.lang.String tagName) {
            for (spoon.reflect.code.CtJavaDocTag.TagType t : spoon.reflect.code.CtJavaDocTag.TagType.values()) {
                if (t.name().toLowerCase().equals(tagName.toLowerCase())) {
                    return t;
                }
            }
            return spoon.reflect.code.CtJavaDocTag.TagType.UNKNOWN;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return (spoon.reflect.code.CtJavaDocTag.JAVADOC_TAG_PREFIX) + (name().toLowerCase());
        }
    }

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)
    spoon.reflect.code.CtJavaDocTag.TagType getType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)
    <E extends spoon.reflect.code.CtJavaDocTag> E setType(java.lang.String type);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.DOCUMENTATION_TYPE)
    <E extends spoon.reflect.code.CtJavaDocTag> E setType(spoon.reflect.code.CtJavaDocTag.TagType type);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_CONTENT)
    java.lang.String getContent();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_CONTENT)
    <E extends spoon.reflect.code.CtJavaDocTag> E setContent(java.lang.String content);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE)
    java.lang.String getParam();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.JAVADOC_TAG_VALUE)
    <E extends spoon.reflect.code.CtJavaDocTag> E setParam(java.lang.String param);

    @java.lang.Override
    spoon.reflect.code.CtJavaDocTag clone();
}](spoon.test.parent.SetParentTest)
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,null,setContent,62,KILLED,spoon.test.comment.CommentTest.testCommentsInResourcesWithWindowsEOL(spoon.test.comment.CommentTest)
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,null,setParam,74,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,null,setType,44,NO_COVERAGE,none
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,null,setType,50,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,"",toString,91,KILLED,spoon.test.javadoc.JavaDocTest.testJavaDocReprint(spoon.test.javadoc.JavaDocTest)
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,"A",toString,91,KILLED,spoon.test.javadoc.JavaDocTest.testJavaDocReprint(spoon.test.javadoc.JavaDocTest)
CtJavaDocTagImpl.java,spoon.support.reflect.code.CtJavaDocTagImpl,null,toString,91,KILLED,spoon.test.javadoc.JavaDocTest.testJavaDocReprint(spoon.test.javadoc.JavaDocTest)
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,false,hasParam,65,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,true,hasParam,65,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,null,tagFromName,74,KILLED,spoon.test.comment.CommentTest.testCommentsInResourcesWithWindowsEOL(spoon.test.comment.CommentTest)
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,"",toString,84,KILLED,spoon.test.javadoc.JavaDocTest.testJavaDocReprint(spoon.test.javadoc.JavaDocTest)
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,"A",toString,84,KILLED,spoon.test.javadoc.JavaDocTest.testJavaDocReprint(spoon.test.javadoc.JavaDocTest)
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,null,toString,84,KILLED,spoon.test.javadoc.JavaDocTest.testJavaDocReprint(spoon.test.javadoc.JavaDocTest)
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,null,valueOf,45,MEMORY_ERROR,none
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,empty,values,45,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtJavaDocTag.java,spoon.reflect.code.CtJavaDocTag$TagType,null,values,45,KILLED,spoon.test.comment.CommentTest.testCommentsInResourcesWithWindowsEOL(spoon.test.comment.CommentTest)
AbstractProcessor.java,spoon.processing.AbstractProcessor,void,addProcessedElementType,66,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
AbstractProcessor.java,spoon.processing.AbstractProcessor,void,clearProcessedElementType,73,SURVIVED,none
AbstractProcessor.java,spoon.processing.AbstractProcessor,null,getEnvironment,77,NO_COVERAGE,none
AbstractProcessor.java,spoon.processing.AbstractProcessor,null,getTraversalStrategy,113,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorInstantiated(spoon.testing.AbstractAssertTest)
AbstractProcessor.java,spoon.processing.AbstractProcessor,void,init,117,SURVIVED,none
AbstractProcessor.java,spoon.processing.AbstractProcessor,void,initProperties,128,SURVIVED,none
AbstractProcessor.java,spoon.processing.AbstractProcessor,void,interrupt,155,KILLED,spoon.processing.ProcessingTest.testInterruptAProcessor(spoon.processing.ProcessingTest)
AbstractProcessor.java,spoon.processing.AbstractProcessor,null,loadProperties,93,SURVIVED,none
AbstractProcessor.java,spoon.processing.AbstractProcessor,void,removeProcessedElementType,146,NO_COVERAGE,none
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,void,addClone,127,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,void,addClone,137,KILLED,spoon.reflect.ast.CloneTest.testCloneListener(spoon.reflect.ast.CloneTest)
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,null,clone,55,NO_COVERAGE,none
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,null,clone,66,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,null,clone,111,KILLED,spoon.test.annotation.AnnotationValuesTest.testValuesOnJava7Annotation(spoon.test.annotation.AnnotationValuesTest)
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,null,clone,96,KILLED,spoon.test.factory.FactoryTest.testCtModel(spoon.test.factory.FactoryTest)
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,null,clone,49,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,null,createRightSet,81,KILLED,spoon.test.factory.FactoryTest.testCtModel(spoon.test.factory.FactoryTest)
CloneHelper.java,spoon.support.visitor.equals.CloneHelper,void,tailor,144,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,void,addProcessor,63,KILLED,spoon.test.processing.ProcessingTest.testProcessorWithNoArgumentsInConstructor(spoon.test.processing.ProcessingTest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,void,addProcessor,78,KILLED,spoon.test.processing.ProcessingTest.testProcessorWithNoArgumentsInConstructor(spoon.test.processing.ProcessingTest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,false,addProcessor,71,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,true,addProcessor,71,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,null,getProcessors,93,KILLED,spoon.processing.ProcessingTest.testSpoonTagger(spoon.processing.ProcessingTest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,null,getVisitor,100,KILLED,spoon.processing.ProcessingTest.testSpoonTagger(spoon.processing.ProcessingTest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,void,process,110,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,void,process,129,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorInstantiated(spoon.testing.AbstractAssertTest)
QueueProcessingManager.java,spoon.support.QueueProcessingManager,void,setFactory,135,KILLED,spoon.test.processing.ProcessingTest.testProcessorWithNoArgumentsInConstructor(spoon.test.processing.ProcessingTest)
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,0,getColumnCount,51,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,1,getColumnCount,51,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,"",getColumnName,56,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,"A",getColumnName,56,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,null,getColumnName,56,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,0,getRowCount,60,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,1,getRowCount,60,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,null,getValueAt,64,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable$SpoonObjectTableModel,void,scanFields,91,NO_COVERAGE,none
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,void,build,114,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,void,compileAndReplaceSnippetsIn,52,NO_COVERAGE,none
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,null,compileExpression,107,KILLED,spoon.test.snippets.SnippetTest.testCompileSnippetSeveralTimes(spoon.test.snippets.SnippetTest)
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,null,compileStatement,68,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,null,compileStatement,73,KILLED,spoon.test.snippets.SnippetTest.testCompileStatementWithReturn(spoon.test.snippets.SnippetTest)
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,"",createWrapperContent,123,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,"A",createWrapperContent,123,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,null,createWrapperContent,123,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
SnippetCompilationHelper.java,spoon.support.compiler.SnippetCompilationHelper,null,internalCompileStatement,77,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
Timer.java,spoon.support.util.Timer,void,display,60,NO_COVERAGE,none
Timer.java,spoon.support.util.Timer,0L,getValue,101,NO_COVERAGE,none
Timer.java,spoon.support.util.Timer,1L,getValue,101,NO_COVERAGE,none
Timer.java,spoon.support.util.Timer,void,start,39,NO_COVERAGE,none
Timer.java,spoon.support.util.Timer,void,stop,85,NO_COVERAGE,none
Timer.java,spoon.support.util.Timer,void,stop,49,NO_COVERAGE,none
Timer.java,spoon.support.util.Timer,"",toString,109,NO_COVERAGE,none
Timer.java,spoon.support.util.Timer,"A",toString,109,NO_COVERAGE,none
Timer.java,spoon.support.util.Timer,null,toString,109,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,null,getAdded,46,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,null,getModified,66,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,null,getRemoved,56,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,false,hasAdded,76,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,true,hasAdded,76,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,false,hasModified,83,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,true,hasModified,83,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,false,hasRemoved,90,NO_COVERAGE,none
Changes.java,spoon.reflect.Changes,true,hasRemoved,90,NO_COVERAGE,none
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,createModuleRequirement,163,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,createPackageExport,167,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,createProvidedService,171,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,createReference,159,NO_COVERAGE,none
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,createUsedService,175,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,getAllModules,136,KILLED,spoon.test.serializable.SourcePositionTest.testSourcePosition(spoon.test.serializable.SourcePositionTest)
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,getModule,140,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,getOrCreate,144,KILLED,spoon.test.api.APITest.testOutputDestinationHandlerWithCUFactory(spoon.test.api.APITest)
ModuleFactory.java,spoon.reflect.factory.ModuleFactory,null,getUnnamedModule,132,KILLED,spoon.test.api.APITest.testOutputDestinationHandlerWithCUFactory(spoon.test.api.APITest)
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,void,accept,70,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,null,asJavaDoc,112,KILLED,spoon.test.javadoc.JavaDocTest.testJavaDocReprint(spoon.test.javadoc.JavaDocTest)
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,null,clone,107,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtJavaDoc extends spoon.reflect.code.CtComment {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    java.util.List<spoon.reflect.code.CtJavaDocTag> getTags();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E setTags(java.util.List<spoon.reflect.code.CtJavaDocTag> tags);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E addTag(int index, spoon.reflect.code.CtJavaDocTag tag);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(int index);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.COMMENT_TAG)
    <E extends spoon.reflect.code.CtJavaDoc> E removeTag(spoon.reflect.code.CtJavaDocTag tag);

    @spoon.support.DerivedProperty
    java.lang.String getShortDescription();

    @spoon.support.DerivedProperty
    java.lang.String getLongDescription();

    @java.lang.Override
    spoon.reflect.code.CtJavaDoc clone();
}](spoon.test.parent.SetParentTest)
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,false,equals,79,KILLED,spoon.test.comment.CommentTest.testRemoveComment(spoon.test.comment.CommentTest)
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,true,equals,79,SURVIVED,none
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,0,hashCode,99,NO_COVERAGE,none
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,1,hashCode,99,NO_COVERAGE,none
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,null,setCommentType,63,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtCommentImpl.java,spoon.support.reflect.code.CtCommentImpl,null,setContent,51,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,false,containsAll,64,NO_COVERAGE,none
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,true,containsAll,64,NO_COVERAGE,none
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,null,instance,31,KILLED,spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven(spoon.test.field.FieldTest)
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,null,iterator,44,KILLED,spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven(spoon.test.field.FieldTest)
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,null,readResolve,82,KILLED,spoon.test.serializable.SerializableTest.testSerializationModelStreamer(spoon.test.serializable.SerializableTest)
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,empty,toArray,69,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,null,toArray,69,KILLED,spoon.test.method.MethodTest.testAddSameMethodsTwoTimes(spoon.test.method.MethodTest)
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,empty,toArray,74,NO_COVERAGE,none
EmptyClearableSet.java,spoon.support.util.EmptyClearableSet,null,toArray,74,NO_COVERAGE,none
CtModelImpl.java,spoon.reflect.CtModelImpl,null,filterChildren,46,KILLED,spoon.LauncherTest.testLLauncherBuildModelReturnAModel(spoon.LauncherTest)
CtModelImpl.java,spoon.reflect.CtModelImpl,null,getAllModules,125,KILLED,spoon.processing.ProcessingTest.testSpoonTagger(spoon.processing.ProcessingTest)
CtModelImpl.java,spoon.reflect.CtModelImpl,null,getAllPackages,115,KILLED,spoon.LauncherTest.testLLauncherBuildModelReturnAModel(spoon.LauncherTest)
CtModelImpl.java,spoon.reflect.CtModelImpl,null,getAllTypes,105,KILLED,spoon.LauncherTest.testLLauncherBuildModelReturnAModel(spoon.LauncherTest)
CtModelImpl.java,spoon.reflect.CtModelImpl,null,getElements,138,KILLED,spoon.LauncherTest.testLLauncherBuildModelReturnAModel(spoon.LauncherTest)
CtModelImpl.java,spoon.reflect.CtModelImpl,null,getRootPackage,99,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent(spoon.testing.CtElementAssertTest)
CtModelImpl.java,spoon.reflect.CtModelImpl,null,map,56,KILLED,spoon.test.filters.FilterTest.testCtScannerListener(spoon.test.filters.FilterTest)
CtModelImpl.java,spoon.reflect.CtModelImpl,null,map,51,NO_COVERAGE,none
CtModelImpl.java,spoon.reflect.CtModelImpl,void,processWith,131,KILLED,spoon.test.factory.FactoryTest.testCtModel(spoon.test.factory.FactoryTest)
CtIntersectionTypeReferenceImpl.java,spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl,void,accept,39,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtIntersectionTypeReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtIntersectionTypeReferenceImpl.java,spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl,null,addBound,66,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
CtIntersectionTypeReferenceImpl.java,spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl,null,clone,99,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
CtIntersectionTypeReferenceImpl.java,spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl,null,getBounds,44,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
CtIntersectionTypeReferenceImpl.java,spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl,null,getTypeErasure,91,KILLED,spoon.test.ctType.CtTypeParameterTest.testTypeErasure(spoon.test.ctType.CtTypeParameterTest)
CtIntersectionTypeReferenceImpl.java,spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl,false,removeBound,82,NO_COVERAGE,none
CtIntersectionTypeReferenceImpl.java,spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl,true,removeBound,82,NO_COVERAGE,none
CtIntersectionTypeReferenceImpl.java,spoon.support.reflect.reference.CtIntersectionTypeReferenceImpl,null,setBounds,49,KILLED,spoon.test.type.TypeTest.testIntersectionTypeOnTopLevelType(spoon.test.type.TypeTest)
ConstructorFactory.java,spoon.reflect.factory.ConstructorFactory,null,create,102,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreate(spoon.test.factory.ConstructorFactoryTest)
ConstructorFactory.java,spoon.reflect.factory.ConstructorFactory,null,create,138,NO_COVERAGE,none
ConstructorFactory.java,spoon.reflect.factory.ConstructorFactory,null,create,61,NO_COVERAGE,none
ConstructorFactory.java,spoon.reflect.factory.ConstructorFactory,null,create,78,NO_COVERAGE,none
ConstructorFactory.java,spoon.reflect.factory.ConstructorFactory,null,createDefault,118,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
ConstructorFactory.java,spoon.reflect.factory.ConstructorFactory,null,createReference,154,KILLED,spoon.test.methodreference.MethodReferenceTest.testNoClasspathSuperExecutable(spoon.test.methodreference.MethodReferenceTest)
ConstructorFactory.java,spoon.reflect.factory.ConstructorFactory,null,createReference,147,NO_COVERAGE,none
ConstructorFactory.java,spoon.reflect.factory.ConstructorFactory,null,createReference,167,NO_COVERAGE,none
SpoonResourceHelper.java,spoon.compiler.SpoonResourceHelper,null,createFile,69,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
SpoonResourceHelper.java,spoon.compiler.SpoonResourceHelper,null,createFolder,90,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionNoFile(spoon.test.exceptions.ExceptionTest)
SpoonResourceHelper.java,spoon.compiler.SpoonResourceHelper,null,createResource,80,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionNoFile(spoon.test.exceptions.ExceptionTest)
SpoonResourceHelper.java,spoon.compiler.SpoonResourceHelper,false,isArchive,42,KILLED,spoon.test.jar.JarTest.testJar(spoon.test.jar.JarTest)
SpoonResourceHelper.java,spoon.compiler.SpoonResourceHelper,true,isArchive,42,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
SpoonResourceHelper.java,spoon.compiler.SpoonResourceHelper,false,isFile,49,KILLED,spoon.test.support.ResourceTest.testFileSystemFolder(spoon.test.support.ResourceTest)
SpoonResourceHelper.java,spoon.compiler.SpoonResourceHelper,true,isFile,49,KILLED,spoon.LauncherTest.testInitEnvironment(spoon.LauncherTest)
SpoonResourceHelper.java,spoon.compiler.SpoonResourceHelper,null,resources,58,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionNoFile(spoon.test.exceptions.ExceptionTest)
TypeRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeRuntimeBuilderContext,void,addAnnotation,49,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
TypeRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeRuntimeBuilderContext,void,addField,59,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredField(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
TypeRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeRuntimeBuilderContext,void,addFormalType,69,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
TypeRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeRuntimeBuilderContext,void,addInterfaceReference,64,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerInterface(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
TypeRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeRuntimeBuilderContext,void,addMethod,54,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
TypeRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeRuntimeBuilderContext,void,addPackage,39,NO_COVERAGE,none
TypeRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeRuntimeBuilderContext,void,addType,44,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
TypeRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeRuntimeBuilderContext,void,addTypeName,74,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
EarlyTerminatingScanner.java,spoon.reflect.visitor.EarlyTerminatingScanner,void,doScan,147,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
EarlyTerminatingScanner.java,spoon.reflect.visitor.EarlyTerminatingScanner,void,scan,122,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
EarlyTerminatingScanner.java,spoon.reflect.visitor.EarlyTerminatingScanner,void,scan,166,NO_COVERAGE,none
EarlyTerminatingScanner.java,spoon.reflect.visitor.EarlyTerminatingScanner,void,scan,84,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
EarlyTerminatingScanner.java,spoon.reflect.visitor.EarlyTerminatingScanner,void,scan,99,KILLED,spoon.test.type.TypeTest.testTypeAccessForDotClass(spoon.test.type.TypeTest)
EarlyTerminatingScanner.java,spoon.reflect.visitor.EarlyTerminatingScanner,void,scan,112,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
EarlyTerminatingScanner.java,spoon.reflect.visitor.EarlyTerminatingScanner,null,setListener,78,KILLED,spoon.test.filters.FilterTest.testCtScannerListener(spoon.test.filters.FilterTest)
EarlyTerminatingScanner.java,spoon.reflect.visitor.EarlyTerminatingScanner,void,terminate,47,TIMED_OUT,none
PrintingContext.java,spoon.reflect.visitor.PrintingContext$Writable,void,close,65,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
PrintingContext.java,spoon.reflect.visitor.PrintingContext$Writable,null,forceWildcardGenerics,89,SURVIVED,none
PrintingContext.java,spoon.reflect.visitor.PrintingContext$Writable,null,ignoreEnclosingClass,85,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
PrintingContext.java,spoon.reflect.visitor.PrintingContext$Writable,null,ignoreGenerics,73,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext$Writable,null,ignoreStaticAccess,81,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccess(spoon.test.imports.ImportTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext$Writable,null,noTypeDecl,69,KILLED,spoon.test.annotation.AnnotationLoopTest.testAnnotationDeclaredInForInit(spoon.test.annotation.AnnotationLoopTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext$Writable,void,setState,93,KILLED,spoon.test.imports.ImportTest.testImportStaticAndFieldAccess(spoon.test.imports.ImportTest)
PrintingContext.java,spoon.reflect.visitor.PrintingContext$Writable,null,skipArray,77,KILLED,spoon.test.arrays.ArraysTest.testInitializeWithNewArray(spoon.test.arrays.ArraysTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$4,void,visitCtAnnotationFieldAccess,261,NO_COVERAGE,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$4,void,visitCtArrayRead,241,NO_COVERAGE,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$4,void,visitCtFieldRead,245,NO_COVERAGE,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$4,void,visitCtLiteral,253,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$4,void,visitCtNewArray,257,NO_COVERAGE,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$4,void,visitCtParameterReference,249,NO_COVERAGE,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$4,void,visitCtThisAccess,265,NO_COVERAGE,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$4,void,visitCtVariableRead,237,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
JDTBuilderImpl.java,spoon.compiler.builder.JDTBuilderImpl,null,advancedOptions,50,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
JDTBuilderImpl.java,spoon.compiler.builder.JDTBuilderImpl,null,annotationProcessingOptions,43,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
JDTBuilderImpl.java,spoon.compiler.builder.JDTBuilderImpl,empty,build,64,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
JDTBuilderImpl.java,spoon.compiler.builder.JDTBuilderImpl,null,build,64,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
JDTBuilderImpl.java,spoon.compiler.builder.JDTBuilderImpl,void,checkSources,68,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
JDTBuilderImpl.java,spoon.compiler.builder.JDTBuilderImpl,null,classpathOptions,29,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
JDTBuilderImpl.java,spoon.compiler.builder.JDTBuilderImpl,null,complianceOptions,36,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
JDTBuilderImpl.java,spoon.compiler.builder.JDTBuilderImpl,null,sources,57,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
FieldFactory.java,spoon.reflect.factory.FieldFactory,null,create,57,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
FieldFactory.java,spoon.reflect.factory.FieldFactory,null,create,82,NO_COVERAGE,none
FieldFactory.java,spoon.reflect.factory.FieldFactory,null,create,99,KILLED,spoon.test.factory.FieldFactoryTest.testCreateFromSource(spoon.test.factory.FieldFactoryTest)
FieldFactory.java,spoon.reflect.factory.FieldFactory,null,createReference,145,NO_COVERAGE,none
FieldFactory.java,spoon.reflect.factory.FieldFactory,null,createReference,132,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
FieldFactory.java,spoon.reflect.factory.FieldFactory,null,createReference,110,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
FieldFactory.java,spoon.reflect.factory.FieldFactory,null,createReference,120,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
OutputType.java,spoon.OutputType,null,fromString,55,KILLED,spoon.test.OutputTypeTest.testOutputTypeLoading(spoon.test.OutputTypeTest)
OutputType.java,spoon.OutputType,"",toString,42,KILLED,spoon.test.OutputTypeTest.testOutputTypeLoading(spoon.test.OutputTypeTest)
OutputType.java,spoon.OutputType,"A",toString,42,KILLED,spoon.test.OutputTypeTest.testOutputTypeLoading(spoon.test.OutputTypeTest)
OutputType.java,spoon.OutputType,null,toString,42,KILLED,spoon.test.OutputTypeTest.testOutputTypeLoading(spoon.test.OutputTypeTest)
OutputType.java,spoon.OutputType,null,valueOf,24,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
OutputType.java,spoon.OutputType,empty,values,24,KILLED,spoon.test.OutputTypeTest.testOutputTypeLoading(spoon.test.OutputTypeTest)
OutputType.java,spoon.OutputType,null,values,24,KILLED,spoon.test.OutputTypeTest.testOutputTypeLoading(spoon.test.OutputTypeTest)
EqualsVisitor.java,spoon.support.visitor.equals.EqualsVisitor,void,biScan,77,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
EqualsVisitor.java,spoon.support.visitor.equals.EqualsVisitor,void,biScan,56,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredConstructor(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
EqualsVisitor.java,spoon.support.visitor.equals.EqualsVisitor,void,enter,44,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
EqualsVisitor.java,spoon.support.visitor.equals.EqualsVisitor,false,equals,33,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
EqualsVisitor.java,spoon.support.visitor.equals.EqualsVisitor,true,equals,33,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
EqualsVisitor.java,spoon.support.visitor.equals.EqualsVisitor,false,fail,104,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
EqualsVisitor.java,spoon.support.visitor.equals.EqualsVisitor,true,fail,104,KILLED,spoon.test.imports.ImportScannerTest.testTargetTypeNull(spoon.test.imports.ImportScannerTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep,void,accept,311,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep,false,isAcceptableType,367,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep,true,isAcceptableType,367,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep,false,isFailOnCCE,351,KILLED,spoon.test.filters.FilterTest.testInvalidQueryStep(spoon.test.filters.FilterTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep,true,isFailOnCCE,351,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep,void,onCallbackSet,388,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep,void,onClassCastException,409,KILLED,spoon.test.filters.FilterTest.testClassCastExceptionOnForEach(spoon.test.filters.FilterTest)
AnnotationFactory.java,spoon.reflect.factory.AnnotationFactory,null,annotate,148,KILLED,spoon.test.annotation.AnnotationTest.annotationAddValue(spoon.test.annotation.AnnotationTest)
AnnotationFactory.java,spoon.reflect.factory.AnnotationFactory,null,annotate,95,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
AnnotationFactory.java,spoon.reflect.factory.AnnotationFactory,null,annotate,161,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
AnnotationFactory.java,spoon.reflect.factory.AnnotationFactory,null,annotate,112,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
AnnotationFactory.java,spoon.reflect.factory.AnnotationFactory,null,create,70,KILLED,spoon.test.annotation.AnnotationTest.testCreateAnnotation(spoon.test.annotation.AnnotationTest)
AnnotationFactory.java,spoon.reflect.factory.AnnotationFactory,null,create,57,KILLED,spoon.test.annotation.AnnotationTest.testCreateAnnotation(spoon.test.annotation.AnnotationTest)
AnnotationFactory.java,spoon.reflect.factory.AnnotationFactory,null,getAnnotationType,77,NO_COVERAGE,none
CtPackageExportImpl.java,spoon.support.reflect.declaration.CtPackageExportImpl,void,accept,111,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtPackageExport](spoon.reflect.visitor.CtInheritanceScannerTest)
CtPackageExportImpl.java,spoon.support.reflect.declaration.CtPackageExportImpl,null,addTargetExport,97,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtPackageExport extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackageExport> T setOpenedPackage(boolean openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    boolean isOpenedPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    spoon.reflect.reference.CtPackageReference getPackageReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setPackageReference(spoon.reflect.reference.CtPackageReference packageReference);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    java.util.List<spoon.reflect.reference.CtModuleReference> getTargetExport();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setTargetExport(java.util.List<spoon.reflect.reference.CtModuleReference> targetExport);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T addTargetExport(spoon.reflect.reference.CtModuleReference targetExport);

    @java.lang.Override
    spoon.reflect.declaration.CtPackageExport clone();
}](spoon.test.parent.ParentContractTest)
CtPackageExportImpl.java,spoon.support.reflect.declaration.CtPackageExportImpl,null,clone,116,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtPackageExport extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackageExport> T setOpenedPackage(boolean openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    boolean isOpenedPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    spoon.reflect.reference.CtPackageReference getPackageReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setPackageReference(spoon.reflect.reference.CtPackageReference packageReference);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    java.util.List<spoon.reflect.reference.CtModuleReference> getTargetExport();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setTargetExport(java.util.List<spoon.reflect.reference.CtModuleReference> targetExport);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T addTargetExport(spoon.reflect.reference.CtModuleReference targetExport);

    @java.lang.Override
    spoon.reflect.declaration.CtPackageExport clone();
}](spoon.test.parent.SetParentTest)
CtPackageExportImpl.java,spoon.support.reflect.declaration.CtPackageExportImpl,null,getTargetExport,73,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtPackageExportImpl.java,spoon.support.reflect.declaration.CtPackageExportImpl,null,setOpenedPackage,46,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtPackageExportImpl.java,spoon.support.reflect.declaration.CtPackageExportImpl,null,setPackageReference,63,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtPackageExport extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackageExport> T setOpenedPackage(boolean openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    boolean isOpenedPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    spoon.reflect.reference.CtPackageReference getPackageReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setPackageReference(spoon.reflect.reference.CtPackageReference packageReference);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    java.util.List<spoon.reflect.reference.CtModuleReference> getTargetExport();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setTargetExport(java.util.List<spoon.reflect.reference.CtModuleReference> targetExport);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T addTargetExport(spoon.reflect.reference.CtModuleReference targetExport);

    @java.lang.Override
    spoon.reflect.declaration.CtPackageExport clone();
}](spoon.test.parent.ParentContractTest)
CtPackageExportImpl.java,spoon.support.reflect.declaration.CtPackageExportImpl,null,setTargetExport,78,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtPackageExport extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    <T extends spoon.reflect.declaration.CtPackageExport> T setOpenedPackage(boolean openedPackage);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPENED_PACKAGE)
    boolean isOpenedPackage();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    spoon.reflect.reference.CtPackageReference getPackageReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PACKAGE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setPackageReference(spoon.reflect.reference.CtPackageReference packageReference);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    java.util.List<spoon.reflect.reference.CtModuleReference> getTargetExport();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T setTargetExport(java.util.List<spoon.reflect.reference.CtModuleReference> targetExport);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtPackageExport> T addTargetExport(spoon.reflect.reference.CtModuleReference targetExport);

    @java.lang.Override
    spoon.reflect.declaration.CtPackageExport clone();
}](spoon.test.parent.ParentContractTest)
DefaultOutputDestinationHandler.java,spoon.support.DefaultOutputDestinationHandler,null,getDirectoryPath,100,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
DefaultOutputDestinationHandler.java,spoon.support.DefaultOutputDestinationHandler,"",getFileName,59,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
DefaultOutputDestinationHandler.java,spoon.support.DefaultOutputDestinationHandler,"A",getFileName,59,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
DefaultOutputDestinationHandler.java,spoon.support.DefaultOutputDestinationHandler,null,getFileName,59,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
DefaultOutputDestinationHandler.java,spoon.support.DefaultOutputDestinationHandler,null,getModulePath,86,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
DefaultOutputDestinationHandler.java,spoon.support.DefaultOutputDestinationHandler,null,getOutputPath,44,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
DefaultOutputDestinationHandler.java,spoon.support.DefaultOutputDestinationHandler,null,getPackagePath,74,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
CtAssignmentImpl.java,spoon.support.reflect.code.CtAssignmentImpl,void,accept,55,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtAssignment](spoon.reflect.visitor.CtInheritanceScannerTest)
CtAssignmentImpl.java,spoon.support.reflect.code.CtAssignmentImpl,null,addTypeCast,127,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtOperatorAssignment<T, A extends T> extends spoon.reflect.code.CtAssignment<T, A> {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtOperatorAssignment<T, A>> C setKind(spoon.reflect.code.BinaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.BinaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtOperatorAssignment<T, A> clone();
}](spoon.test.parent.ParentContractTest)
CtAssignmentImpl.java,spoon.support.reflect.code.CtAssignmentImpl,null,clone,146,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAssignment<T, A extends T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.code.CtRHSReceiver<A> , spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ASSIGNED)
    spoon.reflect.code.CtExpression<T> getAssigned();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ASSIGNED)
    <C extends spoon.reflect.code.CtAssignment<T, A>> C setAssigned(spoon.reflect.code.CtExpression<T> assigned);

    @java.lang.Override
    spoon.reflect.code.CtAssignment<T, A> clone();
}](spoon.test.parent.SetParentTest)
CtAssignmentImpl.java,spoon.support.reflect.code.CtAssignmentImpl,null,setAssigned,80,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
CtAssignmentImpl.java,spoon.support.reflect.code.CtAssignmentImpl,null,setAssignment,90,KILLED,spoon.test.variable.AccessTest.testStackedAssignments(spoon.test.variable.AccessTest)
CtAssignmentImpl.java,spoon.support.reflect.code.CtAssignmentImpl,null,setType,100,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtOperatorAssignment<T, A extends T> extends spoon.reflect.code.CtAssignment<T, A> {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtOperatorAssignment<T, A>> C setKind(spoon.reflect.code.BinaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.BinaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtOperatorAssignment<T, A> clone();
}](spoon.test.parent.ParentContractTest)
CtAssignmentImpl.java,spoon.support.reflect.code.CtAssignmentImpl,null,setTypeCasts,110,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtOperatorAssignment<T, A extends T> extends spoon.reflect.code.CtAssignment<T, A> {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtOperatorAssignment<T, A>> C setKind(spoon.reflect.code.BinaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.BinaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtOperatorAssignment<T, A> clone();
}](spoon.test.parent.ParentContractTest)
MapHandler.java,spoon.reflect.meta.impl.MapHandler,null,asCollection,56,NO_COVERAGE,none
MapHandler.java,spoon.reflect.meta.impl.MapHandler,null,asMap,62,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
MapHandler.java,spoon.reflect.meta.impl.MapHandler,null,castValue,47,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotation](spoon.test.replace.ReplaceParametrizedTest)
MapHandler.java,spoon.reflect.meta.impl.MapHandler,null,entrySet,97,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
MapHandler.java,spoon.reflect.meta.impl.MapHandler,null,get,86,NO_COVERAGE,none
MapHandler.java,spoon.reflect.meta.impl.MapHandler,null,getContainerKind,42,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
MapHandler.java,spoon.reflect.meta.impl.MapHandler,null,put,90,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotation](spoon.test.replace.ReplaceParametrizedTest)
CtSwitchImpl.java,spoon.support.reflect.code.CtSwitchImpl,void,accept,45,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSwitch](spoon.reflect.visitor.CtInheritanceScannerTest)
CtSwitchImpl.java,spoon.support.reflect.code.CtSwitchImpl,null,addCase,84,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtSwitchImpl.java,spoon.support.reflect.code.CtSwitchImpl,null,clone,107,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtSwitch<S> extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<S> getSelector();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtSwitch<S>> T setSelector(spoon.reflect.code.CtExpression<S> selector);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CASE)
    java.util.List<spoon.reflect.code.CtCase<? super S>> getCases();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    <T extends spoon.reflect.code.CtSwitch<S>> T setCases(java.util.List<spoon.reflect.code.CtCase<? super S>> cases);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    <T extends spoon.reflect.code.CtSwitch<S>> T addCase(spoon.reflect.code.CtCase<? super S> c);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    boolean removeCase(spoon.reflect.code.CtCase<? super S> c);

    @java.lang.Override
    spoon.reflect.code.CtSwitch<S> clone();
}](spoon.test.parent.SetParentTest)
CtSwitchImpl.java,spoon.support.reflect.code.CtSwitchImpl,false,removeCase,98,NO_COVERAGE,none
CtSwitchImpl.java,spoon.support.reflect.code.CtSwitchImpl,true,removeCase,98,NO_COVERAGE,none
CtSwitchImpl.java,spoon.support.reflect.code.CtSwitchImpl,null,setCases,60,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtSwitch<S> extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<S> getSelector();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtSwitch<S>> T setSelector(spoon.reflect.code.CtExpression<S> selector);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CASE)
    java.util.List<spoon.reflect.code.CtCase<? super S>> getCases();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    <T extends spoon.reflect.code.CtSwitch<S>> T setCases(java.util.List<spoon.reflect.code.CtCase<? super S>> cases);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    <T extends spoon.reflect.code.CtSwitch<S>> T addCase(spoon.reflect.code.CtCase<? super S> c);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CASE)
    boolean removeCase(spoon.reflect.code.CtCase<? super S> c);

    @java.lang.Override
    spoon.reflect.code.CtSwitch<S> clone();
}](spoon.test.parent.ParentContractTest)
CtSwitchImpl.java,spoon.support.reflect.code.CtSwitchImpl,null,setSelector,74,KILLED,spoon.test.model.SwitchCaseTest.testSwitchStatementOnAString(spoon.test.model.SwitchCaseTest)
JDTSnippetCompiler.java,spoon.support.compiler.jdt.JDTSnippetCompiler,false,build,47,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTSnippetCompiler.java,spoon.support.compiler.jdt.JDTSnippetCompiler,true,build,47,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTSnippetCompiler.java,spoon.support.compiler.jdt.JDTSnippetCompiler,false,build,52,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTSnippetCompiler.java,spoon.support.compiler.jdt.JDTSnippetCompiler,true,build,52,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTSnippetCompiler.java,spoon.support.compiler.jdt.JDTSnippetCompiler,false,buildSources,78,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTSnippetCompiler.java,spoon.support.compiler.jdt.JDTSnippetCompiler,true,buildSources,78,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTSnippetCompiler.java,spoon.support.compiler.jdt.JDTSnippetCompiler,void,report,83,KILLED,spoon.test.signature.SignatureTest.testUnboundFieldSignature(spoon.test.signature.SignatureTest)
ClasspathOptions.java,spoon.compiler.builder.ClasspathOptions,null,binaries,66,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
ClasspathOptions.java,spoon.compiler.builder.ClasspathOptions,null,binaries,59,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
ClasspathOptions.java,spoon.compiler.builder.ClasspathOptions,null,bootclasspath,43,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
ClasspathOptions.java,spoon.compiler.builder.ClasspathOptions,null,bootclasspath,52,NO_COVERAGE,none
ClasspathOptions.java,spoon.compiler.builder.ClasspathOptions,null,classpath,27,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
ClasspathOptions.java,spoon.compiler.builder.ClasspathOptions,null,classpath,36,KILLED,spoon.support.compiler.classpath.ComputeClasspathTest.testSourceClasspath(spoon.support.compiler.classpath.ComputeClasspathTest)
ClasspathOptions.java,spoon.compiler.builder.ClasspathOptions,null,encoding,77,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
LiteralHelper.java,spoon.reflect.visitor.LiteralHelper,void,appendCharLiteral,76,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
LiteralHelper.java,spoon.reflect.visitor.LiteralHelper,"",getLiteralToken,35,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
LiteralHelper.java,spoon.reflect.visitor.LiteralHelper,"A",getLiteralToken,35,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
LiteralHelper.java,spoon.reflect.visitor.LiteralHelper,null,getLiteralToken,35,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
LiteralHelper.java,spoon.reflect.visitor.LiteralHelper,"",getStringLiteral,122,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
LiteralHelper.java,spoon.reflect.visitor.LiteralHelper,"A",getStringLiteral,122,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
LiteralHelper.java,spoon.reflect.visitor.LiteralHelper,null,getStringLiteral,122,KILLED,spoon.support.compiler.jdt.ExtendedStringLiteralTest.testExtendedStringLiteral(spoon.support.compiler.jdt.ExtendedStringLiteralTest)
CtIfImpl.java,spoon.support.reflect.code.CtIfImpl,void,accept,46,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtIf](spoon.reflect.visitor.CtInheritanceScannerTest)
CtIfImpl.java,spoon.support.reflect.code.CtIfImpl,null,clone,99,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtIf extends spoon.reflect.code.CtStatement , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getCondition();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ELSE)
    <S extends spoon.reflect.code.CtStatement> S getElseStatement();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.THEN)
    <S extends spoon.reflect.code.CtStatement> S getThenStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <T extends spoon.reflect.code.CtIf> T setCondition(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ELSE)
    <T extends spoon.reflect.code.CtIf> T setElseStatement(spoon.reflect.code.CtStatement elseStatement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.THEN)
    <T extends spoon.reflect.code.CtIf> T setThenStatement(spoon.reflect.code.CtStatement thenStatement);

    @java.lang.Override
    spoon.reflect.code.CtIf clone();
}](spoon.test.parent.SetParentTest)
CtIfImpl.java,spoon.support.reflect.code.CtIfImpl,null,getSubstitution,108,NO_COVERAGE,none
CtIfImpl.java,spoon.support.reflect.code.CtIfImpl,null,setCondition,68,KILLED,spoon.test.reference.TypeReferenceTest.testEqualityTypeReference(spoon.test.reference.TypeReferenceTest)
CtIfImpl.java,spoon.support.reflect.code.CtIfImpl,null,setElseStatement,78,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
CtIfImpl.java,spoon.support.reflect.code.CtIfImpl,null,setThenStatement,89,KILLED,spoon.test.visitor.VisitorTest.testRecursiveDescent(spoon.test.visitor.VisitorTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertVisitor,null,insertNewBlock,168,NO_COVERAGE,none
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertVisitor,void,scanCtLoop,155,NO_COVERAGE,none
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertVisitor,void,visitCtBlock,102,KILLED,spoon.test.processing.ProcessingTest.testInsertEnd(spoon.test.processing.ProcessingTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertVisitor,void,visitCtCase,147,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertVisitor,void,visitCtIf,109,KILLED,spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfterWithoutBrace(spoon.test.intercession.insertBefore.InsertMethodsTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertVisitor,void,visitCtSwitch,134,KILLED,spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfterSwitchCase(spoon.test.intercession.insertBefore.InsertMethodsTest)
CtTypedNameElement.java,spoon.reflect.path.impl.CtTypedNameElement,null,getElements,46,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtTypedNameElement.java,spoon.reflect.path.impl.CtTypedNameElement,false,match,58,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtTypedNameElement.java,spoon.reflect.path.impl.CtTypedNameElement,true,match,58,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtTypedNameElement.java,spoon.reflect.path.impl.CtTypedNameElement,"",toString,41,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtTypedNameElement.java,spoon.reflect.path.impl.CtTypedNameElement,"A",toString,41,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtTypedNameElement.java,spoon.reflect.path.impl.CtTypedNameElement,null,toString,41,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
DeclarationSourcePositionImpl.java,spoon.support.reflect.cu.position.DeclarationSourcePositionImpl,0,getEndLine,87,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
DeclarationSourcePositionImpl.java,spoon.support.reflect.cu.position.DeclarationSourcePositionImpl,1,getEndLine,87,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
DeclarationSourcePositionImpl.java,spoon.support.reflect.cu.position.DeclarationSourcePositionImpl,0,getNameEnd,74,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
DeclarationSourcePositionImpl.java,spoon.support.reflect.cu.position.DeclarationSourcePositionImpl,1,getNameEnd,74,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
DeclarationSourcePositionImpl.java,spoon.support.reflect.cu.position.DeclarationSourcePositionImpl,0,getNameStart,69,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
DeclarationSourcePositionImpl.java,spoon.support.reflect.cu.position.DeclarationSourcePositionImpl,1,getNameStart,69,KILLED,spoon.test.position.PositionTest.testPositionAbstractMethod(spoon.test.position.PositionTest)
ModifierKind.java,spoon.reflect.declaration.ModifierKind,"",toString,81,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
ModifierKind.java,spoon.reflect.declaration.ModifierKind,"A",toString,81,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
ModifierKind.java,spoon.reflect.declaration.ModifierKind,null,toString,81,KILLED,spoon.test.enums.EnumsTest.testEnumWithoutField(spoon.test.enums.EnumsTest)
ModifierKind.java,spoon.reflect.declaration.ModifierKind,null,valueOf,27,KILLED,spoon.test.casts.CastTest.testCast1(spoon.test.casts.CastTest)
ModifierKind.java,spoon.reflect.declaration.ModifierKind,empty,values,27,KILLED,spoon.test.casts.CastTest.testCast1(spoon.test.casts.CastTest)
ModifierKind.java,spoon.reflect.declaration.ModifierKind,null,values,27,KILLED,spoon.test.casts.CastTest.testCast1(spoon.test.casts.CastTest)
ModuleFactory.java,spoon.reflect.factory.ModuleFactory$CtUnnamedModule,void,accept,105,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
ModuleFactory.java,spoon.reflect.factory.ModuleFactory$CtUnnamedModule,false,addModule,69,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
ModuleFactory.java,spoon.reflect.factory.ModuleFactory$CtUnnamedModule,true,addModule,69,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
ModuleFactory.java,spoon.reflect.factory.ModuleFactory$CtUnnamedModule,null,getAllModules,82,KILLED,spoon.processing.ProcessingTest.testSpoonTagger(spoon.processing.ProcessingTest)
ModuleFactory.java,spoon.reflect.factory.ModuleFactory$CtUnnamedModule,null,getModule,73,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
ModuleFactory.java,spoon.reflect.factory.ModuleFactory$CtUnnamedModule,null,setSimpleName,87,KILLED,spoon.test.processing.ProcessingTest.testProcessorWithNoArgumentsInConstructor(spoon.test.processing.ProcessingTest)
CtTryWithResourceImpl.java,spoon.support.reflect.code.CtTryWithResourceImpl,void,accept,40,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtTryWithResource](spoon.reflect.visitor.CtInheritanceScannerTest)
CtTryWithResourceImpl.java,spoon.support.reflect.code.CtTryWithResourceImpl,null,addResource,64,KILLED,spoon.test.trycatch.TryCatchTest.testTryWithOneResource(spoon.test.trycatch.TryCatchTest)
CtTryWithResourceImpl.java,spoon.support.reflect.code.CtTryWithResourceImpl,null,clone,87,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtTryWithResource extends spoon.reflect.code.CtTry {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    java.util.List<spoon.reflect.code.CtLocalVariable<?>> getResources();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    <T extends spoon.reflect.code.CtTryWithResource> T setResources(java.util.List<spoon.reflect.code.CtLocalVariable<?>> resources);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    <T extends spoon.reflect.code.CtTryWithResource> T addResource(spoon.reflect.code.CtLocalVariable<?> resource);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    boolean removeResource(spoon.reflect.code.CtLocalVariable<?> resource);

    @java.lang.Override
    spoon.reflect.code.CtTryWithResource clone();
}](spoon.test.parent.SetParentTest)
CtTryWithResourceImpl.java,spoon.support.reflect.code.CtTryWithResourceImpl,false,removeResource,78,NO_COVERAGE,none
CtTryWithResourceImpl.java,spoon.support.reflect.code.CtTryWithResourceImpl,true,removeResource,78,NO_COVERAGE,none
CtTryWithResourceImpl.java,spoon.support.reflect.code.CtTryWithResourceImpl,null,setResources,50,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtTryWithResource extends spoon.reflect.code.CtTry {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    java.util.List<spoon.reflect.code.CtLocalVariable<?>> getResources();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    <T extends spoon.reflect.code.CtTryWithResource> T setResources(java.util.List<spoon.reflect.code.CtLocalVariable<?>> resources);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    <T extends spoon.reflect.code.CtTryWithResource> T addResource(spoon.reflect.code.CtLocalVariable<?> resource);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TRY_RESOURCE)
    boolean removeResource(spoon.reflect.code.CtLocalVariable<?> resource);

    @java.lang.Override
    spoon.reflect.code.CtTryWithResource clone();
}](spoon.test.parent.ParentContractTest)
AbstractRenameRefactoring.java,spoon.refactoring.AbstractRenameRefactoring,void,detectIssues,55,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
AbstractRenameRefactoring.java,spoon.refactoring.AbstractRenameRefactoring,false,isJavaIdentifier,78,NO_COVERAGE,none
AbstractRenameRefactoring.java,spoon.refactoring.AbstractRenameRefactoring,true,isJavaIdentifier,78,NO_COVERAGE,none
AbstractRenameRefactoring.java,spoon.refactoring.AbstractRenameRefactoring,void,refactor,42,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRefactorWrongUsage(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
AbstractRenameRefactoring.java,spoon.refactoring.AbstractRenameRefactoring,null,setNewName,99,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRefactorWrongUsage(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
AbstractRenameRefactoring.java,spoon.refactoring.AbstractRenameRefactoring,null,setTarget,88,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameLocalVariableToSameName(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
ExecutableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext,void,addAnnotation,46,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationValueReflection(spoon.test.annotation.AnnotationTest)
ExecutableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext,void,addArrayReference,56,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerArrayReference(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
ExecutableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext,void,addClassReference,66,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
ExecutableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext,void,addFormalType,86,KILLED,spoon.test.method.MethodTest.testGetAllMethodsAdaptingType(spoon.test.method.MethodTest)
ExecutableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext,void,addParameter,51,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
ExecutableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.ExecutableRuntimeBuilderContext,void,addTypeName,76,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CompilationUnitFactory.java,spoon.reflect.factory.CompilationUnitFactory,null,create,58,NO_COVERAGE,none
CompilationUnitFactory.java,spoon.reflect.factory.CompilationUnitFactory,null,getOrCreate,141,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
CompilationUnitFactory.java,spoon.reflect.factory.CompilationUnitFactory,null,getOrCreate,120,KILLED,spoon.test.api.APITest.testOutputDestinationHandlerWithCUFactory(spoon.test.api.APITest)
CompilationUnitFactory.java,spoon.reflect.factory.CompilationUnitFactory,null,getOrCreate,63,KILLED,spoon.test.api.APITest.testOutputDestinationHandlerWithCUFactory(spoon.test.api.APITest)
CompilationUnitFactory.java,spoon.reflect.factory.CompilationUnitFactory,null,getOrCreate,88,KILLED,spoon.test.compilationunit.TestCompilationUnit.testNewlyCreatedCUWouldGetAPartialPosition(spoon.test.compilationunit.TestCompilationUnit)
CompilationUnitFactory.java,spoon.reflect.factory.CompilationUnitFactory,null,removeFromCache,163,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner,false,checkType,393,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner,true,checkType,393,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner,void,visitCtAnnotationType,442,KILLED,spoon.test.annotation.AnnotationTest.testGetAnnotationOuter(spoon.test.annotation.AnnotationTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner,void,visitCtClass,403,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassWithDollarAndNestedClass(spoon.test.factory.TypeFactoryTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner,void,visitCtEnum,429,KILLED,spoon.test.enums.EnumsTypeTest.testEnumsType(spoon.test.enums.EnumsTypeTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl$1NestedTypeScanner,void,visitCtInterface,416,KILLED,spoon.test.factory.TypeFactoryTest.testGetClassInAnInterface(spoon.test.factory.TypeFactoryTest)
MethodFactory.java,spoon.reflect.factory.MethodFactory,null,create,71,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
MethodFactory.java,spoon.reflect.factory.MethodFactory,null,create,118,KILLED,spoon.test.method.MethodTest.testAddSameMethodsTwoTimes(spoon.test.method.MethodTest)
MethodFactory.java,spoon.reflect.factory.MethodFactory,null,create,92,NO_COVERAGE,none
MethodFactory.java,spoon.reflect.factory.MethodFactory,null,createReference,146,KILLED,spoon.test.methodreference.MethodReferenceTest.testNoClasspathSuperExecutable(spoon.test.methodreference.MethodReferenceTest)
MethodFactory.java,spoon.reflect.factory.MethodFactory,null,createReference,138,SURVIVED,none
MethodFactory.java,spoon.reflect.factory.MethodFactory,null,getMainMethods,154,NO_COVERAGE,none
CtInterfaceImpl.java,spoon.support.reflect.declaration.CtInterfaceImpl,void,accept,37,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtInterface](spoon.reflect.visitor.CtInheritanceScannerTest)
CtInterfaceImpl.java,spoon.support.reflect.declaration.CtInterfaceImpl,null,clone,65,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtInterface<T> extends spoon.reflect.declaration.CtType<T> {
    @java.lang.Override
    spoon.reflect.declaration.CtInterface<T> clone();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtType<T>> C setSuperclass(spoon.reflect.reference.CtTypeReference<?> superClass);
}](spoon.test.parent.SetParentTest)
CtInterfaceImpl.java,spoon.support.reflect.declaration.CtInterfaceImpl,null,getDeclaredExecutables,52,NO_COVERAGE,none
CtInterfaceImpl.java,spoon.support.reflect.declaration.CtInterfaceImpl,false,isSubtypeOf,42,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtStatementList extends java.lang.Iterable<spoon.reflect.code.CtStatement> , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.STATEMENT)
    java.util.List<spoon.reflect.code.CtStatement> getStatements();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T setStatements(java.util.List<spoon.reflect.code.CtStatement> statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T addStatement(int index, spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertBegin(spoon.reflect.code.CtStatementList statements);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatement statement);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    <T extends spoon.reflect.code.CtStatementList> T insertEnd(spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertBefore(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatement statement);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatementList> T insertAfter(spoon.reflect.visitor.Filter<? extends spoon.reflect.code.CtStatement> insertionPoints, spoon.reflect.code.CtStatementList statements);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getStatement(int i);

    @spoon.support.DerivedProperty
    <T extends spoon.reflect.code.CtStatement> T getLastStatement();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.STATEMENT)
    void removeStatement(spoon.reflect.code.CtStatement statement);

    @java.lang.Override
    spoon.reflect.code.CtStatementList clone();
}](spoon.test.parent.ParentContractTest)
CtInterfaceImpl.java,spoon.support.reflect.declaration.CtInterfaceImpl,true,isSubtypeOf,42,KILLED,spoon.test.comment.CommentTest.testDocumentationContract(spoon.test.comment.CommentTest)
CtInterfaceImpl.java,spoon.support.reflect.declaration.CtInterfaceImpl,null,setSuperclass,72,SURVIVED,none
ContextBuilder.java,spoon.support.compiler.jdt.ContextBuilder,void,enter,90,KILLED,spoon.test.compilationunit.TestCompilationUnit.testGetUnitTypeWorksWithDeclaredPackage(spoon.test.compilationunit.TestCompilationUnit)
ContextBuilder.java,spoon.support.compiler.jdt.ContextBuilder,void,exit,122,KILLED,spoon.test.position.PositionTest.defaultConstructorPositionTest(spoon.test.position.PositionTest)
ContextBuilder.java,spoon.support.compiler.jdt.ContextBuilder,null,getCatchVariableDeclaration,151,NO_COVERAGE,none
ContextBuilder.java,spoon.support.compiler.jdt.ContextBuilder,null,getLocalVariableDeclaration,136,NO_COVERAGE,none
ContextBuilder.java,spoon.support.compiler.jdt.ContextBuilder,null,getVariableDeclaration,165,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
ContextBuilder.java,spoon.support.compiler.jdt.ContextBuilder,null,getVariableDeclaration,178,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder$1,"",getASTNodeName,47,NO_COVERAGE,none
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder$1,"A",getASTNodeName,47,NO_COVERAGE,none
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder$1,null,getASTNodeName,47,NO_COVERAGE,none
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder$1,"",toString,53,NO_COVERAGE,none
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder$1,"A",toString,53,NO_COVERAGE,none
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder$1,null,toString,53,NO_COVERAGE,none
CtPathImpl.java,spoon.reflect.path.impl.CtPathImpl,null,addFirst,48,SURVIVED,none
CtPathImpl.java,spoon.reflect.path.impl.CtPathImpl,null,addLast,53,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtPathImpl.java,spoon.reflect.path.impl.CtPathImpl,null,evaluateOn,40,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtPathImpl.java,spoon.reflect.path.impl.CtPathImpl,"",toString,59,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtPathImpl.java,spoon.reflect.path.impl.CtPathImpl,"A",toString,59,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtPathImpl.java,spoon.reflect.path.impl.CtPathImpl,null,toString,59,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
AbstractTemplate.java,spoon.template.AbstractTemplate,null,addGeneratedBy,74,NO_COVERAGE,none
AbstractTemplate.java,spoon.template.AbstractTemplate,null,getFactory,60,NO_COVERAGE,none
AbstractTemplate.java,spoon.template.AbstractTemplate,false,isValid,45,NO_COVERAGE,none
AbstractTemplate.java,spoon.template.AbstractTemplate,true,isValid,45,NO_COVERAGE,none
AbstractTemplate.java,spoon.template.AbstractTemplate,false,isWellFormed,37,NO_COVERAGE,none
AbstractTemplate.java,spoon.template.AbstractTemplate,true,isWellFormed,37,NO_COVERAGE,none
CtPathBuilder.java,spoon.reflect.path.CtPathBuilder,null,build,112,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtPathBuilder.java,spoon.reflect.path.CtPathBuilder,null,name,54,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtPathBuilder.java,spoon.reflect.path.CtPathBuilder,null,recursiveWildcard,75,KILLED,spoon.test.path.PathTest.testBuilder(spoon.test.path.PathTest)
CtPathBuilder.java,spoon.reflect.path.CtPathBuilder,null,role,98,KILLED,spoon.test.path.PathTest.testBuilder(spoon.test.path.PathTest)
CtPathBuilder.java,spoon.reflect.path.CtPathBuilder,null,type,82,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtPathBuilder.java,spoon.reflect.path.CtPathBuilder,null,wildcard,68,NO_COVERAGE,none
CtProvidedServiceImpl.java,spoon.support.reflect.declaration.CtProvidedServiceImpl,void,accept,80,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtProvidedService](spoon.reflect.visitor.CtInheritanceScannerTest)
CtProvidedServiceImpl.java,spoon.support.reflect.declaration.CtProvidedServiceImpl,null,addImplementationType,65,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtProvidedService extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    spoon.reflect.reference.CtTypeReference getServiceType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setServiceType(spoon.reflect.reference.CtTypeReference providingType);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    java.util.List<spoon.reflect.reference.CtTypeReference> getImplementationTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setImplementationTypes(java.util.List<spoon.reflect.reference.CtTypeReference> usedTypes);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T addImplementationType(spoon.reflect.reference.CtTypeReference usedType);

    @java.lang.Override
    spoon.reflect.declaration.CtProvidedService clone();
}](spoon.test.parent.ParentContractTest)
CtProvidedServiceImpl.java,spoon.support.reflect.declaration.CtProvidedServiceImpl,null,clone,85,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtProvidedService extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    spoon.reflect.reference.CtTypeReference getServiceType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setServiceType(spoon.reflect.reference.CtTypeReference providingType);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    java.util.List<spoon.reflect.reference.CtTypeReference> getImplementationTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setImplementationTypes(java.util.List<spoon.reflect.reference.CtTypeReference> usedTypes);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T addImplementationType(spoon.reflect.reference.CtTypeReference usedType);

    @java.lang.Override
    spoon.reflect.declaration.CtProvidedService clone();
}](spoon.test.parent.SetParentTest)
CtProvidedServiceImpl.java,spoon.support.reflect.declaration.CtProvidedServiceImpl,null,getImplementationTypes,41,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtProvidedServiceImpl.java,spoon.support.reflect.declaration.CtProvidedServiceImpl,null,setImplementationTypes,46,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtProvidedService extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    spoon.reflect.reference.CtTypeReference getServiceType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setServiceType(spoon.reflect.reference.CtTypeReference providingType);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    java.util.List<spoon.reflect.reference.CtTypeReference> getImplementationTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setImplementationTypes(java.util.List<spoon.reflect.reference.CtTypeReference> usedTypes);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T addImplementationType(spoon.reflect.reference.CtTypeReference usedType);

    @java.lang.Override
    spoon.reflect.declaration.CtProvidedService clone();
}](spoon.test.parent.ParentContractTest)
CtProvidedServiceImpl.java,spoon.support.reflect.declaration.CtProvidedServiceImpl,null,setServiceType,31,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtProvidedService extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    spoon.reflect.reference.CtTypeReference getServiceType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setServiceType(spoon.reflect.reference.CtTypeReference providingType);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    java.util.List<spoon.reflect.reference.CtTypeReference> getImplementationTypes();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T setImplementationTypes(java.util.List<spoon.reflect.reference.CtTypeReference> usedTypes);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPLEMENTATION_TYPE)
    <T extends spoon.reflect.declaration.CtProvidedService> T addImplementationType(spoon.reflect.reference.CtTypeReference usedType);

    @java.lang.Override
    spoon.reflect.declaration.CtProvidedService clone();
}](spoon.test.parent.ParentContractTest)
TypeContext.java,spoon.reflect.visitor.TypeContext,null,getPackage,54,KILLED,spoon.test.prettyprinter.QualifiedThisRefTest.testQualifiedThisRef(spoon.test.prettyprinter.QualifiedThisRefTest)
TypeContext.java,spoon.reflect.visitor.TypeContext,"",getSimpleName,50,KILLED,spoon.test.visibility.VisibilityTest.testVisibilityOfClassesNamedByClassesInJavaLangPackage(spoon.test.visibility.VisibilityTest)
TypeContext.java,spoon.reflect.visitor.TypeContext,"A",getSimpleName,50,KILLED,spoon.test.visibility.VisibilityTest.testVisibilityOfClassesNamedByClassesInJavaLangPackage(spoon.test.visibility.VisibilityTest)
TypeContext.java,spoon.reflect.visitor.TypeContext,null,getSimpleName,50,KILLED,spoon.test.prettyprinter.DefaultPrettyPrinterTest.importsFromMultipleTypesSupported(spoon.test.prettyprinter.DefaultPrettyPrinterTest)
TypeContext.java,spoon.reflect.visitor.TypeContext,false,isNameConflict,39,KILLED,spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest.testGenericsWithAmbiguousStaticFieldAutoImport(spoon.test.staticFieldAccess2.ImplicitStaticFieldReferenceTest)
TypeContext.java,spoon.reflect.visitor.TypeContext,true,isNameConflict,39,KILLED,spoon.test.imports.ImportTest.testmportInCu(spoon.test.imports.ImportTest)
RoleHandlerHelper.java,spoon.reflect.meta.impl.RoleHandlerHelper,void,forEachRoleHandler,111,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetRoleHandlersOfClass(spoon.test.reflect.meta.MetaModelTest)
RoleHandlerHelper.java,spoon.reflect.meta.impl.RoleHandlerHelper,null,getOptionalRoleHandler,78,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
RoleHandlerHelper.java,spoon.reflect.meta.impl.RoleHandlerHelper,null,getRoleHandler,64,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
RoleHandlerHelper.java,spoon.reflect.meta.impl.RoleHandlerHelper,null,getRoleHandlerWrtParent,123,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
RoleHandlerHelper.java,spoon.reflect.meta.impl.RoleHandlerHelper,null,getRoleHandlers,92,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetRoleHandlersOfClass(spoon.test.reflect.meta.MetaModelTest)
CtParameterReferenceImpl.java,spoon.support.reflect.reference.CtParameterReferenceImpl,void,accept,38,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtParameterReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtParameterReferenceImpl.java,spoon.support.reflect.reference.CtParameterReferenceImpl,null,clone,85,KILLED,spoon.test.reference.VariableAccessTest.testDeclarationOfVariableReference(spoon.test.reference.VariableAccessTest)
CtParameterReferenceImpl.java,spoon.support.reflect.reference.CtParameterReferenceImpl,null,getDeclaration,53,KILLED,spoon.test.reference.TypeReferenceTest.testEqualityTypeReference(spoon.test.reference.TypeReferenceTest)
CtParameterReferenceImpl.java,spoon.support.reflect.reference.CtParameterReferenceImpl,null,getDeclaringExecutable,43,KILLED,spoon.test.reference.TypeReferenceTest.testEqualityTypeReference(spoon.test.reference.TypeReferenceTest)
CtParameterReferenceImpl.java,spoon.support.reflect.reference.CtParameterReferenceImpl,null,lookupDynamically,61,KILLED,spoon.test.reference.TypeReferenceTest.testEqualityTypeReference(spoon.test.reference.TypeReferenceTest)
FieldScopeFunction.java,spoon.reflect.visitor.filter.FieldScopeFunction,void,apply,48,NO_COVERAGE,none
FieldScopeFunction.java,spoon.reflect.visitor.filter.FieldScopeFunction,void,searchForPackageProtectedField,82,NO_COVERAGE,none
FieldScopeFunction.java,spoon.reflect.visitor.filter.FieldScopeFunction,void,searchForPrivateField,60,NO_COVERAGE,none
FieldScopeFunction.java,spoon.reflect.visitor.filter.FieldScopeFunction,void,searchForProtectedField,66,NO_COVERAGE,none
FieldScopeFunction.java,spoon.reflect.visitor.filter.FieldScopeFunction,void,searchForPublicField,75,NO_COVERAGE,none
CtVariableAccessImpl.java,spoon.support.reflect.code.CtVariableAccessImpl,null,clone,74,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtVariableAccessImpl.java,spoon.support.reflect.code.CtVariableAccessImpl,null,getType,57,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
CtVariableAccessImpl.java,spoon.support.reflect.code.CtVariableAccessImpl,null,getVariable,37,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
CtVariableAccessImpl.java,spoon.support.reflect.code.CtVariableAccessImpl,null,setType,63,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
CtVariableAccessImpl.java,spoon.support.reflect.code.CtVariableAccessImpl,null,setVariable,46,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring$QueryDriver,null,enter,86,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameLocalVariableToSameName(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring$QueryDriver,void,exit,100,SURVIVED,none
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring$QueryDriver,void,ignoreChildrenOf,110,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring$QueryDriver,false,isInContextOfLocalClass,117,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring$QueryDriver,true,isInContextOfLocalClass,117,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtBinaryOperatorImpl.java,spoon.support.reflect.code.CtBinaryOperatorImpl,void,accept,44,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBinaryOperator](spoon.reflect.visitor.CtInheritanceScannerTest)
CtBinaryOperatorImpl.java,spoon.support.reflect.code.CtBinaryOperatorImpl,null,clone,91,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtBinaryOperator<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.LEFT_OPERAND)
    spoon.reflect.code.CtExpression<?> getLeftHandOperand();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.RIGHT_OPERAND)
    spoon.reflect.code.CtExpression<?> getRightHandOperand();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.LEFT_OPERAND)
    <C extends spoon.reflect.code.CtBinaryOperator<T>> C setLeftHandOperand(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.RIGHT_OPERAND)
    <C extends spoon.reflect.code.CtBinaryOperator<T>> C setRightHandOperand(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtBinaryOperator<T>> C setKind(spoon.reflect.code.BinaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.BinaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtBinaryOperator<T> clone();
}](spoon.test.parent.SetParentTest)
CtBinaryOperatorImpl.java,spoon.support.reflect.code.CtBinaryOperatorImpl,null,setKind,79,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
CtBinaryOperatorImpl.java,spoon.support.reflect.code.CtBinaryOperatorImpl,null,setLeftHandOperand,59,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
CtBinaryOperatorImpl.java,spoon.support.reflect.code.CtBinaryOperatorImpl,null,setRightHandOperand,69,KILLED,spoon.test.generics.GenericsTest.testInstanceOfMapEntryGeneric(spoon.test.generics.GenericsTest)
CtTypeAccessImpl.java,spoon.support.reflect.code.CtTypeAccessImpl,void,accept,35,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtTypeAccess](spoon.reflect.visitor.CtInheritanceScannerTest)
CtTypeAccessImpl.java,spoon.support.reflect.code.CtTypeAccessImpl,null,clone,67,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtTypeAccess<A> extends spoon.reflect.code.CtExpression<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ACCESSED_TYPE)
    spoon.reflect.reference.CtTypeReference<A> getAccessedType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ACCESSED_TYPE)
    <C extends spoon.reflect.code.CtTypeAccess<A>> C setAccessedType(spoon.reflect.reference.CtTypeReference<A> accessedType);

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtTypeReference<java.lang.Void> getType();

    @java.lang.Override
    @spoon.support.UnsettableProperty
    <C extends spoon.reflect.declaration.CtTypedElement> C setType(spoon.reflect.reference.CtTypeReference<java.lang.Void> type);

    @java.lang.Override
    spoon.reflect.code.CtTypeAccess<A> clone();
}](spoon.test.parent.SetParentTest)
CtTypeAccessImpl.java,spoon.support.reflect.code.CtTypeAccessImpl,null,getType,55,KILLED,spoon.test.targeted.TargetedExpressionTest.testTargetsOfInv(spoon.test.targeted.TargetedExpressionTest)
CtTypeAccessImpl.java,spoon.support.reflect.code.CtTypeAccessImpl,null,setAccessedType,45,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
CtTypeAccessImpl.java,spoon.support.reflect.code.CtTypeAccessImpl,null,setType,62,SURVIVED,none
InterfaceFactory.java,spoon.reflect.factory.InterfaceFactory,null,create,63,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
InterfaceFactory.java,spoon.reflect.factory.InterfaceFactory,null,create,42,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
InterfaceFactory.java,spoon.reflect.factory.InterfaceFactory,null,create,52,KILLED,spoon.test.imports.ImportTest.testCanAccess(spoon.test.imports.ImportTest)
InterfaceFactory.java,spoon.reflect.factory.InterfaceFactory,null,get,100,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationValueReflection(spoon.test.annotation.AnnotationTest)
InterfaceFactory.java,spoon.reflect.factory.InterfaceFactory,null,get,81,KILLED,spoon.test.generics.GenericsTest.testWildCardonShadowClass(spoon.test.generics.GenericsTest)
ProcessorPropertiesImpl.java,spoon.processing.ProcessorPropertiesImpl,null,get,28,KILLED,spoon.test.processing.ProcessingTest.testInitPropertiesWithWrongType(spoon.test.processing.ProcessingTest)
ProcessorPropertiesImpl.java,spoon.processing.ProcessorPropertiesImpl,"",getProcessorName,47,NO_COVERAGE,none
ProcessorPropertiesImpl.java,spoon.processing.ProcessorPropertiesImpl,"A",getProcessorName,47,NO_COVERAGE,none
ProcessorPropertiesImpl.java,spoon.processing.ProcessorPropertiesImpl,null,getProcessorName,47,NO_COVERAGE,none
ProcessorPropertiesImpl.java,spoon.processing.ProcessorPropertiesImpl,void,set,40,KILLED,spoon.test.processing.ProcessingTest.testInitPropertiesWithWrongType(spoon.test.processing.ProcessingTest)
Options.java,spoon.compiler.builder.Options,empty,build,32,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
Options.java,spoon.compiler.builder.Options,null,build,32,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
Options.java,spoon.compiler.builder.Options,"",join,36,KILLED,spoon.support.compiler.classpath.ComputeClasspathTest.testSourceClasspath(spoon.support.compiler.classpath.ComputeClasspathTest)
Options.java,spoon.compiler.builder.Options,"A",join,36,KILLED,spoon.support.compiler.classpath.ComputeClasspathTest.testSourceClasspath(spoon.support.compiler.classpath.ComputeClasspathTest)
Options.java,spoon.compiler.builder.Options,null,join,36,KILLED,spoon.support.compiler.classpath.ComputeClasspathTest.testSourceClasspath(spoon.support.compiler.classpath.ComputeClasspathTest)
CtConditionalImpl.java,spoon.support.reflect.code.CtConditionalImpl,void,accept,43,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtConditional](spoon.reflect.visitor.CtInheritanceScannerTest)
CtConditionalImpl.java,spoon.support.reflect.code.CtConditionalImpl,null,clone,93,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtConditional<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ELSE)
    spoon.reflect.code.CtExpression<T> getElseExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.THEN)
    spoon.reflect.code.CtExpression<T> getThenExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getCondition();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ELSE)
    <C extends spoon.reflect.code.CtConditional<T>> C setElseExpression(spoon.reflect.code.CtExpression<T> elseExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.THEN)
    <C extends spoon.reflect.code.CtConditional<T>> C setThenExpression(spoon.reflect.code.CtExpression<T> thenExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <C extends spoon.reflect.code.CtConditional<T>> C setCondition(spoon.reflect.code.CtExpression<java.lang.Boolean> condition);

    @java.lang.Override
    spoon.reflect.code.CtConditional<T> clone();
}](spoon.test.parent.SetParentTest)
CtConditionalImpl.java,spoon.support.reflect.code.CtConditionalImpl,null,setCondition,73,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtConditional<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ELSE)
    spoon.reflect.code.CtExpression<T> getElseExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.THEN)
    spoon.reflect.code.CtExpression<T> getThenExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getCondition();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ELSE)
    <C extends spoon.reflect.code.CtConditional<T>> C setElseExpression(spoon.reflect.code.CtExpression<T> elseExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.THEN)
    <C extends spoon.reflect.code.CtConditional<T>> C setThenExpression(spoon.reflect.code.CtExpression<T> thenExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <C extends spoon.reflect.code.CtConditional<T>> C setCondition(spoon.reflect.code.CtExpression<java.lang.Boolean> condition);

    @java.lang.Override
    spoon.reflect.code.CtConditional<T> clone();
}](spoon.test.parent.ParentContractTest)
CtConditionalImpl.java,spoon.support.reflect.code.CtConditionalImpl,null,setElseExpression,63,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtConditional<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ELSE)
    spoon.reflect.code.CtExpression<T> getElseExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.THEN)
    spoon.reflect.code.CtExpression<T> getThenExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getCondition();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ELSE)
    <C extends spoon.reflect.code.CtConditional<T>> C setElseExpression(spoon.reflect.code.CtExpression<T> elseExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.THEN)
    <C extends spoon.reflect.code.CtConditional<T>> C setThenExpression(spoon.reflect.code.CtExpression<T> thenExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <C extends spoon.reflect.code.CtConditional<T>> C setCondition(spoon.reflect.code.CtExpression<java.lang.Boolean> condition);

    @java.lang.Override
    spoon.reflect.code.CtConditional<T> clone();
}](spoon.test.parent.ParentContractTest)
CtConditionalImpl.java,spoon.support.reflect.code.CtConditionalImpl,null,setThenExpression,83,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtConditional<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.ELSE)
    spoon.reflect.code.CtExpression<T> getElseExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.THEN)
    spoon.reflect.code.CtExpression<T> getThenExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getCondition();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.ELSE)
    <C extends spoon.reflect.code.CtConditional<T>> C setElseExpression(spoon.reflect.code.CtExpression<T> elseExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.THEN)
    <C extends spoon.reflect.code.CtConditional<T>> C setThenExpression(spoon.reflect.code.CtExpression<T> thenExpression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <C extends spoon.reflect.code.CtConditional<T>> C setCondition(spoon.reflect.code.CtExpression<java.lang.Boolean> condition);

    @java.lang.Override
    spoon.reflect.code.CtConditional<T> clone();
}](spoon.test.parent.ParentContractTest)
Refactoring.java,spoon.refactoring.Refactoring,void,changeLocalVariableName,186,NO_COVERAGE,none
Refactoring.java,spoon.refactoring.Refactoring,void,changeMethodName,70,KILLED,spoon.reflect.ast.CloneTest.testCopyMethod(spoon.reflect.ast.CloneTest)
Refactoring.java,spoon.refactoring.Refactoring,void,changeTypeName,50,KILLED,spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation(spoon.test.refactoring.RefactoringTest)
Refactoring.java,spoon.refactoring.Refactoring,null,copyMethod,86,KILLED,spoon.reflect.ast.CloneTest.testCopyMethod(spoon.reflect.ast.CloneTest)
Refactoring.java,spoon.refactoring.Refactoring,null,copyType,118,KILLED,spoon.reflect.ast.CloneTest.testCopyType(spoon.reflect.ast.CloneTest)
CtRolePathElement.java,spoon.reflect.path.impl.CtRolePathElement,null,getElements,81,KILLED,spoon.test.path.PathTest.testBuilder(spoon.test.path.PathTest)
CtRolePathElement.java,spoon.reflect.path.impl.CtRolePathElement,null,getFromSet,62,SURVIVED,none
CtRolePathElement.java,spoon.reflect.path.impl.CtRolePathElement,"",toString,58,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtRolePathElement.java,spoon.reflect.path.impl.CtRolePathElement,"A",toString,58,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtRolePathElement.java,spoon.reflect.path.impl.CtRolePathElement,null,toString,58,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
DeepRepresentationComparator.java,spoon.support.comparator.DeepRepresentationComparator,0,compare,31,KILLED,spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)
DeepRepresentationComparator.java,spoon.support.comparator.DeepRepresentationComparator,1,compare,31,KILLED,spoon.test.constructorcallnewclass.ConstructorCallTest.testConstructorCallObjectWithoutParameters(spoon.test.constructorcallnewclass.ConstructorCallTest)
DeepRepresentationComparator.java,spoon.support.comparator.DeepRepresentationComparator,"",getDeepRepresentation,47,KILLED,spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)
DeepRepresentationComparator.java,spoon.support.comparator.DeepRepresentationComparator,"A",getDeepRepresentation,47,KILLED,spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)
DeepRepresentationComparator.java,spoon.support.comparator.DeepRepresentationComparator,null,getDeepRepresentation,47,KILLED,spoon.test.signature.SignatureTest.testMethodInvocationSignatureWithVariableAccess(spoon.test.signature.SignatureTest)
CtReferenceImpl.java,spoon.support.reflect.reference.CtReferenceImpl,null,clone,79,KILLED,spoon.test.reference.TypeReferenceTest.testImproveAPIActualTypeReference(spoon.test.reference.TypeReferenceTest)
CtReferenceImpl.java,spoon.support.reflect.reference.CtReferenceImpl,null,setSimpleName,53,KILLED,spoon.test.factory.ExecutableFactoryTest.testCreateReference(spoon.test.factory.ExecutableFactoryTest)
CtReferenceImpl.java,spoon.support.reflect.reference.CtReferenceImpl,"",toString,68,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtReferenceImpl.java,spoon.support.reflect.reference.CtReferenceImpl,"A",toString,68,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtReferenceImpl.java,spoon.support.reflect.reference.CtReferenceImpl,null,toString,68,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
AbstractPathElement.java,spoon.reflect.path.impl.AbstractPathElement,null,addArgument,41,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
AbstractPathElement.java,spoon.reflect.path.impl.AbstractPathElement,null,getChilds,46,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
AbstractPathElement.java,spoon.reflect.path.impl.AbstractPathElement,"",getParamString,59,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
AbstractPathElement.java,spoon.reflect.path.impl.AbstractPathElement,"A",getParamString,59,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
AbstractPathElement.java,spoon.reflect.path.impl.AbstractPathElement,null,getParamString,59,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType,0,indexOfReference,230,KILLED,spoon.test.processing.ProcessingTest.testInsertEnd(spoon.test.processing.ProcessingTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType,1,indexOfReference,230,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType,null,valueOf,175,SURVIVED,none
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType,empty,values,175,SURVIVED,none
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType,null,values,175,SURVIVED,none
SortedList.java,spoon.support.util.SortedList,void,add,50,NO_COVERAGE,none
SortedList.java,spoon.support.util.SortedList,false,add,37,KILLED,spoon.test.imports.ImportTest.testStaticImportForInvocationInNoClasspath(spoon.test.imports.ImportTest)
SortedList.java,spoon.support.util.SortedList,true,add,37,KILLED,spoon.test.imports.ImportTest.testStaticImportForInvocationInNoClasspath(spoon.test.imports.ImportTest)
SortedList.java,spoon.support.util.SortedList,false,addAll,55,KILLED,spoon.test.imports.ImportTest.testStaticImportForInvocationInNoClasspath(spoon.test.imports.ImportTest)
SortedList.java,spoon.support.util.SortedList,true,addAll,55,KILLED,spoon.test.imports.ImportTest.testStaticImportForInvocationInNoClasspath(spoon.test.imports.ImportTest)
VariableScopeFunction.java,spoon.reflect.visitor.filter.VariableScopeFunction$Visitor,void,enter,58,NO_COVERAGE,none
VariableScopeFunction.java,spoon.reflect.visitor.filter.VariableScopeFunction$Visitor,void,visitCtCatchVariable,89,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableScopeFunction(spoon.test.query_function.VariableReferencesTest)
VariableScopeFunction.java,spoon.reflect.visitor.filter.VariableScopeFunction$Visitor,void,visitCtField,65,NO_COVERAGE,none
VariableScopeFunction.java,spoon.reflect.visitor.filter.VariableScopeFunction$Visitor,void,visitCtLocalVariable,73,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableScopeFunction(spoon.test.query_function.VariableReferencesTest)
VariableScopeFunction.java,spoon.reflect.visitor.filter.VariableScopeFunction$Visitor,void,visitCtParameter,81,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableScopeFunction(spoon.test.query_function.VariableReferencesTest)
ClassFactory.java,spoon.reflect.factory.ClassFactory,null,create,77,KILLED,spoon.test.factory.ConstructorFactoryTest.testCreateDefault(spoon.test.factory.ConstructorFactoryTest)
ClassFactory.java,spoon.reflect.factory.ClassFactory,null,create,46,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
ClassFactory.java,spoon.reflect.factory.ClassFactory,null,create,61,KILLED,spoon.test.factory.ClassFactoryTest.testTopLevelClass(spoon.test.factory.ClassFactoryTest)
ClassFactory.java,spoon.reflect.factory.ClassFactory,null,get,98,KILLED,spoon.test.type.TypeTest.testShadowType(spoon.test.type.TypeTest)
ClassFactory.java,spoon.reflect.factory.ClassFactory,null,get,117,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithNoImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction,void,apply,80,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction,void,forEachOverridenMethod,194,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction,null,getTargetMethodOfHierarchy,219,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction,null,includingLambdas,73,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testAllMethodsSameSignatureFunction(spoon.test.refactoring.MethodsRefactoringTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction,null,includingSelf,62,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testAllMethodsSameSignatureFunction(spoon.test.refactoring.MethodsRefactoringTest)
VariableReferenceFunction.java,spoon.reflect.visitor.filter.VariableReferenceFunction$Visitor,void,enter,75,NO_COVERAGE,none
VariableReferenceFunction.java,spoon.reflect.visitor.filter.VariableReferenceFunction$Visitor,void,visitCtCatchVariable,106,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
VariableReferenceFunction.java,spoon.reflect.visitor.filter.VariableReferenceFunction$Visitor,void,visitCtField,82,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
VariableReferenceFunction.java,spoon.reflect.visitor.filter.VariableReferenceFunction$Visitor,void,visitCtLocalVariable,90,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
VariableReferenceFunction.java,spoon.reflect.visitor.filter.VariableReferenceFunction$Visitor,void,visitCtParameter,98,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
CtNamedPathElement.java,spoon.reflect.path.impl.CtNamedPathElement,null,getElements,52,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtNamedPathElement.java,spoon.reflect.path.impl.CtNamedPathElement,null,scanElements,60,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
CtNamedPathElement.java,spoon.reflect.path.impl.CtNamedPathElement,"",toString,47,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtNamedPathElement.java,spoon.reflect.path.impl.CtNamedPathElement,"A",toString,47,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtNamedPathElement.java,spoon.reflect.path.impl.CtNamedPathElement,null,toString,47,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtWildcardReferenceImpl.java,spoon.support.reflect.reference.CtWildcardReferenceImpl,void,accept,28,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtWildcardReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtWildcardReferenceImpl.java,spoon.support.reflect.reference.CtWildcardReferenceImpl,null,clone,43,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtWildcardReferenceImpl.java,spoon.support.reflect.reference.CtWildcardReferenceImpl,null,getTypeDeclaration,48,KILLED,spoon.test.reference.TypeReferenceTest.testTypeDeclarationWildcard(spoon.test.reference.TypeReferenceTest)
CtWildcardReferenceImpl.java,spoon.support.reflect.reference.CtWildcardReferenceImpl,null,setSimpleName,38,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtUnboundVariableReferenceImpl.java,spoon.support.reflect.reference.CtUnboundVariableReferenceImpl,void,accept,35,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtUnboundVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtUnboundVariableReferenceImpl.java,spoon.support.reflect.reference.CtUnboundVariableReferenceImpl,null,clone,40,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUnboundVariableReference](spoon.test.replace.ReplaceParametrizedTest)
CtUnboundVariableReferenceImpl.java,spoon.support.reflect.reference.CtUnboundVariableReferenceImpl,null,getAnnotations,46,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUnboundVariableReference](spoon.test.replace.ReplaceParametrizedTest)
CtUnboundVariableReferenceImpl.java,spoon.support.reflect.reference.CtUnboundVariableReferenceImpl,null,setAnnotations,52,SURVIVED,none
AnnotationProcessingOptions.java,spoon.compiler.builder.AnnotationProcessingOptions,null,compileProcessors,46,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
AnnotationProcessingOptions.java,spoon.compiler.builder.AnnotationProcessingOptions,null,processors,25,NO_COVERAGE,none
AnnotationProcessingOptions.java,spoon.compiler.builder.AnnotationProcessingOptions,null,processors,34,NO_COVERAGE,none
AnnotationProcessingOptions.java,spoon.compiler.builder.AnnotationProcessingOptions,null,runProcessors,41,NO_COVERAGE,none
CtCodeSnippetStatementImpl.java,spoon.support.reflect.code.CtCodeSnippetStatementImpl,void,accept,34,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtCodeSnippetStatementImpl.java,spoon.support.reflect.code.CtCodeSnippetStatementImpl,null,clone,59,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCodeSnippetStatement extends spoon.reflect.code.CtStatement , spoon.reflect.declaration.CtCodeSnippet {
    <S extends spoon.reflect.code.CtStatement> S compile() throws spoon.support.compiler.SnippetCompilationError;

    @java.lang.Override
    spoon.reflect.code.CtCodeSnippetStatement clone();
}](spoon.test.parent.SetParentTest)
CtCodeSnippetStatementImpl.java,spoon.support.reflect.code.CtCodeSnippetStatementImpl,null,compile,54,KILLED,spoon.test.ctType.CtTypeTest.testHasMethodInDirectMethod(spoon.test.ctType.CtTypeTest)
CtCodeSnippetStatementImpl.java,spoon.support.reflect.code.CtCodeSnippetStatementImpl,null,setValue,47,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtScannerFunction.java,spoon.reflect.visitor.filter.CtScannerFunction,void,apply,64,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtScannerFunction.java,spoon.reflect.visitor.filter.CtScannerFunction,null,includingSelf,49,NO_COVERAGE,none
CtScannerFunction.java,spoon.reflect.visitor.filter.CtScannerFunction,null,setListener,58,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
CtScannerFunction.java,spoon.reflect.visitor.filter.CtScannerFunction,void,setQuery,78,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CompositeFilter.java,spoon.reflect.visitor.filter.CompositeFilter,false,hasMatch,87,KILLED,spoon.test.filters.FilterTest.intersectionOfTwoFilters(spoon.test.filters.FilterTest)
CompositeFilter.java,spoon.reflect.visitor.filter.CompositeFilter,true,hasMatch,87,KILLED,spoon.test.filters.FilterTest.intersectionOfTwoFilters(spoon.test.filters.FilterTest)
CompositeFilter.java,spoon.reflect.visitor.filter.CompositeFilter,false,matches,35,KILLED,spoon.test.filters.FilterTest.intersectionOfTwoFilters(spoon.test.filters.FilterTest)
CompositeFilter.java,spoon.reflect.visitor.filter.CompositeFilter,true,matches,35,KILLED,spoon.test.filters.FilterTest.intersectionOfTwoFilters(spoon.test.filters.FilterTest)
CtModuleRequirementImpl.java,spoon.support.reflect.declaration.CtModuleRequirementImpl,void,accept,81,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtModuleRequirement](spoon.reflect.visitor.CtInheritanceScannerTest)
CtModuleRequirementImpl.java,spoon.support.reflect.declaration.CtModuleRequirementImpl,null,clone,86,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtModuleRequirement extends spoon.reflect.declaration.CtModuleDirective {
    enum RequiresModifier {
        STATIC, TRANSITIVE;}

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> getRequiresModifiers();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModuleRequirement> T setRequiresModifiers(java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> requiresModifiers);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    spoon.reflect.reference.CtModuleReference getModuleReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtModuleRequirement> T setModuleReference(spoon.reflect.reference.CtModuleReference moduleReference);

    @java.lang.Override
    spoon.reflect.declaration.CtModuleRequirement clone();
}](spoon.test.parent.SetParentTest)
CtModuleRequirementImpl.java,spoon.support.reflect.declaration.CtModuleRequirementImpl,null,setModuleReference,71,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtModuleRequirement extends spoon.reflect.declaration.CtModuleDirective {
    enum RequiresModifier {
        STATIC, TRANSITIVE;}

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODIFIER)
    java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> getRequiresModifiers();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODIFIER)
    <T extends spoon.reflect.declaration.CtModuleRequirement> T setRequiresModifiers(java.util.Set<spoon.reflect.declaration.CtModuleRequirement.RequiresModifier> requiresModifiers);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    spoon.reflect.reference.CtModuleReference getModuleReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.MODULE_REF)
    <T extends spoon.reflect.declaration.CtModuleRequirement> T setModuleReference(spoon.reflect.reference.CtModuleReference moduleReference);

    @java.lang.Override
    spoon.reflect.declaration.CtModuleRequirement clone();
}](spoon.test.parent.ParentContractTest)
CtModuleRequirementImpl.java,spoon.support.reflect.declaration.CtModuleRequirementImpl,null,setRequiresModifiers,46,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
EnumFactory.java,spoon.reflect.factory.EnumFactory,null,create,57,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
EnumFactory.java,spoon.reflect.factory.EnumFactory,null,create,47,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
EnumFactory.java,spoon.reflect.factory.EnumFactory,null,get,70,NO_COVERAGE,none
EnumFactory.java,spoon.reflect.factory.EnumFactory,null,getEnum,87,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable,null,getJContentPane,132,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable,null,getJScrollPane,146,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable,null,getJTable,159,NO_COVERAGE,none
SpoonObjectFieldsTable.java,spoon.support.gui.SpoonObjectFieldsTable,void,initialize,171,NO_COVERAGE,none
AbstractManualProcessor.java,spoon.processing.AbstractManualProcessor,null,getEnvironment,49,NO_COVERAGE,none
AbstractManualProcessor.java,spoon.processing.AbstractManualProcessor,null,getTraversalStrategy,67,SURVIVED,none
AbstractManualProcessor.java,spoon.processing.AbstractManualProcessor,void,initProperties,102,NO_COVERAGE,none
AbstractManualProcessor.java,spoon.processing.AbstractManualProcessor,void,interrupt,107,NO_COVERAGE,none
AstParentConsistencyChecker.java,spoon.reflect.visitor.AstParentConsistencyChecker,void,scan,26,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
AstParentConsistencyChecker.java,spoon.reflect.visitor.AstParentConsistencyChecker,"",toDebugString,43,NO_COVERAGE,none
AstParentConsistencyChecker.java,spoon.reflect.visitor.AstParentConsistencyChecker,"A",toDebugString,43,NO_COVERAGE,none
AstParentConsistencyChecker.java,spoon.reflect.visitor.AstParentConsistencyChecker,null,toDebugString,43,NO_COVERAGE,none
CtSynchronizedImpl.java,spoon.support.reflect.code.CtSynchronizedImpl,void,accept,40,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSynchronized](spoon.reflect.visitor.CtInheritanceScannerTest)
CtSynchronizedImpl.java,spoon.support.reflect.code.CtSynchronizedImpl,null,clone,75,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtSynchronized extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<?> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtSynchronized> T setExpression(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBlock();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.BODY)
    <T extends spoon.reflect.code.CtSynchronized> T setBlock(spoon.reflect.code.CtBlock<?> block);

    @java.lang.Override
    spoon.reflect.code.CtSynchronized clone();
}](spoon.test.parent.SetParentTest)
CtSynchronizedImpl.java,spoon.support.reflect.code.CtSynchronizedImpl,null,setBlock,55,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtSynchronized extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<?> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtSynchronized> T setExpression(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBlock();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.BODY)
    <T extends spoon.reflect.code.CtSynchronized> T setBlock(spoon.reflect.code.CtBlock<?> block);

    @java.lang.Override
    spoon.reflect.code.CtSynchronized clone();
}](spoon.test.parent.ParentContractTest)
CtSynchronizedImpl.java,spoon.support.reflect.code.CtSynchronizedImpl,null,setExpression,65,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtSynchronized extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<?> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtSynchronized> T setExpression(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBlock();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.BODY)
    <T extends spoon.reflect.code.CtSynchronized> T setBlock(spoon.reflect.code.CtBlock<?> block);

    @java.lang.Override
    spoon.reflect.code.CtSynchronized clone();
}](spoon.test.parent.ParentContractTest)
Query.java,spoon.reflect.visitor.Query,null,getElements,68,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
Query.java,spoon.reflect.visitor.Query,null,getElements,52,KILLED,spoon.test.executable.ExecutableTest.testInfoInsideAnonymousExecutable(spoon.test.executable.ExecutableTest)
Query.java,spoon.reflect.visitor.Query,null,getReferences,87,KILLED,spoon.test.model.TypeTest.testGetUsedTypes(spoon.test.model.TypeTest)
Query.java,spoon.reflect.visitor.Query,null,getReferences,104,KILLED,spoon.test.reference.ExecutableReferenceTest.testCallMethodOfClassNotPresent(spoon.test.reference.ExecutableReferenceTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory$1Visitor,void,visitCtClass,640,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory$1Visitor,void,visitCtConstructor,652,KILLED,spoon.test.ctType.CtTypeParameterTest.testTypeSame(spoon.test.ctType.CtTypeParameterTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory$1Visitor,void,visitCtInterface,644,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory$1Visitor,void,visitCtMethod,648,KILLED,spoon.test.ctType.CtTypeTest.testIsSubTypeOfonTypeParameters(spoon.test.ctType.CtTypeTest)
HashcodeVisitor.java,spoon.support.visitor.HashcodeVisitor,void,scan,53,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
HashcodeVisitor.java,spoon.support.visitor.HashcodeVisitor,void,scanCtNamedElement,34,KILLED,spoon.test.reference.ExecutableReferenceTest.testHashcodeWorksWithReference(spoon.test.reference.ExecutableReferenceTest)
HashcodeVisitor.java,spoon.support.visitor.HashcodeVisitor,void,scanCtReference,41,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
HashcodeVisitor.java,spoon.support.visitor.HashcodeVisitor,void,visitCtImport,46,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
CtExtendedModifier.java,spoon.support.reflect.CtExtendedModifier,false,equals,58,KILLED,spoon.test.modifiers.TestModifiers.testSetVisibility(spoon.test.modifiers.TestModifiers)
CtExtendedModifier.java,spoon.support.reflect.CtExtendedModifier,true,equals,58,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtExtendedModifier.java,spoon.support.reflect.CtExtendedModifier,0,hashCode,71,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtExtendedModifier.java,spoon.support.reflect.CtExtendedModifier,1,hashCode,71,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
Assert.java,spoon.testing.Assert,null,assertThat,54,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorInstantiated(spoon.testing.AbstractAssertTest)
Assert.java,spoon.testing.Assert,null,assertThat,43,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorInstantiated(spoon.testing.AbstractAssertTest)
Assert.java,spoon.testing.Assert,null,assertThat,69,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent(spoon.testing.CtElementAssertTest)
Assert.java,spoon.testing.Assert,null,assertThat,83,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoDifferentCtPackage(spoon.testing.CtPackageAssertTest)
CtImportImpl.java,spoon.support.reflect.declaration.CtImportImpl,void,accept,78,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtImport](spoon.reflect.visitor.CtInheritanceScannerTest)
CtImportImpl.java,spoon.support.reflect.declaration.CtImportImpl,null,clone,83,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtImport extends spoon.reflect.declaration.CtElement {
    @spoon.support.DerivedProperty
    spoon.reflect.declaration.CtImportKind getImportKind();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.IMPORT_REFERENCE)
    spoon.reflect.reference.CtReference getReference();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.IMPORT_REFERENCE)
    <T extends spoon.reflect.declaration.CtImport> T setReference(spoon.reflect.reference.CtReference reference);

    @java.lang.Override
    spoon.reflect.declaration.CtImport clone();
}](spoon.test.parent.SetParentTest)
CtImportImpl.java,spoon.support.reflect.declaration.CtImportImpl,null,getImportKind,42,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtImportImpl.java,spoon.support.reflect.declaration.CtImportImpl,null,setReference,63,KILLED,spoon.test.imports.ImportTest.testEqualsImports(spoon.test.imports.ImportTest)
TypeReferenceRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext,void,addAnnotation,55,NO_COVERAGE,none
TypeReferenceRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext,void,addClassReference,41,MEMORY_ERROR,none
TypeReferenceRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext,void,addPackage,36,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
TypeReferenceRuntimeBuilderContext.java,spoon.support.visitor.java.internal.TypeReferenceRuntimeBuilderContext,void,addTypeName,46,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtThrowImpl.java,spoon.support.reflect.code.CtThrowImpl,void,accept,36,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtThrow](spoon.reflect.visitor.CtInheritanceScannerTest)
CtThrowImpl.java,spoon.support.reflect.code.CtThrowImpl,null,clone,56,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtThrow extends spoon.reflect.code.CtCFlowBreak , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<? extends java.lang.Throwable> getThrownExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtThrow> T setThrownExpression(spoon.reflect.code.CtExpression<? extends java.lang.Throwable> thrownExpression);

    @java.lang.Override
    spoon.reflect.code.CtThrow clone();
}](spoon.test.parent.SetParentTest)
CtThrowImpl.java,spoon.support.reflect.code.CtThrowImpl,null,getSubstitution,65,NO_COVERAGE,none
CtThrowImpl.java,spoon.support.reflect.code.CtThrowImpl,null,setThrownExpression,46,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtThrow extends spoon.reflect.code.CtCFlowBreak , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<? extends java.lang.Throwable> getThrownExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtThrow> T setThrownExpression(spoon.reflect.code.CtExpression<? extends java.lang.Throwable> thrownExpression);

    @java.lang.Override
    spoon.reflect.code.CtThrow clone();
}](spoon.test.parent.ParentContractTest)
CtBreakImpl.java,spoon.support.reflect.code.CtBreakImpl,void,accept,40,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtBreak](spoon.reflect.visitor.CtInheritanceScannerTest)
CtBreakImpl.java,spoon.support.reflect.code.CtBreakImpl,null,clone,73,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtBreak extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtBreak clone();
}](spoon.test.parent.SetParentTest)
CtBreakImpl.java,spoon.support.reflect.code.CtBreakImpl,null,getLabelledStatement,57,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
CtBreakImpl.java,spoon.support.reflect.code.CtBreakImpl,null,setTargetLabel,50,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
QueryFactory.java,spoon.reflect.factory.QueryFactory,null,createQuery,40,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
QueryFactory.java,spoon.reflect.factory.QueryFactory,null,createQuery,58,KILLED,spoon.test.filters.FilterTest.testQueryWithOptionalNumberOfInputs(spoon.test.filters.FilterTest)
QueryFactory.java,spoon.reflect.factory.QueryFactory,null,createQuery,49,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
QueryFactory.java,spoon.reflect.factory.QueryFactory,null,createQuery,66,KILLED,spoon.LauncherTest.testLLauncherBuildModelReturnAModel(spoon.LauncherTest)
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder,void,createNode,41,NO_COVERAGE,none
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder,void,enter,83,NO_COVERAGE,none
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder,void,exit,89,NO_COVERAGE,none
SpoonTreeBuilder.java,spoon.support.gui.SpoonTreeBuilder,void,scan,77,NO_COVERAGE,none
CtCodeSnippetExpressionImpl.java,spoon.support.reflect.code.CtCodeSnippetExpressionImpl,void,accept,34,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CtCodeSnippetExpressionImpl.java,spoon.support.reflect.code.CtCodeSnippetExpressionImpl,null,clone,59,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCodeSnippetExpression<T> extends spoon.reflect.code.CtExpression<T> , spoon.reflect.declaration.CtCodeSnippet {
    <E extends spoon.reflect.code.CtExpression<T>> E compile() throws spoon.support.compiler.SnippetCompilationError;

    @java.lang.Override
    spoon.reflect.code.CtCodeSnippetExpression<T> clone();
}](spoon.test.parent.SetParentTest)
CtCodeSnippetExpressionImpl.java,spoon.support.reflect.code.CtCodeSnippetExpressionImpl,null,compile,54,KILLED,spoon.test.snippets.SnippetTest.testCompileSnippetSeveralTimes(spoon.test.snippets.SnippetTest)
CtCodeSnippetExpressionImpl.java,spoon.support.reflect.code.CtCodeSnippetExpressionImpl,null,setValue,47,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
SubInheritanceHierarchyResolver.java,spoon.support.visitor.SubInheritanceHierarchyResolver,null,addSuperType,85,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
SubInheritanceHierarchyResolver.java,spoon.support.visitor.SubInheritanceHierarchyResolver,null,failOnClassNotFound,104,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
SubInheritanceHierarchyResolver.java,spoon.support.visitor.SubInheritanceHierarchyResolver,void,forEachSubTypeInPackage,121,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
SubInheritanceHierarchyResolver.java,spoon.support.visitor.SubInheritanceHierarchyResolver,null,includingInterfaces,96,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring,void,createNameConflictIssue,256,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring,void,createNameConflictIssue,264,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring,void,detectNameConflicts,128,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring,void,refactorNoCheck,71,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtAssertImpl.java,spoon.support.reflect.code.CtAssertImpl,void,accept,39,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtAssert](spoon.reflect.visitor.CtInheritanceScannerTest)
CtAssertImpl.java,spoon.support.reflect.code.CtAssertImpl,null,clone,74,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtAssert<T> extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getAssertExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <A extends spoon.reflect.code.CtAssert<T>> A setAssertExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> asserted);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <A extends spoon.reflect.code.CtAssert<T>> A setExpression(spoon.reflect.code.CtExpression<T> expression);

    @java.lang.Override
    spoon.reflect.code.CtAssert<T> clone();
}](spoon.test.parent.SetParentTest)
CtAssertImpl.java,spoon.support.reflect.code.CtAssertImpl,null,setAssertExpression,49,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtAssert<T> extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getAssertExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <A extends spoon.reflect.code.CtAssert<T>> A setAssertExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> asserted);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <A extends spoon.reflect.code.CtAssert<T>> A setExpression(spoon.reflect.code.CtExpression<T> expression);

    @java.lang.Override
    spoon.reflect.code.CtAssert<T> clone();
}](spoon.test.parent.ParentContractTest)
CtAssertImpl.java,spoon.support.reflect.code.CtAssertImpl,null,setExpression,64,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtAssert<T> extends spoon.reflect.code.CtStatement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.CONDITION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getAssertExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.CONDITION)
    <A extends spoon.reflect.code.CtAssert<T>> A setAssertExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> asserted);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<T> getExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <A extends spoon.reflect.code.CtAssert<T>> A setExpression(spoon.reflect.code.CtExpression<T> expression);

    @java.lang.Override
    spoon.reflect.code.CtAssert<T> clone();
}](spoon.test.parent.ParentContractTest)
CtReturnImpl.java,spoon.support.reflect.code.CtReturnImpl,void,accept,37,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtReturn](spoon.reflect.visitor.CtInheritanceScannerTest)
CtReturnImpl.java,spoon.support.reflect.code.CtReturnImpl,null,clone,57,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtReturn<R> extends spoon.reflect.code.CtCFlowBreak , spoon.template.TemplateParameter<java.lang.Void> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<R> getReturnedExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtReturn<R>> T setReturnedExpression(spoon.reflect.code.CtExpression<R> returnedExpression);

    @java.lang.Override
    spoon.reflect.code.CtReturn<R> clone();
}](spoon.test.parent.SetParentTest)
CtReturnImpl.java,spoon.support.reflect.code.CtReturnImpl,null,getSubstitution,66,NO_COVERAGE,none
CtReturnImpl.java,spoon.support.reflect.code.CtReturnImpl,null,setReturnedExpression,47,KILLED,spoon.test.filters.CUFilterTest.testSingleExcludeWithFilter(spoon.test.filters.CUFilterTest)
CtExpressionImpl.java,spoon.support.reflect.code.CtExpressionImpl,null,addTypeCast,80,KILLED,spoon.test.targeted.TargetedExpressionTest.testCastWriteWithGenerics(spoon.test.targeted.TargetedExpressionTest)
CtExpressionImpl.java,spoon.support.reflect.code.CtExpressionImpl,null,clone,99,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtExpressionImpl.java,spoon.support.reflect.code.CtExpressionImpl,null,setType,53,KILLED,spoon.test.literal.LiteralTest.testFactoryLiternal(spoon.test.literal.LiteralTest)
CtExpressionImpl.java,spoon.support.reflect.code.CtExpressionImpl,null,setTypeCasts,63,KILLED,spoon.reflect.ast.CloneTest.testCloneCastConditional(spoon.reflect.ast.CloneTest)
JDTBatchCompiler.java,spoon.support.compiler.jdt.JDTBatchCompiler,null,getBatchRequestor,77,KILLED,spoon.test.compilation.CompilationTest.testCompilationInEmptyDir(spoon.test.compilation.CompilationTest)
JDTBatchCompiler.java,spoon.support.compiler.jdt.JDTBatchCompiler,empty,getUnits,105,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
JDTBatchCompiler.java,spoon.support.compiler.jdt.JDTBatchCompiler,null,getUnits,105,KILLED,spoon.support.compiler.jdt.JDTBatchCompilerTest.testCompileGeneratedJavaFile(spoon.support.compiler.jdt.JDTBatchCompilerTest)
JDTBatchCompiler.java,spoon.support.compiler.jdt.JDTBatchCompiler,void,ignoreFile,97,NO_COVERAGE,none
CtForEachImpl.java,spoon.support.reflect.code.CtForEachImpl,void,accept,40,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtForEach](spoon.reflect.visitor.CtInheritanceScannerTest)
CtForEachImpl.java,spoon.support.reflect.code.CtForEachImpl,null,clone,75,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtForEach extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<?> getExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOREACH_VARIABLE)
    spoon.reflect.code.CtLocalVariable<?> getVariable();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtForEach> T setExpression(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOREACH_VARIABLE)
    <T extends spoon.reflect.code.CtForEach> T setVariable(spoon.reflect.code.CtLocalVariable<?> variable);

    @java.lang.Override
    spoon.reflect.code.CtForEach clone();
}](spoon.test.parent.SetParentTest)
CtForEachImpl.java,spoon.support.reflect.code.CtForEachImpl,null,setExpression,55,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtForEach extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<?> getExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOREACH_VARIABLE)
    spoon.reflect.code.CtLocalVariable<?> getVariable();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtForEach> T setExpression(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOREACH_VARIABLE)
    <T extends spoon.reflect.code.CtForEach> T setVariable(spoon.reflect.code.CtLocalVariable<?> variable);

    @java.lang.Override
    spoon.reflect.code.CtForEach clone();
}](spoon.test.parent.ParentContractTest)
CtForEachImpl.java,spoon.support.reflect.code.CtForEachImpl,null,setVariable,65,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtForEach extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<?> getExpression();

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.FOREACH_VARIABLE)
    spoon.reflect.code.CtLocalVariable<?> getVariable();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtForEach> T setExpression(spoon.reflect.code.CtExpression<?> expression);

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.FOREACH_VARIABLE)
    <T extends spoon.reflect.code.CtForEach> T setVariable(spoon.reflect.code.CtLocalVariable<?> variable);

    @java.lang.Override
    spoon.reflect.code.CtForEach clone();
}](spoon.test.parent.ParentContractTest)
VariableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.VariableRuntimeBuilderContext,void,addAnnotation,43,SURVIVED,none
VariableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.VariableRuntimeBuilderContext,void,addArrayReference,58,KILLED,spoon.test.model.TypeTest.testGetDeclaredOrIheritedFieldByReflection(spoon.test.model.TypeTest)
VariableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.VariableRuntimeBuilderContext,void,addClassReference,48,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredMethods(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
VariableRuntimeBuilderContext.java,spoon.support.visitor.java.internal.VariableRuntimeBuilderContext,void,addTypeName,53,KILLED,spoon.test.generics.GenericsTest.testWildCardonShadowClass(spoon.test.generics.GenericsTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$Context,null,enter,150,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$Context,void,exit,158,SURVIVED,none
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$Context,false,hasLocalType,163,KILLED,spoon.test.query_function.VariableReferencesTest.testLocalVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$Context,true,hasLocalType,163,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
CtCatchImpl.java,spoon.support.reflect.code.CtCatchImpl,void,accept,42,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtCatch](spoon.reflect.visitor.CtInheritanceScannerTest)
CtCatchImpl.java,spoon.support.reflect.code.CtCatchImpl,null,clone,84,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtCatch extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PARAMETER)
    spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable> getParameter();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PARAMETER)
    <T extends spoon.reflect.code.CtCatch> T setParameter(spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable> parameter);

    @java.lang.Override
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBody();

    @java.lang.Override
    spoon.reflect.code.CtCatch clone();
}](spoon.test.parent.SetParentTest)
CtCatchImpl.java,spoon.support.reflect.code.CtCatchImpl,null,setBody,57,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtCatch extends spoon.reflect.code.CtBodyHolder , spoon.reflect.code.CtCodeElement {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.PARAMETER)
    spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable> getParameter();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.PARAMETER)
    <T extends spoon.reflect.code.CtCatch> T setParameter(spoon.reflect.code.CtCatchVariable<? extends java.lang.Throwable> parameter);

    @java.lang.Override
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.BODY)
    spoon.reflect.code.CtBlock<?> getBody();

    @java.lang.Override
    spoon.reflect.code.CtCatch clone();
}](spoon.test.parent.ParentContractTest)
CtCatchImpl.java,spoon.support.reflect.code.CtCatchImpl,null,setParameter,74,KILLED,spoon.test.imports.ImportScannerTest.testMultiCatchImport(spoon.test.imports.ImportScannerTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler,null,asCollection,44,NO_COVERAGE,none
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler,null,asList,49,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler,null,asSet,127,NO_COVERAGE,none
SingleHandler.java,spoon.reflect.meta.impl.SingleHandler,null,getContainerKind,40,KILLED,spoon.test.path.PathTest.testGetPathFromNonParent(spoon.test.path.PathTest)
CtContinueImpl.java,spoon.support.reflect.code.CtContinueImpl,void,accept,40,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtContinue](spoon.reflect.visitor.CtInheritanceScannerTest)
CtContinueImpl.java,spoon.support.reflect.code.CtContinueImpl,null,clone,73,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtContinueImpl.java,spoon.support.reflect.code.CtContinueImpl,null,getLabelledStatement,57,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
CtContinueImpl.java,spoon.support.reflect.code.CtContinueImpl,null,setTargetLabel,50,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
SubInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction,void,apply,78,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
SubInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction,null,failOnClassNotFound,72,NO_COVERAGE,none
SubInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction,null,includingInterfaces,64,NO_COVERAGE,none
SubInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction,null,includingSelf,56,NO_COVERAGE,none
MapHandler.java,spoon.reflect.meta.impl.MapHandler$1,null,entrySet,68,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
MapHandler.java,spoon.reflect.meta.impl.MapHandler$1,null,get,74,NO_COVERAGE,none
MapHandler.java,spoon.reflect.meta.impl.MapHandler$1,null,put,80,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotation](spoon.test.replace.ReplaceParametrizedTest)
CompilationUnit.java,spoon.reflect.cu.CompilationUnit$UNIT_TYPE,null,valueOf,35,SURVIVED,none
CompilationUnit.java,spoon.reflect.cu.CompilationUnit$UNIT_TYPE,empty,values,35,SURVIVED,none
CompilationUnit.java,spoon.reflect.cu.CompilationUnit$UNIT_TYPE,null,values,35,SURVIVED,none
ExpressionTemplate.java,spoon.template.ExpressionTemplate,null,apply,66,NO_COVERAGE,none
ExpressionTemplate.java,spoon.template.ExpressionTemplate,null,getExpression,41,NO_COVERAGE,none
ExpressionTemplate.java,spoon.template.ExpressionTemplate,null,getExpressionBlock,47,NO_COVERAGE,none
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext$ExecutableContext,null,getParameterTypes,724,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext$ExecutableContext,false,isSameSignatureLikeScopeMethod,652,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext$ExecutableContext,true,isSameSignatureLikeScopeMethod,652,KILLED,spoon.test.reference.TypeReferenceTest.testGetAllExecutablesForInterfaces(spoon.test.reference.TypeReferenceTest)
SourceOptions.java,spoon.compiler.builder.SourceOptions,null,sources,35,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
SourceOptions.java,spoon.compiler.builder.SourceOptions,null,sources,53,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
SourceOptions.java,spoon.compiler.builder.SourceOptions,null,sources,43,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
CtLiteralImpl.java,spoon.support.reflect.code.CtLiteralImpl,void,accept,35,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtLiteral](spoon.reflect.visitor.CtInheritanceScannerTest)
CtLiteralImpl.java,spoon.support.reflect.code.CtLiteralImpl,null,clone,55,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtLiteral<T> extends spoon.reflect.code.CtExpression<T> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.VALUE)
    T getValue();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.VALUE)
    <C extends spoon.reflect.code.CtLiteral<T>> C setValue(T value);

    @java.lang.Override
    spoon.reflect.code.CtLiteral<T> clone();
}](spoon.test.parent.SetParentTest)
CtLiteralImpl.java,spoon.support.reflect.code.CtLiteralImpl,null,setValue,45,KILLED,spoon.test.literal.LiteralTest.testFactoryLiternal(spoon.test.literal.LiteralTest)
SiblingsFunction.java,spoon.reflect.visitor.filter.SiblingsFunction,void,apply,69,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
SiblingsFunction.java,spoon.reflect.visitor.filter.SiblingsFunction,null,includingSelf,55,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
SiblingsFunction.java,spoon.reflect.visitor.filter.SiblingsFunction,null,mode,63,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
CtDoImpl.java,spoon.support.reflect.code.CtDoImpl,void,accept,35,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtDo](spoon.reflect.visitor.CtInheritanceScannerTest)
CtDoImpl.java,spoon.support.reflect.code.CtDoImpl,null,clone,55,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtDo extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getLoopingExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtDo> T setLoopingExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @java.lang.Override
    spoon.reflect.code.CtDo clone();
}](spoon.test.parent.SetParentTest)
CtDoImpl.java,spoon.support.reflect.code.CtDoImpl,null,setLoopingExpression,45,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtDo extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getLoopingExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtDo> T setLoopingExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @java.lang.Override
    spoon.reflect.code.CtDo clone();
}](spoon.test.parent.ParentContractTest)
CtVariableReferenceImpl.java,spoon.support.reflect.reference.CtVariableReferenceImpl,null,clone,85,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtVariableReferenceImpl.java,spoon.support.reflect.reference.CtVariableReferenceImpl,null,getModifiers,76,NO_COVERAGE,none
CtVariableReferenceImpl.java,spoon.support.reflect.reference.CtVariableReferenceImpl,null,setType,55,KILLED,spoon.test.reference.VariableAccessTest.testSuperAccess(spoon.test.reference.VariableAccessTest)
EmptyIterator.java,spoon.support.util.EmptyIterator,null,instance,26,KILLED,spoon.test.field.FieldTest.testAddAFieldInAClassAtAPositionGiven(spoon.test.field.FieldTest)
EmptyIterator.java,spoon.support.util.EmptyIterator,null,next,39,NO_COVERAGE,none
EmptyIterator.java,spoon.support.util.EmptyIterator,void,remove,44,NO_COVERAGE,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$3,false,apply,185,NON_VIABLE,none
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$3,null,apply,185,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$3,true,apply,185,NON_VIABLE,none
OverriddenMethodFilter.java,spoon.reflect.visitor.filter.OverriddenMethodFilter,null,includingSelf,47,NO_COVERAGE,none
OverriddenMethodFilter.java,spoon.reflect.visitor.filter.OverriddenMethodFilter,false,matches,53,KILLED,spoon.test.filters.FilterTest.testOverriddenMethodsFromSubClassOfAbstractClass(spoon.test.filters.FilterTest)
OverriddenMethodFilter.java,spoon.reflect.visitor.filter.OverriddenMethodFilter,true,matches,53,KILLED,spoon.test.filters.FilterTest.testOverriddenMethodFromInterface(spoon.test.filters.FilterTest)
CtUsedServiceImpl.java,spoon.support.reflect.declaration.CtUsedServiceImpl,void,accept,31,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtUsedService](spoon.reflect.visitor.CtInheritanceScannerTest)
CtUsedServiceImpl.java,spoon.support.reflect.declaration.CtUsedServiceImpl,null,clone,36,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtUsedService extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    spoon.reflect.reference.CtTypeReference getServiceType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    <T extends spoon.reflect.declaration.CtUsedService> T setServiceType(spoon.reflect.reference.CtTypeReference providingType);

    @java.lang.Override
    spoon.reflect.declaration.CtUsedService clone();
}](spoon.test.parent.SetParentTest)
CtUsedServiceImpl.java,spoon.support.reflect.declaration.CtUsedServiceImpl,null,setServiceType,20,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtUsedService extends spoon.reflect.declaration.CtModuleDirective {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    spoon.reflect.reference.CtTypeReference getServiceType();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.SERVICE_TYPE)
    <T extends spoon.reflect.declaration.CtUsedService> T setServiceType(spoon.reflect.reference.CtTypeReference providingType);

    @java.lang.Override
    spoon.reflect.declaration.CtUsedService clone();
}](spoon.test.parent.ParentContractTest)
CtAnnotatedElementType.java,spoon.reflect.declaration.CtAnnotatedElementType,null,valueOf,22,NO_COVERAGE,none
CtAnnotatedElementType.java,spoon.reflect.declaration.CtAnnotatedElementType,empty,values,22,NO_COVERAGE,none
CtAnnotatedElementType.java,spoon.reflect.declaration.CtAnnotatedElementType,null,values,22,NO_COVERAGE,none
Check.java,spoon.testing.utils.Check,null,assertExists,36,SURVIVED,none
Check.java,spoon.testing.utils.Check,null,assertIsSame,43,SURVIVED,none
Check.java,spoon.testing.utils.Check,null,assertNotNull,29,SURVIVED,none
PotentialVariableDeclarationFunction.java,spoon.reflect.visitor.filter.PotentialVariableDeclarationFunction,void,apply,89,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
PotentialVariableDeclarationFunction.java,spoon.reflect.visitor.filter.PotentialVariableDeclarationFunction,false,sendToOutput,160,KILLED,spoon.test.field.FieldTest.testFieldImplicitTarget(spoon.test.field.FieldTest)
PotentialVariableDeclarationFunction.java,spoon.reflect.visitor.filter.PotentialVariableDeclarationFunction,true,sendToOutput,160,KILLED,spoon.test.field.FieldTest.testFieldImplicitTarget(spoon.test.field.FieldTest)
LambdaFilter.java,spoon.reflect.visitor.filter.LambdaFilter,null,addImplementingInterface,63,KILLED,spoon.test.lambda.LambdaTest.testLambdaFilter(spoon.test.lambda.LambdaTest)
LambdaFilter.java,spoon.reflect.visitor.filter.LambdaFilter,false,matches,77,KILLED,spoon.test.lambda.LambdaTest.testLambdaFilter(spoon.test.lambda.LambdaTest)
LambdaFilter.java,spoon.reflect.visitor.filter.LambdaFilter,true,matches,77,KILLED,spoon.test.lambda.LambdaTest.testLambdaFilter(spoon.test.lambda.LambdaTest)
OverridingMethodFilter.java,spoon.reflect.visitor.filter.OverridingMethodFilter,null,includingSelf,44,NO_COVERAGE,none
OverridingMethodFilter.java,spoon.reflect.visitor.filter.OverridingMethodFilter,false,matches,50,KILLED,spoon.test.filters.FilterTest.testOverridingMethodFromSubClassOfInterface(spoon.test.filters.FilterTest)
OverridingMethodFilter.java,spoon.reflect.visitor.filter.OverridingMethodFilter,true,matches,50,KILLED,spoon.test.filters.FilterTest.testOverridingMethodFromSubClassOfInterface(spoon.test.filters.FilterTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType$1,void,insert,179,KILLED,spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertBeforeWithoutBrace(spoon.test.intercession.insertBefore.InsertMethodsTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType$1,void,insertFromFirstStatement,184,KILLED,spoon.test.processing.ProcessingTest.testInsertBegin(spoon.test.processing.ProcessingTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType$1,null,insertFromLastStatement,194,KILLED,spoon.test.ctCase.SwitchCaseTest.insertBeforeStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
CtLocalVariableReferenceImpl.java,spoon.support.reflect.reference.CtLocalVariableReferenceImpl,void,accept,47,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtLocalVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtLocalVariableReferenceImpl.java,spoon.support.reflect.reference.CtLocalVariableReferenceImpl,null,clone,89,KILLED,spoon.test.reference.VariableAccessTest.testDeclarationOfVariableReference(spoon.test.reference.VariableAccessTest)
CtLocalVariableReferenceImpl.java,spoon.support.reflect.reference.CtLocalVariableReferenceImpl,null,getDeclaration,54,KILLED,spoon.test.reference.VariableAccessTest.testReferences(spoon.test.reference.VariableAccessTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType$2,void,insert,205,KILLED,spoon.test.intercession.insertBefore.InsertMethodsTest.testInsertAfterWithoutBrace(spoon.test.intercession.insertBefore.InsertMethodsTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType$2,void,insertFromFirstStatement,210,KILLED,spoon.test.processing.ProcessingTest.testInsertEnd(spoon.test.processing.ProcessingTest)
CtStatementImpl.java,spoon.support.reflect.code.CtStatementImpl$InsertType$2,null,insertFromLastStatement,220,KILLED,spoon.test.ctCase.SwitchCaseTest.insertAfterStatementInSwitchCaseWithoutException(spoon.test.ctCase.SwitchCaseTest)
AbstractTypingContext.java,spoon.support.visitor.AbstractTypingContext,null,adaptType,41,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
AbstractTypingContext.java,spoon.support.visitor.AbstractTypingContext,null,adaptTypeParameterReference,76,KILLED,spoon.test.generics.GenericsTest.testIsSameSignatureWithMethodGenerics(spoon.test.generics.GenericsTest)
AbstractTypingContext.java,spoon.support.visitor.AbstractTypingContext,null,adaptTypeParameterReferenceBoundingType,84,KILLED,spoon.test.generics.GenericsTest.testRecursiveTypeAdapting(spoon.test.generics.GenericsTest)
ASTPair.java,spoon.support.compiler.jdt.ASTPair,"",toString,35,NO_COVERAGE,none
ASTPair.java,spoon.support.compiler.jdt.ASTPair,"A",toString,35,NO_COVERAGE,none
ASTPair.java,spoon.support.compiler.jdt.ASTPair,null,toString,35,NO_COVERAGE,none
CtModuleRequirement.java,spoon.reflect.declaration.CtModuleRequirement$RequiresModifier,null,valueOf,44,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtModuleRequirement.java,spoon.reflect.declaration.CtModuleRequirement$RequiresModifier,empty,values,44,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
CtModuleRequirement.java,spoon.reflect.declaration.CtModuleRequirement$RequiresModifier,null,values,44,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
AdvancedOptions.java,spoon.compiler.builder.AdvancedOptions,null,continueExecution,25,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
AdvancedOptions.java,spoon.compiler.builder.AdvancedOptions,null,enableJavadoc,30,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
AdvancedOptions.java,spoon.compiler.builder.AdvancedOptions,null,preserveUnusedVars,35,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
AbstractAssert.java,spoon.testing.AbstractAssert,null,withProcessor,64,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorName(spoon.testing.AbstractAssertTest)
AbstractAssert.java,spoon.testing.AbstractAssert,null,withProcessor,80,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorName(spoon.testing.AbstractAssertTest)
AbstractAssert.java,spoon.testing.AbstractAssert,null,withProcessor,51,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorInstantiated(spoon.testing.AbstractAssertTest)
CtImportKind.java,spoon.reflect.declaration.CtImportKind,null,valueOf,19,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfPrivateClass(spoon.test.imports.ImportTest)
CtImportKind.java,spoon.reflect.declaration.CtImportKind,empty,values,19,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfPrivateClass(spoon.test.imports.ImportTest)
CtImportKind.java,spoon.reflect.declaration.CtImportKind,null,values,19,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfPrivateClass(spoon.test.imports.ImportTest)
FilteringOperator.java,spoon.reflect.visitor.filter.FilteringOperator,null,valueOf,25,SURVIVED,none
FilteringOperator.java,spoon.reflect.visitor.filter.FilteringOperator,empty,values,25,SURVIVED,none
FilteringOperator.java,spoon.reflect.visitor.filter.FilteringOperator,null,values,25,SURVIVED,none
CommentHelper.java,spoon.reflect.visitor.CommentHelper,void,printComment,56,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CommentHelper.java,spoon.reflect.visitor.CommentHelper,void,printComment,48,KILLED,spoon.test.comment.CommentTest.testAddCommentsToSnippet(spoon.test.comment.CommentTest)
CommentHelper.java,spoon.reflect.visitor.CommentHelper,void,printJavaDocTag,113,KILLED,spoon.test.comment.CommentTest.testJavaDocCommentOnMac(spoon.test.comment.CommentTest)
CtModuleReferenceImpl.java,spoon.support.reflect.reference.CtModuleReferenceImpl,void,accept,43,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtModuleReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtModuleReferenceImpl.java,spoon.support.reflect.reference.CtModuleReferenceImpl,null,clone,48,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModuleRequirement](spoon.test.replace.ReplaceParametrizedTest)
CtModuleReferenceImpl.java,spoon.support.reflect.reference.CtModuleReferenceImpl,null,getDeclaration,33,NO_COVERAGE,none
ModelConsistencyChecker.java,spoon.reflect.visitor.ModelConsistencyChecker,void,dumpStack,90,NO_COVERAGE,none
ModelConsistencyChecker.java,spoon.reflect.visitor.ModelConsistencyChecker,void,enter,65,NO_COVERAGE,none
ModelConsistencyChecker.java,spoon.reflect.visitor.ModelConsistencyChecker,void,exit,86,NO_COVERAGE,none
CtScannerFunction.java,spoon.reflect.visitor.filter.CtScannerFunction$Scanner,false,isTerminated,96,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
CtScannerFunction.java,spoon.reflect.visitor.filter.CtScannerFunction$Scanner,true,isTerminated,96,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtScannerFunction.java,spoon.reflect.visitor.filter.CtScannerFunction$Scanner,void,onElement,87,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtCatchVariableReferenceImpl.java,spoon.support.reflect.reference.CtCatchVariableReferenceImpl,void,accept,35,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.reference.CtCatchVariableReference](spoon.reflect.visitor.CtInheritanceScannerTest)
CtCatchVariableReferenceImpl.java,spoon.support.reflect.reference.CtCatchVariableReferenceImpl,null,clone,60,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSuperAccess](spoon.test.replace.ReplaceParametrizedTest)
CtCatchVariableReferenceImpl.java,spoon.support.reflect.reference.CtCatchVariableReferenceImpl,null,getDeclaration,40,KILLED,spoon.test.reference.CloneReferenceTest.testGetDeclarationAfterClone(spoon.test.reference.CloneReferenceTest)
SiblingsFunction.java,spoon.reflect.visitor.filter.SiblingsFunction$Mode,null,valueOf,39,SURVIVED,none
SiblingsFunction.java,spoon.reflect.visitor.filter.SiblingsFunction$Mode,empty,values,39,SURVIVED,none
SiblingsFunction.java,spoon.reflect.visitor.filter.SiblingsFunction$Mode,null,values,39,SURVIVED,none
ScanningMode.java,spoon.reflect.visitor.chain.ScanningMode,null,valueOf,22,NO_COVERAGE,none
ScanningMode.java,spoon.reflect.visitor.chain.ScanningMode,empty,values,22,NO_COVERAGE,none
ScanningMode.java,spoon.reflect.visitor.chain.ScanningMode,null,values,22,NO_COVERAGE,none
CtWhileImpl.java,spoon.support.reflect.code.CtWhileImpl,void,accept,35,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtWhile](spoon.reflect.visitor.CtInheritanceScannerTest)
CtWhileImpl.java,spoon.support.reflect.code.CtWhileImpl,null,clone,55,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtWhile extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getLoopingExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtWhile> T setLoopingExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @java.lang.Override
    spoon.reflect.code.CtWhile clone();
}](spoon.test.parent.SetParentTest)
CtWhileImpl.java,spoon.support.reflect.code.CtWhileImpl,null,setLoopingExpression,45,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtWhile extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getLoopingExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtWhile> T setLoopingExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @java.lang.Override
    spoon.reflect.code.CtWhile clone();
}](spoon.test.parent.ParentContractTest)
SubtypeFilter.java,spoon.reflect.visitor.filter.SubtypeFilter,null,includingSelf,41,NO_COVERAGE,none
SubtypeFilter.java,spoon.reflect.visitor.filter.SubtypeFilter,false,matches,51,NO_COVERAGE,none
SubtypeFilter.java,spoon.reflect.visitor.filter.SubtypeFilter,true,matches,51,NO_COVERAGE,none
TraversalStrategy.java,spoon.processing.TraversalStrategy,null,valueOf,24,SURVIVED,none
TraversalStrategy.java,spoon.processing.TraversalStrategy,empty,values,24,SURVIVED,none
TraversalStrategy.java,spoon.processing.TraversalStrategy,null,values,24,SURVIVED,none
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction$Listener,null,enter,92,NO_COVERAGE,none
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction$Listener,null,enter,75,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction$Listener,void,exit,87,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$QueryCreator,void,visitCtCatchVariable,184,KILLED,spoon.test.query_function.VariableReferencesTest.testCatchVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$QueryCreator,void,visitCtLocalVariable,180,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$QueryCreator,void,visitCtParameter,188,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
ByteSerialization.java,spoon.support.util.ByteSerialization,null,deserialize,43,KILLED,spoon.test.serializable.SerializableTest.testSerialCtStatement(spoon.test.serializable.SerializableTest)
ByteSerialization.java,spoon.support.util.ByteSerialization,empty,serialize,31,KILLED,spoon.test.serializable.SerializableTest.testSerialFile(spoon.test.serializable.SerializableTest)
ByteSerialization.java,spoon.support.util.ByteSerialization,null,serialize,31,KILLED,spoon.test.serializable.SerializableTest.testSerialFile(spoon.test.serializable.SerializableTest)
BinaryOperatorKind.java,spoon.reflect.code.BinaryOperatorKind,null,valueOf,22,SURVIVED,none
BinaryOperatorKind.java,spoon.reflect.code.BinaryOperatorKind,empty,values,22,SURVIVED,none
BinaryOperatorKind.java,spoon.reflect.code.BinaryOperatorKind,null,values,22,SURVIVED,none
CtSuperAccessImpl.java,spoon.support.reflect.code.CtSuperAccessImpl,void,accept,34,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtSuperAccess](spoon.reflect.visitor.CtInheritanceScannerTest)
CtSuperAccessImpl.java,spoon.support.reflect.code.CtSuperAccessImpl,null,clone,57,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtSuperAccess<T> extends spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> , spoon.reflect.code.CtVariableRead<T> {
    @java.lang.Override
    spoon.reflect.code.CtSuperAccess<T> clone();

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtTypeReference<T> getType();
}](spoon.test.parent.SetParentTest)
CtSuperAccessImpl.java,spoon.support.reflect.code.CtSuperAccessImpl,null,setTarget,47,KILLED,spoon.test.targeted.TargetedExpressionTest.testCtSuperAccess(spoon.test.targeted.TargetedExpressionTest)
CtExecutableReferenceExpressionImpl.java,spoon.support.reflect.code.CtExecutableReferenceExpressionImpl,void,accept,34,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtExecutableReferenceExpression](spoon.reflect.visitor.CtInheritanceScannerTest)
CtExecutableReferenceExpressionImpl.java,spoon.support.reflect.code.CtExecutableReferenceExpressionImpl,null,clone,54,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtExecutableReferenceExpression<T, E extends spoon.reflect.code.CtExpression<?>> extends spoon.reflect.code.CtTargetedExpression<T, E> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXECUTABLE_REF)
    spoon.reflect.reference.CtExecutableReference<T> getExecutable();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXECUTABLE_REF)
    <C extends spoon.reflect.code.CtExecutableReferenceExpression<T, E>> C setExecutable(spoon.reflect.reference.CtExecutableReference<T> executable);

    @java.lang.Override
    spoon.reflect.code.CtExecutableReferenceExpression<T, E> clone();
}](spoon.test.parent.SetParentTest)
CtExecutableReferenceExpressionImpl.java,spoon.support.reflect.code.CtExecutableReferenceExpressionImpl,null,setExecutable,44,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtExecutableReferenceExpression<T, E extends spoon.reflect.code.CtExpression<?>> extends spoon.reflect.code.CtTargetedExpression<T, E> {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXECUTABLE_REF)
    spoon.reflect.reference.CtExecutableReference<T> getExecutable();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXECUTABLE_REF)
    <C extends spoon.reflect.code.CtExecutableReferenceExpression<T, E>> C setExecutable(spoon.reflect.reference.CtExecutableReference<T> executable);

    @java.lang.Override
    spoon.reflect.code.CtExecutableReferenceExpression<T, E> clone();
}](spoon.test.parent.ParentContractTest)
CtFieldAccessImpl.java,spoon.support.reflect.code.CtFieldAccessImpl,null,clone,64,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtFieldAccessImpl.java,spoon.support.reflect.code.CtFieldAccessImpl,null,getVariable,51,KILLED,spoon.test.annotation.AnnotationValuesTest.testCtAnnotationAPI(spoon.test.annotation.AnnotationValuesTest)
CtFieldAccessImpl.java,spoon.support.reflect.code.CtFieldAccessImpl,null,setTarget,41,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessOnUnknownType(spoon.test.fieldaccesses.FieldAccessTest)
CtNewClassImpl.java,spoon.support.reflect.code.CtNewClassImpl,void,accept,34,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtNewClass](spoon.reflect.visitor.CtInheritanceScannerTest)
CtNewClassImpl.java,spoon.support.reflect.code.CtNewClassImpl,null,clone,54,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtNewClass<T> extends spoon.reflect.code.CtConstructorCall<T> {
    @java.lang.Override
    @spoon.support.DerivedProperty
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    java.util.List<spoon.reflect.reference.CtTypeReference<?>> getActualTypeArguments();

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T setActualTypeArguments(java.util.List<? extends spoon.reflect.reference.CtTypeReference<?>> actualTypeArguments);

    @java.lang.Override
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.TYPE_ARGUMENT)
    <T extends spoon.reflect.reference.CtActualTypeContainer> T addActualTypeArgument(spoon.reflect.reference.CtTypeReference<?> actualTypeArgument);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.NESTED_TYPE)
    spoon.reflect.declaration.CtClass<?> getAnonymousClass();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.NESTED_TYPE)
    <N extends spoon.reflect.code.CtNewClass> N setAnonymousClass(spoon.reflect.declaration.CtClass<?> anonymousClass);

    @java.lang.Override
    spoon.reflect.code.CtNewClass<T> clone();
}](spoon.test.parent.SetParentTest)
CtNewClassImpl.java,spoon.support.reflect.code.CtNewClassImpl,null,setAnonymousClass,44,KILLED,spoon.test.limits.utils.InternalTest.testStaticFinalFieldInAnonymousClass(spoon.test.limits.utils.InternalTest)
QueryFailurePolicy.java,spoon.reflect.visitor.chain.QueryFailurePolicy,null,valueOf,22,NO_COVERAGE,none
QueryFailurePolicy.java,spoon.reflect.visitor.chain.QueryFailurePolicy,empty,values,22,NO_COVERAGE,none
QueryFailurePolicy.java,spoon.reflect.visitor.chain.QueryFailurePolicy,null,values,22,NO_COVERAGE,none
Refactoring.java,spoon.refactoring.Refactoring$4,void,visitCtExecutableReference,143,KILLED,spoon.reflect.ast.CloneTest.testCopyType(spoon.reflect.ast.CloneTest)
Refactoring.java,spoon.refactoring.Refactoring$4,void,visitCtFieldReference,159,KILLED,spoon.reflect.ast.CloneTest.testCopyType(spoon.reflect.ast.CloneTest)
Refactoring.java,spoon.refactoring.Refactoring$4,void,visitCtTypeReference,129,SURVIVED,none
CtLoopImpl.java,spoon.support.reflect.code.CtLoopImpl,null,clone,60,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtDo extends spoon.reflect.code.CtLoop {
    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    spoon.reflect.code.CtExpression<java.lang.Boolean> getLoopingExpression();

    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.EXPRESSION)
    <T extends spoon.reflect.code.CtDo> T setLoopingExpression(spoon.reflect.code.CtExpression<java.lang.Boolean> expression);

    @java.lang.Override
    spoon.reflect.code.CtDo clone();
}](spoon.test.parent.SetParentTest)
CtLoopImpl.java,spoon.support.reflect.code.CtLoopImpl,null,getSubstitution,69,NO_COVERAGE,none
CtLoopImpl.java,spoon.support.reflect.code.CtLoopImpl,null,setBody,44,KILLED,spoon.test.control.ControlTest.testModelBuildingDoWhile(spoon.test.control.ControlTest)
EmptyClearableList.java,spoon.support.util.EmptyClearableList$EmptyListIterator,void,add,138,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList$EmptyListIterator,null,previous,118,NO_COVERAGE,none
EmptyClearableList.java,spoon.support.util.EmptyClearableList$EmptyListIterator,void,set,133,NO_COVERAGE,none
ProcessingVisitor.java,spoon.support.visitor.ProcessingVisitor,false,canBeProcessed,42,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
ProcessingVisitor.java,spoon.support.visitor.ProcessingVisitor,true,canBeProcessed,42,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
ProcessingVisitor.java,spoon.support.visitor.ProcessingVisitor,void,scan,67,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
ExecutableReferenceFilter.java,spoon.reflect.visitor.filter.ExecutableReferenceFilter,null,addExecutable,67,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
ExecutableReferenceFilter.java,spoon.reflect.visitor.filter.ExecutableReferenceFilter,false,matches,83,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
ExecutableReferenceFilter.java,spoon.reflect.visitor.filter.ExecutableReferenceFilter,true,matches,83,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtOperatorAssignmentImpl.java,spoon.support.reflect.code.CtOperatorAssignmentImpl,void,accept,35,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtOperatorAssignment](spoon.reflect.visitor.CtInheritanceScannerTest)
CtOperatorAssignmentImpl.java,spoon.support.reflect.code.CtOperatorAssignmentImpl,null,clone,52,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtOperatorAssignment<T, A extends T> extends spoon.reflect.code.CtAssignment<T, A> {
    @spoon.reflect.annotations.PropertySetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    <C extends spoon.reflect.code.CtOperatorAssignment<T, A>> C setKind(spoon.reflect.code.BinaryOperatorKind kind);

    @spoon.reflect.annotations.PropertyGetter(role = spoon.reflect.path.CtRole.OPERATOR_KIND)
    spoon.reflect.code.BinaryOperatorKind getKind();

    @java.lang.Override
    spoon.reflect.code.CtOperatorAssignment<T, A> clone();
}](spoon.test.parent.SetParentTest)
CtOperatorAssignmentImpl.java,spoon.support.reflect.code.CtOperatorAssignmentImpl,null,setKind,45,KILLED,spoon.test.visitor.AssignmentsEqualsTest.testEquals(spoon.test.visitor.AssignmentsEqualsTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1FindCommentParentScanner,false,isCommentBetweenElementPosition,499,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1FindCommentParentScanner,true,isCommentBetweenElementPosition,499,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
JDTCommentBuilder.java,spoon.support.compiler.jdt.JDTCommentBuilder$1FindCommentParentScanner,void,scan,506,KILLED,spoon.test.comment.CommentTest.testSnippedWithComments(spoon.test.comment.CommentTest)
MavenLauncher.java,spoon.MavenLauncher$SOURCE_TYPE,null,valueOf,49,SURVIVED,none
MavenLauncher.java,spoon.MavenLauncher$SOURCE_TYPE,empty,values,49,SURVIVED,none
MavenLauncher.java,spoon.MavenLauncher$SOURCE_TYPE,null,values,49,SURVIVED,none
CtComment.java,spoon.reflect.code.CtComment$CommentType,null,valueOf,35,SURVIVED,none
CtComment.java,spoon.reflect.code.CtComment$CommentType,empty,values,35,SURVIVED,none
CtComment.java,spoon.reflect.code.CtComment$CommentType,null,values,35,SURVIVED,none
UnaryOperatorKind.java,spoon.reflect.code.UnaryOperatorKind,null,valueOf,22,SURVIVED,none
UnaryOperatorKind.java,spoon.reflect.code.UnaryOperatorKind,empty,values,22,SURVIVED,none
UnaryOperatorKind.java,spoon.reflect.code.UnaryOperatorKind,null,values,22,SURVIVED,none
CommentOffset.java,spoon.reflect.visitor.printer.CommentOffset,null,valueOf,19,NO_COVERAGE,none
CommentOffset.java,spoon.reflect.visitor.printer.CommentOffset,empty,values,19,NO_COVERAGE,none
CommentOffset.java,spoon.reflect.visitor.printer.CommentOffset,null,values,19,NO_COVERAGE,none
ContainerKind.java,spoon.reflect.meta.ContainerKind,null,valueOf,22,KILLED,spoon.test.path.PathTest.testGetPathFromNonParent(spoon.test.path.PathTest)
ContainerKind.java,spoon.reflect.meta.ContainerKind,empty,values,22,KILLED,spoon.test.path.PathTest.testGetPathFromNonParent(spoon.test.path.PathTest)
ContainerKind.java,spoon.reflect.meta.ContainerKind,null,values,22,KILLED,spoon.test.path.PathTest.testGetPathFromNonParent(spoon.test.path.PathTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAnnotation_VALUE_RoleHandler,null,getValue,2133,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAnnotation_VALUE_RoleHandler,void,setValue,2138,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotation](spoon.test.replace.ReplaceParametrizedTest)
SignatureComparator.java,spoon.support.comparator.SignatureComparator,0,compare,34,KILLED,spoon.test.interfaces.TestInterfaceWithoutSetup.testModifierFromInterfaceFieldAndMethod(spoon.test.interfaces.TestInterfaceWithoutSetup)
SignatureComparator.java,spoon.support.comparator.SignatureComparator,1,compare,34,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtNewArray_EXPRESSION_RoleHandler,null,getValue,873,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewArray](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtNewArray_EXPRESSION_RoleHandler,void,setValue,878,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewArray](spoon.test.replace.ReplaceParametrizedTest)
Launcher.java,spoon.Launcher$3,false,matches,788,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
Launcher.java,spoon.Launcher$3,true,matches,788,KILLED,spoon.test.api.APITest.testPrintNotAllSourcesWithNames(spoon.test.api.APITest)
Launcher.java,spoon.Launcher$1,false,accept,696,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
Launcher.java,spoon.Launcher$1,true,accept,696,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler,null,getValue,1276,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtJavaDocTag_JAVADOC_TAG_VALUE_RoleHandler,void,setValue,1281,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtShadowable_IS_SHADOW_RoleHandler,null,getValue,1191,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtShadowable_IS_SHADOW_RoleHandler,void,setValue,1196,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtBinaryOperator_RIGHT_OPERAND_RoleHandler,null,getValue,1747,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtBinaryOperator_RIGHT_OPERAND_RoleHandler,void,setValue,1752,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtBinaryOperator](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtComment_COMMENT_CONTENT_RoleHandler,null,getValue,397,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtComment_COMMENT_CONTENT_RoleHandler,void,setValue,402,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFor_EXPRESSION_RoleHandler,null,getValue,822,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFor_EXPRESSION_RoleHandler,void,setValue,827,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_PROVIDED_SERVICE_RoleHandler,null,getValue,1713,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_PROVIDED_SERVICE_RoleHandler,void,setValue,1718,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModuleRequirement_MODULE_REF_RoleHandler,null,getValue,1424,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModuleRequirement_MODULE_REF_RoleHandler,void,setValue,1429,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModuleRequirement](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtClass_CONSTRUCTOR_RoleHandler,null,getValue,516,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtClass_CONSTRUCTOR_RoleHandler,void,setValue,521,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ContextBuilder.java,spoon.support.compiler.jdt.ContextBuilder$ScopeRespectingVariableScanner,void,finish,367,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
ContextBuilder.java,spoon.support.compiler.jdt.ContextBuilder$ScopeRespectingVariableScanner,void,scan,333,KILLED,spoon.test.parameters.ParameterTest.testGetParameterReferenceInLambdaNoClasspath(spoon.test.parameters.ParameterTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_MODULE_DIRECTIVE_RoleHandler,null,getValue,1407,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_MODULE_DIRECTIVE_RoleHandler,void,setValue,1412,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtVariable_DEFAULT_EXPRESSION_RoleHandler,null,getValue,618,KILLED,spoon.test.path.PathTest.testBuilder(spoon.test.path.PathTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtVariable_DEFAULT_EXPRESSION_RoleHandler,void,setValue,623,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtLocalVariable](spoon.test.replace.ReplaceParametrizedTest)
SerializationModelStreamer.java,spoon.support.SerializationModelStreamer$1,false,matches,59,SURVIVED,none
SerializationModelStreamer.java,spoon.support.SerializationModelStreamer$1,true,matches,59,SURVIVED,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtUsedService_SERVICE_TYPE_RoleHandler,null,getValue,1798,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtUsedService_SERVICE_TYPE_RoleHandler,void,setValue,1803,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUsedService](spoon.test.replace.ReplaceParametrizedTest)
CtEnumValueImpl.java,spoon.support.reflect.declaration.CtEnumValueImpl,void,accept,27,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.declaration.CtEnumValue](spoon.reflect.visitor.CtInheritanceScannerTest)
CtEnumValueImpl.java,spoon.support.reflect.declaration.CtEnumValueImpl,null,clone,32,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtEnumValue<T> extends spoon.reflect.declaration.CtField<T> {
    @java.lang.Override
    spoon.reflect.declaration.CtEnumValue clone();
}](spoon.test.parent.SetParentTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModuleRequirement_MODIFIER_RoleHandler,null,getValue,1378,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModuleRequirement_MODIFIER_RoleHandler,void,setValue,1383,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_MODIFIER_RoleHandler,null,getValue,1361,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_MODIFIER_RoleHandler,void,setValue,1366,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtIf_ELSE_RoleHandler,null,getValue,686,KILLED,spoon.test.path.PathTest.testRoles(spoon.test.path.PathTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtIf_ELSE_RoleHandler,void,setValue,691,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIf](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler,null,getValue,601,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAnnotationMethod_DEFAULT_EXPRESSION_RoleHandler,void,setValue,606,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotationMethod](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtSynchronized_EXPRESSION_RoleHandler,null,getValue,924,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtSynchronized_EXPRESSION_RoleHandler,void,setValue,929,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSynchronized](spoon.test.replace.ReplaceParametrizedTest)
CtFieldReadImpl.java,spoon.support.reflect.code.CtFieldReadImpl,void,accept,27,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtFieldRead](spoon.reflect.visitor.CtInheritanceScannerTest)
CtFieldReadImpl.java,spoon.support.reflect.code.CtFieldReadImpl,null,clone,32,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtFieldRead<T> extends spoon.reflect.code.CtFieldAccess<T> , spoon.reflect.code.CtVariableRead<T> {
    @java.lang.Override
    spoon.reflect.code.CtFieldRead<T> clone();
}](spoon.test.parent.SetParentTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtWhile_EXPRESSION_RoleHandler,null,getValue,975,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtWhile_EXPRESSION_RoleHandler,void,setValue,980,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtWhile](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_SUPER_TYPE_RoleHandler,null,getValue,1883,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_SUPER_TYPE_RoleHandler,void,setValue,1888,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeParameter](spoon.test.replace.ReplaceParametrizedTest)
AbstractFileAssert.java,spoon.testing.AbstractFileAssert,null,isEqualTo,54,KILLED,spoon.testing.FileAssertTest.testEqualsBetweenTwoDifferentFile(spoon.testing.FileAssertTest)
AbstractFileAssert.java,spoon.testing.AbstractFileAssert,null,isEqualTo,43,KILLED,spoon.testing.FileAssertTest.testEqualsBetweenTwoDifferentFile(spoon.testing.FileAssertTest)
DirectReferenceFilter.java,spoon.reflect.visitor.filter.DirectReferenceFilter,false,matches,41,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
DirectReferenceFilter.java,spoon.reflect.visitor.filter.DirectReferenceFilter,true,matches,41,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtConditional_CONDITION_RoleHandler,null,getValue,482,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtConditional_CONDITION_RoleHandler,void,setValue,487,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtConditional](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtLabelledFlowBreak_TARGET_LABEL_RoleHandler,null,getValue,1929,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtLabelledFlowBreak_TARGET_LABEL_RoleHandler,void,setValue,1934,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtBodyHolder_BODY_RoleHandler,null,getValue,261,KILLED,spoon.test.path.PathTest.testPathFromString(spoon.test.path.PathTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtBodyHolder_BODY_RoleHandler,void,setValue,266,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
CtNamedElementImpl.java,spoon.support.reflect.declaration.CtNamedElementImpl,null,clone,62,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtNamedElementImpl.java,spoon.support.reflect.declaration.CtNamedElementImpl,null,setSimpleName,47,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
TreeBuilderCompiler.java,spoon.support.compiler.jdt.TreeBuilderCompiler,empty,buildUnits,46,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
TreeBuilderCompiler.java,spoon.support.compiler.jdt.TreeBuilderCompiler,null,buildUnits,46,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFor_FOR_INIT_RoleHandler,null,getValue,1043,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFor_FOR_INIT_RoleHandler,void,setValue,1048,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeReference_PACKAGE_REF_RoleHandler,null,getValue,1645,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeReference_PACKAGE_REF_RoleHandler,void,setValue,1650,KILLED,spoon.test.reflect.meta.MetaModelTest.singleValueRoleAddSetRemove(spoon.test.reflect.meta.MetaModelTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtArrayTypeReference_TYPE_RoleHandler,null,getValue,2014,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtArrayTypeReference_TYPE_RoleHandler,void,setValue,2019,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayTypeReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtParameter_IS_VARARGS_RoleHandler,null,getValue,1259,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtParameter_IS_VARARGS_RoleHandler,void,setValue,1264,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtElement_POSITION_RoleHandler,null,getValue,1696,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtElement_POSITION_RoleHandler,void,setValue,1701,NO_COVERAGE,none
AnnotationRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext,void,addAnnotation,34,NO_COVERAGE,none
AnnotationRuntimeBuilderContext.java,spoon.support.visitor.java.internal.AnnotationRuntimeBuilderContext,void,addClassReference,39,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutable_PARAMETER_RoleHandler,null,getValue,1679,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutable_PARAMETER_RoleHandler,void,setValue,1684,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
Refactoring.java,spoon.refactoring.Refactoring$1,false,matches,54,KILLED,spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation(spoon.test.refactoring.RefactoringTest)
Refactoring.java,spoon.refactoring.Refactoring$1,true,matches,54,KILLED,spoon.test.refactoring.RefactoringTest.testTransformedInstanceofAfterATransformation(spoon.test.refactoring.RefactoringTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTryWithResource_TRY_RESOURCE_RoleHandler,null,getValue,1997,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTryWithResource_TRY_RESOURCE_RoleHandler,void,setValue,2002,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
ParentFunction.java,spoon.reflect.visitor.filter.ParentFunction,void,apply,51,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
ParentFunction.java,spoon.reflect.visitor.filter.ParentFunction,null,includingSelf,45,KILLED,spoon.test.labels.TestLabels.testLabelsAreDetected(spoon.test.labels.TestLabels)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReference_TYPE_RoleHandler,null,getValue,2031,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReference_TYPE_RoleHandler,void,setValue,2036,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtEnum_VALUE_RoleHandler,null,getValue,2150,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtEnum](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtEnum_VALUE_RoleHandler,void,setValue,2155,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtEnum](spoon.test.replace.ReplaceParametrizedTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$OutputFunctionWrapper,null,_accept,471,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$OutputFunctionWrapper,void,setNext,478,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_SUB_PACKAGE_RoleHandler,null,getValue,1849,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_SUB_PACKAGE_RoleHandler,void,setValue,1854,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtBinaryOperator_OPERATOR_KIND_RoleHandler,null,getValue,1577,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtBinaryOperator_OPERATOR_KIND_RoleHandler,void,setValue,1582,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtReference_NAME_RoleHandler,null,getValue,1492,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtReference_NAME_RoleHandler,void,setValue,1497,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_TYPE_MEMBER_RoleHandler,null,getValue,2099,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_TYPE_MEMBER_RoleHandler,void,setValue,2104,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtDequeScanner.java,spoon.reflect.visitor.CtDequeScanner,void,enter,55,NO_COVERAGE,none
CtDequeScanner.java,spoon.reflect.visitor.CtDequeScanner,void,exit,44,NO_COVERAGE,none
InvocationFilter.java,spoon.reflect.visitor.filter.InvocationFilter,false,matches,54,KILLED,spoon.test.executable.ExecutableRefTest.testOverridingMethod(spoon.test.executable.ExecutableRefTest)
InvocationFilter.java,spoon.reflect.visitor.filter.InvocationFilter,true,matches,54,KILLED,spoon.test.executable.ExecutableRefTest.testOverridingMethod(spoon.test.executable.ExecutableRefTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtCatch_PARAMETER_RoleHandler,null,getValue,1662,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtCatch_PARAMETER_RoleHandler,void,setValue,1667,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCatch](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtSwitch_CASE_RoleHandler,null,getValue,329,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSwitch](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtSwitch_CASE_RoleHandler,void,setValue,334,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSwitch](spoon.test.replace.ReplaceParametrizedTest)
CtVariableReadImpl.java,spoon.support.reflect.code.CtVariableReadImpl,void,accept,26,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtVariableRead](spoon.reflect.visitor.CtInheritanceScannerTest)
CtVariableReadImpl.java,spoon.support.reflect.code.CtVariableReadImpl,null,clone,31,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtSuperAccess<T> extends spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> , spoon.reflect.code.CtVariableRead<T> {
    @java.lang.Override
    spoon.reflect.code.CtSuperAccess<T> clone();

    @java.lang.Override
    @spoon.support.DerivedProperty
    spoon.reflect.reference.CtTypeReference<T> getType();
}](spoon.test.parent.SetParentTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeAccess_ACCESSED_TYPE_RoleHandler,null,getValue,125,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeAccess_ACCESSED_TYPE_RoleHandler,void,setValue,130,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeAccess](spoon.test.replace.ReplaceParametrizedTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$FunctionWrapper,null,_accept,526,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$FunctionWrapper,void,handleResult,531,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackageExport_MODULE_REF_RoleHandler,null,getValue,1441,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackageExport](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackageExport_MODULE_REF_RoleHandler,void,setValue,1446,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackageExport](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_OPENED_PACKAGE_RoleHandler,null,getValue,1543,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_OPENED_PACKAGE_RoleHandler,void,setValue,1548,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtConditional_ELSE_RoleHandler,null,getValue,669,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtConditional_ELSE_RoleHandler,void,setValue,674,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtConditional](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_INTERFACE_RoleHandler,null,getValue,1111,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_INTERFACE_RoleHandler,void,setValue,1116,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtUnaryOperator_EXPRESSION_RoleHandler,null,getValue,958,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtUnaryOperator_EXPRESSION_RoleHandler,void,setValue,963,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUnaryOperator](spoon.test.replace.ReplaceParametrizedTest)
NameFilter.java,spoon.legacy.NameFilter,false,matches,51,NO_COVERAGE,none
NameFilter.java,spoon.legacy.NameFilter,true,matches,51,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtJavaDoc_COMMENT_TAG_RoleHandler,null,getValue,431,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtJavaDoc](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtJavaDoc_COMMENT_TAG_RoleHandler,void,setValue,436,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtJavaDoc](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAssert_CONDITION_RoleHandler,null,getValue,465,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAssert_CONDITION_RoleHandler,void,setValue,470,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssert](spoon.test.replace.ReplaceParametrizedTest)
CtTargetedExpressionImpl.java,spoon.support.reflect.code.CtTargetedExpressionImpl,null,clone,49,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtArrayWrite<T> extends spoon.reflect.code.CtArrayAccess<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtArrayWrite<T> clone();
}](spoon.test.parent.SetParentTest)
CtTargetedExpressionImpl.java,spoon.support.reflect.code.CtTargetedExpressionImpl,null,setTarget,39,KILLED,spoon.test.factory.CodeFactoryTest.testThisAccess(spoon.test.factory.CodeFactoryTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtOperatorAssignment_OPERATOR_KIND_RoleHandler,null,getValue,1594,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtOperatorAssignment_OPERATOR_KIND_RoleHandler,void,setValue,1599,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_SERVICE_TYPE_RoleHandler,null,getValue,1764,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_SERVICE_TYPE_RoleHandler,void,setValue,1769,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
CtAnnotationFieldAccessImpl.java,spoon.support.reflect.code.CtAnnotationFieldAccessImpl,void,accept,27,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtAnnotationFieldAccessImpl.java,spoon.support.reflect.code.CtAnnotationFieldAccessImpl,null,clone,32,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTargetedExpression_TARGET_RoleHandler,null,getValue,1912,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTargetedExpression_TARGET_RoleHandler,void,setValue,1917,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
AbstractCtPackageAssert.java,spoon.testing.AbstractCtPackageAssert$1PackageComparator,0,compare,76,NO_COVERAGE,none
AbstractCtPackageAssert.java,spoon.testing.AbstractCtPackageAssert$1PackageComparator,1,compare,76,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtRHSReceiver_ASSIGNMENT_RoleHandler,null,getValue,244,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtRHSReceiver_ASSIGNMENT_RoleHandler,void,setValue,249,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssignment](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler,null,getValue,1077,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtProvidedService](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtProvidedService_IMPLEMENTATION_TYPE_RoleHandler,void,setValue,1082,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtProvidedService](spoon.test.replace.ReplaceParametrizedTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory$2,false,matches,466,KILLED,spoon.test.reference.VariableAccessTest.testVariableAccessDeclarationInAnonymousClass(spoon.test.reference.VariableAccessTest)
TypeFactory.java,spoon.reflect.factory.TypeFactory$2,true,matches,466,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtComment_COMMENT_TYPE_RoleHandler,null,getValue,448,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtComment_COMMENT_TYPE_RoleHandler,void,setValue,453,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory$1,false,matches,450,NO_COVERAGE,none
TypeFactory.java,spoon.reflect.factory.TypeFactory$1,true,matches,450,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler,null,getValue,2116,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFormalTypeDeclarer_TYPE_PARAMETER_RoleHandler,void,setValue,2121,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFor_FOR_UPDATE_RoleHandler,null,getValue,1060,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFor_FOR_UPDATE_RoleHandler,void,setValue,1065,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFieldReference_IS_FINAL_RoleHandler,null,getValue,1157,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFieldReference_IS_FINAL_RoleHandler,void,setValue,1162,NO_COVERAGE,none
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper$1,false,onAccess,472,KILLED,spoon.test.fieldaccesses.FieldAccessTest.testFieldAccessDeclaredInADefaultClass(spoon.test.fieldaccesses.FieldAccessTest)
JDTTreeBuilderHelper.java,spoon.support.compiler.jdt.JDTTreeBuilderHelper$1,true,onAccess,472,SURVIVED,none
SubInheritanceHierarchyResolver.java,spoon.support.visitor.SubInheritanceHierarchyResolver$3,false,matches,221,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
SubInheritanceHierarchyResolver.java,spoon.support.visitor.SubInheritanceHierarchyResolver$3,true,matches,221,SURVIVED,none
CtWildcardStaticTypeMemberReferenceImpl.java,spoon.support.reflect.reference.CtWildcardStaticTypeMemberReferenceImpl,null,clone,43,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
CtWildcardStaticTypeMemberReferenceImpl.java,spoon.support.reflect.reference.CtWildcardStaticTypeMemberReferenceImpl,null,setSimpleName,35,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithStaticInheritedImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
SubInheritanceHierarchyResolver.java,spoon.support.visitor.SubInheritanceHierarchyResolver$2,null,enter,155,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
SubInheritanceHierarchyResolver.java,spoon.support.visitor.SubInheritanceHierarchyResolver$2,void,exit,194,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
QualifiedNameComparator.java,spoon.support.comparator.QualifiedNameComparator,0,compare,38,KILLED,spoon.test.type.TypeTest.testDeclarationCreatedByFactory(spoon.test.type.TypeTest)
QualifiedNameComparator.java,spoon.support.comparator.QualifiedNameComparator,1,compare,38,KILLED,spoon.test.api.APITest.testOverrideOutputWriter(spoon.test.api.APITest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtNewArray_DIMENSION_RoleHandler,null,getValue,635,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewArray](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtNewArray_DIMENSION_RoleHandler,void,setValue,640,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewArray](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTry_FINALIZER_RoleHandler,null,getValue,1009,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTry_FINALIZER_RoleHandler,void,setValue,1014,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtCase_EXPRESSION_RoleHandler,null,getValue,788,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtCase_EXPRESSION_RoleHandler,void,setValue,793,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCase](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackage_CONTAINED_TYPE_RoleHandler,null,getValue,533,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackage](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackage_CONTAINED_TYPE_RoleHandler,void,setValue,538,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackage](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtReturn_EXPRESSION_RoleHandler,null,getValue,890,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtReturn_EXPRESSION_RoleHandler,void,setValue,895,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtReturn](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAbstractInvocation_EXECUTABLE_REF_RoleHandler,null,getValue,703,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAbstractInvocation_EXECUTABLE_REF_RoleHandler,void,setValue,708,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtInvocation](spoon.test.replace.ReplaceParametrizedTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction$1,false,matches,103,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testAllMethodsSameSignatureFunction(spoon.test.refactoring.MethodsRefactoringTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction$1,true,matches,103,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testAllMethodsSameSignatureFunction(spoon.test.refactoring.MethodsRefactoringTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReference_DECLARING_TYPE_RoleHandler,null,getValue,550,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReference_DECLARING_TYPE_RoleHandler,void,setValue,555,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
JDTImportBuilder.java,spoon.support.compiler.jdt.JDTImportBuilder,void,build,61,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testWithStaticStarredImportFromInterface(spoon.test.jdtimportbuilder.ImportBuilderTest)
JDTImportBuilder.java,spoon.support.compiler.jdt.JDTImportBuilder,null,getOrLoadClass,111,KILLED,spoon.test.jdtimportbuilder.ImportBuilderTest.testSimpleStaticImport(spoon.test.jdtimportbuilder.ImportBuilderTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtArrayAccess_EXPRESSION_RoleHandler,null,getValue,754,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtArrayAccess_EXPRESSION_RoleHandler,void,setValue,759,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayWrite](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtForEach_EXPRESSION_RoleHandler,null,getValue,839,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtForEach_EXPRESSION_RoleHandler,void,setValue,844,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtForEach](spoon.test.replace.ReplaceParametrizedTest)
AbstractFilter.java,spoon.reflect.visitor.filter.AbstractFilter,false,matches,61,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
AbstractFilter.java,spoon.reflect.visitor.filter.AbstractFilter,true,matches,61,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction,void,apply,82,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction,null,createScopeQuery,193,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_REQUIRED_MODULE_RoleHandler,null,getValue,1730,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_REQUIRED_MODULE_RoleHandler,void,setValue,1735,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler,null,getValue,142,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtClass_ANNONYMOUS_EXECUTABLE_RoleHandler,void,setValue,147,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReference_ARGUMENT_TYPE_RoleHandler,null,getValue,210,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReference_ARGUMENT_TYPE_RoleHandler,void,setValue,215,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtElement_COMMENT_RoleHandler,null,getValue,380,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtContinue](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtElement_COMMENT_RoleHandler,void,setValue,385,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtContinue](spoon.test.replace.ReplaceParametrizedTest)
CtCodeElementImpl.java,spoon.support.reflect.code.CtCodeElementImpl,null,clone,39,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtContinue extends spoon.reflect.code.CtLabelledFlowBreak {
    @java.lang.Override
    spoon.reflect.code.CtContinue clone();
}](spoon.test.parent.SetParentTest)
CtCodeElementImpl.java,spoon.support.reflect.code.CtCodeElementImpl,null,partiallyEvaluate,33,KILLED,spoon.test.eval.EvalTest.testTryCatchAndStatement(spoon.test.eval.EvalTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtSynchronized_BODY_RoleHandler,null,getValue,278,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtSynchronized_BODY_RoleHandler,void,setValue,283,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSynchronized](spoon.test.replace.ReplaceParametrizedTest)
AbstractCtElementAssert.java,spoon.testing.AbstractCtElementAssert,null,isEqualTo,57,SURVIVED,none
AbstractCtElementAssert.java,spoon.testing.AbstractCtElementAssert,null,isEqualTo,38,KILLED,spoon.testing.CtElementAssertTest.testEqualityBetweenTwoCtElementWithTypeDifferent(spoon.testing.CtElementAssertTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtProvidedService_SERVICE_TYPE_RoleHandler,null,getValue,1781,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtProvidedService_SERVICE_TYPE_RoleHandler,void,setValue,1786,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtProvidedService](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtLiteral_VALUE_RoleHandler,null,getValue,2167,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtLiteral_VALUE_RoleHandler,void,setValue,2172,NO_COVERAGE,none
CtFieldWriteImpl.java,spoon.support.reflect.code.CtFieldWriteImpl,void,accept,27,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtFieldWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
CtFieldWriteImpl.java,spoon.support.reflect.code.CtFieldWriteImpl,null,clone,32,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtFieldWrite<T> extends spoon.reflect.code.CtFieldAccess<T> , spoon.reflect.code.CtVariableWrite<T> {
    @java.lang.Override
    spoon.reflect.code.CtFieldWrite<T> clone();
}](spoon.test.parent.SetParentTest)
VirtualFile.java,spoon.support.compiler.VirtualFile,null,getContent,42,KILLED,spoon.test.snippets.SnippetTest.testIssue981(spoon.test.snippets.SnippetTest)
VirtualFile.java,spoon.support.compiler.VirtualFile,null,getParent,54,NO_COVERAGE,none
CtArrayWriteImpl.java,spoon.support.reflect.code.CtArrayWriteImpl,void,accept,27,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtArrayWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
CtArrayWriteImpl.java,spoon.support.reflect.code.CtArrayWriteImpl,null,clone,32,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtArrayWrite<T> extends spoon.reflect.code.CtArrayAccess<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtArrayWrite<T> clone();
}](spoon.test.parent.SetParentTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtDo_EXPRESSION_RoleHandler,null,getValue,805,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtDo_EXPRESSION_RoleHandler,void,setValue,810,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtDo](spoon.test.replace.ReplaceParametrizedTest)
AbstractCtPackageAssert.java,spoon.testing.AbstractCtPackageAssert$1TypeComparator,0,compare,57,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoCtPackage(spoon.testing.CtPackageAssertTest)
AbstractCtPackageAssert.java,spoon.testing.AbstractCtPackageAssert$1TypeComparator,1,compare,57,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoCtPackage(spoon.testing.CtPackageAssertTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAbstractInvocation_ARGUMENT_RoleHandler,null,getValue,193,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtInvocation](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAbstractInvocation_ARGUMENT_RoleHandler,void,setValue,198,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtInvocation](spoon.test.replace.ReplaceParametrizedTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl$1$1,0,compare,88,KILLED,spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl$1$1,1,compare,88,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationPrintAnnotation(spoon.test.annotation.AnnotationValuesTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtForEach_FOREACH_VARIABLE_RoleHandler,null,getValue,1026,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtForEach_FOREACH_VARIABLE_RoleHandler,void,setValue,1031,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtForEach](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAssert_EXPRESSION_RoleHandler,null,getValue,771,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAssert_EXPRESSION_RoleHandler,void,setValue,776,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssert](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtBinaryOperator_LEFT_OPERAND_RoleHandler,null,getValue,1310,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtBinaryOperator_LEFT_OPERAND_RoleHandler,void,setValue,1315,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtBinaryOperator](spoon.test.replace.ReplaceParametrizedTest)
ReturnOrThrowFilter.java,spoon.reflect.visitor.filter.ReturnOrThrowFilter,false,matches,32,KILLED,spoon.test.filters.FilterTest.testReturnOrThrowFilter(spoon.test.filters.FilterTest)
ReturnOrThrowFilter.java,spoon.reflect.visitor.filter.ReturnOrThrowFilter,true,matches,32,SURVIVED,none
VariableAccessFilter.java,spoon.reflect.visitor.filter.VariableAccessFilter,false,matches,44,KILLED,spoon.test.filters.FilterTest.testFieldAccessFilter(spoon.test.filters.FilterTest)
VariableAccessFilter.java,spoon.reflect.visitor.filter.VariableAccessFilter,true,matches,44,KILLED,spoon.test.filters.FilterTest.testFieldAccessFilter(spoon.test.filters.FilterTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler,null,getValue,652,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtJavaDocTag_DOCUMENTATION_TYPE_RoleHandler,void,setValue,657,NO_COVERAGE,none
NamedElementFilter.java,spoon.reflect.visitor.filter.NamedElementFilter,false,matches,49,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
NamedElementFilter.java,spoon.reflect.visitor.filter.NamedElementFilter,true,matches,49,KILLED,spoon.test.secondaryclasses.ClassesTest.testClassWithInternalPublicClassOrInterf(spoon.test.secondaryclasses.ClassesTest)
CtPathStringBuilder.java,spoon.reflect.path.CtPathStringBuilder,null,fromString,72,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
CtPathStringBuilder.java,spoon.reflect.path.CtPathStringBuilder,null,load,41,KILLED,spoon.test.path.PathTest.toStringTest(spoon.test.path.PathTest)
AllTypeMembersFunction.java,spoon.reflect.visitor.filter.AllTypeMembersFunction,void,apply,72,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
AllTypeMembersFunction.java,spoon.reflect.visitor.filter.AllTypeMembersFunction,null,distinctSet,66,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtMethod_IS_DEFAULT_RoleHandler,null,getValue,1140,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtMethod_IS_DEFAULT_RoleHandler,void,setValue,1145,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutable_THROWN_RoleHandler,null,getValue,1980,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutable_THROWN_RoleHandler,void,setValue,1985,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtIf_CONDITION_RoleHandler,null,getValue,499,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtIf_CONDITION_RoleHandler,void,setValue,504,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIf](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeParameterReference_IS_UPPER_RoleHandler,null,getValue,1242,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeParameterReference_IS_UPPER_RoleHandler,void,setValue,1247,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeParameterReference_BOUNDING_TYPE_RoleHandler,null,getValue,312,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeParameterReference_BOUNDING_TYPE_RoleHandler,void,setValue,317,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeParameterReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtImport_IMPORT_REFERENCE_RoleHandler,null,getValue,1094,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtImport_IMPORT_REFERENCE_RoleHandler,void,setValue,1099,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtImport](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAnnotation_ANNOTATION_TYPE_RoleHandler,null,getValue,176,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAnnotation_ANNOTATION_TYPE_RoleHandler,void,setValue,181,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotation](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackage_SUB_PACKAGE_RoleHandler,null,getValue,1866,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackage_SUB_PACKAGE_RoleHandler,void,setValue,1871,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackage](spoon.test.replace.ReplaceParametrizedTest)
CtLineElementComparator.java,spoon.support.comparator.CtLineElementComparator,0,compare,34,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
CtLineElementComparator.java,spoon.support.comparator.CtLineElementComparator,1,compare,34,KILLED,spoon.test.ctClass.CtClassTest.getConstructor(spoon.test.ctClass.CtClassTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFieldReference_IS_STATIC_RoleHandler,null,getValue,1225,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFieldReference_IS_STATIC_RoleHandler,void,setValue,1230,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtStatement_LABEL_RoleHandler,null,getValue,1293,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtStatement_LABEL_RoleHandler,void,setValue,1298,NO_COVERAGE,none
LineFilter.java,spoon.reflect.visitor.filter.LineFilter,false,matches,47,KILLED,spoon.test.filters.FilterTest.testLineFilter(spoon.test.filters.FilterTest)
LineFilter.java,spoon.reflect.visitor.filter.LineFilter,true,matches,47,KILLED,spoon.test.filters.FilterTest.testLineFilter(spoon.test.filters.FilterTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler,null,getValue,2082,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeParameterReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtActualTypeContainer_TYPE_ARGUMENT_RoleHandler,void,setValue,2087,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModifiable_MODIFIER_RoleHandler,null,getValue,1344,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModifiable_MODIFIER_RoleHandler,void,setValue,1349,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtNamedElement_NAME_RoleHandler,null,getValue,1475,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtNamedElement_NAME_RoleHandler,void,setValue,1480,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtConditional_THEN_RoleHandler,null,getValue,1946,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtConditional_THEN_RoleHandler,void,setValue,1951,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtConditional](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFieldReference_DECLARING_TYPE_RoleHandler,null,getValue,567,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtFieldReference_DECLARING_TYPE_RoleHandler,void,setValue,572,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAssignment_ASSIGNED_RoleHandler,null,getValue,227,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtAssignment_ASSIGNED_RoleHandler,void,setValue,232,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssignment](spoon.test.replace.ReplaceParametrizedTest)
PackageRuntimeBuilderContext.java,spoon.support.visitor.java.internal.PackageRuntimeBuilderContext,void,addAnnotation,40,NO_COVERAGE,none
PackageRuntimeBuilderContext.java,spoon.support.visitor.java.internal.PackageRuntimeBuilderContext,void,addType,35,KILLED,spoon.test.reference.TypeReferenceTest.testIsSubTypeSuperClassNull(spoon.test.reference.TypeReferenceTest)
SerializationModelStreamer.java,spoon.support.SerializationModelStreamer,null,load,52,KILLED,spoon.test.serializable.SourcePositionTest.testSourcePosition(spoon.test.serializable.SourcePositionTest)
SerializationModelStreamer.java,spoon.support.SerializationModelStreamer,void,save,44,KILLED,spoon.test.serializable.SourcePositionTest.testSourcePosition(spoon.test.serializable.SourcePositionTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtJavaDocTag_COMMENT_CONTENT_RoleHandler,null,getValue,414,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtJavaDocTag_COMMENT_CONTENT_RoleHandler,void,setValue,419,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtVariableAccess_VARIABLE_RoleHandler,null,getValue,2184,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtVariableAccess_VARIABLE_RoleHandler,void,setValue,2189,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
TemplateMatcher.java,spoon.template.TemplateMatcher$1,void,visitCtTypeParameterReference,93,SURVIVED,none
TemplateMatcher.java,spoon.template.TemplateMatcher$1,void,visitCtTypeReference,100,SURVIVED,none
CompilationUnitWrapper.java,spoon.support.compiler.jdt.CompilationUnitWrapper,empty,getContents,43,KILLED,spoon.test.compilation.CompilationTest.compileCommandLineTest(spoon.test.compilation.CompilationTest)
CompilationUnitWrapper.java,spoon.support.compiler.jdt.CompilationUnitWrapper,null,getContents,43,KILLED,spoon.test.compilation.CompilationTest.compileCommandLineTest(spoon.test.compilation.CompilationTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring$2,false,matches,174,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring$2,true,matches,174,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder,null,find,55,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
AccessibleVariablesFinder.java,spoon.reflect.visitor.AccessibleVariablesFinder,null,getVariable,62,KILLED,spoon.test.imports.ImportTest.testImportOfInvocationOfStaticMethod(spoon.test.imports.ImportTest)
RegexFilter.java,spoon.reflect.visitor.filter.RegexFilter,false,matches,44,KILLED,spoon.test.filters.FilterTest.testFilters(spoon.test.filters.FilterTest)
RegexFilter.java,spoon.reflect.visitor.filter.RegexFilter,true,matches,44,KILLED,spoon.test.filters.FilterTest.testFilters(spoon.test.filters.FilterTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtUnaryOperator_OPERATOR_KIND_RoleHandler,null,getValue,1611,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtUnaryOperator_OPERATOR_KIND_RoleHandler,void,setValue,1616,NO_COVERAGE,none
Refactoring.java,spoon.refactoring.Refactoring$2,false,matches,73,KILLED,spoon.reflect.ast.CloneTest.testCopyMethod(spoon.reflect.ast.CloneTest)
Refactoring.java,spoon.refactoring.Refactoring$2,true,matches,73,KILLED,spoon.reflect.ast.CloneTest.testCopyMethod(spoon.reflect.ast.CloneTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtStatementList_STATEMENT_RoleHandler,null,getValue,1832,KILLED,spoon.test.path.PathTest.testIncorrectPathFromString(spoon.test.path.PathTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtStatementList_STATEMENT_RoleHandler,void,setValue,1837,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtBlock](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtMultiTypedElement_MULTI_TYPE_RoleHandler,null,getValue,1458,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtMultiTypedElement_MULTI_TYPE_RoleHandler,void,setValue,1463,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypedElement_TYPE_RoleHandler,null,getValue,2048,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypedElement_TYPE_RoleHandler,void,setValue,2053,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_METHOD_RoleHandler,null,getValue,1327,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_METHOD_RoleHandler,void,setValue,1332,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackageExport_PACKAGE_REF_RoleHandler,null,getValue,1628,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackageExport_PACKAGE_REF_RoleHandler,void,setValue,1633,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackageExport](spoon.test.replace.ReplaceParametrizedTest)
ProcessorUtils.java,spoon.testing.utils.ProcessorUtils,void,initProperties,47,KILLED,spoon.test.processing.ProcessingTest.testInitPropertiesWithWrongType(spoon.test.processing.ProcessingTest)
ProcessorUtils.java,spoon.testing.utils.ProcessorUtils,void,process,41,KILLED,spoon.testing.AbstractAssertTest.testTransformationWithProcessorInstantiated(spoon.testing.AbstractAssertTest)
CtArrayReadImpl.java,spoon.support.reflect.code.CtArrayReadImpl,void,accept,27,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtArrayRead](spoon.reflect.visitor.CtInheritanceScannerTest)
CtArrayReadImpl.java,spoon.support.reflect.code.CtArrayReadImpl,null,clone,32,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtArrayRead<T> extends spoon.reflect.code.CtArrayAccess<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtArrayRead<T> clone();
}](spoon.test.parent.SetParentTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReference_IS_STATIC_RoleHandler,null,getValue,1208,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReference_IS_STATIC_RoleHandler,void,setValue,1213,NO_COVERAGE,none
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$1,void,addClassReference,147,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$1,void,addConstructor,142,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testDeclaredConstructor(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtThisAccessImpl.java,spoon.support.reflect.code.CtThisAccessImpl,void,accept,28,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtThisAccess](spoon.reflect.visitor.CtInheritanceScannerTest)
CtThisAccessImpl.java,spoon.support.reflect.code.CtThisAccessImpl,null,clone,33,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtThisAccess<T> extends spoon.reflect.code.CtTargetedExpression<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtThisAccess<T> clone();
}](spoon.test.parent.SetParentTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtLambda_EXPRESSION_RoleHandler,null,getValue,856,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtLambda_EXPRESSION_RoleHandler,void,setValue,861,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_FIELD_RoleHandler,null,getValue,992,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtEnum](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_FIELD_RoleHandler,void,setValue,997,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtEnum](spoon.test.replace.ReplaceParametrizedTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$3,void,addConstructor,184,SURVIVED,none
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$3,void,addEnumValue,189,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
CtVariableWriteImpl.java,spoon.support.reflect.code.CtVariableWriteImpl,void,accept,26,KILLED,spoon.reflect.visitor.CtInheritanceScannerTest.testCtInheritanceScanner[interface spoon.reflect.code.CtVariableWrite](spoon.reflect.visitor.CtInheritanceScannerTest)
CtVariableWriteImpl.java,spoon.support.reflect.code.CtVariableWriteImpl,null,clone,31,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtVariableWrite<T> extends spoon.reflect.code.CtVariableAccess<T> {
    @java.lang.Override
    spoon.reflect.code.CtVariableWrite<T> clone();
}](spoon.test.parent.SetParentTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_EXPORTED_PACKAGE_RoleHandler,null,getValue,737,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtModule_EXPORTED_PACKAGE_RoleHandler,void,setValue,742,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$7,void,addArrayReference,432,SURVIVED,none
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$7,void,addClassReference,423,MEMORY_ERROR,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler,null,getValue,720,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExecutableReferenceExpression_EXECUTABLE_REF_RoleHandler,void,setValue,725,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReferenceExpression](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtSwitch_EXPRESSION_RoleHandler,null,getValue,907,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtSwitch_EXPRESSION_RoleHandler,void,setValue,912,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSwitch](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtVariableReference_TYPE_RoleHandler,null,getValue,2065,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtVariableReference_TYPE_RoleHandler,void,setValue,2070,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtCodeSnippet_SNIPPET_RoleHandler,null,getValue,1815,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtCodeSnippet_SNIPPET_RoleHandler,void,setValue,1820,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_NESTED_TYPE_RoleHandler,null,getValue,1526,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtType_NESTED_TYPE_RoleHandler,void,setValue,1531,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
CtNamedPathElement.java,spoon.reflect.path.impl.CtNamedPathElement$NameScanner,void,recurse,86,KILLED,spoon.test.path.PathTest.testBuilder(spoon.test.path.PathTest)
CtNamedPathElement.java,spoon.reflect.path.impl.CtNamedPathElement$NameScanner,void,scanCtElement,77,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$2,false,matches,125,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$2,true,matches,125,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$1,false,matches,109,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
LocalVariableReferenceFunction.java,spoon.reflect.visitor.filter.LocalVariableReferenceFunction$1,true,matches,109,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtThrow_EXPRESSION_RoleHandler,null,getValue,941,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtThrow_EXPRESSION_RoleHandler,void,setValue,946,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtThrow](spoon.test.replace.ReplaceParametrizedTest)
EmptyModelChangeListener.java,spoon.experimental.modelobs.EmptyModelChangeListener,void,onListDelete,62,KILLED,spoon.test.module.TestModule.spoon.test.module.TestModule
EmptyModelChangeListener.java,spoon.experimental.modelobs.EmptyModelChangeListener,void,onSetDelete,106,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackageExport_OPENED_PACKAGE_RoleHandler,null,getValue,1560,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtPackageExport_OPENED_PACKAGE_RoleHandler,void,setValue,1565,NO_COVERAGE,none
CtArrayAccessImpl.java,spoon.support.reflect.code.CtArrayAccessImpl,null,clone,49,KILLED,spoon.test.parent.SetParentTest.testContract[public interface CtArrayWrite<T> extends spoon.reflect.code.CtArrayAccess<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtArrayWrite<T> clone();
}](spoon.test.parent.SetParentTest)
CtArrayAccessImpl.java,spoon.support.reflect.code.CtArrayAccessImpl,null,setIndexExpression,39,KILLED,spoon.test.parent.ParentContractTest.testContract[public interface CtArrayWrite<T> extends spoon.reflect.code.CtArrayAccess<T, spoon.reflect.code.CtExpression<?>> {
    @java.lang.Override
    spoon.reflect.code.CtArrayWrite<T> clone();
}](spoon.test.parent.ParentContractTest)
ListPrinter.java,spoon.reflect.visitor.ListPrinter,void,close,85,KILLED,spoon.test.prettyprinter.PrinterTest.testListPrinter(spoon.test.prettyprinter.PrinterTest)
ListPrinter.java,spoon.reflect.visitor.ListPrinter,void,printSeparatorIfAppropriate,62,KILLED,spoon.test.prettyprinter.PrinterTest.testListPrinter(spoon.test.prettyprinter.PrinterTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtNewClass_NESTED_TYPE_RoleHandler,null,getValue,1509,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtNewClass_NESTED_TYPE_RoleHandler,void,setValue,1514,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewClass](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTry_CATCH_RoleHandler,null,getValue,363,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTry_CATCH_RoleHandler,void,setValue,368,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExpression_CAST_RoleHandler,null,getValue,346,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtExpression_CAST_RoleHandler,void,setValue,351,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtIntersectionTypeReference_BOUND_RoleHandler,null,getValue,295,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIntersectionTypeReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtIntersectionTypeReference_BOUND_RoleHandler,void,setValue,300,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIntersectionTypeReference](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtElement_IS_IMPLICIT_RoleHandler,null,getValue,1174,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtElement_IS_IMPLICIT_RoleHandler,void,setValue,1179,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtElement_ANNOTATION_RoleHandler,null,getValue,159,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationRoleHandlerTest(spoon.test.reflect.meta.MetaModelTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtElement_ANNOTATION_RoleHandler,void,setValue,164,KILLED,spoon.test.reflect.meta.MetaModelTest.elementAnnotationRoleHandlerTest(spoon.test.reflect.meta.MetaModelTest)
BlockTemplate.java,spoon.template.BlockTemplate,null,apply,50,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testSubstitutionByExpression(spoon.test.template.TemplateInvocationSubstitutionTest)
BlockTemplate.java,spoon.template.BlockTemplate,null,getBlock,39,KILLED,spoon.test.template.TemplateInvocationSubstitutionTest.testSubstitutionByExpression(spoon.test.template.TemplateInvocationSubstitutionTest)
AnnotationFilter.java,spoon.reflect.visitor.filter.AnnotationFilter,false,matches,52,KILLED,spoon.test.filters.FilterTest.testAnnotationFilter(spoon.test.filters.FilterTest)
AnnotationFilter.java,spoon.reflect.visitor.filter.AnnotationFilter,true,matches,52,KILLED,spoon.test.filters.FilterTest.testAnnotationFilter(spoon.test.filters.FilterTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtIf_THEN_RoleHandler,null,getValue,1963,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtIf_THEN_RoleHandler,void,setValue,1968,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIf](spoon.test.replace.ReplaceParametrizedTest)
LocalVariableScopeFunction.java,spoon.reflect.visitor.filter.LocalVariableScopeFunction$1,false,matches,63,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
LocalVariableScopeFunction.java,spoon.reflect.visitor.filter.LocalVariableScopeFunction$1,true,matches,63,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameLocalVariableToSameName(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeReference_DECLARING_TYPE_RoleHandler,null,getValue,584,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeReference_DECLARING_TYPE_RoleHandler,void,setValue,589,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayTypeReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAnnotationAnnotationTypeReplaceListener,void,set,64,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotation](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtNewArrayDimensionExpressionsReplaceListener,void,set,806,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewArray](spoon.test.replace.ReplaceParametrizedTest)
LocalVariableScopeFunction.java,spoon.reflect.visitor.filter.LocalVariableScopeFunction,void,apply,56,KILLED,spoon.test.reference.VariableAccessTest.testReferencesInInitExpression(spoon.test.reference.VariableAccessTest)
SiblingsFunction.java,spoon.reflect.visitor.filter.SiblingsFunction$1,void,scan,76,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtSwitchCasesReplaceListener,void,set,918,KILLED,spoon.test.delete.DeleteTest.testDeleteACaseOfASwitch(spoon.test.delete.DeleteTest)
StatementTemplate.java,spoon.template.StatementTemplate,null,apply,46,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
JDTBatchCompiler.java,spoon.support.compiler.jdt.JDTBatchCompiler$1,void,acceptResult,80,KILLED,spoon.test.compilation.CompilationTest.testCompilationInEmptyDir(spoon.test.compilation.CompilationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTypeAccessAccessedTypeReplaceListener,void,set,1058,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeAccess](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtFieldReferenceDeclaringTypeReplaceListener,void,set,596,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtConditionalConditionReplaceListener,void,set,414,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtConditional](spoon.test.replace.ReplaceParametrizedTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext$HierarchyListener,null,enter,432,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtProvidedServiceImplementationTypesReplaceListener,void,set,1240,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtProvidedService](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtRHSReceiverAssignmentReplaceListener,void,set,274,KILLED,spoon.test.delete.DeleteTest.testDeleteChainOfAssignment(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTryFinalizerReplaceListener,void,set,1002,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtCaseCaseExpressionReplaceListener,void,set,330,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCase](spoon.test.replace.ReplaceParametrizedTest)
TypedStatementListTemplateParameter.java,spoon.template.TypedStatementListTemplateParameter,null,getSubstitution,46,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtArrayAccessIndexExpressionReplaceListener,void,set,162,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayWrite](spoon.test.replace.ReplaceParametrizedTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl$2,void,scan,417,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetParentRoleHandler(spoon.test.reflect.meta.MetaModelTest)
CtElementImpl.java,spoon.support.reflect.declaration.CtElementImpl$1,void,enter,268,NO_COVERAGE,none
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeInformation_MODIFIER_RoleHandler,null,getValue,1395,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtCatchParameterReplaceListener,void,set,344,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtCatch](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtSwitchSelectorReplaceListener,void,set,904,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSwitch](spoon.test.replace.ReplaceParametrizedTest)
CtElementPathBuilder.java,spoon.reflect.path.CtElementPathBuilder,null,fromElement,31,KILLED,spoon.test.path.PathTest.testGetPathFromNonParent(spoon.test.path.PathTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAbstractInvocationArgumentsReplaceListener,void,set,750,KILLED,spoon.processing.CtGenerationTest.testGenerateCtBiScanner(spoon.processing.CtGenerationTest)
CtClassImpl.java,spoon.support.reflect.declaration.CtClassImpl$NewInstanceClassloader,null,loadClass,282,KILLED,spoon.test.compilation.CompilationTest.testNewInstanceFromExistingClass(spoon.test.compilation.CompilationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTypeReferenceDeclaringTypeReplaceListener,void,set,190,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayTypeReference](spoon.test.replace.ReplaceParametrizedTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$1,void,accept,121,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ComplianceOptions.java,spoon.compiler.builder.ComplianceOptions,null,compliance,25,KILLED,spoon.support.compiler.jdt.JDTBuilderTest.testJdtBuilder(spoon.support.compiler.jdt.JDTBuilderTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$2,void,accept,141,KILLED,spoon.test.reference.VariableAccessTest.testMultipleDeclarationsOfLocalVariable(spoon.test.reference.VariableAccessTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtExecutableReferenceDeclaringTypeReplaceListener,void,set,526,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtForEachVariableReplaceListener,void,set,666,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtForEach](spoon.test.replace.ReplaceParametrizedTest)
SpoonTagger.java,spoon.processing.SpoonTagger,void,process,28,SURVIVED,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtPackageTypesReplaceListener,void,set,876,KILLED,spoon.test.delete.DeleteTest.testDeleteAClassTopLevel(spoon.test.delete.DeleteTest)
AllTypeMembersFunction.java,spoon.reflect.visitor.filter.AllTypeMembersFunction$1,void,accept,76,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ExtensionTemplate.java,spoon.template.ExtensionTemplate,null,apply,31,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtPackagePackagesReplaceListener,void,set,862,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackage](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtForForInitReplaceListener,void,set,624,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtElementCommentsReplaceListener,void,set,50,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtContinue](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtIfConditionReplaceListener,void,set,694,KILLED,spoon.test.delete.DeleteTest.testDeleteConditionInACondition(spoon.test.delete.DeleteTest)
MavenLauncher.java,spoon.MavenLauncher,null,readPOM,125,KILLED,spoon.MavenLauncherTest.mavenLauncherTestWithVerySimpleProject(spoon.MavenLauncherTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtModuleModuleDirectivesReplaceListener,void,set,1156,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtConditionalElseExpressionReplaceListener,void,set,442,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtConditional](spoon.test.replace.ReplaceParametrizedTest)
TypedBlockTemplateParameter.java,spoon.template.TypedBlockTemplateParameter,null,getSubstitution,50,NO_COVERAGE,none
SuperInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SuperInheritanceHierarchyFunction$DistinctTypeListener,null,enter,140,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
Parameters.java,spoon.support.template.Parameters$1,null,S,305,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtCatchBodyReplaceListener,void,set,358,NO_COVERAGE,none
FieldReferenceFunction.java,spoon.reflect.visitor.filter.FieldReferenceFunction,void,apply,53,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
OverriddenMethodQuery.java,spoon.reflect.visitor.filter.OverriddenMethodQuery,void,apply,30,KILLED,spoon.test.filters.FilterTest.testQueryBuilderWithFilterChain(spoon.test.filters.FilterTest)
FileCompilerConfig.java,spoon.support.compiler.jdt.FileCompilerConfig$1,null,getFiles,38,KILLED,spoon.test.compilation.CompilationTest.testCompilationInEmptyDir(spoon.test.compilation.CompilationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtExecutableBodyReplaceListener,void,set,120,KILLED,spoon.test.delete.DeleteTest.testDeleteBodyOfAMethod(spoon.test.delete.DeleteTest)
AbstractCtPackageAssert.java,spoon.testing.AbstractCtPackageAssert,null,isEqualTo,44,KILLED,spoon.testing.CtPackageAssertTest.testEqualityBetweenTwoDifferentCtPackage(spoon.testing.CtPackageAssertTest)
Metamodel.java,spoon.Metamodel,null,getAllMetamodelInterfaces,43,KILLED,spoon.test.reflect.meta.MetaModelTest.testGetRoleHandlersOfClass(spoon.test.reflect.meta.MetaModelTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtThrowThrownExpressionReplaceListener,void,set,960,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtThrow](spoon.test.replace.ReplaceParametrizedTest)
EvalFactory.java,spoon.reflect.factory.EvalFactory,null,createPartialEvaluator,38,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationParameterTypes(spoon.test.annotation.AnnotationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtVariableAccessVariableReplaceListener,void,set,1086,KILLED,spoon.test.replace.ReplaceTest.testReplaceAParameterReferenceToFieldReference(spoon.test.replace.ReplaceTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl$1AnnotationInvocationHandler,null,invoke,437,KILLED,spoon.test.annotation.AnnotationValuesTest.testAnnotationFactory(spoon.test.annotation.AnnotationValuesTest)
FactoryCompilerConfig.java,spoon.support.compiler.jdt.FactoryCompilerConfig,void,initializeCompiler,40,KILLED,spoon.test.compilation.CompilationTest.compileCommandLineTest(spoon.test.compilation.CompilationTest)
CatchVariableScopeFunction.java,spoon.reflect.visitor.filter.CatchVariableScopeFunction,void,apply,54,KILLED,spoon.test.query_function.VariableReferencesTest.testCatchVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtIfThenStatementReplaceListener,void,set,708,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIf](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtModuleRequirementModuleReferenceReplaceListener,void,set,1212,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModuleRequirement](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtLoopBodyReplaceListener,void,set,498,SURVIVED,none
TypeFactory.java,spoon.reflect.factory.TypeFactory$3,void,scan,537,KILLED,spoon.test.imports.ImportTest.testImportOfAnInnerClassInASuperClassAvailableInLibrary(spoon.test.imports.ImportTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtSynchronizedExpressionReplaceListener,void,set,932,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSynchronized](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtWhileLoopingExpressionReplaceListener,void,set,1100,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtWhile](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtUnaryOperatorOperandReplaceListener,void,set,1072,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUnaryOperator](spoon.test.replace.ReplaceParametrizedTest)
CtQueryImpl.java,spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper,null,_accept,505,KILLED,spoon.test.reflect.meta.MetaModelTest.listValueRoleSetOn(spoon.test.reflect.meta.MetaModelTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeInformation_SUPER_TYPE_RoleHandler,null,getValue,1900,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTryBodyReplaceListener,void,set,974,KILLED,spoon.test.replace.ReplaceTest.testReplaceBlockTry(spoon.test.replace.ReplaceTest)
ParameterScopeFunction.java,spoon.reflect.visitor.filter.ParameterScopeFunction,void,apply,54,KILLED,spoon.test.query_function.VariableReferencesTest.testParameterReferenceFunction(spoon.test.query_function.VariableReferencesTest)
DeleteAction.java,spoon.experimental.modelobs.action.DeleteAction,null,getChangedValue,35,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtStatementListStatementsReplaceListener,void,set,316,KILLED,spoon.test.replace.ReplaceTest.testReplaceStatement(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtBinaryOperatorLeftHandOperandReplaceListener,void,set,288,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayLengthAccess(spoon.test.template.TemplateArrayAccessTest)
SpoonModelTree.java,spoon.support.gui.SpoonModelTree$1,void,actionPerformed,145,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtExecutableReferenceParametersReplaceListener,void,set,554,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
SpoonModelTree.java,spoon.support.gui.SpoonModelTree$2,void,actionPerformed,167,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree$3,void,actionPerformed,183,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree$4,void,actionPerformed,192,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree$5,void,actionPerformed,203,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree$6,void,run,326,NO_COVERAGE,none
SpoonModelTree.java,spoon.support.gui.SpoonModelTree$7,void,run,351,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtMultiTypedElementMultiTypesReplaceListener,void,set,764,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTypeInformationSuperInterfacesReplaceListener,void,set,386,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtClass](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtReturnReturnedExpressionReplaceListener,void,set,890,KILLED,spoon.test.template.TemplateReplaceReturnTest.testNoReturnReplaceTemplate(spoon.test.template.TemplateReplaceReturnTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction$2,void,accept,152,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction$3,void,accept,173,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoring(spoon.test.refactoring.MethodsRefactoringTest)
AllMethodsSameSignatureFunction.java,spoon.reflect.visitor.filter.AllMethodsSameSignatureFunction$4,void,accept,199,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTryCatchersReplaceListener,void,set,988,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtPackageExportTargetExportReplaceListener,void,set,1198,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackageExport](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtEnumEnumValuesReplaceListener,void,set,512,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtEnum](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAbstractInvocationExecutableReplaceListener,void,set,736,KILLED,spoon.test.replace.ReplaceTest.testReplaceExecutableReferenceByAnotherOne(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAnnotationMethodDefaultExpressionReplaceListener,void,set,778,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotationMethod](spoon.test.replace.ReplaceParametrizedTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl$1,void,accept,593,KILLED,spoon.test.reference.TypeReferenceTest.doNotCloseLoader(spoon.test.reference.TypeReferenceTest)
CtTypeImpl.java,spoon.support.reflect.declaration.CtTypeImpl$2,void,accept,991,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtFieldAccessVariableReplaceListener,void,set,1114,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
CtAnnotation.java,spoon.reflect.declaration.CtAnnotation,null,getAnnotatedElementTypeForCtElement,172,KILLED,spoon.test.annotation.AnnotationTest.testPersistenceProperty(spoon.test.annotation.AnnotationTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl$1,null,initialValue,411,KILLED,spoon.test.factory.ClassFactoryTest.testDeclaringClass(spoon.test.factory.ClassFactoryTest)
FactoryImpl.java,spoon.reflect.factory.FactoryImpl$2,null,initialValue,442,KILLED,spoon.test.serializable.SourcePositionTest.testSourcePosition(spoon.test.serializable.SourcePositionTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAssertExpressionReplaceListener,void,set,246,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssert](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtBinaryOperatorRightHandOperandReplaceListener,void,set,302,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtBinaryOperator](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtExpressionTypeCastsReplaceListener,void,set,134,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
InlinePartialEvaluator.java,spoon.support.reflect.eval.InlinePartialEvaluator,void,exit,34,KILLED,spoon.test.eval.EvalTest.testVisitorPartialEvaluatorScanner(spoon.test.eval.EvalTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtIntersectionTypeReferenceBoundsReplaceListener,void,set,1044,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIntersectionTypeReference](spoon.test.replace.ReplaceParametrizedTest)
ClassTypingContext.java,spoon.support.visitor.ClassTypingContext$1,void,accept,211,KILLED,spoon.test.imports.ImportTest.testGetImportKindReturnRightValue(spoon.test.imports.ImportTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtModuleRootPackageReplaceListener,void,set,1170,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtModule](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtForForUpdateReplaceListener,void,set,652,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtExecutableReferenceExpressionExecutableReplaceListener,void,set,848,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReferenceExpression](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtSynchronizedBlockReplaceListener,void,set,946,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtSynchronized](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtDoLoopingExpressionReplaceListener,void,set,484,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtDo](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtJavaDocTagsReplaceListener,void,set,1128,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtJavaDoc](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTypeReferencePackageReplaceListener,void,set,176,KILLED,spoon.test.replace.ReplaceTest.testReplaceAPackageReferenceByAnotherOne(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtElementAnnotationsReplaceListener,void,set,78,KILLED,spoon.test.delete.DeleteTest.testDeleteAnnotationOnAClass(spoon.test.delete.DeleteTest)
CtModelImpl.java,spoon.reflect.CtModelImpl$CtRootPackage,null,setSimpleName,66,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerEnum(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
VariableScopeFunction.java,spoon.reflect.visitor.filter.VariableScopeFunction,void,apply,47,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableScopeFunction(spoon.test.query_function.VariableReferencesTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTargetedExpressionTargetReplaceListener,void,set,148,KILLED,spoon.test.template.TemplateArrayAccessTest.testArrayAccess(spoon.test.template.TemplateArrayAccessTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtNewArrayElementsReplaceListener,void,set,792,KILLED,spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtProvidedServiceServiceTypeReplaceListener,void,set,1226,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtProvidedService](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtForEachExpressionReplaceListener,void,set,680,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtForEach](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtIfElseStatementReplaceListener,void,set,722,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtIf](spoon.test.replace.ReplaceParametrizedTest)
SubInheritanceHierarchyFunction.java,spoon.reflect.visitor.filter.SubInheritanceHierarchyFunction$1,void,accept,92,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testSubInheritanceHierarchyFunction(spoon.test.refactoring.MethodsRefactoringTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtExecutableThrownTypesReplaceListener,void,set,470,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtExecutableReferenceTypeReplaceListener,void,set,540,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
ModuleFactory.java,spoon.reflect.factory.ModuleFactory$CtUnnamedModule$1,null,getFactory,58,NO_COVERAGE,none
AbstractPathElement.java,spoon.reflect.path.impl.AbstractPathElement$1,void,scan,51,KILLED,spoon.test.path.PathTest.testBuilderMethod(spoon.test.path.PathTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTypeTypeMembersReplaceListener,void,set,106,KILLED,spoon.test.prettyprinter.PrinterTest.testPrintingOfOrphanFieldReference(spoon.test.prettyprinter.PrinterTest)
FileCompilerConfig.java,spoon.support.compiler.jdt.FileCompilerConfig,void,initializeCompiler,54,KILLED,spoon.test.api.FileSystemFolderTest.testLauncherWithWrongPathAsInput(spoon.test.api.FileSystemFolderTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAnnotationValuesReplaceListener,void,set,92,KILLED,spoon.test.annotation.AnnotationTest.testReplaceAnnotationValue(spoon.test.annotation.AnnotationTest)
VariableReferenceFunction.java,spoon.reflect.visitor.filter.VariableReferenceFunction,void,apply,59,KILLED,spoon.test.query_function.VariableReferencesTest.testVariableReferenceFunction(spoon.test.query_function.VariableReferencesTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtForExpressionReplaceListener,void,set,638,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFor](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTypeInformationSuperclassReplaceListener,void,set,372,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeParameter](spoon.test.replace.ReplaceParametrizedTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$3,void,accept,189,SURVIVED,none
TemplateMatcher.java,spoon.template.TemplateMatcher$2,void,visitCtField,298,NO_COVERAGE,none
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$2,void,accept,167,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
CtParameterRemoveRefactoring.java,spoon.refactoring.CtParameterRemoveRefactoring$1,void,accept,148,KILLED,spoon.test.refactoring.MethodsRefactoringTest.testCtParameterRemoveRefactoringValidationCheck(spoon.test.refactoring.MethodsRefactoringTest)
UpdateAction.java,spoon.experimental.modelobs.action.UpdateAction,null,getChangedValue,37,NO_COVERAGE,none
CtRenameLocalVariableRefactoring.java,spoon.refactoring.CtRenameLocalVariableRefactoring$1,void,accept,74,KILLED,spoon.test.refactoring.CtRenameLocalVariableRefactoringTest.testRenameAllLocalVariablesOfRenameTestSubject(spoon.test.refactoring.CtRenameLocalVariableRefactoringTest)
TreeBuilderRequestor.java,spoon.support.compiler.jdt.TreeBuilderRequestor,void,acceptResult,35,KILLED,spoon.test.exceptions.ExceptionTest.testExceptionDuplicateClass(spoon.test.exceptions.ExceptionTest)
Refactoring.java,spoon.refactoring.Refactoring$3,void,visitCtExecutableReference,98,KILLED,spoon.reflect.ast.CloneTest.testCopyMethod(spoon.reflect.ast.CloneTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtLambdaExpressionReplaceListener,void,set,834,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAssignmentAssignedReplaceListener,void,set,260,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssignment](spoon.test.replace.ReplaceParametrizedTest)
ModelRoleHandlers.java,spoon.reflect.meta.impl.ModelRoleHandlers$CtTypeInformation_INTERFACE_RoleHandler,null,getValue,1128,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtFormalTypeDeclarerFormalCtTypeParametersReplaceListener,void,set,400,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtMethod](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtNewClassAnonymousClassReplaceListener,void,set,820,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtNewClass](spoon.test.replace.ReplaceParametrizedTest)
CtAnnotationImpl.java,spoon.support.reflect.declaration.CtAnnotationImpl$1,null,entrySet,84,KILLED,spoon.test.annotation.AnnotationTest.testAnnotationNotRepeatableNotArrayAnnotation(spoon.test.annotation.AnnotationTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtVariableReferenceTypeReplaceListener,void,set,610,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtFieldRead](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTryWithResourceResourcesReplaceListener,void,set,1016,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTryWithResource](spoon.test.replace.ReplaceParametrizedTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$2,void,addMethod,165,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerInterface(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtUsedServiceServiceTypeReplaceListener,void,set,1254,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtUsedService](spoon.test.replace.ReplaceParametrizedTest)
CloneHelper.java,spoon.support.visitor.equals.CloneHelper$1,void,visitCtExecutableReference,153,KILLED,spoon.test.type.TypeTest.testTypeAccessForDotClass(spoon.test.type.TypeTest)
FilteringFolder.java,spoon.support.compiler.FilteringFolder,null,removeAllThatMatch,33,KILLED,spoon.test.support.ResourceTest.testFilteringFolder(spoon.test.support.ResourceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtArrayTypeReferenceComponentTypeReplaceListener,void,set,204,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtArrayTypeReference](spoon.test.replace.ReplaceParametrizedTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$1,void,scanCtTypeMember,414,NO_COVERAGE,none
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$5,void,addMethod,228,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
SubstitutionVisitor.java,spoon.support.template.SubstitutionVisitor$2,void,scan,420,NO_COVERAGE,none
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$6,void,addClassReference,360,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerGenericsInClass(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
JavaReflectionTreeBuilder.java,spoon.support.visitor.java.JavaReflectionTreeBuilder$4,void,addMethod,207,KILLED,spoon.support.visitor.java.JavaReflectionTreeBuilderTest.testScannerAnnotation(spoon.support.visitor.java.JavaReflectionTreeBuilderTest)
AddAction.java,spoon.experimental.modelobs.action.AddAction,null,getChangedValue,31,NO_COVERAGE,none
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtPackageExportPackageReferenceReplaceListener,void,set,1184,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtPackageExport](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTypedElementTypeReplaceListener,void,set,36,KILLED,spoon.test.replace.ReplaceTest.testReplaceIntegerReference(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAnnotationFieldAccessVariableReplaceListener,void,set,582,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAnnotationFieldAccess](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtImportReferenceReplaceListener,void,set,1142,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtImport](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtActualTypeContainerActualTypeArgumentsReplaceListener,void,set,218,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtExecutableReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtExecutableParametersReplaceListener,void,set,456,KILLED,spoon.test.delete.DeleteTest.testDeleteParameterOfMethod(spoon.test.delete.DeleteTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtTypeParameterReferenceBoundingTypeReplaceListener,void,set,1030,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtTypeParameterReference](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtVariableDefaultExpressionReplaceListener,void,set,568,KILLED,spoon.test.replace.ReplaceTest.testReplaceExpression(spoon.test.replace.ReplaceTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtConditionalThenExpressionReplaceListener,void,set,428,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtConditional](spoon.test.replace.ReplaceParametrizedTest)
ReplacementVisitor.java,spoon.support.visitor.replace.ReplacementVisitor$CtAssertAssertExpressionReplaceListener,void,set,232,KILLED,spoon.test.replace.ReplaceParametrizedTest.testContract[CtAssert](spoon.test.replace.ReplaceParametrizedTest)
