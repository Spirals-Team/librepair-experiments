{
  "repository": {
    "name": "INRIA/spoon",
    "githubId": 14176513,
    "url": "https://github.com/INRIA/spoon",
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": true,
    "pullRequestId": 2341
  },
  "builds": {
    "buggyBuild": {
      "id": 411469860,
      "url": "http://travis-ci.org/INRIA/spoon/builds/411469860",
      "date": "Aug 2, 2018 11:55:00 PM"
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "e974e821dc5fb544c7eb4f46084412237ced7428",
      "url": "http://github.com/INRIA/spoon/commit/e974e821dc5fb544c7eb4f46084412237ced7428",
      "date": "Aug 2, 2018 10:47:56 PM"
    },
    "buggyBuildForkRepo": {
      "repoName": "zielint0/spoon",
      "branchName": "refactor-add-override-in-CloneVisitor.java",
      "sha": "63efacdfe01bc61faf007598c168c759f398553b",
      "url": "https://github.com/zielint0/spoon/commit/63efacdfe01bc61faf007598c168c759f398553b",
      "date": "Aug 2, 2018 10:47:56 PM"
    },
    "buggyBuildBaseRepo": {
      "repoName": "INRIA/spoon",
      "branchName": "master",
      "sha": "21811c9a4af045b9cb0af2452de8e36963061866",
      "url": "https://github.com/INRIA/spoon/commit/21811c9a4af045b9cb0af2452de8e36963061866",
      "date": "Aug 2, 2018 9:54:17 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 1,
    "numberSourceFiles": 615,
    "numberTestFiles": 692,
    "numberLibrariesFailingModule": 30
  },
  "tests": {
    "failingModule": "/root/workspace/INRIA/spoon/411469860",
    "overallMetrics": {
      "numberRunning": 1534,
      "numberPassing": 1531,
      "numberFailing": 3,
      "numberErroring": 0,
      "numberSkipping": 4,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 2
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "isError": false,
          "occurrences": 1
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "numberRunning": 4,
        "numberPassing": 3,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "numberRunning": 6,
        "numberPassing": 4,
        "numberFailing": 2,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "spoon.processing.CtGenerationTest",
        "testMethod": "testGenerateCloneVisitor",
        "failureName": "org.junit.ComparisonFailure",
        "detail": "CloneVisitor different expected:\u003c...isitorGenerator\n    [@java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation\u003cA\u003e annotation) {\n        spoon.reflect.declaration.CtAnnotation\u003cA\u003e aCtAnnotation \u003d annotation.getFactory().Core().createAnnotation();\n        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));\n        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));\n        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));\n        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));\n        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));\n        this.builder.copy(annotation, aCtAnnotation);\n        this.cloneHelper.tailor(annotation, aCtAnnotation);\n        this.other \u003d aCtAnnotation;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType\u003cA\u003e annotationType) {\n        spoon.reflect.declaration.CtAnnotationType\u003cA\u003e aCtAnnotationType \u003d annotationType.getFactory().Core().createAnnotationType();\n        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));\n        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));\n        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));\n        this.builder.copy(annotationType, aCtAnnotationType);\n        this.cloneHelper.tailor(annotationType, aCtAnnotationType);\n        this.other \u003d aCtAnnotationType;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {\n        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable \u003d anonymousExec.getFactory().Core().createAnonymousExecutable();\n        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));\n        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));\n        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));\n        this.builder.copy(anonymousExec, aCtAnonymousExecutable);\n        this.cloneHelper.tailor(anonymousExec, aCtAnonymousExecutable);\n        this.other \u003d aCtAnonymousExecutable;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayRead(final spoon.reflect.code.CtArrayRead\u003cT\u003e arrayRead) {\n        spoon.reflect.code.CtArrayRead\u003cT\u003e aCtArrayRead \u003d arrayRead.getFactory().Core().createArrayRead();\n        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));\n        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));\n        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));\n        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));\n        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));\n        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));\n        this.builder.copy(arrayRead, aCtArrayRead);\n        this.cloneHelper.tailor(arrayRead, aCtArrayRead);\n        this.other \u003d aCtArrayRead;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite\u003cT\u003e arrayWrite) {\n        spoon.reflect.code.CtArrayWrite\u003cT\u003e aCtArrayWrite \u003d arrayWrite.getFactory().Core().createArrayWrite();\n        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));\n        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));\n        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));\n        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));\n        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));\n        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));\n        this.builder.copy(arrayWrite, aCtArrayWrite);\n        this.cloneHelper.tailor(arrayWrite, aCtArrayWrite);\n        this.other \u003d aCtArrayWrite;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtArrayTypeReference\u003cT\u003e aCtArrayTypeReference \u003d reference.getFactory().Core().createArrayTypeReference();\n        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));\n        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));\n        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));\n        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtArrayTypeReference);\n        this.cloneHelper.tailor(reference, aCtArrayTypeReference);\n        this.other \u003d aCtArrayTypeReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAssert(final spoon.reflect.code.CtAssert\u003cT\u003e asserted) {\n        spoon.reflect.code.CtAssert\u003cT\u003e aCtAssert \u003d asserted.getFactory().Core().createAssert();\n        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));\n        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));\n        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));\n        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));\n        this.builder.copy(asserted, aCtAssert);\n        this.cloneHelper.tailor(asserted, aCtAssert);\n        this.other \u003d aCtAssert;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtAssignment(final spoon.reflect.code.CtAssignment\u003cT, A\u003e assignement) {\n        spoon.reflect.code.CtAssignment\u003cT, A\u003e aCtAssignment \u003d assignement.getFactory().Core().createAssignment();\n        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));\n        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));\n        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));\n        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));\n        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));\n        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));\n        this.builder.copy(assignement, aCtAssignment);\n        this.cloneHelper.tailor(assignement, aCtAssignment);\n        this.other \u003d aCtAssignment;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator\u003cT\u003e operator) {\n        spoon.reflect.code.CtBinaryOperator\u003cT\u003e aCtBinaryOperator \u003d operator.getFactory().Core().createBinaryOperator();\n        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));\n        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));\n        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));\n        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));\n        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));\n        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));\n        this.builder.copy(operator, aCtBinaryOperator);\n        this.cloneHelper.tailor(operator, aCtBinaryOperator);\n        this.other \u003d aCtBinaryOperator;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtBlock(final spoon.reflect.code.CtBlock\u003cR\u003e block) {\n        spoon.reflect.code.CtBlock\u003cR\u003e aCtBlock \u003d block.getFactory().Core().createBlock();\n        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));\n        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));\n        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));\n        this.builder.copy(block, aCtBlock);\n        this.cloneHelper.tailor(block, aCtBlock);\n        this.other \u003d aCtBlock;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {\n        spoon.reflect.code.CtBreak aCtBreak \u003d breakStatement.getFactory().Core().createBreak();\n        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));\n        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));\n        this.builder.copy(breakStatement, aCtBreak);\n        this.cloneHelper.tailor(breakStatement, aCtBreak);\n        this.other \u003d aCtBreak;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cS\u003e void visitCtCase(final spoon.reflect.code.CtCase\u003cS\u003e caseStatement) {\n        spoon.reflect.code.CtCase\u003cS\u003e aCtCase \u003d caseStatement.getFactory().Core().createCase();\n        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));\n        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));\n        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));\n        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));\n        this.builder.copy(caseStatement, aCtCase);\n        this.cloneHelper.tailor(caseStatement, aCtCase);\n        this.other \u003d aCtCase;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {\n        spoon.reflect.code.CtCatch aCtCatch \u003d catchBlock.getFactory().Core().createCatch();\n        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));\n        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));\n        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));\n        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));\n        this.builder.copy(catchBlock, aCtCatch);\n        this.cloneHelper.tailor(catchBlock, aCtCatch);\n        this.other \u003d aCtCatch;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtClass(final spoon.reflect.declaration.CtClass\u003cT\u003e ctClass) {\n        spoon.reflect.declaration.CtClass\u003cT\u003e aCtClass \u003d ctClass.getFactory().Core().createClass();\n        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));\n        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));\n        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));\n        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));\n        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));\n        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));\n        this.builder.copy(ctClass, aCtClass);\n        this.cloneHelper.tailor(ctClass, aCtClass);\n        this.other \u003d aCtClass;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {\n        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter \u003d typeParameter.getFactory().Core().createTypeParameter();\n        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));\n        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));\n        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));\n        this.builder.copy(typeParameter, aCtTypeParameter);\n        this.cloneHelper.tailor(typeParameter, aCtTypeParameter);\n        this.other \u003d aCtTypeParameter;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConditional(final spoon.reflect.code.CtConditional\u003cT\u003e conditional) {\n        spoon.reflect.code.CtConditional\u003cT\u003e aCtConditional \u003d conditional.getFactory().Core().createConditional();\n        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));\n        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));\n        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));\n        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));\n        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));\n        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));\n        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));\n        this.builder.copy(conditional, aCtConditional);\n        this.cloneHelper.tailor(conditional, aCtConditional);\n        this.other \u003d aCtConditional;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructor(final spoon.reflect.declaration.CtConstructor\u003cT\u003e c) {\n        spoon.reflect.declaration.CtConstructor\u003cT\u003e aCtConstructor \u003d c.getFactory().Core().createConstructor();\n        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));\n        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));\n        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));\n        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));\n        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));\n        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));\n        this.builder.copy(c, aCtConstructor);\n        this.cloneHelper.tailor(c, aCtConstructor);\n        this.other \u003d aCtConstructor;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {\n        spoon.reflect.code.CtContinue aCtContinue \u003d continueStatement.getFactory().Core().createContinue();\n        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));\n        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));\n        this.builder.copy(continueStatement, aCtContinue);\n        this.cloneHelper.tailor(continueStatement, aCtContinue);\n        this.other \u003d aCtContinue;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {\n        spoon.reflect.code.CtDo aCtDo \u003d doLoop.getFactory().Core().createDo();\n        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));\n        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));\n        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));\n        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));\n        this.builder.copy(doLoop, aCtDo);\n        this.cloneHelper.tailor(doLoop, aCtDo);\n        this.other \u003d aCtDo;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT extends java.lang.Enum\u003c?\u003e\u003e void visitCtEnum(final spoon.reflect.declaration.CtEnum\u003cT\u003e ctEnum) {\n        spoon.reflect.declaration.CtEnum\u003cT\u003e aCtEnum \u003d ctEnum.getFactory().Core().createEnum();\n        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));\n        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));\n        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));\n        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));\n        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));\n        this.builder.copy(ctEnum, aCtEnum);\n        this.cloneHelper.tailor(ctEnum, aCtEnum);\n        this.other \u003d aCtEnum;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtExecutableReference\u003cT\u003e aCtExecutableReference \u003d reference.getFactory().Core().createExecutableReference();\n        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));\n        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));\n        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));\n        this.builder.copy(reference, aCtExecutableReference);\n        this.cloneHelper.tailor(reference, aCtExecutableReference);\n        this.other \u003d aCtExecutableReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtField(final spoon.reflect.declaration.CtField\u003cT\u003e f) {\n        spoon.reflect.declaration.CtField\u003cT\u003e aCtField \u003d f.getFactory().Core().createField();\n        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));\n        aCtField.setType(this.cloneHelper.clone(f.getType()));\n        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));\n        aCtField.setComments(this.cloneHelper.clone(f.getComments()));\n        this.builder.copy(f, aCtField);\n        this.cloneHelper.tailor(f, aCtField);\n        this.other \u003d aCtField;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue\u003cT\u003e enumValue) {\n        spoon.reflect.declaration.CtEnumValue\u003cT\u003e aCtEnumValue \u003d enumValue.getFactory().Core().createEnumValue();\n        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));\n        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));\n        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));\n        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));\n        this.builder.copy(enumValue, aCtEnumValue);\n        this.cloneHelper.tailor(enumValue, aCtEnumValue);\n        this.other \u003d aCtEnumValue;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtThisAccess(final spoon.reflect.code.CtThisAccess\u003cT\u003e thisAccess) {\n        spoon.reflect.code.CtThisAccess\u003cT\u003e aCtThisAccess \u003d thisAccess.getFactory().Core().createThisAccess();\n        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));\n        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));\n        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));\n        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));\n        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));\n        this.builder.copy(thisAccess, aCtThisAccess);\n        this.cloneHelper.tailor(thisAccess, aCtThisAccess);\n        this.other \u003d aCtThisAccess;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess\u003cT\u003e annotationFieldAccess) {\n        spoon.reflect.code.CtAnnotationFieldAccess\u003cT\u003e aCtAnnotationFieldAccess \u003d annotationFieldAccess.getFactory().Core().createAnnotationFieldAccess();\n        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));\n        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));\n        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));\n        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));\n        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));\n        this.builder.copy(annotationFieldAccess, aCtAnnotationFieldAccess);\n        this.cloneHelper.tailor(annotationFieldAccess, aCtAnnotationFieldAccess);\n        this.other \u003d aCtAnnotationFieldAccess;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtFieldReference\u003cT\u003e aCtFieldReference \u003d reference.getFactory().Core().createFieldReference();\n        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtFieldReference);\n        this.cloneHelper.tailor(reference, aCtFieldReference);\n        this.other \u003d aCtFieldReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {\n        spoon.reflect.code.CtFor aCtFor \u003d forLoop.getFactory().Core().createFor();\n        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));\n        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));\n        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));\n        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));\n        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));\n        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));\n        this.builder.copy(forLoop, aCtFor);\n        this.cloneHelper.tailor(forLoop, aCtFor);\n        this.other \u003d aCtFor;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {\n        spoon.reflect.code.CtForEach aCtForEach \u003d foreach.getFactory().Core().createForEach();\n        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));\n        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));\n        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));\n        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));\n        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));\n        this.builder.copy(foreach, aCtForEach);\n        this.cloneHelper.tailor(foreach, aCtForEach);\n        this.other \u003d aCtForEach;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {\n        spoon.reflect.code.CtIf aCtIf \u003d ifElement.getFactory().Core().createIf();\n        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));\n        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));\n        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));\n        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));\n        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));\n        this.builder.copy(ifElement, aCtIf);\n        this.cloneHelper.tailor(ifElement, aCtIf);\n        this.other \u003d aCtIf;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInterface(final spoon.reflect.declaration.CtInterface\u003cT\u003e intrface) {\n        spoon.reflect.declaration.CtInterface\u003cT\u003e aCtInterface \u003d intrface.getFactory().Core().createInterface();\n        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));\n        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));\n        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));\n        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));\n        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));\n        this.builder.copy(intrface, aCtInterface);\n        this.cloneHelper.tailor(intrface, aCtInterface);\n        this.other \u003d aCtInterface;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtInvocation(final spoon.reflect.code.CtInvocation\u003cT\u003e invocation) {\n        spoon.reflect.code.CtInvocation\u003cT\u003e aCtInvocation \u003d invocation.getFactory().Core().createInvocation();\n        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));\n        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));\n        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));\n        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));\n        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));\n        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));\n        this.builder.copy(invocation, aCtInvocation);\n        this.cloneHelper.tailor(invocation, aCtInvocation);\n        this.other \u003d aCtInvocation;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLiteral(final spoon.reflect.code.CtLiteral\u003cT\u003e literal) {\n        spoon.reflect.code.CtLiteral\u003cT\u003e aCtLiteral \u003d literal.getFactory().Core().createLiteral();\n        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));\n        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));\n        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));\n        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));\n        this.builder.copy(literal, aCtLiteral);\n        this.cloneHelper.tailor(literal, aCtLiteral);\n        this.other \u003d aCtLiteral;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable\u003cT\u003e localVariable) {\n        spoon.reflect.code.CtLocalVariable\u003cT\u003e aCtLocalVariable \u003d localVariable.getFactory().Core().createLocalVariable();\n        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));\n        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));\n        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));\n        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));\n        this.builder.copy(localVariable, aCtLocalVariable);\n        this.cloneHelper.tailor(localVariable, aCtLocalVariable);\n        this.other \u003d aCtLocalVariable;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtLocalVariableReference\u003cT\u003e aCtLocalVariableReference \u003d reference.getFactory().Core().createLocalVariableReference();\n        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtLocalVariableReference);\n        this.cloneHelper.tailor(reference, aCtLocalVariableReference);\n        this.other \u003d aCtLocalVariableReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable\u003cT\u003e catchVariable) {\n        spoon.reflect.code.CtCatchVariable\u003cT\u003e aCtCatchVariable \u003d catchVariable.getFactory().Core().createCatchVariable();\n        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));\n        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));\n        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));\n        this.builder.copy(catchVariable, aCtCatchVariable);\n        this.cloneHelper.tailor(catchVariable, aCtCatchVariable);\n        this.other \u003d aCtCatchVariable;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtCatchVariableReference\u003cT\u003e aCtCatchVariableReference \u003d reference.getFactory().Core().createCatchVariableReference();\n        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtCatchVariableReference);\n        this.cloneHelper.tailor(reference, aCtCatchVariableReference);\n        this.other \u003d aCtCatchVariableReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtMethod(final spoon.reflect.declaration.CtMethod\u003cT\u003e m) {\n        spoon.reflect.declaration.CtMethod\u003cT\u003e aCtMethod \u003d m.getFactory().Core().createMethod();\n        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));\n        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));\n        aCtMethod.setType(this.cloneHelper.clone(m.getType()));\n        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));\n        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));\n        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));\n        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));\n        this.builder.copy(m, aCtMethod);\n        this.cloneHelper.tailor(m, aCtMethod);\n        this.other \u003d aCtMethod;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e annotationMethod) {\n        spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e aCtAnnotationMethod \u003d annotationMethod.getFactory().Core().createAnnotationMethod();\n        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));\n        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));\n        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));\n        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));\n        this.builder.copy(annotationMethod, aCtAnnotationMethod);\n        this.cloneHelper.tailor(annotationMethod, aCtAnnotationMethod);\n        this.other \u003d aCtAnnotationMethod;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtNewArray(final spoon.reflect.code.CtNewArray\u003cT\u003e newArray) {\n        spoon.reflect.code.CtNewArray\u003cT\u003e aCtNewArray \u003d newArray.getFactory().Core().createNewArray();\n        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));\n        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));\n        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));\n        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));\n        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));\n        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));\n        this.builder.copy(newArray, aCtNewArray);\n        this.cloneHelper.tailor(newArray, aCtNewArray);\n        this.other \u003d aCtNewArray;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall\u003cT\u003e ctConstructorCall) {\n        spoon.reflect.code.CtConstructorCall\u003cT\u003e aCtConstructorCall \u003d ctConstructorCall.getFactory().Core().createConstructorCall();\n        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));\n        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));\n        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));\n        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));\n        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));\n        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));\n        this.builder.copy(ctConstructorCall, aCtConstructorCall);\n        this.cloneHelper.tailor(ctConstructorCall, aCtConstructorCall);\n        this.other \u003d aCtConstructorCall;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtNewClass(final spoon.reflect.code.CtNewClass\u003cT\u003e newClass) {\n        spoon.reflect.code.CtNewClass\u003cT\u003e aCtNewClass \u003d newClass.getFactory().Core().createNewClass();\n        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));\n        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));\n        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));\n        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));\n        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));\n        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));\n        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));\n        this.builder.copy(newClass, aCtNewClass);\n        this.cloneHelper.tailor(newClass, aCtNewClass);\n        this.other \u003d aCtNewClass;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLambda(final spoon.reflect.code.CtLambda\u003cT\u003e lambda) {\n        spoon.reflect.code.CtLambda\u003cT\u003e aCtLambda \u003d lambda.getFactory().Core().createLambda();\n        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));\n        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));\n        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));\n        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));\n        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));\n        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));\n        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));\n        this.builder.copy(lambda, aCtLambda);\n        this.cloneHelper.tailor(lambda, aCtLambda);\n        this.other \u003d aCtLambda;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT, E extends spoon.reflect.code.CtExpression\u003c?\u003e\u003e void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e expression) {\n        spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e aCtExecutableReferenceExpression \u003d expression.getFactory().Core().createExecutableReferenceExpression();\n        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));\n        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));\n        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));\n        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));\n        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));\n        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));\n        this.builder.copy(expression, aCtExecutableReferenceExpression);\n        this.cloneHelper.tailor(expression, aCtExecutableReferenceExpression);\n        this.other \u003d aCtExecutableReferenceExpression;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e assignment) {\n        spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e aCtOperatorAssignment \u003d assignment.getFactory().Core().createOperatorAssignment();\n        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));\n        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));\n        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));\n        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));\n        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));\n        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));\n        this.builder.copy(assignment, aCtOperatorAssignment);\n        this.cloneHelper.tailor(assignment, aCtOperatorAssignment);\n        this.other \u003d aCtOperatorAssignment;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {\n        spoon.reflect.declaration.CtPackage aCtPackage \u003d ctPackage.getFactory().Core().createPackage();\n        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));\n        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));\n        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));\n        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));\n        this.builder.copy(ctPackage, aCtPackage);\n        this.cloneHelper.tailor(ctPackage, aCtPackage);\n        this.other \u003d aCtPackage;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {\n        spoon.reflect.reference.CtPackageReference aCtPackageReference \u003d reference.getFactory().Core().createPackageReference();\n        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtPackageReference);\n        this.cloneHelper.tailor(reference, aCtPackageReference);\n        this.other \u003d aCtPackageReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtParameter(final spoon.reflect.declaration.CtParameter\u003cT\u003e parameter) {\n        spoon.reflect.declaration.CtParameter\u003cT\u003e aCtParameter \u003d parameter.getFactory().Core().createParameter();\n        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));\n        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));\n        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));\n        this.builder.copy(parameter, aCtParameter);\n        this.cloneHelper.tailor(parameter, aCtParameter);\n        this.other \u003d aCtParameter;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtParameterReference\u003cT\u003e aCtParameterReference \u003d reference.getFactory().Core().createParameterReference();\n        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtParameterReference);\n        this.cloneHelper.tailor(reference, aCtParameterReference);\n        this.other \u003d aCtParameterReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtReturn(final spoon.reflect.code.CtReturn\u003cR\u003e returnStatement) {\n        spoon.reflect.code.CtReturn\u003cR\u003e aCtReturn \u003d returnStatement.getFactory().Core().createReturn();\n        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));\n        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));\n        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));\n        this.builder.copy(returnStatement, aCtReturn);\n        this.cloneHelper.tailor(returnStatement, aCtReturn);\n        this.other \u003d aCtReturn;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cR\u003e void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {\n        spoon.reflect.code.CtStatementList aCtStatementList \u003d statements.getFactory().Core().createStatementList();\n        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));\n        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));\n        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));\n        this.builder.copy(statements, aCtStatementList);\n        this.cloneHelper.tailor(statements, aCtStatementList);\n        this.other \u003d aCtStatementList;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cS\u003e void visitCtSwitch(final spoon.reflect.code.CtSwitch\u003cS\u003e switchStatement) {\n        spoon.reflect.code.CtSwitch\u003cS\u003e aCtSwitch \u003d switchStatement.getFactory().Core().createSwitch();\n        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));\n        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));\n        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));\n        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));\n        this.builder.copy(switchStatement, aCtSwitch);\n        this.cloneHelper.tailor(switchStatement, aCtSwitch);\n        this.other \u003d aCtSwitch;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {\n        spoon.reflect.code.CtSynchronized aCtSynchronized \u003d synchro.getFactory().Core().createSynchronized();\n        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));\n        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));\n        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));\n        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));\n        this.builder.copy(synchro, aCtSynchronized);\n        this.cloneHelper.tailor(synchro, aCtSynchronized);\n        this.other \u003d aCtSynchronized;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {\n        spoon.reflect.code.CtThrow aCtThrow \u003d throwStatement.getFactory().Core().createThrow();\n        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));\n        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));\n        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));\n        this.builder.copy(throwStatement, aCtThrow);\n        this.cloneHelper.tailor(throwStatement, aCtThrow);\n        this.other \u003d aCtThrow;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {\n        spoon.reflect.code.CtTry aCtTry \u003d tryBlock.getFactory().Core().createTry();\n        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));\n        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));\n        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));\n        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));\n        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));\n        this.builder.copy(tryBlock, aCtTry);\n        this.cloneHelper.tailor(tryBlock, aCtTry);\n        this.other \u003d aCtTry;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {\n        spoon.reflect.code.CtTryWithResource aCtTryWithResource \u003d tryWithResource.getFactory().Core().createTryWithResource();\n        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));\n        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));\n        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));\n        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));\n        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));\n        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));\n        this.builder.copy(tryWithResource, aCtTryWithResource);\n        this.cloneHelper.tailor(tryWithResource, aCtTryWithResource);\n        this.other \u003d aCtTryWithResource;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {\n        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference \u003d ref.getFactory().Core().createTypeParameterReference();\n        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));\n        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));\n        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));\n        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));\n        this.builder.copy(ref, aCtTypeParameterReference);\n        this.cloneHelper.tailor(ref, aCtTypeParameterReference);\n        this.other \u003d aCtTypeParameterReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {\n        spoon.reflect.reference.CtWildcardReference aCtWildcardReference \u003d wildcardReference.getFactory().Core().createWildcardReference();\n        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));\n        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));\n        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));\n        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));\n        this.builder.copy(wildcardReference, aCtWildcardReference);\n        this.cloneHelper.tailor(wildcardReference, aCtWildcardReference);\n        this.other \u003d aCtWildcardReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtIntersectionTypeReference\u003cT\u003e aCtIntersectionTypeReference \u003d reference.getFactory().Core().createIntersectionTypeReference();\n        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));\n        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtIntersectionTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));\n        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));\n        this.builder.copy(reference, aCtIntersectionTypeReference);\n        this.cloneHelper.tailor(reference, aCtIntersectionTypeReference);\n        this.other \u003d aCtIntersectionTypeReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtTypeReference\u003cT\u003e aCtTypeReference \u003d reference.getFactory().Core().createTypeReference();\n        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));\n        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));\n        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));\n        this.builder.copy(reference, aCtTypeReference);\n        this.cloneHelper.tailor(reference, aCtTypeReference);\n        this.other \u003d aCtTypeReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess\u003cT\u003e typeAccess) {\n        spoon.reflect.code.CtTypeAccess\u003cT\u003e aCtTypeAccess \u003d typeAccess.getFactory().Core().createTypeAccess();\n        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));\n        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));\n        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));\n        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));\n        this.builder.copy(typeAccess, aCtTypeAccess);\n        this.cloneHelper.tailor(typeAccess, aCtTypeAccess);\n        this.other \u003d aCtTypeAccess;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator\u003cT\u003e operator) {\n        spoon.reflect.code.CtUnaryOperator\u003cT\u003e aCtUnaryOperator \u003d operator.getFactory().Core().createUnaryOperator();\n        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));\n        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));\n        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));\n        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));\n        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));\n        this.builder.copy(operator, aCtUnaryOperator);\n        this.cloneHelper.tailor(operator, aCtUnaryOperator);\n        this.other \u003d aCtUnaryOperator;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtVariableRead(final spoon.reflect.code.CtVariableRead\u003cT\u003e variableRead) {\n        spoon.reflect.code.CtVariableRead\u003cT\u003e aCtVariableRead \u003d variableRead.getFactory().Core().createVariableRead();\n        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));\n        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));\n        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));\n        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));\n        this.builder.copy(variableRead, aCtVariableRead);\n        this.cloneHelper.tailor(variableRead, aCtVariableRead);\n        this.other \u003d aCtVariableRead;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite\u003cT\u003e variableWrite) {\n        spoon.reflect.code.CtVariableWrite\u003cT\u003e aCtVariableWrite \u003d variableWrite.getFactory().Core().createVariableWrite();\n        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));\n        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));\n        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));\n        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));\n        this.builder.copy(variableWrite, aCtVariableWrite);\n        this.cloneHelper.tailor(variableWrite, aCtVariableWrite);\n        this.other \u003d aCtVariableWrite;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {\n        spoon.reflect.code.CtWhile aCtWhile \u003d whileLoop.getFactory().Core().createWhile();\n        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));\n        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));\n        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));\n        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));\n        this.builder.copy(whileLoop, aCtWhile);\n        this.cloneHelper.tailor(whileLoop, aCtWhile);\n        this.other \u003d aCtWhile;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e expression) {\n        spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e aCtCodeSnippetExpression \u003d expression.getFactory().Core().createCodeSnippetExpression();\n        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));\n        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));\n        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));\n        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));\n        this.builder.copy(expression, aCtCodeSnippetExpression);\n        this.cloneHelper.tailor(expression, aCtCodeSnippetExpression);\n        this.other \u003d aCtCodeSnippetExpression;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {\n        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement \u003d statement.getFactory().Core().createCodeSnippetStatement();\n        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));\n        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));\n        this.builder.copy(statement, aCtCodeSnippetStatement);\n        this.cloneHelper.tailor(statement, aCtCodeSnippetStatement);\n        this.other \u003d aCtCodeSnippetStatement;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override]\n    public \u003cT\u003e void...\u003e but was:\u003c...isitorGenerator\n    [public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotation(final spoon.reflect.declaration.CtAnnotation\u003cA\u003e annotation) {\n        spoon.reflect.declaration.CtAnnotation\u003cA\u003e aCtAnnotation \u003d annotation.getFactory().Core().createAnnotation();\n        aCtAnnotation.setType(this.cloneHelper.clone(annotation.getType()));\n        aCtAnnotation.setComments(this.cloneHelper.clone(annotation.getComments()));\n        aCtAnnotation.setAnnotationType(this.cloneHelper.clone(annotation.getAnnotationType()));\n        aCtAnnotation.setAnnotations(this.cloneHelper.clone(annotation.getAnnotations()));\n        aCtAnnotation.setValues(this.cloneHelper.clone(annotation.getValues()));\n        this.builder.copy(annotation, aCtAnnotation);\n        this.cloneHelper.tailor(annotation, aCtAnnotation);\n        this.other \u003d aCtAnnotation;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cA extends java.lang.annotation.Annotation\u003e void visitCtAnnotationType(final spoon.reflect.declaration.CtAnnotationType\u003cA\u003e annotationType) {\n        spoon.reflect.declaration.CtAnnotationType\u003cA\u003e aCtAnnotationType \u003d annotationType.getFactory().Core().createAnnotationType();\n        aCtAnnotationType.setAnnotations(this.cloneHelper.clone(annotationType.getAnnotations()));\n        aCtAnnotationType.setTypeMembers(this.cloneHelper.clone(annotationType.getTypeMembers()));\n        aCtAnnotationType.setComments(this.cloneHelper.clone(annotationType.getComments()));\n        this.builder.copy(annotationType, aCtAnnotationType);\n        this.cloneHelper.tailor(annotationType, aCtAnnotationType);\n        this.other \u003d aCtAnnotationType;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtAnonymousExecutable(final spoon.reflect.declaration.CtAnonymousExecutable anonymousExec) {\n        spoon.reflect.declaration.CtAnonymousExecutable aCtAnonymousExecutable \u003d anonymousExec.getFactory().Core().createAnonymousExecutable();\n        aCtAnonymousExecutable.setAnnotations(this.cloneHelper.clone(anonymousExec.getAnnotations()));\n        aCtAnonymousExecutable.setBody(this.cloneHelper.clone(anonymousExec.getBody()));\n        aCtAnonymousExecutable.setComments(this.cloneHelper.clone(anonymousExec.getComments()));\n        this.builder.copy(anonymousExec, aCtAnonymousExecutable);\n        this.cloneHelper.tailor(anonymousExec, aCtAnonymousExecutable);\n        this.other \u003d aCtAnonymousExecutable;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayRead(final spoon.reflect.code.CtArrayRead\u003cT\u003e arrayRead) {\n        spoon.reflect.code.CtArrayRead\u003cT\u003e aCtArrayRead \u003d arrayRead.getFactory().Core().createArrayRead();\n        aCtArrayRead.setAnnotations(this.cloneHelper.clone(arrayRead.getAnnotations()));\n        aCtArrayRead.setType(this.cloneHelper.clone(arrayRead.getType()));\n        aCtArrayRead.setTypeCasts(this.cloneHelper.clone(arrayRead.getTypeCasts()));\n        aCtArrayRead.setTarget(this.cloneHelper.clone(arrayRead.getTarget()));\n        aCtArrayRead.setIndexExpression(this.cloneHelper.clone(arrayRead.getIndexExpression()));\n        aCtArrayRead.setComments(this.cloneHelper.clone(arrayRead.getComments()));\n        this.builder.copy(arrayRead, aCtArrayRead);\n        this.cloneHelper.tailor(arrayRead, aCtArrayRead);\n        this.other \u003d aCtArrayRead;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtArrayWrite(final spoon.reflect.code.CtArrayWrite\u003cT\u003e arrayWrite) {\n        spoon.reflect.code.CtArrayWrite\u003cT\u003e aCtArrayWrite \u003d arrayWrite.getFactory().Core().createArrayWrite();\n        aCtArrayWrite.setAnnotations(this.cloneHelper.clone(arrayWrite.getAnnotations()));\n        aCtArrayWrite.setType(this.cloneHelper.clone(arrayWrite.getType()));\n        aCtArrayWrite.setTypeCasts(this.cloneHelper.clone(arrayWrite.getTypeCasts()));\n        aCtArrayWrite.setTarget(this.cloneHelper.clone(arrayWrite.getTarget()));\n        aCtArrayWrite.setIndexExpression(this.cloneHelper.clone(arrayWrite.getIndexExpression()));\n        aCtArrayWrite.setComments(this.cloneHelper.clone(arrayWrite.getComments()));\n        this.builder.copy(arrayWrite, aCtArrayWrite);\n        this.cloneHelper.tailor(arrayWrite, aCtArrayWrite);\n        this.other \u003d aCtArrayWrite;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtArrayTypeReference(final spoon.reflect.reference.CtArrayTypeReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtArrayTypeReference\u003cT\u003e aCtArrayTypeReference \u003d reference.getFactory().Core().createArrayTypeReference();\n        aCtArrayTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));\n        aCtArrayTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtArrayTypeReference.setComponentType(this.cloneHelper.clone(reference.getComponentType()));\n        aCtArrayTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));\n        aCtArrayTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtArrayTypeReference);\n        this.cloneHelper.tailor(reference, aCtArrayTypeReference);\n        this.other \u003d aCtArrayTypeReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtAssert(final spoon.reflect.code.CtAssert\u003cT\u003e asserted) {\n        spoon.reflect.code.CtAssert\u003cT\u003e aCtAssert \u003d asserted.getFactory().Core().createAssert();\n        aCtAssert.setAnnotations(this.cloneHelper.clone(asserted.getAnnotations()));\n        aCtAssert.setAssertExpression(this.cloneHelper.clone(asserted.getAssertExpression()));\n        aCtAssert.setExpression(this.cloneHelper.clone(asserted.getExpression()));\n        aCtAssert.setComments(this.cloneHelper.clone(asserted.getComments()));\n        this.builder.copy(asserted, aCtAssert);\n        this.cloneHelper.tailor(asserted, aCtAssert);\n        this.other \u003d aCtAssert;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT, A extends T\u003e void visitCtAssignment(final spoon.reflect.code.CtAssignment\u003cT, A\u003e assignement) {\n        spoon.reflect.code.CtAssignment\u003cT, A\u003e aCtAssignment \u003d assignement.getFactory().Core().createAssignment();\n        aCtAssignment.setAnnotations(this.cloneHelper.clone(assignement.getAnnotations()));\n        aCtAssignment.setType(this.cloneHelper.clone(assignement.getType()));\n        aCtAssignment.setTypeCasts(this.cloneHelper.clone(assignement.getTypeCasts()));\n        aCtAssignment.setAssigned(this.cloneHelper.clone(assignement.getAssigned()));\n        aCtAssignment.setAssignment(this.cloneHelper.clone(assignement.getAssignment()));\n        aCtAssignment.setComments(this.cloneHelper.clone(assignement.getComments()));\n        this.builder.copy(assignement, aCtAssignment);\n        this.cloneHelper.tailor(assignement, aCtAssignment);\n        this.other \u003d aCtAssignment;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtBinaryOperator(final spoon.reflect.code.CtBinaryOperator\u003cT\u003e operator) {\n        spoon.reflect.code.CtBinaryOperator\u003cT\u003e aCtBinaryOperator \u003d operator.getFactory().Core().createBinaryOperator();\n        aCtBinaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));\n        aCtBinaryOperator.setType(this.cloneHelper.clone(operator.getType()));\n        aCtBinaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));\n        aCtBinaryOperator.setLeftHandOperand(this.cloneHelper.clone(operator.getLeftHandOperand()));\n        aCtBinaryOperator.setRightHandOperand(this.cloneHelper.clone(operator.getRightHandOperand()));\n        aCtBinaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));\n        this.builder.copy(operator, aCtBinaryOperator);\n        this.cloneHelper.tailor(operator, aCtBinaryOperator);\n        this.other \u003d aCtBinaryOperator;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cR\u003e void visitCtBlock(final spoon.reflect.code.CtBlock\u003cR\u003e block) {\n        spoon.reflect.code.CtBlock\u003cR\u003e aCtBlock \u003d block.getFactory().Core().createBlock();\n        aCtBlock.setAnnotations(this.cloneHelper.clone(block.getAnnotations()));\n        aCtBlock.setStatements(this.cloneHelper.clone(block.getStatements()));\n        aCtBlock.setComments(this.cloneHelper.clone(block.getComments()));\n        this.builder.copy(block, aCtBlock);\n        this.cloneHelper.tailor(block, aCtBlock);\n        this.other \u003d aCtBlock;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtBreak(final spoon.reflect.code.CtBreak breakStatement) {\n        spoon.reflect.code.CtBreak aCtBreak \u003d breakStatement.getFactory().Core().createBreak();\n        aCtBreak.setAnnotations(this.cloneHelper.clone(breakStatement.getAnnotations()));\n        aCtBreak.setComments(this.cloneHelper.clone(breakStatement.getComments()));\n        this.builder.copy(breakStatement, aCtBreak);\n        this.cloneHelper.tailor(breakStatement, aCtBreak);\n        this.other \u003d aCtBreak;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cS\u003e void visitCtCase(final spoon.reflect.code.CtCase\u003cS\u003e caseStatement) {\n        spoon.reflect.code.CtCase\u003cS\u003e aCtCase \u003d caseStatement.getFactory().Core().createCase();\n        aCtCase.setAnnotations(this.cloneHelper.clone(caseStatement.getAnnotations()));\n        aCtCase.setCaseExpression(this.cloneHelper.clone(caseStatement.getCaseExpression()));\n        aCtCase.setStatements(this.cloneHelper.clone(caseStatement.getStatements()));\n        aCtCase.setComments(this.cloneHelper.clone(caseStatement.getComments()));\n        this.builder.copy(caseStatement, aCtCase);\n        this.cloneHelper.tailor(caseStatement, aCtCase);\n        this.other \u003d aCtCase;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtCatch(final spoon.reflect.code.CtCatch catchBlock) {\n        spoon.reflect.code.CtCatch aCtCatch \u003d catchBlock.getFactory().Core().createCatch();\n        aCtCatch.setAnnotations(this.cloneHelper.clone(catchBlock.getAnnotations()));\n        aCtCatch.setParameter(this.cloneHelper.clone(catchBlock.getParameter()));\n        aCtCatch.setBody(this.cloneHelper.clone(catchBlock.getBody()));\n        aCtCatch.setComments(this.cloneHelper.clone(catchBlock.getComments()));\n        this.builder.copy(catchBlock, aCtCatch);\n        this.cloneHelper.tailor(catchBlock, aCtCatch);\n        this.other \u003d aCtCatch;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtClass(final spoon.reflect.declaration.CtClass\u003cT\u003e ctClass) {\n        spoon.reflect.declaration.CtClass\u003cT\u003e aCtClass \u003d ctClass.getFactory().Core().createClass();\n        aCtClass.setAnnotations(this.cloneHelper.clone(ctClass.getAnnotations()));\n        aCtClass.setSuperclass(this.cloneHelper.clone(ctClass.getSuperclass()));\n        aCtClass.setSuperInterfaces(this.cloneHelper.clone(ctClass.getSuperInterfaces()));\n        aCtClass.setFormalCtTypeParameters(this.cloneHelper.clone(ctClass.getFormalCtTypeParameters()));\n        aCtClass.setTypeMembers(this.cloneHelper.clone(ctClass.getTypeMembers()));\n        aCtClass.setComments(this.cloneHelper.clone(ctClass.getComments()));\n        this.builder.copy(ctClass, aCtClass);\n        this.cloneHelper.tailor(ctClass, aCtClass);\n        this.other \u003d aCtClass;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtTypeParameter(spoon.reflect.declaration.CtTypeParameter typeParameter) {\n        spoon.reflect.declaration.CtTypeParameter aCtTypeParameter \u003d typeParameter.getFactory().Core().createTypeParameter();\n        aCtTypeParameter.setAnnotations(this.cloneHelper.clone(typeParameter.getAnnotations()));\n        aCtTypeParameter.setSuperclass(this.cloneHelper.clone(typeParameter.getSuperclass()));\n        aCtTypeParameter.setComments(this.cloneHelper.clone(typeParameter.getComments()));\n        this.builder.copy(typeParameter, aCtTypeParameter);\n        this.cloneHelper.tailor(typeParameter, aCtTypeParameter);\n        this.other \u003d aCtTypeParameter;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtConditional(final spoon.reflect.code.CtConditional\u003cT\u003e conditional) {\n        spoon.reflect.code.CtConditional\u003cT\u003e aCtConditional \u003d conditional.getFactory().Core().createConditional();\n        aCtConditional.setType(this.cloneHelper.clone(conditional.getType()));\n        aCtConditional.setAnnotations(this.cloneHelper.clone(conditional.getAnnotations()));\n        aCtConditional.setCondition(this.cloneHelper.clone(conditional.getCondition()));\n        aCtConditional.setThenExpression(this.cloneHelper.clone(conditional.getThenExpression()));\n        aCtConditional.setElseExpression(this.cloneHelper.clone(conditional.getElseExpression()));\n        aCtConditional.setComments(this.cloneHelper.clone(conditional.getComments()));\n        aCtConditional.setTypeCasts(this.cloneHelper.clone(conditional.getTypeCasts()));\n        this.builder.copy(conditional, aCtConditional);\n        this.cloneHelper.tailor(conditional, aCtConditional);\n        this.other \u003d aCtConditional;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtConstructor(final spoon.reflect.declaration.CtConstructor\u003cT\u003e c) {\n        spoon.reflect.declaration.CtConstructor\u003cT\u003e aCtConstructor \u003d c.getFactory().Core().createConstructor();\n        aCtConstructor.setAnnotations(this.cloneHelper.clone(c.getAnnotations()));\n        aCtConstructor.setParameters(this.cloneHelper.clone(c.getParameters()));\n        aCtConstructor.setThrownTypes(this.cloneHelper.clone(c.getThrownTypes()));\n        aCtConstructor.setFormalCtTypeParameters(this.cloneHelper.clone(c.getFormalCtTypeParameters()));\n        aCtConstructor.setBody(this.cloneHelper.clone(c.getBody()));\n        aCtConstructor.setComments(this.cloneHelper.clone(c.getComments()));\n        this.builder.copy(c, aCtConstructor);\n        this.cloneHelper.tailor(c, aCtConstructor);\n        this.other \u003d aCtConstructor;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtContinue(final spoon.reflect.code.CtContinue continueStatement) {\n        spoon.reflect.code.CtContinue aCtContinue \u003d continueStatement.getFactory().Core().createContinue();\n        aCtContinue.setAnnotations(this.cloneHelper.clone(continueStatement.getAnnotations()));\n        aCtContinue.setComments(this.cloneHelper.clone(continueStatement.getComments()));\n        this.builder.copy(continueStatement, aCtContinue);\n        this.cloneHelper.tailor(continueStatement, aCtContinue);\n        this.other \u003d aCtContinue;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtDo(final spoon.reflect.code.CtDo doLoop) {\n        spoon.reflect.code.CtDo aCtDo \u003d doLoop.getFactory().Core().createDo();\n        aCtDo.setAnnotations(this.cloneHelper.clone(doLoop.getAnnotations()));\n        aCtDo.setLoopingExpression(this.cloneHelper.clone(doLoop.getLoopingExpression()));\n        aCtDo.setBody(this.cloneHelper.clone(doLoop.getBody()));\n        aCtDo.setComments(this.cloneHelper.clone(doLoop.getComments()));\n        this.builder.copy(doLoop, aCtDo);\n        this.cloneHelper.tailor(doLoop, aCtDo);\n        this.other \u003d aCtDo;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT extends java.lang.Enum\u003c?\u003e\u003e void visitCtEnum(final spoon.reflect.declaration.CtEnum\u003cT\u003e ctEnum) {\n        spoon.reflect.declaration.CtEnum\u003cT\u003e aCtEnum \u003d ctEnum.getFactory().Core().createEnum();\n        aCtEnum.setAnnotations(this.cloneHelper.clone(ctEnum.getAnnotations()));\n        aCtEnum.setSuperInterfaces(this.cloneHelper.clone(ctEnum.getSuperInterfaces()));\n        aCtEnum.setTypeMembers(this.cloneHelper.clone(ctEnum.getTypeMembers()));\n        aCtEnum.setEnumValues(this.cloneHelper.clone(ctEnum.getEnumValues()));\n        aCtEnum.setComments(this.cloneHelper.clone(ctEnum.getComments()));\n        this.builder.copy(ctEnum, aCtEnum);\n        this.cloneHelper.tailor(ctEnum, aCtEnum);\n        this.other \u003d aCtEnum;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtExecutableReference(final spoon.reflect.reference.CtExecutableReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtExecutableReference\u003cT\u003e aCtExecutableReference \u003d reference.getFactory().Core().createExecutableReference();\n        aCtExecutableReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtExecutableReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtExecutableReference.setParameters(this.cloneHelper.clone(reference.getParameters()));\n        aCtExecutableReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));\n        aCtExecutableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        aCtExecutableReference.setComments(this.cloneHelper.clone(reference.getComments()));\n        this.builder.copy(reference, aCtExecutableReference);\n        this.cloneHelper.tailor(reference, aCtExecutableReference);\n        this.other \u003d aCtExecutableReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtField(final spoon.reflect.declaration.CtField\u003cT\u003e f) {\n        spoon.reflect.declaration.CtField\u003cT\u003e aCtField \u003d f.getFactory().Core().createField();\n        aCtField.setAnnotations(this.cloneHelper.clone(f.getAnnotations()));\n        aCtField.setType(this.cloneHelper.clone(f.getType()));\n        aCtField.setDefaultExpression(this.cloneHelper.clone(f.getDefaultExpression()));\n        aCtField.setComments(this.cloneHelper.clone(f.getComments()));\n        this.builder.copy(f, aCtField);\n        this.cloneHelper.tailor(f, aCtField);\n        this.other \u003d aCtField;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtEnumValue(final spoon.reflect.declaration.CtEnumValue\u003cT\u003e enumValue) {\n        spoon.reflect.declaration.CtEnumValue\u003cT\u003e aCtEnumValue \u003d enumValue.getFactory().Core().createEnumValue();\n        aCtEnumValue.setAnnotations(this.cloneHelper.clone(enumValue.getAnnotations()));\n        aCtEnumValue.setType(this.cloneHelper.clone(enumValue.getType()));\n        aCtEnumValue.setDefaultExpression(this.cloneHelper.clone(enumValue.getDefaultExpression()));\n        aCtEnumValue.setComments(this.cloneHelper.clone(enumValue.getComments()));\n        this.builder.copy(enumValue, aCtEnumValue);\n        this.cloneHelper.tailor(enumValue, aCtEnumValue);\n        this.other \u003d aCtEnumValue;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtThisAccess(final spoon.reflect.code.CtThisAccess\u003cT\u003e thisAccess) {\n        spoon.reflect.code.CtThisAccess\u003cT\u003e aCtThisAccess \u003d thisAccess.getFactory().Core().createThisAccess();\n        aCtThisAccess.setComments(this.cloneHelper.clone(thisAccess.getComments()));\n        aCtThisAccess.setAnnotations(this.cloneHelper.clone(thisAccess.getAnnotations()));\n        aCtThisAccess.setType(this.cloneHelper.clone(thisAccess.getType()));\n        aCtThisAccess.setTypeCasts(this.cloneHelper.clone(thisAccess.getTypeCasts()));\n        aCtThisAccess.setTarget(this.cloneHelper.clone(thisAccess.getTarget()));\n        this.builder.copy(thisAccess, aCtThisAccess);\n        this.cloneHelper.tailor(thisAccess, aCtThisAccess);\n        this.other \u003d aCtThisAccess;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtAnnotationFieldAccess(final spoon.reflect.code.CtAnnotationFieldAccess\u003cT\u003e annotationFieldAccess) {\n        spoon.reflect.code.CtAnnotationFieldAccess\u003cT\u003e aCtAnnotationFieldAccess \u003d annotationFieldAccess.getFactory().Core().createAnnotationFieldAccess();\n        aCtAnnotationFieldAccess.setComments(this.cloneHelper.clone(annotationFieldAccess.getComments()));\n        aCtAnnotationFieldAccess.setAnnotations(this.cloneHelper.clone(annotationFieldAccess.getAnnotations()));\n        aCtAnnotationFieldAccess.setTypeCasts(this.cloneHelper.clone(annotationFieldAccess.getTypeCasts()));\n        aCtAnnotationFieldAccess.setTarget(this.cloneHelper.clone(annotationFieldAccess.getTarget()));\n        aCtAnnotationFieldAccess.setVariable(this.cloneHelper.clone(annotationFieldAccess.getVariable()));\n        this.builder.copy(annotationFieldAccess, aCtAnnotationFieldAccess);\n        this.cloneHelper.tailor(annotationFieldAccess, aCtAnnotationFieldAccess);\n        this.other \u003d aCtAnnotationFieldAccess;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtFieldReference(final spoon.reflect.reference.CtFieldReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtFieldReference\u003cT\u003e aCtFieldReference \u003d reference.getFactory().Core().createFieldReference();\n        aCtFieldReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtFieldReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtFieldReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtFieldReference);\n        this.cloneHelper.tailor(reference, aCtFieldReference);\n        this.other \u003d aCtFieldReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtFor(final spoon.reflect.code.CtFor forLoop) {\n        spoon.reflect.code.CtFor aCtFor \u003d forLoop.getFactory().Core().createFor();\n        aCtFor.setAnnotations(this.cloneHelper.clone(forLoop.getAnnotations()));\n        aCtFor.setForInit(this.cloneHelper.clone(forLoop.getForInit()));\n        aCtFor.setExpression(this.cloneHelper.clone(forLoop.getExpression()));\n        aCtFor.setForUpdate(this.cloneHelper.clone(forLoop.getForUpdate()));\n        aCtFor.setBody(this.cloneHelper.clone(forLoop.getBody()));\n        aCtFor.setComments(this.cloneHelper.clone(forLoop.getComments()));\n        this.builder.copy(forLoop, aCtFor);\n        this.cloneHelper.tailor(forLoop, aCtFor);\n        this.other \u003d aCtFor;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtForEach(final spoon.reflect.code.CtForEach foreach) {\n        spoon.reflect.code.CtForEach aCtForEach \u003d foreach.getFactory().Core().createForEach();\n        aCtForEach.setAnnotations(this.cloneHelper.clone(foreach.getAnnotations()));\n        aCtForEach.setVariable(this.cloneHelper.clone(foreach.getVariable()));\n        aCtForEach.setExpression(this.cloneHelper.clone(foreach.getExpression()));\n        aCtForEach.setBody(this.cloneHelper.clone(foreach.getBody()));\n        aCtForEach.setComments(this.cloneHelper.clone(foreach.getComments()));\n        this.builder.copy(foreach, aCtForEach);\n        this.cloneHelper.tailor(foreach, aCtForEach);\n        this.other \u003d aCtForEach;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtIf(final spoon.reflect.code.CtIf ifElement) {\n        spoon.reflect.code.CtIf aCtIf \u003d ifElement.getFactory().Core().createIf();\n        aCtIf.setAnnotations(this.cloneHelper.clone(ifElement.getAnnotations()));\n        aCtIf.setCondition(this.cloneHelper.clone(ifElement.getCondition()));\n        aCtIf.setThenStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getThenStatement()))));\n        aCtIf.setElseStatement(this.cloneHelper.clone(((spoon.reflect.code.CtStatement) (ifElement.getElseStatement()))));\n        aCtIf.setComments(this.cloneHelper.clone(ifElement.getComments()));\n        this.builder.copy(ifElement, aCtIf);\n        this.cloneHelper.tailor(ifElement, aCtIf);\n        this.other \u003d aCtIf;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtInterface(final spoon.reflect.declaration.CtInterface\u003cT\u003e intrface) {\n        spoon.reflect.declaration.CtInterface\u003cT\u003e aCtInterface \u003d intrface.getFactory().Core().createInterface();\n        aCtInterface.setAnnotations(this.cloneHelper.clone(intrface.getAnnotations()));\n        aCtInterface.setSuperInterfaces(this.cloneHelper.clone(intrface.getSuperInterfaces()));\n        aCtInterface.setFormalCtTypeParameters(this.cloneHelper.clone(intrface.getFormalCtTypeParameters()));\n        aCtInterface.setTypeMembers(this.cloneHelper.clone(intrface.getTypeMembers()));\n        aCtInterface.setComments(this.cloneHelper.clone(intrface.getComments()));\n        this.builder.copy(intrface, aCtInterface);\n        this.cloneHelper.tailor(intrface, aCtInterface);\n        this.other \u003d aCtInterface;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtInvocation(final spoon.reflect.code.CtInvocation\u003cT\u003e invocation) {\n        spoon.reflect.code.CtInvocation\u003cT\u003e aCtInvocation \u003d invocation.getFactory().Core().createInvocation();\n        aCtInvocation.setAnnotations(this.cloneHelper.clone(invocation.getAnnotations()));\n        aCtInvocation.setTypeCasts(this.cloneHelper.clone(invocation.getTypeCasts()));\n        aCtInvocation.setTarget(this.cloneHelper.clone(invocation.getTarget()));\n        aCtInvocation.setExecutable(this.cloneHelper.clone(invocation.getExecutable()));\n        aCtInvocation.setArguments(this.cloneHelper.clone(invocation.getArguments()));\n        aCtInvocation.setComments(this.cloneHelper.clone(invocation.getComments()));\n        this.builder.copy(invocation, aCtInvocation);\n        this.cloneHelper.tailor(invocation, aCtInvocation);\n        this.other \u003d aCtInvocation;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtLiteral(final spoon.reflect.code.CtLiteral\u003cT\u003e literal) {\n        spoon.reflect.code.CtLiteral\u003cT\u003e aCtLiteral \u003d literal.getFactory().Core().createLiteral();\n        aCtLiteral.setAnnotations(this.cloneHelper.clone(literal.getAnnotations()));\n        aCtLiteral.setType(this.cloneHelper.clone(literal.getType()));\n        aCtLiteral.setTypeCasts(this.cloneHelper.clone(literal.getTypeCasts()));\n        aCtLiteral.setComments(this.cloneHelper.clone(literal.getComments()));\n        this.builder.copy(literal, aCtLiteral);\n        this.cloneHelper.tailor(literal, aCtLiteral);\n        this.other \u003d aCtLiteral;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtLocalVariable(final spoon.reflect.code.CtLocalVariable\u003cT\u003e localVariable) {\n        spoon.reflect.code.CtLocalVariable\u003cT\u003e aCtLocalVariable \u003d localVariable.getFactory().Core().createLocalVariable();\n        aCtLocalVariable.setAnnotations(this.cloneHelper.clone(localVariable.getAnnotations()));\n        aCtLocalVariable.setType(this.cloneHelper.clone(localVariable.getType()));\n        aCtLocalVariable.setDefaultExpression(this.cloneHelper.clone(localVariable.getDefaultExpression()));\n        aCtLocalVariable.setComments(this.cloneHelper.clone(localVariable.getComments()));\n        this.builder.copy(localVariable, aCtLocalVariable);\n        this.cloneHelper.tailor(localVariable, aCtLocalVariable);\n        this.other \u003d aCtLocalVariable;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtLocalVariableReference(final spoon.reflect.reference.CtLocalVariableReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtLocalVariableReference\u003cT\u003e aCtLocalVariableReference \u003d reference.getFactory().Core().createLocalVariableReference();\n        aCtLocalVariableReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtLocalVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtLocalVariableReference);\n        this.cloneHelper.tailor(reference, aCtLocalVariableReference);\n        this.other \u003d aCtLocalVariableReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtCatchVariable(final spoon.reflect.code.CtCatchVariable\u003cT\u003e catchVariable) {\n        spoon.reflect.code.CtCatchVariable\u003cT\u003e aCtCatchVariable \u003d catchVariable.getFactory().Core().createCatchVariable();\n        aCtCatchVariable.setComments(this.cloneHelper.clone(catchVariable.getComments()));\n        aCtCatchVariable.setAnnotations(this.cloneHelper.clone(catchVariable.getAnnotations()));\n        aCtCatchVariable.setMultiTypes(this.cloneHelper.clone(catchVariable.getMultiTypes()));\n        this.builder.copy(catchVariable, aCtCatchVariable);\n        this.cloneHelper.tailor(catchVariable, aCtCatchVariable);\n        this.other \u003d aCtCatchVariable;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtCatchVariableReference(final spoon.reflect.reference.CtCatchVariableReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtCatchVariableReference\u003cT\u003e aCtCatchVariableReference \u003d reference.getFactory().Core().createCatchVariableReference();\n        aCtCatchVariableReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtCatchVariableReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtCatchVariableReference);\n        this.cloneHelper.tailor(reference, aCtCatchVariableReference);\n        this.other \u003d aCtCatchVariableReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtMethod(final spoon.reflect.declaration.CtMethod\u003cT\u003e m) {\n        spoon.reflect.declaration.CtMethod\u003cT\u003e aCtMethod \u003d m.getFactory().Core().createMethod();\n        aCtMethod.setAnnotations(this.cloneHelper.clone(m.getAnnotations()));\n        aCtMethod.setFormalCtTypeParameters(this.cloneHelper.clone(m.getFormalCtTypeParameters()));\n        aCtMethod.setType(this.cloneHelper.clone(m.getType()));\n        aCtMethod.setParameters(this.cloneHelper.clone(m.getParameters()));\n        aCtMethod.setThrownTypes(this.cloneHelper.clone(m.getThrownTypes()));\n        aCtMethod.setBody(this.cloneHelper.clone(m.getBody()));\n        aCtMethod.setComments(this.cloneHelper.clone(m.getComments()));\n        this.builder.copy(m, aCtMethod);\n        this.cloneHelper.tailor(m, aCtMethod);\n        this.other \u003d aCtMethod;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtAnnotationMethod(spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e annotationMethod) {\n        spoon.reflect.declaration.CtAnnotationMethod\u003cT\u003e aCtAnnotationMethod \u003d annotationMethod.getFactory().Core().createAnnotationMethod();\n        aCtAnnotationMethod.setAnnotations(this.cloneHelper.clone(annotationMethod.getAnnotations()));\n        aCtAnnotationMethod.setType(this.cloneHelper.clone(annotationMethod.getType()));\n        aCtAnnotationMethod.setDefaultExpression(this.cloneHelper.clone(annotationMethod.getDefaultExpression()));\n        aCtAnnotationMethod.setComments(this.cloneHelper.clone(annotationMethod.getComments()));\n        this.builder.copy(annotationMethod, aCtAnnotationMethod);\n        this.cloneHelper.tailor(annotationMethod, aCtAnnotationMethod);\n        this.other \u003d aCtAnnotationMethod;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtNewArray(final spoon.reflect.code.CtNewArray\u003cT\u003e newArray) {\n        spoon.reflect.code.CtNewArray\u003cT\u003e aCtNewArray \u003d newArray.getFactory().Core().createNewArray();\n        aCtNewArray.setAnnotations(this.cloneHelper.clone(newArray.getAnnotations()));\n        aCtNewArray.setType(this.cloneHelper.clone(newArray.getType()));\n        aCtNewArray.setTypeCasts(this.cloneHelper.clone(newArray.getTypeCasts()));\n        aCtNewArray.setElements(this.cloneHelper.clone(newArray.getElements()));\n        aCtNewArray.setDimensionExpressions(this.cloneHelper.clone(newArray.getDimensionExpressions()));\n        aCtNewArray.setComments(this.cloneHelper.clone(newArray.getComments()));\n        this.builder.copy(newArray, aCtNewArray);\n        this.cloneHelper.tailor(newArray, aCtNewArray);\n        this.other \u003d aCtNewArray;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtConstructorCall(final spoon.reflect.code.CtConstructorCall\u003cT\u003e ctConstructorCall) {\n        spoon.reflect.code.CtConstructorCall\u003cT\u003e aCtConstructorCall \u003d ctConstructorCall.getFactory().Core().createConstructorCall();\n        aCtConstructorCall.setAnnotations(this.cloneHelper.clone(ctConstructorCall.getAnnotations()));\n        aCtConstructorCall.setTypeCasts(this.cloneHelper.clone(ctConstructorCall.getTypeCasts()));\n        aCtConstructorCall.setExecutable(this.cloneHelper.clone(ctConstructorCall.getExecutable()));\n        aCtConstructorCall.setTarget(this.cloneHelper.clone(ctConstructorCall.getTarget()));\n        aCtConstructorCall.setArguments(this.cloneHelper.clone(ctConstructorCall.getArguments()));\n        aCtConstructorCall.setComments(this.cloneHelper.clone(ctConstructorCall.getComments()));\n        this.builder.copy(ctConstructorCall, aCtConstructorCall);\n        this.cloneHelper.tailor(ctConstructorCall, aCtConstructorCall);\n        this.other \u003d aCtConstructorCall;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtNewClass(final spoon.reflect.code.CtNewClass\u003cT\u003e newClass) {\n        spoon.reflect.code.CtNewClass\u003cT\u003e aCtNewClass \u003d newClass.getFactory().Core().createNewClass();\n        aCtNewClass.setAnnotations(this.cloneHelper.clone(newClass.getAnnotations()));\n        aCtNewClass.setTypeCasts(this.cloneHelper.clone(newClass.getTypeCasts()));\n        aCtNewClass.setExecutable(this.cloneHelper.clone(newClass.getExecutable()));\n        aCtNewClass.setTarget(this.cloneHelper.clone(newClass.getTarget()));\n        aCtNewClass.setArguments(this.cloneHelper.clone(newClass.getArguments()));\n        aCtNewClass.setAnonymousClass(this.cloneHelper.clone(newClass.getAnonymousClass()));\n        aCtNewClass.setComments(this.cloneHelper.clone(newClass.getComments()));\n        this.builder.copy(newClass, aCtNewClass);\n        this.cloneHelper.tailor(newClass, aCtNewClass);\n        this.other \u003d aCtNewClass;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtLambda(final spoon.reflect.code.CtLambda\u003cT\u003e lambda) {\n        spoon.reflect.code.CtLambda\u003cT\u003e aCtLambda \u003d lambda.getFactory().Core().createLambda();\n        aCtLambda.setAnnotations(this.cloneHelper.clone(lambda.getAnnotations()));\n        aCtLambda.setType(this.cloneHelper.clone(lambda.getType()));\n        aCtLambda.setTypeCasts(this.cloneHelper.clone(lambda.getTypeCasts()));\n        aCtLambda.setParameters(this.cloneHelper.clone(lambda.getParameters()));\n        aCtLambda.setBody(this.cloneHelper.clone(lambda.getBody()));\n        aCtLambda.setExpression(this.cloneHelper.clone(lambda.getExpression()));\n        aCtLambda.setComments(this.cloneHelper.clone(lambda.getComments()));\n        this.builder.copy(lambda, aCtLambda);\n        this.cloneHelper.tailor(lambda, aCtLambda);\n        this.other \u003d aCtLambda;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT, E extends spoon.reflect.code.CtExpression\u003c?\u003e\u003e void visitCtExecutableReferenceExpression(final spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e expression) {\n        spoon.reflect.code.CtExecutableReferenceExpression\u003cT, E\u003e aCtExecutableReferenceExpression \u003d expression.getFactory().Core().createExecutableReferenceExpression();\n        aCtExecutableReferenceExpression.setComments(this.cloneHelper.clone(expression.getComments()));\n        aCtExecutableReferenceExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));\n        aCtExecutableReferenceExpression.setType(this.cloneHelper.clone(expression.getType()));\n        aCtExecutableReferenceExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));\n        aCtExecutableReferenceExpression.setExecutable(this.cloneHelper.clone(expression.getExecutable()));\n        aCtExecutableReferenceExpression.setTarget(this.cloneHelper.clone(expression.getTarget()));\n        this.builder.copy(expression, aCtExecutableReferenceExpression);\n        this.cloneHelper.tailor(expression, aCtExecutableReferenceExpression);\n        this.other \u003d aCtExecutableReferenceExpression;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT, A extends T\u003e void visitCtOperatorAssignment(final spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e assignment) {\n        spoon.reflect.code.CtOperatorAssignment\u003cT, A\u003e aCtOperatorAssignment \u003d assignment.getFactory().Core().createOperatorAssignment();\n        aCtOperatorAssignment.setAnnotations(this.cloneHelper.clone(assignment.getAnnotations()));\n        aCtOperatorAssignment.setType(this.cloneHelper.clone(assignment.getType()));\n        aCtOperatorAssignment.setTypeCasts(this.cloneHelper.clone(assignment.getTypeCasts()));\n        aCtOperatorAssignment.setAssigned(this.cloneHelper.clone(assignment.getAssigned()));\n        aCtOperatorAssignment.setAssignment(this.cloneHelper.clone(assignment.getAssignment()));\n        aCtOperatorAssignment.setComments(this.cloneHelper.clone(assignment.getComments()));\n        this.builder.copy(assignment, aCtOperatorAssignment);\n        this.cloneHelper.tailor(assignment, aCtOperatorAssignment);\n        this.other \u003d aCtOperatorAssignment;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtPackage(final spoon.reflect.declaration.CtPackage ctPackage) {\n        spoon.reflect.declaration.CtPackage aCtPackage \u003d ctPackage.getFactory().Core().createPackage();\n        aCtPackage.setAnnotations(this.cloneHelper.clone(ctPackage.getAnnotations()));\n        aCtPackage.setPackages(this.cloneHelper.clone(ctPackage.getPackages()));\n        aCtPackage.setTypes(this.cloneHelper.clone(ctPackage.getTypes()));\n        aCtPackage.setComments(this.cloneHelper.clone(ctPackage.getComments()));\n        this.builder.copy(ctPackage, aCtPackage);\n        this.cloneHelper.tailor(ctPackage, aCtPackage);\n        this.other \u003d aCtPackage;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtPackageReference(final spoon.reflect.reference.CtPackageReference reference) {\n        spoon.reflect.reference.CtPackageReference aCtPackageReference \u003d reference.getFactory().Core().createPackageReference();\n        aCtPackageReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtPackageReference);\n        this.cloneHelper.tailor(reference, aCtPackageReference);\n        this.other \u003d aCtPackageReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtParameter(final spoon.reflect.declaration.CtParameter\u003cT\u003e parameter) {\n        spoon.reflect.declaration.CtParameter\u003cT\u003e aCtParameter \u003d parameter.getFactory().Core().createParameter();\n        aCtParameter.setAnnotations(this.cloneHelper.clone(parameter.getAnnotations()));\n        aCtParameter.setType(this.cloneHelper.clone(parameter.getType()));\n        aCtParameter.setComments(this.cloneHelper.clone(parameter.getComments()));\n        this.builder.copy(parameter, aCtParameter);\n        this.cloneHelper.tailor(parameter, aCtParameter);\n        this.other \u003d aCtParameter;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtParameterReference(final spoon.reflect.reference.CtParameterReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtParameterReference\u003cT\u003e aCtParameterReference \u003d reference.getFactory().Core().createParameterReference();\n        aCtParameterReference.setType(this.cloneHelper.clone(reference.getType()));\n        aCtParameterReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        this.builder.copy(reference, aCtParameterReference);\n        this.cloneHelper.tailor(reference, aCtParameterReference);\n        this.other \u003d aCtParameterReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cR\u003e void visitCtReturn(final spoon.reflect.code.CtReturn\u003cR\u003e returnStatement) {\n        spoon.reflect.code.CtReturn\u003cR\u003e aCtReturn \u003d returnStatement.getFactory().Core().createReturn();\n        aCtReturn.setAnnotations(this.cloneHelper.clone(returnStatement.getAnnotations()));\n        aCtReturn.setReturnedExpression(this.cloneHelper.clone(returnStatement.getReturnedExpression()));\n        aCtReturn.setComments(this.cloneHelper.clone(returnStatement.getComments()));\n        this.builder.copy(returnStatement, aCtReturn);\n        this.cloneHelper.tailor(returnStatement, aCtReturn);\n        this.other \u003d aCtReturn;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cR\u003e void visitCtStatementList(final spoon.reflect.code.CtStatementList statements) {\n        spoon.reflect.code.CtStatementList aCtStatementList \u003d statements.getFactory().Core().createStatementList();\n        aCtStatementList.setAnnotations(this.cloneHelper.clone(statements.getAnnotations()));\n        aCtStatementList.setStatements(this.cloneHelper.clone(statements.getStatements()));\n        aCtStatementList.setComments(this.cloneHelper.clone(statements.getComments()));\n        this.builder.copy(statements, aCtStatementList);\n        this.cloneHelper.tailor(statements, aCtStatementList);\n        this.other \u003d aCtStatementList;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cS\u003e void visitCtSwitch(final spoon.reflect.code.CtSwitch\u003cS\u003e switchStatement) {\n        spoon.reflect.code.CtSwitch\u003cS\u003e aCtSwitch \u003d switchStatement.getFactory().Core().createSwitch();\n        aCtSwitch.setAnnotations(this.cloneHelper.clone(switchStatement.getAnnotations()));\n        aCtSwitch.setSelector(this.cloneHelper.clone(switchStatement.getSelector()));\n        aCtSwitch.setCases(this.cloneHelper.clone(switchStatement.getCases()));\n        aCtSwitch.setComments(this.cloneHelper.clone(switchStatement.getComments()));\n        this.builder.copy(switchStatement, aCtSwitch);\n        this.cloneHelper.tailor(switchStatement, aCtSwitch);\n        this.other \u003d aCtSwitch;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtSynchronized(final spoon.reflect.code.CtSynchronized synchro) {\n        spoon.reflect.code.CtSynchronized aCtSynchronized \u003d synchro.getFactory().Core().createSynchronized();\n        aCtSynchronized.setAnnotations(this.cloneHelper.clone(synchro.getAnnotations()));\n        aCtSynchronized.setExpression(this.cloneHelper.clone(synchro.getExpression()));\n        aCtSynchronized.setBlock(this.cloneHelper.clone(synchro.getBlock()));\n        aCtSynchronized.setComments(this.cloneHelper.clone(synchro.getComments()));\n        this.builder.copy(synchro, aCtSynchronized);\n        this.cloneHelper.tailor(synchro, aCtSynchronized);\n        this.other \u003d aCtSynchronized;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtThrow(final spoon.reflect.code.CtThrow throwStatement) {\n        spoon.reflect.code.CtThrow aCtThrow \u003d throwStatement.getFactory().Core().createThrow();\n        aCtThrow.setAnnotations(this.cloneHelper.clone(throwStatement.getAnnotations()));\n        aCtThrow.setThrownExpression(this.cloneHelper.clone(throwStatement.getThrownExpression()));\n        aCtThrow.setComments(this.cloneHelper.clone(throwStatement.getComments()));\n        this.builder.copy(throwStatement, aCtThrow);\n        this.cloneHelper.tailor(throwStatement, aCtThrow);\n        this.other \u003d aCtThrow;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtTry(final spoon.reflect.code.CtTry tryBlock) {\n        spoon.reflect.code.CtTry aCtTry \u003d tryBlock.getFactory().Core().createTry();\n        aCtTry.setAnnotations(this.cloneHelper.clone(tryBlock.getAnnotations()));\n        aCtTry.setBody(this.cloneHelper.clone(tryBlock.getBody()));\n        aCtTry.setCatchers(this.cloneHelper.clone(tryBlock.getCatchers()));\n        aCtTry.setFinalizer(this.cloneHelper.clone(tryBlock.getFinalizer()));\n        aCtTry.setComments(this.cloneHelper.clone(tryBlock.getComments()));\n        this.builder.copy(tryBlock, aCtTry);\n        this.cloneHelper.tailor(tryBlock, aCtTry);\n        this.other \u003d aCtTry;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtTryWithResource(final spoon.reflect.code.CtTryWithResource tryWithResource) {\n        spoon.reflect.code.CtTryWithResource aCtTryWithResource \u003d tryWithResource.getFactory().Core().createTryWithResource();\n        aCtTryWithResource.setAnnotations(this.cloneHelper.clone(tryWithResource.getAnnotations()));\n        aCtTryWithResource.setResources(this.cloneHelper.clone(tryWithResource.getResources()));\n        aCtTryWithResource.setBody(this.cloneHelper.clone(tryWithResource.getBody()));\n        aCtTryWithResource.setCatchers(this.cloneHelper.clone(tryWithResource.getCatchers()));\n        aCtTryWithResource.setFinalizer(this.cloneHelper.clone(tryWithResource.getFinalizer()));\n        aCtTryWithResource.setComments(this.cloneHelper.clone(tryWithResource.getComments()));\n        this.builder.copy(tryWithResource, aCtTryWithResource);\n        this.cloneHelper.tailor(tryWithResource, aCtTryWithResource);\n        this.other \u003d aCtTryWithResource;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtTypeParameterReference(final spoon.reflect.reference.CtTypeParameterReference ref) {\n        spoon.reflect.reference.CtTypeParameterReference aCtTypeParameterReference \u003d ref.getFactory().Core().createTypeParameterReference();\n        aCtTypeParameterReference.setPackage(this.cloneHelper.clone(ref.getPackage()));\n        aCtTypeParameterReference.setDeclaringType(this.cloneHelper.clone(ref.getDeclaringType()));\n        aCtTypeParameterReference.setAnnotations(this.cloneHelper.clone(ref.getAnnotations()));\n        aCtTypeParameterReference.setBoundingType(this.cloneHelper.clone(ref.getBoundingType()));\n        this.builder.copy(ref, aCtTypeParameterReference);\n        this.cloneHelper.tailor(ref, aCtTypeParameterReference);\n        this.other \u003d aCtTypeParameterReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public void visitCtWildcardReference(spoon.reflect.reference.CtWildcardReference wildcardReference) {\n        spoon.reflect.reference.CtWildcardReference aCtWildcardReference \u003d wildcardReference.getFactory().Core().createWildcardReference();\n        aCtWildcardReference.setPackage(this.cloneHelper.clone(wildcardReference.getPackage()));\n        aCtWildcardReference.setDeclaringType(this.cloneHelper.clone(wildcardReference.getDeclaringType()));\n        aCtWildcardReference.setAnnotations(this.cloneHelper.clone(wildcardReference.getAnnotations()));\n        aCtWildcardReference.setBoundingType(this.cloneHelper.clone(wildcardReference.getBoundingType()));\n        this.builder.copy(wildcardReference, aCtWildcardReference);\n        this.cloneHelper.tailor(wildcardReference, aCtWildcardReference);\n        this.other \u003d aCtWildcardReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtIntersectionTypeReference(final spoon.reflect.reference.CtIntersectionTypeReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtIntersectionTypeReference\u003cT\u003e aCtIntersectionTypeReference \u003d reference.getFactory().Core().createIntersectionTypeReference();\n        aCtIntersectionTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));\n        aCtIntersectionTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtIntersectionTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));\n        aCtIntersectionTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        aCtIntersectionTypeReference.setBounds(this.cloneHelper.clone(reference.getBounds()));\n        this.builder.copy(reference, aCtIntersectionTypeReference);\n        this.cloneHelper.tailor(reference, aCtIntersectionTypeReference);\n        this.other \u003d aCtIntersectionTypeReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtTypeReference(final spoon.reflect.reference.CtTypeReference\u003cT\u003e reference) {\n        spoon.reflect.reference.CtTypeReference\u003cT\u003e aCtTypeReference \u003d reference.getFactory().Core().createTypeReference();\n        aCtTypeReference.setPackage(this.cloneHelper.clone(reference.getPackage()));\n        aCtTypeReference.setDeclaringType(this.cloneHelper.clone(reference.getDeclaringType()));\n        aCtTypeReference.setActualTypeArguments(this.cloneHelper.clone(reference.getActualTypeArguments()));\n        aCtTypeReference.setAnnotations(this.cloneHelper.clone(reference.getAnnotations()));\n        aCtTypeReference.setComments(this.cloneHelper.clone(reference.getComments()));\n        this.builder.copy(reference, aCtTypeReference);\n        this.cloneHelper.tailor(reference, aCtTypeReference);\n        this.other \u003d aCtTypeReference;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtTypeAccess(final spoon.reflect.code.CtTypeAccess\u003cT\u003e typeAccess) {\n        spoon.reflect.code.CtTypeAccess\u003cT\u003e aCtTypeAccess \u003d typeAccess.getFactory().Core().createTypeAccess();\n        aCtTypeAccess.setAnnotations(this.cloneHelper.clone(typeAccess.getAnnotations()));\n        aCtTypeAccess.setTypeCasts(this.cloneHelper.clone(typeAccess.getTypeCasts()));\n        aCtTypeAccess.setAccessedType(this.cloneHelper.clone(typeAccess.getAccessedType()));\n        aCtTypeAccess.setComments(this.cloneHelper.clone(typeAccess.getComments()));\n        this.builder.copy(typeAccess, aCtTypeAccess);\n        this.cloneHelper.tailor(typeAccess, aCtTypeAccess);\n        this.other \u003d aCtTypeAccess;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtUnaryOperator(final spoon.reflect.code.CtUnaryOperator\u003cT\u003e operator) {\n        spoon.reflect.code.CtUnaryOperator\u003cT\u003e aCtUnaryOperator \u003d operator.getFactory().Core().createUnaryOperator();\n        aCtUnaryOperator.setAnnotations(this.cloneHelper.clone(operator.getAnnotations()));\n        aCtUnaryOperator.setType(this.cloneHelper.clone(operator.getType()));\n        aCtUnaryOperator.setTypeCasts(this.cloneHelper.clone(operator.getTypeCasts()));\n        aCtUnaryOperator.setOperand(this.cloneHelper.clone(operator.getOperand()));\n        aCtUnaryOperator.setComments(this.cloneHelper.clone(operator.getComments()));\n        this.builder.copy(operator, aCtUnaryOperator);\n        this.cloneHelper.tailor(operator, aCtUnaryOperator);\n        this.other \u003d aCtUnaryOperator;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtVariableRead(final spoon.reflect.code.CtVariableRead\u003cT\u003e variableRead) {\n        spoon.reflect.code.CtVariableRead\u003cT\u003e aCtVariableRead \u003d variableRead.getFactory().Core().createVariableRead();\n        aCtVariableRead.setAnnotations(this.cloneHelper.clone(variableRead.getAnnotations()));\n        aCtVariableRead.setTypeCasts(this.cloneHelper.clone(variableRead.getTypeCasts()));\n        aCtVariableRead.setVariable(this.cloneHelper.clone(variableRead.getVariable()));\n        aCtVariableRead.setComments(this.cloneHelper.clone(variableRead.getComments()));\n        this.builder.copy(variableRead, aCtVariableRead);\n        this.cloneHelper.tailor(variableRead, aCtVariableRead);\n        this.other \u003d aCtVariableRead;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    @java.lang.Override\n    public \u003cT\u003e void visitCtVariableWrite(final spoon.reflect.code.CtVariableWrite\u003cT\u003e variableWrite) {\n        spoon.reflect.code.CtVariableWrite\u003cT\u003e aCtVariableWrite \u003d variableWrite.getFactory().Core().createVariableWrite();\n        aCtVariableWrite.setAnnotations(this.cloneHelper.clone(variableWrite.getAnnotations()));\n        aCtVariableWrite.setTypeCasts(this.cloneHelper.clone(variableWrite.getTypeCasts()));\n        aCtVariableWrite.setVariable(this.cloneHelper.clone(variableWrite.getVariable()));\n        aCtVariableWrite.setComments(this.cloneHelper.clone(variableWrite.getComments()));\n        this.builder.copy(variableWrite, aCtVariableWrite);\n        this.cloneHelper.tailor(variableWrite, aCtVariableWrite);\n        this.other \u003d aCtVariableWrite;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtWhile(final spoon.reflect.code.CtWhile whileLoop) {\n        spoon.reflect.code.CtWhile aCtWhile \u003d whileLoop.getFactory().Core().createWhile();\n        aCtWhile.setAnnotations(this.cloneHelper.clone(whileLoop.getAnnotations()));\n        aCtWhile.setLoopingExpression(this.cloneHelper.clone(whileLoop.getLoopingExpression()));\n        aCtWhile.setBody(this.cloneHelper.clone(whileLoop.getBody()));\n        aCtWhile.setComments(this.cloneHelper.clone(whileLoop.getComments()));\n        this.builder.copy(whileLoop, aCtWhile);\n        this.cloneHelper.tailor(whileLoop, aCtWhile);\n        this.other \u003d aCtWhile;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public \u003cT\u003e void visitCtCodeSnippetExpression(final spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e expression) {\n        spoon.reflect.code.CtCodeSnippetExpression\u003cT\u003e aCtCodeSnippetExpression \u003d expression.getFactory().Core().createCodeSnippetExpression();\n        aCtCodeSnippetExpression.setType(this.cloneHelper.clone(expression.getType()));\n        aCtCodeSnippetExpression.setComments(this.cloneHelper.clone(expression.getComments()));\n        aCtCodeSnippetExpression.setAnnotations(this.cloneHelper.clone(expression.getAnnotations()));\n        aCtCodeSnippetExpression.setTypeCasts(this.cloneHelper.clone(expression.getTypeCasts()));\n        this.builder.copy(expression, aCtCodeSnippetExpression);\n        this.cloneHelper.tailor(expression, aCtCodeSnippetExpression);\n        this.other \u003d aCtCodeSnippetExpression;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator\n    public void visitCtCodeSnippetStatement(final spoon.reflect.code.CtCodeSnippetStatement statement) {\n        spoon.reflect.code.CtCodeSnippetStatement aCtCodeSnippetStatement \u003d statement.getFactory().Core().createCodeSnippetStatement();\n        aCtCodeSnippetStatement.setComments(this.cloneHelper.clone(statement.getComments()));\n        aCtCodeSnippetStatement.setAnnotations(this.cloneHelper.clone(statement.getAnnotations()));\n        this.builder.copy(statement, aCtCodeSnippetStatement);\n        this.cloneHelper.tailor(statement, aCtCodeSnippetStatement);\n        this.other \u003d aCtCodeSnippetStatement;\n    }\n\n    // auto-generated, see spoon.generating.CloneVisitorGenerator]\n    public \u003cT\u003e void...\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "spoonMavenLauncherTest",
        "failureName": "java.lang.AssertionError",
        "detail": "expected:\u003c23\u003e but was:\u003c0\u003e",
        "isError": false
      },
      {
        "testClass": "spoon.MavenLauncherTest",
        "testMethod": "mavenLauncherTestMultiModulesAndVariables",
        "failureName": "java.lang.AssertionError",
        "detail": "Content of classpath: ",
        "isError": false
      }
    ]
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Aug 2, 2018 11:57:57 PM",
    "reproductionDateEnd": "Aug 3, 2018 12:17:00 AM",
    "totalDuration": 1139,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 19,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          19
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 110,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          4,
          106
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 877,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          877
        ]
      }
    },
    "projectRootPomPath": "./workspace/INRIA/spoon/411469860/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "type": "only_fail"
}