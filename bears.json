{
  "repository": {
    "name": "julianhyde/calcite",
    "githubId": 22561571,
    "url": "https://github.com/julianhyde/calcite",
    "isFork": true,
    "original": {
      "name": "apache/calcite",
      "githubId": 21193524,
      "url": "https://github.com/apache/calcite"
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "builds": {
    "buggyBuild": {
      "id": 417957953,
      "url": "http://travis-ci.org/julianhyde/calcite/builds/417957953",
      "date": "Aug 19, 2018 9:10:45 PM"
    }
  },
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Aug 19, 2018 9:11:01 PM",
    "reproductionDateEnd": "Aug 19, 2018 9:51:34 PM",
    "totalDuration": 2429,
    "processDurations": {
      "cloning": {
        "nbSteps": 1,
        "totalDuration": 32,
        "stepNames": [
          "CloneRepository"
        ],
        "stepDurations": [
          32
        ]
      },
      "building": {
        "nbSteps": 2,
        "totalDuration": 227,
        "stepNames": [
          "CheckoutBuggyBuild",
          "BuildProject"
        ],
        "stepDurations": [
          0,
          227
        ]
      },
      "testing": {
        "nbSteps": 1,
        "totalDuration": 815,
        "stepNames": [
          "TestProject"
        ],
        "stepDurations": [
          815
        ]
      }
    },
    "projectRootPomPath": "./workspace/julianhyde/calcite/417957953/pom.xml"
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "commits": {
    "buggyBuild": {
      "repoName": "julianhyde/calcite",
      "branchName": "2470-relBuilder-merge-project",
      "sha": "b8c1500ab501eb395408ee098cec5ee23074e234",
      "url": "http://github.com/julianhyde/calcite/commit/b8c1500ab501eb395408ee098cec5ee23074e234",
      "date": "Aug 17, 2018 9:36:15 AM"
    }
  },
  "projectMetrics": {
    "numberModules": 19,
    "numberSourceFiles": 1509,
    "numberTestFiles": 214,
    "numberLibrariesFailingModule": 46
  },
  "tests": {
    "failingModule": "/root/workspace/julianhyde/calcite/417957953/core",
    "overallMetrics": {
      "numberRunning": 4665,
      "numberPassing": 4655,
      "numberFailing": 8,
      "numberErroring": 2,
      "numberSkipping": 111,
      "failures": [
        {
          "failureName": "java.lang.reflect.InvocationTargetException",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.RuntimeException",
          "isError": true,
          "occurrences": 1
        },
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 8
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "numberRunning": 16,
        "numberPassing": 12,
        "numberFailing": 3,
        "numberErroring": 1,
        "numberSkipping": 0
      },
      {
        "testClass": "org.apache.calcite.test.StreamTest",
        "numberRunning": 7,
        "numberPassing": 6,
        "numberFailing": 0,
        "numberErroring": 1,
        "numberSkipping": 2
      },
      {
        "testClass": "org.apache.calcite.test.SqlToRelConverterTest",
        "numberRunning": 334,
        "numberPassing": 333,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 4
      },
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "numberRunning": 113,
        "numberPassing": 112,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 17
      },
      {
        "testClass": "org.apache.calcite.test.SqlToRelConverterExtendedTest",
        "numberRunning": 334,
        "numberPassing": 333,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 4
      },
      {
        "testClass": "org.apache.calcite.test.JdbcFrontLinqBackTest",
        "numberRunning": 18,
        "numberPassing": 17,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 1
      },
      {
        "testClass": "org.apache.calcite.tools.PlannerTest",
        "numberRunning": 38,
        "numberPassing": 37,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 1
      }
    ],
    "failureDetails": [
      {
        "testClass": "org.apache.calcite.test.MaterializationTest",
        "testMethod": "testJoinMaterialization7",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..2\u003d[{inputs}], empid0\u003d[$t1])\\n  EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0\u003d[{inputs}], expr#1\u003d[CAST($t0):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name\u003d[$t1])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], empid\u003d[$t0], name0\u003d[$t2])\\n      EnumerableTableScan(table\u003d[[hr, dependents]])\"\n     but: was \"PLAN\u003dEnumerableCalc(expr#0..2\u003d[{inputs}], empid\u003d[$t1])\\n  EnumerableJoin(condition\u003d[\u003d($0, $2)], joinType\u003d[inner])\\n    EnumerableCalc(expr#0\u003d[{inputs}], expr#1\u003d[CAST($t0):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], name\u003d[$t1])\\n      EnumerableTableScan(table\u003d[[hr, m0]])\\n    EnumerableCalc(expr#0..1\u003d[{inputs}], expr#2\u003d[CAST($t1):VARCHAR CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\"], empid\u003d[$t0], name0\u003d[$t2])\\n      EnumerableTableScan(table\u003d[[hr, dependents]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.StreamTest",
        "testMethod": "testStreamToRelationJoin",
        "failureName": "java.lang.RuntimeException",
        "detail": "exception while preparing [select stream orders.rowtime as rowtime, orders.id as orderId, products.supplier as supplierId from orders join products on orders.product \u003d products.id]",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.test.JdbcFrontLinqBackTest",
        "testMethod": "testOrderBy",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: a string containing \"EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[UPPER($t2)], UN\u003d[$t5], deptno\u003d[$t1], name\u003d[$t2])\\n  EnumerableSort(sort0\u003d[$1], sort1\u003d[$2], dir0\u003d[ASC], dir1\u003d[DESC])\\n    EnumerableTableScan(table\u003d[[hr, emps]])\"\n     but: was \"PLAN\u003dEnumerableSort(sort0\u003d[$1], sort1\u003d[$2], dir0\u003d[ASC], dir1\u003d[DESC])\\n  EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[UPPER($t2)], UN\u003d[$t5], deptno\u003d[$t1], name\u003d[$t2])\\n    EnumerableTableScan(table\u003d[[hr, emps]])\\n\\n\"",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[9: quidem(sql/winagg.iq)]",
        "failureName": "java.lang.AssertionError",
        "detail": "Files differ: /root/workspace/julianhyde/calcite/417957953/core/target/surefire/sql/winagg.iq /root/workspace/julianhyde/calcite/417957953/core/target/test-classes/sql/winagg.iq\n424,425d423\n\u003c |     10 | 110 | 110 |\n\u003c |     10 | 110 | 110 |\n427c425,427\n\u003c |     20 | 200 |     |\n---\n\u003e |     10 | 100 | 110 |\n\u003e |     10 | 150 | 110 |\n\u003e |     20 |     | 200 |\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlToRelConverterTest",
        "testMethod": "testInsertBindExtendedColumnModifiableView",
        "failureName": "java.lang.AssertionError",
        "detail": "type mismatch:\nref:\nINTEGER\ninput:\nINTEGER NOT NULL",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.SqlToRelConverterExtendedTest",
        "testMethod": "testInsertBindExtendedColumnModifiableView",
        "failureName": "java.lang.AssertionError",
        "detail": "type mismatch:\nref:\nINTEGER\ninput:\nINTEGER NOT NULL",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[2: quidem(sql/misc.iq)]",
        "failureName": "java.lang.reflect.InvocationTargetException",
        "isError": true
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[5: quidem(sql/sub-query.iq)]",
        "failureName": "java.lang.AssertionError",
        "detail": "Files differ: /root/workspace/julianhyde/calcite/417957953/core/target/surefire/sql/sub-query.iq /root/workspace/julianhyde/calcite/417957953/core/target/test-classes/sql/sub-query.iq\n35c35\n\u003c EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[0], expr#6\u003d[\u003d($t1, $t5)], expr#7\u003d[false], expr#8\u003d[IS NULL($t0)], expr#9\u003d[null], expr#10\u003d[IS NOT NULL($t4)], expr#11\u003d[true], expr#12\u003d[\u003c($t2, $t1)], expr#13\u003d[CASE($t6, $t7, $t8, $t9, $t10, $t11, $t12, $t11, $t7)], expr#14\u003d[NOT($t13)], EXPR$0\u003d[$t0], $condition\u003d[$t14])\n---\n\u003e EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[0], expr#6\u003d[\u003d($t1, $t5)], expr#7\u003d[false], expr#8\u003d[IS NULL($t0)], expr#9\u003d[null], expr#10\u003d[IS NOT NULL($t4)], expr#11\u003d[true], expr#12\u003d[\u003c($t2, $t1)], expr#13\u003d[CASE($t6, $t7, $t8, $t9, $t10, $t11, $t12, $t11, $t7)], expr#14\u003d[NOT($t13)], X\u003d[$t0], $condition\u003d[$t14])\n466c466\n\u003c EnumerableCalc(expr#0..2\u003d[{inputs}], EXPR$0\u003d[$t1], EXPR$1\u003d[$t2])\n---\n\u003e EnumerableCalc(expr#0..2\u003d[{inputs}], A\u003d[$t1], B\u003d[$t2])\n797c797\n\u003c           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[null], expr#5\u003d[\u003d($t4, $t4)], expr#6\u003d[IS NULL($t4)], expr#7\u003d[OR($t5, $t6)], cs\u003d[$t3], $condition\u003d[$t7])\n---\n\u003e           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[null], expr#5\u003d[IS NULL($t4)], cs\u003d[$t3], $condition\u003d[$t5])\n1047c1047\n\u003c           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[null], expr#5\u003d[\u003d($t4, $t4)], expr#6\u003d[IS NULL($t4)], expr#7\u003d[OR($t5, $t6)], cs\u003d[$t3], $condition\u003d[$t7])\n---\n\u003e           EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[null], expr#5\u003d[IS NULL($t4)], cs\u003d[$t3], $condition\u003d[$t5])\n1777,1778c1777,1778\n\u003c EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[false], expr#6\u003d[\u003d($t3, $t5)], expr#7\u003d[true], expr#8\u003d[null], expr#9\u003d[IS NULL($t8)], expr#10\u003d[null], expr#11\u003d[IS NOT NULL($t3)], expr#12\u003d[CASE($t6, $t7, $t9, $t10, $t11, $t7, $t5)], expr#13\u003d[NOT($t12)], SAL\u003d[$t1], $condition\u003d[$t13])\n\u003c   EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[left])\n---\n\u003e EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[false], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[true], expr#8\u003d[null], expr#9\u003d[IS NULL($t8)], expr#10\u003d[null], expr#11\u003d[IS NOT NULL($t4)], expr#12\u003d[CASE($t6, $t7, $t9, $t10, $t11, $t7, $t5)], expr#13\u003d[NOT($t12)], SAL\u003d[$t1], $condition\u003d[$t13])\n\u003e   EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[left])\n1781c1781\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[null], expr#5\u003d[IS NULL($t4)], cs\u003d[$t3], DEPTNO\u003d[$t0], $condition\u003d[$t5])\n---\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[null], expr#5\u003d[IS NULL($t4)], DEPTNO\u003d[$t0], $f1\u003d[$t3], $condition\u003d[$t5])\n1795,1796c1795,1796\n\u003c EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[false], expr#6\u003d[\u003d($t3, $t5)], expr#7\u003d[true], expr#8\u003d[IS NOT NULL($t3)], expr#9\u003d[CASE($t6, $t7, $t8, $t7, $t5)], expr#10\u003d[NOT($t9)], SAL\u003d[$t1], $condition\u003d[$t10])\n\u003c   EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[left])\n---\n\u003e EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[false], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[true], expr#8\u003d[IS NOT NULL($t4)], expr#9\u003d[CASE($t6, $t7, $t8, $t7, $t5)], expr#10\u003d[NOT($t9)], SAL\u003d[$t1], $condition\u003d[$t10])\n\u003e   EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[left])\n1799c1799\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[123], expr#5\u003d[null], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t3], DEPTNO\u003d[$t0], $condition\u003d[$t8])\n---\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[false], expr#4\u003d[123], expr#5\u003d[null], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[OR($t6, $t7)], DEPTNO\u003d[$t0], $f1\u003d[$t3], $condition\u003d[$t8])\n1849,1850c1849,1850\n\u003c EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[false], expr#6\u003d[\u003d($t3, $t5)], expr#7\u003d[true], expr#8\u003d[null], expr#9\u003d[IS NULL($t8)], expr#10\u003d[null], expr#11\u003d[IS NOT NULL($t3)], expr#12\u003d[CASE($t6, $t7, $t9, $t10, $t11, $t7, $t5)], expr#13\u003d[NOT($t12)], SAL\u003d[$t1], $condition\u003d[$t13])\n\u003c   EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[left])\n---\n\u003e EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[false], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[true], expr#8\u003d[null], expr#9\u003d[IS NULL($t8)], expr#10\u003d[null], expr#11\u003d[IS NOT NULL($t4)], expr#12\u003d[CASE($t6, $t7, $t9, $t10, $t11, $t7, $t5)], expr#13\u003d[NOT($t12)], SAL\u003d[$t1], $condition\u003d[$t13])\n\u003e   EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[left])\n1853c1853\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[true], expr#4\u003d[null], expr#5\u003d[CAST($t0):TINYINT], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[IS NULL($t4)], expr#9\u003d[OR($t6, $t7, $t8)], cs\u003d[$t3], DEPTNO\u003d[$t0], $condition\u003d[$t9])\n---\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[true], expr#4\u003d[null], expr#5\u003d[CAST($t0):TINYINT], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[IS NULL($t4)], expr#9\u003d[OR($t6, $t7, $t8)], DEPTNO\u003d[$t0], $f1\u003d[$t3], $condition\u003d[$t9])\n1907,1908c1907,1908\n\u003c EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[false], expr#6\u003d[\u003d($t3, $t5)], expr#7\u003d[true], expr#8\u003d[IS NOT NULL($t3)], expr#9\u003d[CASE($t6, $t7, $t8, $t7, $t5)], expr#10\u003d[NOT($t9)], SAL\u003d[$t1], $condition\u003d[$t10])\n\u003c   EnumerableJoin(condition\u003d[\u003d($2, $4)], joinType\u003d[left])\n---\n\u003e EnumerableCalc(expr#0..4\u003d[{inputs}], expr#5\u003d[false], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[true], expr#8\u003d[IS NOT NULL($t4)], expr#9\u003d[CASE($t6, $t7, $t8, $t7, $t5)], expr#10\u003d[NOT($t9)], SAL\u003d[$t1], $condition\u003d[$t10])\n\u003e   EnumerableJoin(condition\u003d[\u003d($2, $3)], joinType\u003d[left])\n1911c1911\n\u003c     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[true], expr#4\u003d[10], expr#5\u003d[CAST($t0):TINYINT], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[OR($t6, $t7)], cs\u003d[$t3], DEPTNO\u003d[$t0], $condition\u003d[$t8])\n---\n\u003e     EnumerableCalc(expr#0..2\u003d[{inputs}], expr#3\u003d[true], expr#4\u003d[10], expr#5\u003d[CAST($t0):TINYINT], expr#6\u003d[\u003d($t4, $t5)], expr#7\u003d[IS NULL($t5)], expr#8\u003d[OR($t6, $t7)], DEPTNO\u003d[$t0], $f1\u003d[$t3], $condition\u003d[$t8])\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.test.CoreQuidemTest",
        "testMethod": "test[6: quidem(sql/agg.iq)]",
        "failureName": "java.lang.AssertionError",
        "detail": "Files differ: /root/workspace/julianhyde/calcite/417957953/core/target/surefire/sql/agg.iq /root/workspace/julianhyde/calcite/417957953/core/target/test-classes/sql/agg.iq\n2237,2239c2237,2239\n\u003c EnumerableAggregate(group\u003d[{1}], EXPR$1\u003d[COUNT($2, $0) FILTER $5], EXPR$2\u003d[MIN($3) FILTER $6], EXPR$3\u003d[MIN($4) FILTER $6])\n\u003c   EnumerableCalc(expr#0..5\u003d[{inputs}], expr#6\u003d[0], expr#7\u003d[\u003d($t5, $t6)], expr#8\u003d[5], expr#9\u003d[\u003d($t5, $t8)], proj#0..4\u003d[{exprs}], $g_0\u003d[$t7], $g_5\u003d[$t9])\n\u003c     EnumerableAggregate(group\u003d[{2, 3, 7}], groups\u003d[[{2, 3, 7}, {3}]], EXPR$2\u003d[MIN($5)], EXPR$3\u003d[MAX($5)], $g\u003d[GROUPING($2, $3, $7)])\n---\n\u003e EnumerableAggregate(group\u003d[{0}], EXPR$1\u003d[COUNT($1, $2) FILTER $5], EXPR$2\u003d[MIN($3) FILTER $6], EXPR$3\u003d[MIN($4) FILTER $6])\n\u003e   EnumerableCalc(expr#0..5\u003d[{inputs}], expr#6\u003d[0], expr#7\u003d[\u003d($t5, $t6)], expr#8\u003d[3], expr#9\u003d[\u003d($t5, $t8)], MGR\u003d[$t1], DEPTNO\u003d[$t2], JOB\u003d[$t0], EXPR$2\u003d[$t3], EXPR$3\u003d[$t4], $g_0\u003d[$t7], $g_3\u003d[$t9])\n\u003e     EnumerableAggregate(group\u003d[{2, 3, 7}], groups\u003d[[{2, 3, 7}, {3}]], EXPR$2\u003d[MIN($5)], EXPR$3\u003d[MAX($5)], $g\u003d[GROUPING($3, $7, $2)])\n",
        "isError": false
      },
      {
        "testClass": "org.apache.calcite.tools.PlannerTest",
        "testMethod": "testOrderByNonSelectColumn",
        "failureName": "java.lang.AssertionError",
        "detail": "\nExpected: \"LogicalSort(sort0\u003d[$0], dir0\u003d[ASC])\\n  LogicalProject(psPartkey\u003d[$0])\\n    LogicalProject(psPartkey\u003d[$0])\\n      LogicalSort(sort0\u003d[$0], sort1\u003d[$1], dir0\u003d[ASC], dir1\u003d[ASC])\\n        LogicalProject(psPartkey\u003d[$0], psSupplyCost\u003d[$1])\\n          EnumerableTableScan(table\u003d[[tpch, partsupp]])\\n\"\n     but: was \"LogicalSort(sort0\u003d[$0], dir0\u003d[ASC])\\n  LogicalProject(psPartkey\u003d[$0])\\n    LogicalSort(sort0\u003d[$0], sort1\u003d[$1], dir0\u003d[ASC], dir1\u003d[ASC])\\n      LogicalProject(psPartkey\u003d[$0], psSupplyCost\u003d[$1])\\n        EnumerableTableScan(table\u003d[[tpch, partsupp]])\\n\"",
        "isError": false
      }
    ]
  },
  "type": "only_fail"
}